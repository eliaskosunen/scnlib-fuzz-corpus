_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  865|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  865|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.75M|{
 4068|  2.75M|    if constexpr (sizeof(U) == 1) {
 4069|  2.75M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.75M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.75M|{
 4032|  2.75M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.75M|    SCN_GCC_COMPAT_PUSH
 4035|  2.75M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.75M|    constexpr char lengths[] =
 4037|  2.75M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.75M|        "\1\1\1\1\1\1\1\1"
 4039|  2.75M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.75M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.75M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.75M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.75M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.75M|    SCN_GCC_COMPAT_POP
 4046|  2.75M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.53M|{
 4274|  2.53M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.53M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.53M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.53M|{
 4087|  2.53M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.53M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.53M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.53M|    };
 4092|       |
 4093|  2.53M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.21M, False: 325k]
  ------------------
 4094|  2.21M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 84, False: 2.21M]
  ------------------
 4095|     84|            SCN_UNLIKELY_ATTR
 4096|     84|            return invalid_code_point;
 4097|     84|        }
 4098|  2.21M|        return static_cast<char32_t>(input[0]);
 4099|  2.21M|    }
 4100|       |
 4101|   325k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 290k, False: 35.4k]
  ------------------
 4102|   290k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 18, False: 290k]
  ------------------
 4103|     18|            SCN_UNLIKELY_ATTR
 4104|     18|            return invalid_code_point;
 4105|     18|        }
 4106|   290k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 3.82k, False: 286k]
  ------------------
 4107|  3.82k|            SCN_UNLIKELY_ATTR
 4108|  3.82k|            return invalid_code_point;
 4109|  3.82k|        }
 4110|       |
 4111|   286k|        char32_t cp{};
 4112|   286k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   286k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   286k|        return cp;
 4115|   290k|    }
 4116|       |
 4117|  35.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 29.9k, False: 5.52k]
  ------------------
 4118|  29.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 18, False: 29.9k]
  ------------------
 4119|     18|            SCN_UNLIKELY_ATTR
 4120|     18|            return invalid_code_point;
 4121|     18|        }
 4122|  29.9k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 2.85k, False: 27.1k]
  ------------------
 4123|  29.9k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 167, False: 26.9k]
  ------------------
 4124|  3.02k|            SCN_UNLIKELY_ATTR
 4125|  3.02k|            return invalid_code_point;
 4126|  3.02k|        }
 4127|       |
 4128|  26.9k|        char32_t cp{};
 4129|  26.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  26.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  26.9k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  26.9k|        return cp;
 4133|  29.9k|    }
 4134|       |
 4135|  5.52k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 5.52k, False: 0]
  ------------------
 4136|  5.52k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 5.52k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  5.52k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 462, False: 5.06k]
  ------------------
 4141|    462|            SCN_UNLIKELY_ATTR
 4142|    462|            return invalid_code_point;
 4143|    462|        }
 4144|  5.06k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 1.04k, False: 4.02k]
  ------------------
 4145|  5.06k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 552, False: 3.46k]
  ------------------
 4146|  5.06k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 448, False: 3.02k]
  ------------------
 4147|  2.04k|            SCN_UNLIKELY_ATTR
 4148|  2.04k|            return invalid_code_point;
 4149|  2.04k|        }
 4150|       |
 4151|  3.02k|        char32_t cp{};
 4152|  3.02k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  3.02k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  3.02k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  3.02k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  3.02k|        return cp;
 4157|  5.06k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   359k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   359k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   359k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  1.01M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  1.01M|    else {
 3966|  1.01M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  1.01M|                                       to_address(first), to_address(last)))};
 3968|  1.01M|    }
 3969|  1.01M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  3.08M|{
  316|  3.08M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  3.08M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  3.29M|{
  294|  3.29M|    return p;
  295|  3.29M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   618k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   618k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   618k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   618k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   618k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   618k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.70k|        : m_value(T{}), m_has_value(true)
  427|  8.70k|    {
  428|  8.70k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  78.3k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  78.3k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6344|  8.70k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.49k, False: 212]
  |  |  ------------------
  ------------------
 9623|  8.49k|        out = unexpected(in.error());
 9624|  8.49k|    }
 9625|    212|    else {
 9626|    212|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    212|    static_cast<    \
  |  |  935|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    212|    }
 9628|  8.70k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  78.3k|    {
 1740|  78.3k|        return has_value();
 1741|  78.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   156k|    {
  490|   156k|        return m_has_value;
  491|   156k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  75.4k|    {
 1746|  75.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  75.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  75.4k|        return this->get_unexpected().error();
 1748|  75.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  75.4k|    {
  473|  75.4k|        return m_unexpected;
  474|  75.4k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  2.39M|    {
  365|  2.39M|        return m_unexpected;
  366|  2.39M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.12M|        : m_unexpected(std::forward<Err>(e))
  350|  1.12M|    {
  351|  1.12M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.12M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.12M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.49k|        : base(unexpect, std::move(e.error())),
 1616|  8.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.49k|    {
 1618|  8.49k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.49k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.49k|          m_has_value(false)
  451|  8.49k|    {
  452|  8.49k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.41M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.41M|    {
  360|  1.41M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.41M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.41M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.49k|    {
 1316|  8.49k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.49k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.49k|    {
  903|  8.49k|        assign_common(std::move(other));
  904|  8.49k|        return *this;
  905|  8.49k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.49k|    {
  950|  8.49k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.49k, False: 0]
  ------------------
  951|  8.49k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.49k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.49k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.49k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  25.9k|    {
  490|  25.9k|        return m_has_value;
  491|  25.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.92k|    {
  456|  8.92k|        return m_value;
  457|  8.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.49k|    {
 1046|  8.49k|        this->destroy_value();
 1047|  8.49k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.49k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.49k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.49k|    {
  504|  8.49k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.49k|                                  std::forward<Args>(args)...);
  506|  8.49k|        m_has_value = false;
  507|  8.49k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   230k|{
  396|   230k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   230k|        T(std::forward<Args>(args)...);
  398|   230k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.49k|    {
  473|  8.49k|        return m_unexpected;
  474|  8.49k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.49k|    {
  481|  8.49k|        return std::move(m_unexpected);
  482|  8.49k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|  2.88k|    {
 6445|  2.88k|        m_range = std::forward<Other>(r);
 6446|  2.88k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  2.88k|    {
 1795|  2.88k|        return value();
 1796|  2.88k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  2.88k|    {
 1769|  2.88k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.88k|        return this->get_value();
 1771|  2.88k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.88k|    {
  456|  2.88k|        return m_value;
  457|  2.88k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9460|  39.1k|{
 9461|  39.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  39.1k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  39.1k|{
 9398|  39.1k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  39.1k|    auto result = vscan_impl(buffer, format, args);
 9401|  39.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 37.7k, False: 1.44k]
  |  |  ------------------
  ------------------
 9402|  37.7k|        return unexpected(result.error());
 9403|  37.7k|    }
 9404|  1.44k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  39.1k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5380|  78.3k|{
 5381|  78.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  78.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  78.3k|                  "\n"
 5385|  78.3k|                  "Unsupported range type given as input to a scanning "
 5386|  78.3k|                  "function.\n"
 5387|  78.3k|                  "A range needs to have a character type (value type) "
 5388|  78.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  78.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  78.3k|                  "to be included.\n"
 5391|  78.3k|                  "See the scnlib documentation for more details.");
 5392|  78.3k|    static_assert(
 5393|  78.3k|        !std::is_same_v<T, custom_char_traits>,
 5394|  78.3k|        "\n"
 5395|  78.3k|        "Unsupported range type given as input to a scanning "
 5396|  78.3k|        "function.\n"
 5397|  78.3k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  78.3k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  78.3k|        "not supported.");
 5400|  78.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  78.3k|                  "\n"
 5402|  78.3k|                  "Unsupported range type given as input to a scanning "
 5403|  78.3k|                  "function.\n"
 5404|  78.3k|                  "file_marker_found cannot be used as an "
 5405|  78.3k|                  "source range type to scn::scan.\n"
 5406|  78.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  78.3k|                  "and do not provide an explicit source range, "
 5408|  78.3k|                  "or use scn::scan with a FILE* directly.");
 5409|  78.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  78.3k|                  "\n"
 5411|  78.3k|                  "Unsupported range type given as input to a scanning "
 5412|  78.3k|                  "function.\n"
 5413|  78.3k|                  "In order to be scannable, a range needs to satisfy "
 5414|  78.3k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  78.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  78.3k|                  "\n"
 5417|  78.3k|                  "Unsupported range type given as input to a scanning "
 5418|  78.3k|                  "function.\n"
 5419|  78.3k|                  "A range needs to model forward_range and have a valid "
 5420|  78.3k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  78.3k|                  "Examples of scannable ranges are std::string, "
 5422|  78.3k|                  "std::string_view, "
 5423|  78.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  78.3k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  78.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  78.3k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  78.3k|{
 5273|  78.3k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  78.3k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  78.3k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   266k|    {
 1740|   266k|        return has_value();
 1741|   266k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   542k|    {
  490|   542k|        return m_has_value;
  491|   542k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   272k|    {
 1746|   272k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   272k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   272k|        return this->get_unexpected().error();
 1748|   272k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   272k|    {
  473|   272k|        return m_unexpected;
  474|   272k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  75.4k|        : base(unexpect, std::move(e.error())),
 1616|  75.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  75.4k|    {
 1618|  75.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  75.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  75.4k|          m_has_value(false)
  451|  75.4k|    {
  452|  75.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  78.3k|    {
 1316|  78.3k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|  2.88k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  2.88k|                      ranges::iterator_t<SourceRange>>) {
 6677|  2.88k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  2.88k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.88k|    {
 2869|  2.88k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.88k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.88k|    {
 2850|  2.88k|        return decay_copy(t.begin());
 2851|  2.88k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   205k|{
 2094|   205k|    return SCN_FWD(t);
  ------------------
  |  |  936|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   205k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6661|  2.88k|{
 6662|  2.88k|    return ranges::end(source);
 6663|  2.88k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.88k|    {
 2926|  2.88k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.88k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.88k|    {
 2908|  2.88k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.88k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   531k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   531k|    static_cast<    \
  |  |  935|   531k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   531k|    static_cast<    \
  |  |  935|   531k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   531k|    {
 3466|   531k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.30k|    {
 1795|  4.30k|        return value();
 1796|  4.30k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  4.30k|    {
 1769|  4.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.30k|        return this->get_value();
 1771|  4.30k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  4.30k|    {
  456|  4.30k|        return m_value;
  457|  4.30k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  2.88k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.88k|    {
 1572|  2.88k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  2.88k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.88k|    {
  442|  2.88k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5824|  8.70k|{
 5825|  8.70k|    constexpr bool default_constructible_constraint =
 5826|  8.70k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  8.70k|    static_assert(default_constructible_constraint,
 5828|  8.70k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  8.70k|    constexpr bool destructible_constraint =
 5831|  8.70k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  8.70k|    static_assert(destructible_constraint,
 5833|  8.70k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  8.70k|    constexpr bool non_reference_constraint =
 5836|  8.70k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  8.70k|    static_assert(non_reference_constraint,
 5838|  8.70k|                  "Scan argument types must not be references");
 5839|       |
 5840|  8.70k|    constexpr bool movable_constraint =
 5841|  8.70k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  8.70k|    static_assert(movable_constraint,
 5843|  8.70k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  8.70k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  8.70k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  8.70k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5678|  8.70k|    {
 5679|       |        if constexpr (std::is_same_v<char_type, char> &&
 5680|  8.70k|                      !is_type_disabled<char_type>) {
 5681|  8.70k|            return val;
 5682|       |        }
 5683|       |        else if constexpr (is_type_disabled<char_type>) {
 5684|       |            return unscannable_disabled{val};
 5685|       |        }
 5686|       |        else {
 5687|       |            SCN_UNUSED(val);
 5688|       |            return unscannable_char{};
 5689|       |        }
 5690|  8.70k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5778|  8.70k|{
 5779|  8.70k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  8.70k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  8.70k|    constexpr bool scannable_char =
 5783|  8.70k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  8.70k|    static_assert(scannable_char,
 5785|  8.70k|                  "Cannot scan an argument of an unsupported character "
 5786|  8.70k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  8.70k|    constexpr bool scannable_const =
 5789|  8.70k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  8.70k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  8.70k|    constexpr bool scannable_disabled =
 5793|  8.70k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  8.70k|    static_assert(scannable_disabled,
 5795|  8.70k|                  "Cannot scan an argument that has been disabled by "
 5796|  8.70k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  8.70k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  8.70k|    static_assert(
 5800|  8.70k|        scannable,
 5801|  8.70k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  8.70k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  8.70k|    return arg_value{arg};
 5805|  8.70k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5562|  8.70k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  8.70k|    {
 5564|  8.70k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1814|  8.92k|    {
 1815|  8.92k|        return &value();
 1816|  8.92k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.92k|    {
 1769|  8.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.92k|        return this->get_value();
 1771|  8.92k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6353|  8.70k|    {
 6354|  8.70k|        return m_values;
 6355|  8.70k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|  78.3k|        : m_desc(desc), m_builtin_values(data)
 6188|  78.3k|    {
 6189|  78.3k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|  78.3k|{
 8441|  78.3k|    return s;
 8442|  78.3k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|  78.3k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9478|  39.1k|{
 9479|  39.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  39.1k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  39.1k|{
 9414|  39.1k|#if !SCN_DISABLE_LOCALE
 9415|  39.1k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  39.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  39.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  39.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  39.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 37.7k, False: 1.44k]
  |  |  ------------------
  ------------------
 9422|  37.7k|        return unexpected(result.error());
 9423|  37.7k|    }
 9424|  1.44k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  39.1k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.70k|        : m_value(T{}), m_has_value(true)
  427|  8.70k|    {
  428|  8.70k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6344|  26.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.70k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.70k|        out = unexpected(in.error());
 9624|  8.70k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.70k|        : base(unexpect, std::move(e.error())),
 1616|  8.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.70k|    {
 1618|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.70k|          m_has_value(false)
  451|  8.70k|    {
  452|  8.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.70k|    {
 1316|  8.70k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.70k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.70k|    {
  903|  8.70k|        assign_common(std::move(other));
  904|  8.70k|        return *this;
  905|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.70k|    {
  950|  8.70k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.70k, False: 0]
  ------------------
  951|  8.70k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.70k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.70k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.70k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.1k|    {
  490|  26.1k|        return m_has_value;
  491|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.70k|    {
  456|  8.70k|        return m_value;
  457|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.70k|    {
 1046|  8.70k|        this->destroy_value();
 1047|  8.70k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.70k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.70k|    {
  504|  8.70k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.70k|                                  std::forward<Args>(args)...);
  506|  8.70k|        m_has_value = false;
  507|  8.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.70k|    {
  473|  8.70k|        return m_unexpected;
  474|  8.70k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.70k|    {
  481|  8.70k|        return std::move(m_unexpected);
  482|  8.70k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5824|  26.1k|{
 5825|  26.1k|    constexpr bool default_constructible_constraint =
 5826|  26.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.1k|    static_assert(default_constructible_constraint,
 5828|  26.1k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.1k|    constexpr bool destructible_constraint =
 5831|  26.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.1k|    static_assert(destructible_constraint,
 5833|  26.1k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.1k|    constexpr bool non_reference_constraint =
 5836|  26.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.1k|    static_assert(non_reference_constraint,
 5838|  26.1k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.1k|    constexpr bool movable_constraint =
 5841|  26.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.1k|    static_assert(movable_constraint,
 5843|  26.1k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5778|  26.1k|{
 5779|  26.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.1k|    constexpr bool scannable_char =
 5783|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.1k|    static_assert(scannable_char,
 5785|  26.1k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.1k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.1k|    constexpr bool scannable_const =
 5789|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.1k|    constexpr bool scannable_disabled =
 5793|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.1k|    static_assert(scannable_disabled,
 5795|  26.1k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.1k|    static_assert(
 5800|  26.1k|        scannable,
 5801|  26.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.1k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.1k|    return arg_value{arg};
 5805|  26.1k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5562|  26.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.1k|    {
 5564|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  8.70k|    {
 1815|  8.70k|        return &value();
 1816|  8.70k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.70k|    {
 1769|  8.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.70k|        return this->get_value();
 1771|  8.70k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6353|  26.1k|    {
 6354|  26.1k|        return m_values;
 6355|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.70k|        : m_value(T{}), m_has_value(true)
  427|  8.70k|    {
  428|  8.70k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6344|  26.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.70k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.70k|        out = unexpected(in.error());
 9624|  8.70k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.70k|        : base(unexpect, std::move(e.error())),
 1616|  8.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.70k|    {
 1618|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.70k|          m_has_value(false)
  451|  8.70k|    {
  452|  8.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.70k|    {
 1316|  8.70k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.70k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.70k|    {
  903|  8.70k|        assign_common(std::move(other));
  904|  8.70k|        return *this;
  905|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.70k|    {
  950|  8.70k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.70k, False: 0]
  ------------------
  951|  8.70k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.70k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.70k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.70k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.1k|    {
  490|  26.1k|        return m_has_value;
  491|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.70k|    {
  456|  8.70k|        return m_value;
  457|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.70k|    {
 1046|  8.70k|        this->destroy_value();
 1047|  8.70k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.70k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.70k|    {
  504|  8.70k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.70k|                                  std::forward<Args>(args)...);
  506|  8.70k|        m_has_value = false;
  507|  8.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.70k|    {
  473|  8.70k|        return m_unexpected;
  474|  8.70k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.70k|    {
  481|  8.70k|        return std::move(m_unexpected);
  482|  8.70k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5824|  26.1k|{
 5825|  26.1k|    constexpr bool default_constructible_constraint =
 5826|  26.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.1k|    static_assert(default_constructible_constraint,
 5828|  26.1k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.1k|    constexpr bool destructible_constraint =
 5831|  26.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.1k|    static_assert(destructible_constraint,
 5833|  26.1k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.1k|    constexpr bool non_reference_constraint =
 5836|  26.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.1k|    static_assert(non_reference_constraint,
 5838|  26.1k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.1k|    constexpr bool movable_constraint =
 5841|  26.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.1k|    static_assert(movable_constraint,
 5843|  26.1k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5778|  26.1k|{
 5779|  26.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.1k|    constexpr bool scannable_char =
 5783|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.1k|    static_assert(scannable_char,
 5785|  26.1k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.1k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.1k|    constexpr bool scannable_const =
 5789|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.1k|    constexpr bool scannable_disabled =
 5793|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.1k|    static_assert(scannable_disabled,
 5795|  26.1k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.1k|    static_assert(
 5800|  26.1k|        scannable,
 5801|  26.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.1k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.1k|    return arg_value{arg};
 5805|  26.1k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5562|  26.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.1k|    {
 5564|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  8.70k|    {
 1815|  8.70k|        return &value();
 1816|  8.70k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.70k|    {
 1769|  8.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.70k|        return this->get_value();
 1771|  8.70k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6353|  26.1k|    {
 6354|  26.1k|        return m_values;
 6355|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.70k|        : m_value(T{}), m_has_value(true)
  427|  8.70k|    {
  428|  8.70k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6344|  26.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.70k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.70k|        out = unexpected(in.error());
 9624|  8.70k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.70k|        : base(unexpect, std::move(e.error())),
 1616|  8.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.70k|    {
 1618|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.70k|          m_has_value(false)
  451|  8.70k|    {
  452|  8.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.70k|    {
 1316|  8.70k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.70k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.70k|    {
  903|  8.70k|        assign_common(std::move(other));
  904|  8.70k|        return *this;
  905|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.70k|    {
  950|  8.70k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.70k, False: 0]
  ------------------
  951|  8.70k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.70k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.70k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.70k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.1k|    {
  490|  26.1k|        return m_has_value;
  491|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.70k|    {
  456|  8.70k|        return m_value;
  457|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.70k|    {
 1046|  8.70k|        this->destroy_value();
 1047|  8.70k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.70k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.70k|    {
  504|  8.70k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.70k|                                  std::forward<Args>(args)...);
  506|  8.70k|        m_has_value = false;
  507|  8.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.70k|    {
  473|  8.70k|        return m_unexpected;
  474|  8.70k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.70k|    {
  481|  8.70k|        return std::move(m_unexpected);
  482|  8.70k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5824|  26.1k|{
 5825|  26.1k|    constexpr bool default_constructible_constraint =
 5826|  26.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.1k|    static_assert(default_constructible_constraint,
 5828|  26.1k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.1k|    constexpr bool destructible_constraint =
 5831|  26.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.1k|    static_assert(destructible_constraint,
 5833|  26.1k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.1k|    constexpr bool non_reference_constraint =
 5836|  26.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.1k|    static_assert(non_reference_constraint,
 5838|  26.1k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.1k|    constexpr bool movable_constraint =
 5841|  26.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.1k|    static_assert(movable_constraint,
 5843|  26.1k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5778|  26.1k|{
 5779|  26.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.1k|    constexpr bool scannable_char =
 5783|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.1k|    static_assert(scannable_char,
 5785|  26.1k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.1k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.1k|    constexpr bool scannable_const =
 5789|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.1k|    constexpr bool scannable_disabled =
 5793|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.1k|    static_assert(scannable_disabled,
 5795|  26.1k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.1k|    static_assert(
 5800|  26.1k|        scannable,
 5801|  26.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.1k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.1k|    return arg_value{arg};
 5805|  26.1k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5562|  26.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.1k|    {
 5564|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  8.70k|    {
 1815|  8.70k|        return &value();
 1816|  8.70k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.70k|    {
 1769|  8.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.70k|        return this->get_value();
 1771|  8.70k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6353|  26.1k|    {
 6354|  26.1k|        return m_values;
 6355|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.70k|        : m_value(T{}), m_has_value(true)
  427|  8.70k|    {
  428|  8.70k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6344|  26.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.70k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.70k|        out = unexpected(in.error());
 9624|  8.70k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.70k|        : base(unexpect, std::move(e.error())),
 1616|  8.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.70k|    {
 1618|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.70k|          m_has_value(false)
  451|  8.70k|    {
  452|  8.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.70k|    {
 1316|  8.70k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.70k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.70k|    {
  903|  8.70k|        assign_common(std::move(other));
  904|  8.70k|        return *this;
  905|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.70k|    {
  950|  8.70k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.70k, False: 0]
  ------------------
  951|  8.70k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.70k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.70k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.70k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.1k|    {
  490|  26.1k|        return m_has_value;
  491|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.70k|    {
  456|  8.70k|        return m_value;
  457|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.70k|    {
 1046|  8.70k|        this->destroy_value();
 1047|  8.70k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.70k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.70k|    {
  504|  8.70k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.70k|                                  std::forward<Args>(args)...);
  506|  8.70k|        m_has_value = false;
  507|  8.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.70k|    {
  473|  8.70k|        return m_unexpected;
  474|  8.70k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.70k|    {
  481|  8.70k|        return std::move(m_unexpected);
  482|  8.70k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5824|  26.1k|{
 5825|  26.1k|    constexpr bool default_constructible_constraint =
 5826|  26.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.1k|    static_assert(default_constructible_constraint,
 5828|  26.1k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.1k|    constexpr bool destructible_constraint =
 5831|  26.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.1k|    static_assert(destructible_constraint,
 5833|  26.1k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.1k|    constexpr bool non_reference_constraint =
 5836|  26.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.1k|    static_assert(non_reference_constraint,
 5838|  26.1k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.1k|    constexpr bool movable_constraint =
 5841|  26.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.1k|    static_assert(movable_constraint,
 5843|  26.1k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5778|  26.1k|{
 5779|  26.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.1k|    constexpr bool scannable_char =
 5783|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.1k|    static_assert(scannable_char,
 5785|  26.1k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.1k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.1k|    constexpr bool scannable_const =
 5789|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.1k|    constexpr bool scannable_disabled =
 5793|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.1k|    static_assert(scannable_disabled,
 5795|  26.1k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.1k|    static_assert(
 5800|  26.1k|        scannable,
 5801|  26.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.1k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.1k|    return arg_value{arg};
 5805|  26.1k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5562|  26.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.1k|    {
 5564|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  8.70k|    {
 1815|  8.70k|        return &value();
 1816|  8.70k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.70k|    {
 1769|  8.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.70k|        return this->get_value();
 1771|  8.70k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6353|  26.1k|    {
 6354|  26.1k|        return m_values;
 6355|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.70k|        : m_value(T{}), m_has_value(true)
  427|  8.70k|    {
  428|  8.70k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6344|  26.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.70k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.70k|        out = unexpected(in.error());
 9624|  8.70k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  8.70k|        : base(unexpect, std::move(e.error())),
 1616|  8.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.70k|    {
 1618|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  8.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.70k|          m_has_value(false)
  451|  8.70k|    {
  452|  8.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.70k|    {
 1316|  8.70k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  8.70k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  8.70k|    {
  903|  8.70k|        assign_common(std::move(other));
  904|  8.70k|        return *this;
  905|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  8.70k|    {
  950|  8.70k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.70k, False: 0]
  ------------------
  951|  8.70k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.70k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.70k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.70k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.1k|    {
  490|  26.1k|        return m_has_value;
  491|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.70k|    {
  456|  8.70k|        return m_value;
  457|  8.70k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  8.70k|    {
 1046|  8.70k|        this->destroy_value();
 1047|  8.70k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.70k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  8.70k|    {
  504|  8.70k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.70k|                                  std::forward<Args>(args)...);
  506|  8.70k|        m_has_value = false;
  507|  8.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.70k|    {
  473|  8.70k|        return m_unexpected;
  474|  8.70k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.70k|    {
  481|  8.70k|        return std::move(m_unexpected);
  482|  8.70k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5824|  26.1k|{
 5825|  26.1k|    constexpr bool default_constructible_constraint =
 5826|  26.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.1k|    static_assert(default_constructible_constraint,
 5828|  26.1k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.1k|    constexpr bool destructible_constraint =
 5831|  26.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.1k|    static_assert(destructible_constraint,
 5833|  26.1k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.1k|    constexpr bool non_reference_constraint =
 5836|  26.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.1k|    static_assert(non_reference_constraint,
 5838|  26.1k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.1k|    constexpr bool movable_constraint =
 5841|  26.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.1k|    static_assert(movable_constraint,
 5843|  26.1k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5778|  26.1k|{
 5779|  26.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.1k|    constexpr bool scannable_char =
 5783|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.1k|    static_assert(scannable_char,
 5785|  26.1k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.1k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.1k|    constexpr bool scannable_const =
 5789|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.1k|    constexpr bool scannable_disabled =
 5793|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.1k|    static_assert(scannable_disabled,
 5795|  26.1k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.1k|    static_assert(
 5800|  26.1k|        scannable,
 5801|  26.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.1k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.1k|    return arg_value{arg};
 5805|  26.1k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5562|  26.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.1k|    {
 5564|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  8.70k|    {
 1815|  8.70k|        return &value();
 1816|  8.70k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  8.70k|    {
 1769|  8.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.70k|        return this->get_value();
 1771|  8.70k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6353|  26.1k|    {
 6354|  26.1k|        return m_values;
 6355|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  8.70k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  8.70k|    {
  613|  8.70k|        construct();
  614|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  8.70k|    {
  694|  8.70k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.70k|        m_has_value = true;
  696|  8.70k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  8.70k|{
  396|  8.70k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.70k|        T(std::forward<Args>(args)...);
  398|  8.70k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6344|  26.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  27.0k|    {
  718|  27.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  27.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  27.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.81k, False: 890]
  |  |  ------------------
  ------------------
 9623|  7.81k|        out = unexpected(in.error());
 9624|  7.81k|    }
 9625|    890|    else {
 9626|    890|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    890|    static_cast<    \
  |  |  935|    890|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    890|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  7.81k|        : base(unexpect, std::move(e.error())),
 1616|  7.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  7.81k|    {
 1618|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  7.81k|        : m_has_value(false)
  637|  7.81k|    {
  638|  7.81k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  7.81k|    {
  701|  7.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.81k|                                  std::forward<Args>(args)...);
  703|  7.81k|        m_has_value = false;
  704|  7.81k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  49.6k|{
  396|  49.6k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  49.6k|        T(std::forward<Args>(args)...);
  398|  49.6k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  39.0k|    {
  730|  39.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  39.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  39.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  39.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.81k|    {
 1316|  7.81k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  7.81k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  7.81k|    {
  903|  7.81k|        assign_common(std::move(other));
  904|  7.81k|        return *this;
  905|  7.81k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  7.81k|    {
  950|  7.81k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 7.81k, False: 0]
  ------------------
  951|  7.81k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 7.81k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  7.81k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  7.81k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  41.7k|    {
  687|  41.7k|        return m_has_value;
  688|  41.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  9.59k|    {
  653|  9.59k|        return *value_ptr();
  654|  9.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  7.81k|    {
 1046|  7.81k|        this->destroy_value();
 1047|  7.81k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.70k|    {
  708|  8.70k|        scn::detail::destroy_at(value_ptr());
  709|  8.70k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  8.70k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.70k|    else {
  408|  8.70k|        p->~T();
  409|  8.70k|    }
  410|  8.70k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  8.70k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  7.81k|    {
  701|  7.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.81k|                                  std::forward<Args>(args)...);
  703|  7.81k|        m_has_value = false;
  704|  7.81k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  7.81k|    {
  678|  7.81k|        return std::move(*unexpected_ptr());
  679|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  15.6k|    {
  712|  15.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  15.6k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  99.2k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  99.2k|    else {
  408|  99.2k|        p->~T();
  409|  99.2k|    }
  410|  99.2k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5824|  26.1k|{
 5825|  26.1k|    constexpr bool default_constructible_constraint =
 5826|  26.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.1k|    static_assert(default_constructible_constraint,
 5828|  26.1k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.1k|    constexpr bool destructible_constraint =
 5831|  26.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.1k|    static_assert(destructible_constraint,
 5833|  26.1k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.1k|    constexpr bool non_reference_constraint =
 5836|  26.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.1k|    static_assert(non_reference_constraint,
 5838|  26.1k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.1k|    constexpr bool movable_constraint =
 5841|  26.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.1k|    static_assert(movable_constraint,
 5843|  26.1k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5778|  26.1k|{
 5779|  26.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.1k|    constexpr bool scannable_char =
 5783|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.1k|    static_assert(scannable_char,
 5785|  26.1k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.1k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.1k|    constexpr bool scannable_const =
 5789|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.1k|    constexpr bool scannable_disabled =
 5793|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.1k|    static_assert(scannable_disabled,
 5795|  26.1k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.1k|    static_assert(
 5800|  26.1k|        scannable,
 5801|  26.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.1k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.1k|    return arg_value{arg};
 5805|  26.1k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5562|  26.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.1k|    {
 5564|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.59k|    {
 1815|  9.59k|        return &value();
 1816|  9.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  9.59k|    {
 1769|  9.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.59k|        return this->get_value();
 1771|  9.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6353|  26.1k|    {
 6354|  26.1k|        return m_values;
 6355|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  16.5k|    {
  643|  16.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 890, False: 15.6k]
  ------------------
  644|    890|            destroy_value();
  645|    890|        }
  646|  15.6k|        else {
  647|  15.6k|            destroy_unexpected();
  648|  15.6k|        }
  649|  16.5k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  8.70k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  8.70k|    {
  613|  8.70k|        construct();
  614|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  8.70k|    {
  694|  8.70k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.70k|        m_has_value = true;
  696|  8.70k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  8.70k|{
  396|  8.70k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.70k|        T(std::forward<Args>(args)...);
  398|  8.70k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6344|  26.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  27.0k|    {
  718|  27.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  27.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  27.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.81k, False: 890]
  |  |  ------------------
  ------------------
 9623|  7.81k|        out = unexpected(in.error());
 9624|  7.81k|    }
 9625|    890|    else {
 9626|    890|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    890|    static_cast<    \
  |  |  935|    890|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    890|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  7.81k|        : base(unexpect, std::move(e.error())),
 1616|  7.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  7.81k|    {
 1618|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  7.81k|        : m_has_value(false)
  637|  7.81k|    {
  638|  7.81k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  7.81k|    {
  701|  7.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.81k|                                  std::forward<Args>(args)...);
  703|  7.81k|        m_has_value = false;
  704|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  39.0k|    {
  730|  39.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  39.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  39.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  39.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.81k|    {
 1316|  7.81k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  7.81k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  7.81k|    {
  903|  7.81k|        assign_common(std::move(other));
  904|  7.81k|        return *this;
  905|  7.81k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  7.81k|    {
  950|  7.81k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 7.81k, False: 0]
  ------------------
  951|  7.81k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 7.81k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  7.81k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  7.81k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  41.7k|    {
  687|  41.7k|        return m_has_value;
  688|  41.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  9.59k|    {
  653|  9.59k|        return *value_ptr();
  654|  9.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  7.81k|    {
 1046|  7.81k|        this->destroy_value();
 1047|  7.81k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.70k|    {
  708|  8.70k|        scn::detail::destroy_at(value_ptr());
  709|  8.70k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  8.70k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.70k|    else {
  408|  8.70k|        p->~T();
  409|  8.70k|    }
  410|  8.70k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  8.70k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  7.81k|    {
  701|  7.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.81k|                                  std::forward<Args>(args)...);
  703|  7.81k|        m_has_value = false;
  704|  7.81k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  7.81k|    {
  678|  7.81k|        return std::move(*unexpected_ptr());
  679|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  15.6k|    {
  712|  15.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  15.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5824|  26.1k|{
 5825|  26.1k|    constexpr bool default_constructible_constraint =
 5826|  26.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.1k|    static_assert(default_constructible_constraint,
 5828|  26.1k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.1k|    constexpr bool destructible_constraint =
 5831|  26.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.1k|    static_assert(destructible_constraint,
 5833|  26.1k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.1k|    constexpr bool non_reference_constraint =
 5836|  26.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.1k|    static_assert(non_reference_constraint,
 5838|  26.1k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.1k|    constexpr bool movable_constraint =
 5841|  26.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.1k|    static_assert(movable_constraint,
 5843|  26.1k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5778|  26.1k|{
 5779|  26.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.1k|    constexpr bool scannable_char =
 5783|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.1k|    static_assert(scannable_char,
 5785|  26.1k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.1k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.1k|    constexpr bool scannable_const =
 5789|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.1k|    constexpr bool scannable_disabled =
 5793|  26.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.1k|    static_assert(scannable_disabled,
 5795|  26.1k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.1k|    static_assert(
 5800|  26.1k|        scannable,
 5801|  26.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.1k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.1k|    return arg_value{arg};
 5805|  26.1k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5562|  26.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.1k|    {
 5564|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.59k|    {
 1815|  9.59k|        return &value();
 1816|  9.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  9.59k|    {
 1769|  9.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.59k|        return this->get_value();
 1771|  9.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6353|  26.1k|    {
 6354|  26.1k|        return m_values;
 6355|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  16.5k|    {
  643|  16.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 890, False: 15.6k]
  ------------------
  644|    890|            destroy_value();
  645|    890|        }
  646|  15.6k|        else {
  647|  15.6k|            destroy_unexpected();
  648|  15.6k|        }
  649|  16.5k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.35k|{
 9681|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.35k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.35k|                                   make_scan_args(result->values())));
 9684|  4.35k|    return result;
 9685|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9636|  8.70k|{
 9637|  8.70k|    return scan_result_type<Source, Args...>();
 9638|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  8.70k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.70k|        : m_value(T{}), m_has_value(true)
  427|  8.70k|    {
  428|  8.70k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6570|  8.70k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6344|  8.70k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  8.70k|{
 9622|  8.70k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.81k, False: 890]
  |  |  ------------------
  ------------------
 9623|  7.81k|        out = unexpected(in.error());
 9624|  7.81k|    }
 9625|    890|    else {
 9626|    890|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    890|    static_cast<    \
  |  |  935|    890|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    890|    }
 9628|  8.70k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  7.81k|        : base(unexpect, std::move(e.error())),
 1616|  7.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  7.81k|    {
 1618|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  7.81k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  7.81k|          m_has_value(false)
  451|  7.81k|    {
  452|  7.81k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.81k|    {
 1316|  7.81k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  7.81k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  7.81k|    {
  903|  7.81k|        assign_common(std::move(other));
  904|  7.81k|        return *this;
  905|  7.81k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  7.81k|    {
  950|  7.81k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 7.81k, False: 0]
  ------------------
  951|  7.81k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 7.81k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  7.81k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  7.81k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  25.2k|    {
  490|  25.2k|        return m_has_value;
  491|  25.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  9.59k|    {
  456|  9.59k|        return m_value;
  457|  9.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  7.81k|    {
 1046|  7.81k|        this->destroy_value();
 1047|  7.81k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  7.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  7.81k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  7.81k|    {
  504|  7.81k|        scn::detail::construct_at(&get_unexpected(),
  505|  7.81k|                                  std::forward<Args>(args)...);
  506|  7.81k|        m_has_value = false;
  507|  7.81k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  7.81k|    {
  473|  7.81k|        return m_unexpected;
  474|  7.81k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  7.81k|    {
  481|  7.81k|        return std::move(m_unexpected);
  482|  7.81k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8767|  8.70k|    {
 8768|  8.70k|        return m_str;
 8769|  8.70k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  8.70k|{
 6110|  8.70k|    detail::check_scan_arg_types<Args...>();
 6111|  8.70k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.70k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5824|  8.70k|{
 5825|  8.70k|    constexpr bool default_constructible_constraint =
 5826|  8.70k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  8.70k|    static_assert(default_constructible_constraint,
 5828|  8.70k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  8.70k|    constexpr bool destructible_constraint =
 5831|  8.70k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  8.70k|    static_assert(destructible_constraint,
 5833|  8.70k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  8.70k|    constexpr bool non_reference_constraint =
 5836|  8.70k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  8.70k|    static_assert(non_reference_constraint,
 5838|  8.70k|                  "Scan argument types must not be references");
 5839|       |
 5840|  8.70k|    constexpr bool movable_constraint =
 5841|  8.70k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  8.70k|    static_assert(movable_constraint,
 5843|  8.70k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  8.70k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  8.70k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  8.70k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  8.70k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.70k|    {
 6087|  8.70k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  8.70k|    {
 6095|  8.70k|        return {detail::make_arg<
 6096|  8.70k|            kind, Context,
 6097|  8.70k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.70k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.70k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5874|  8.70k|{
 5875|  8.70k|    return make_value<Context>(value).ref_value;
 5876|  8.70k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5809|  8.70k|{
 5810|  8.70k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.70k|                                  needs_context_tag>) {
 5814|  8.70k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.70k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5648|  8.70k|    {                                                                        \
 5649|  8.70k|        return val;                                                          \
 5650|  8.70k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5778|  8.70k|{
 5779|  8.70k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  8.70k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  8.70k|    constexpr bool scannable_char =
 5783|  8.70k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  8.70k|    static_assert(scannable_char,
 5785|  8.70k|                  "Cannot scan an argument of an unsupported character "
 5786|  8.70k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  8.70k|    constexpr bool scannable_const =
 5789|  8.70k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  8.70k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  8.70k|    constexpr bool scannable_disabled =
 5793|  8.70k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  8.70k|    static_assert(scannable_disabled,
 5795|  8.70k|                  "Cannot scan an argument that has been disabled by "
 5796|  8.70k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  8.70k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  8.70k|    static_assert(
 5800|  8.70k|        scannable,
 5801|  8.70k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  8.70k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  8.70k|    return arg_value{arg};
 5805|  8.70k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5562|  8.70k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  8.70k|    {
 5564|  8.70k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.59k|    {
 1815|  9.59k|        return &value();
 1816|  9.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  9.59k|    {
 1769|  9.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.59k|        return this->get_value();
 1771|  9.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6353|  8.70k|    {
 6354|  8.70k|        return m_values;
 6355|  8.70k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.70k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.70k|    {
 6137|  8.70k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.70k|        : m_str(r.str)
 8763|  8.70k|    {
 8764|  8.70k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.35k|{
 9750|  4.35k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.35k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.35k|                                   make_scan_args(result->values())));
 9753|  4.35k|    return result;
 9754|  4.35k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.4k|        : m_value(T{}), m_has_value(true)
  427|  17.4k|    {
  428|  17.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|   156k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   156k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6344|  17.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.3k, False: 98]
  |  |  ------------------
  ------------------
 9623|  17.3k|        out = unexpected(in.error());
 9624|  17.3k|    }
 9625|     98|    else {
 9626|     98|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     98|    static_cast<    \
  |  |  935|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     98|    }
 9628|  17.4k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   156k|    {
 1740|   156k|        return has_value();
 1741|   156k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   313k|    {
  490|   313k|        return m_has_value;
  491|   313k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   155k|    {
 1746|   155k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   155k|        return this->get_unexpected().error();
 1748|   155k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   155k|    {
  473|   155k|        return m_unexpected;
  474|   155k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.3k|        : base(unexpect, std::move(e.error())),
 1616|  17.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.3k|    {
 1618|  17.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.3k|          m_has_value(false)
  451|  17.3k|    {
  452|  17.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.3k|    {
 1316|  17.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.3k|    {
  903|  17.3k|        assign_common(std::move(other));
  904|  17.3k|        return *this;
  905|  17.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.3k|    {
  950|  17.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.3k, False: 0]
  ------------------
  951|  17.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.1k|    {
  490|  52.1k|        return m_has_value;
  491|  52.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.5k|    {
  456|  17.5k|        return m_value;
  457|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.3k|    {
 1046|  17.3k|        this->destroy_value();
 1047|  17.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.3k|    {
  504|  17.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.3k|                                  std::forward<Args>(args)...);
  506|  17.3k|        m_has_value = false;
  507|  17.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.3k|    {
  473|  17.3k|        return m_unexpected;
  474|  17.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.3k|    {
  481|  17.3k|        return std::move(m_unexpected);
  482|  17.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  1.42k|    {
 6445|  1.42k|        m_range = std::forward<Other>(r);
 6446|  1.42k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.42k|    {
 1795|  1.42k|        return value();
 1796|  1.42k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.42k|    {
 1769|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.42k|        return this->get_value();
 1771|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.42k|    {
  456|  1.42k|        return m_value;
  457|  1.42k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  78.3k|{
 9398|  78.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  78.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 77.6k, False: 712]
  |  |  ------------------
  ------------------
 9402|  77.6k|        return unexpected(result.error());
 9403|  77.6k|    }
 9404|    712|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    712|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  78.3k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5380|   156k|{
 5381|   156k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   156k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   156k|                  "\n"
 5385|   156k|                  "Unsupported range type given as input to a scanning "
 5386|   156k|                  "function.\n"
 5387|   156k|                  "A range needs to have a character type (value type) "
 5388|   156k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   156k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   156k|                  "to be included.\n"
 5391|   156k|                  "See the scnlib documentation for more details.");
 5392|   156k|    static_assert(
 5393|   156k|        !std::is_same_v<T, custom_char_traits>,
 5394|   156k|        "\n"
 5395|   156k|        "Unsupported range type given as input to a scanning "
 5396|   156k|        "function.\n"
 5397|   156k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   156k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   156k|        "not supported.");
 5400|   156k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   156k|                  "\n"
 5402|   156k|                  "Unsupported range type given as input to a scanning "
 5403|   156k|                  "function.\n"
 5404|   156k|                  "file_marker_found cannot be used as an "
 5405|   156k|                  "source range type to scn::scan.\n"
 5406|   156k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   156k|                  "and do not provide an explicit source range, "
 5408|   156k|                  "or use scn::scan with a FILE* directly.");
 5409|   156k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   156k|                  "\n"
 5411|   156k|                  "Unsupported range type given as input to a scanning "
 5412|   156k|                  "function.\n"
 5413|   156k|                  "In order to be scannable, a range needs to satisfy "
 5414|   156k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   156k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   156k|                  "\n"
 5417|   156k|                  "Unsupported range type given as input to a scanning "
 5418|   156k|                  "function.\n"
 5419|   156k|                  "A range needs to model forward_range and have a valid "
 5420|   156k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   156k|                  "Examples of scannable ranges are std::string, "
 5422|   156k|                  "std::string_view, "
 5423|   156k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   156k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   156k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   156k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|   156k|{
 5273|   156k|    if constexpr (is_valid_char_type<CharT>) {
 5274|   156k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|   156k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   155k|        : base(unexpect, std::move(e.error())),
 1616|   155k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   155k|    {
 1618|   155k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   155k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   155k|          m_has_value(false)
  451|   155k|    {
  452|   155k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   156k|    {
 1316|   156k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|  1.42k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.42k|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.42k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.42k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.42k|    {
 2869|  1.42k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.42k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.42k|    {
 2850|  1.42k|        return decay_copy(t.begin());
 2851|  1.42k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   394k|{
 2094|   394k|    return SCN_FWD(t);
  ------------------
  |  |  936|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   394k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6661|  1.42k|{
 6662|  1.42k|    return ranges::end(source);
 6663|  1.42k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.42k|    {
 2926|  1.42k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.42k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.42k|    {
 2908|  1.42k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.42k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.28M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.28M|    static_cast<    \
  |  |  935|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.28M|    static_cast<    \
  |  |  935|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.28M|    {
 3466|  1.28M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.42k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.42k|    {
 1572|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.42k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.42k|    {
  442|  1.42k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5824|  17.4k|{
 5825|  17.4k|    constexpr bool default_constructible_constraint =
 5826|  17.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  17.4k|    static_assert(default_constructible_constraint,
 5828|  17.4k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  17.4k|    constexpr bool destructible_constraint =
 5831|  17.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  17.4k|    static_assert(destructible_constraint,
 5833|  17.4k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  17.4k|    constexpr bool non_reference_constraint =
 5836|  17.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  17.4k|    static_assert(non_reference_constraint,
 5838|  17.4k|                  "Scan argument types must not be references");
 5839|       |
 5840|  17.4k|    constexpr bool movable_constraint =
 5841|  17.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  17.4k|    static_assert(movable_constraint,
 5843|  17.4k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  17.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  17.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5778|  17.4k|{
 5779|  17.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  17.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  17.4k|    constexpr bool scannable_char =
 5783|  17.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  17.4k|    static_assert(scannable_char,
 5785|  17.4k|                  "Cannot scan an argument of an unsupported character "
 5786|  17.4k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  17.4k|    constexpr bool scannable_const =
 5789|  17.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  17.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  17.4k|    constexpr bool scannable_disabled =
 5793|  17.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  17.4k|    static_assert(scannable_disabled,
 5795|  17.4k|                  "Cannot scan an argument that has been disabled by "
 5796|  17.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  17.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  17.4k|    static_assert(
 5800|  17.4k|        scannable,
 5801|  17.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  17.4k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  17.4k|    return arg_value{arg};
 5805|  17.4k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5562|  17.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  17.4k|    {
 5564|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1814|  17.5k|    {
 1815|  17.5k|        return &value();
 1816|  17.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.5k|    {
 1769|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.5k|        return this->get_value();
 1771|  17.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6353|  17.4k|    {
 6354|  17.4k|        return m_values;
 6355|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|   156k|        : m_desc(desc), m_builtin_values(data)
 6188|   156k|    {
 6189|   156k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   156k|{
 8446|   156k|    return s;
 8447|   156k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   156k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  78.3k|{
 9414|  78.3k|#if !SCN_DISABLE_LOCALE
 9415|  78.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  78.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  78.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  78.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  78.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 77.6k, False: 712]
  |  |  ------------------
  ------------------
 9422|  77.6k|        return unexpected(result.error());
 9423|  77.6k|    }
 9424|    712|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    712|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  78.3k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.4k|        : m_value(T{}), m_has_value(true)
  427|  17.4k|    {
  428|  17.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.4k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.4k|        out = unexpected(in.error());
 9624|  17.4k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.4k|        : base(unexpect, std::move(e.error())),
 1616|  17.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.4k|    {
 1618|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.4k|          m_has_value(false)
  451|  17.4k|    {
  452|  17.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.4k|    {
 1316|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.4k|    {
  903|  17.4k|        assign_common(std::move(other));
  904|  17.4k|        return *this;
  905|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.4k|    {
  950|  17.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.4k, False: 0]
  ------------------
  951|  17.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.2k|    {
  490|  52.2k|        return m_has_value;
  491|  52.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.4k|    {
  456|  17.4k|        return m_value;
  457|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.4k|    {
 1046|  17.4k|        this->destroy_value();
 1047|  17.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.4k|    {
  504|  17.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.4k|                                  std::forward<Args>(args)...);
  506|  17.4k|        m_has_value = false;
  507|  17.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.4k|    {
  473|  17.4k|        return m_unexpected;
  474|  17.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.4k|    {
  481|  17.4k|        return std::move(m_unexpected);
  482|  17.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  17.4k|    {
 1815|  17.4k|        return &value();
 1816|  17.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.4k|    {
 1769|  17.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.4k|        return this->get_value();
 1771|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.4k|        : m_value(T{}), m_has_value(true)
  427|  17.4k|    {
  428|  17.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.4k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.4k|        out = unexpected(in.error());
 9624|  17.4k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.4k|        : base(unexpect, std::move(e.error())),
 1616|  17.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.4k|    {
 1618|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.4k|          m_has_value(false)
  451|  17.4k|    {
  452|  17.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.4k|    {
 1316|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.4k|    {
  903|  17.4k|        assign_common(std::move(other));
  904|  17.4k|        return *this;
  905|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.4k|    {
  950|  17.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.4k, False: 0]
  ------------------
  951|  17.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.2k|    {
  490|  52.2k|        return m_has_value;
  491|  52.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.4k|    {
  456|  17.4k|        return m_value;
  457|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.4k|    {
 1046|  17.4k|        this->destroy_value();
 1047|  17.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.4k|    {
  504|  17.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.4k|                                  std::forward<Args>(args)...);
  506|  17.4k|        m_has_value = false;
  507|  17.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.4k|    {
  473|  17.4k|        return m_unexpected;
  474|  17.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.4k|    {
  481|  17.4k|        return std::move(m_unexpected);
  482|  17.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  17.4k|    {
 1815|  17.4k|        return &value();
 1816|  17.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.4k|    {
 1769|  17.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.4k|        return this->get_value();
 1771|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.4k|        : m_value(T{}), m_has_value(true)
  427|  17.4k|    {
  428|  17.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.4k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.4k|        out = unexpected(in.error());
 9624|  17.4k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.4k|        : base(unexpect, std::move(e.error())),
 1616|  17.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.4k|    {
 1618|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.4k|          m_has_value(false)
  451|  17.4k|    {
  452|  17.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.4k|    {
 1316|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.4k|    {
  903|  17.4k|        assign_common(std::move(other));
  904|  17.4k|        return *this;
  905|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.4k|    {
  950|  17.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.4k, False: 0]
  ------------------
  951|  17.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.2k|    {
  490|  52.2k|        return m_has_value;
  491|  52.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.4k|    {
  456|  17.4k|        return m_value;
  457|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.4k|    {
 1046|  17.4k|        this->destroy_value();
 1047|  17.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.4k|    {
  504|  17.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.4k|                                  std::forward<Args>(args)...);
  506|  17.4k|        m_has_value = false;
  507|  17.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.4k|    {
  473|  17.4k|        return m_unexpected;
  474|  17.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.4k|    {
  481|  17.4k|        return std::move(m_unexpected);
  482|  17.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  17.4k|    {
 1815|  17.4k|        return &value();
 1816|  17.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.4k|    {
 1769|  17.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.4k|        return this->get_value();
 1771|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.4k|        : m_value(T{}), m_has_value(true)
  427|  17.4k|    {
  428|  17.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.4k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.4k|        out = unexpected(in.error());
 9624|  17.4k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.4k|        : base(unexpect, std::move(e.error())),
 1616|  17.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.4k|    {
 1618|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.4k|          m_has_value(false)
  451|  17.4k|    {
  452|  17.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.4k|    {
 1316|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.4k|    {
  903|  17.4k|        assign_common(std::move(other));
  904|  17.4k|        return *this;
  905|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.4k|    {
  950|  17.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.4k, False: 0]
  ------------------
  951|  17.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.2k|    {
  490|  52.2k|        return m_has_value;
  491|  52.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.4k|    {
  456|  17.4k|        return m_value;
  457|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.4k|    {
 1046|  17.4k|        this->destroy_value();
 1047|  17.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.4k|    {
  504|  17.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.4k|                                  std::forward<Args>(args)...);
  506|  17.4k|        m_has_value = false;
  507|  17.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.4k|    {
  473|  17.4k|        return m_unexpected;
  474|  17.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.4k|    {
  481|  17.4k|        return std::move(m_unexpected);
  482|  17.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  17.4k|    {
 1815|  17.4k|        return &value();
 1816|  17.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.4k|    {
 1769|  17.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.4k|        return this->get_value();
 1771|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.4k|        : m_value(T{}), m_has_value(true)
  427|  17.4k|    {
  428|  17.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.4k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.4k|        out = unexpected(in.error());
 9624|  17.4k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  17.4k|        : base(unexpect, std::move(e.error())),
 1616|  17.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.4k|    {
 1618|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  17.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.4k|          m_has_value(false)
  451|  17.4k|    {
  452|  17.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.4k|    {
 1316|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  17.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  17.4k|    {
  903|  17.4k|        assign_common(std::move(other));
  904|  17.4k|        return *this;
  905|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  17.4k|    {
  950|  17.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.4k, False: 0]
  ------------------
  951|  17.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.2k|    {
  490|  52.2k|        return m_has_value;
  491|  52.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.4k|    {
  456|  17.4k|        return m_value;
  457|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  17.4k|    {
 1046|  17.4k|        this->destroy_value();
 1047|  17.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  17.4k|    {
  504|  17.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.4k|                                  std::forward<Args>(args)...);
  506|  17.4k|        m_has_value = false;
  507|  17.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.4k|    {
  473|  17.4k|        return m_unexpected;
  474|  17.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.4k|    {
  481|  17.4k|        return std::move(m_unexpected);
  482|  17.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  17.4k|    {
 1815|  17.4k|        return &value();
 1816|  17.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  17.4k|    {
 1769|  17.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.4k|        return this->get_value();
 1771|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  17.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  17.4k|    {
  613|  17.4k|        construct();
  614|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  17.4k|    {
  694|  17.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  17.4k|        m_has_value = true;
  696|  17.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  17.4k|{
  396|  17.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  17.4k|        T(std::forward<Args>(args)...);
  398|  17.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  52.6k|    {
  718|  52.6k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  52.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  52.6k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.9k, False: 442]
  |  |  ------------------
  ------------------
 9623|  16.9k|        out = unexpected(in.error());
 9624|  16.9k|    }
 9625|    442|    else {
 9626|    442|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    442|    static_cast<    \
  |  |  935|    442|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    442|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  16.9k|        : base(unexpect, std::move(e.error())),
 1616|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.9k|    {
 1618|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  16.9k|        : m_has_value(false)
  637|  16.9k|    {
  638|  16.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  16.9k|    {
  701|  16.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.9k|                                  std::forward<Args>(args)...);
  703|  16.9k|        m_has_value = false;
  704|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  84.8k|    {
  730|  84.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  84.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  84.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  84.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  16.9k|    {
 1316|  16.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  16.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  16.9k|    {
  903|  16.9k|        assign_common(std::move(other));
  904|  16.9k|        return *this;
  905|  16.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  16.9k|    {
  950|  16.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 16.9k, False: 0]
  ------------------
  951|  16.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 16.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  16.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  16.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  86.1k|    {
  687|  86.1k|        return m_has_value;
  688|  86.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  17.8k|    {
  653|  17.8k|        return *value_ptr();
  654|  17.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  16.9k|    {
 1046|  16.9k|        this->destroy_value();
 1047|  16.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  17.4k|    {
  708|  17.4k|        scn::detail::destroy_at(value_ptr());
  709|  17.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  17.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  17.4k|    else {
  408|  17.4k|        p->~T();
  409|  17.4k|    }
  410|  17.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  17.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  16.9k|    {
  701|  16.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.9k|                                  std::forward<Args>(args)...);
  703|  16.9k|        m_has_value = false;
  704|  16.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  16.9k|    {
  678|  16.9k|        return std::move(*unexpected_ptr());
  679|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  33.9k|    {
  712|  33.9k|        scn::detail::destroy_at(unexpected_ptr());
  713|  33.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  17.8k|    {
 1815|  17.8k|        return &value();
 1816|  17.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  17.8k|    {
 1769|  17.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.8k|        return this->get_value();
 1771|  17.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  34.3k|    {
  643|  34.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 442, False: 33.9k]
  ------------------
  644|    442|            destroy_value();
  645|    442|        }
  646|  33.9k|        else {
  647|  33.9k|            destroy_unexpected();
  648|  33.9k|        }
  649|  34.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  17.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  17.4k|    {
  613|  17.4k|        construct();
  614|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  17.4k|    {
  694|  17.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  17.4k|        m_has_value = true;
  696|  17.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  17.4k|{
  396|  17.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  17.4k|        T(std::forward<Args>(args)...);
  398|  17.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  52.6k|    {
  718|  52.6k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  52.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  52.6k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.9k, False: 442]
  |  |  ------------------
  ------------------
 9623|  16.9k|        out = unexpected(in.error());
 9624|  16.9k|    }
 9625|    442|    else {
 9626|    442|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    442|    static_cast<    \
  |  |  935|    442|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    442|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  16.9k|        : base(unexpect, std::move(e.error())),
 1616|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.9k|    {
 1618|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  16.9k|        : m_has_value(false)
  637|  16.9k|    {
  638|  16.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  16.9k|    {
  701|  16.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.9k|                                  std::forward<Args>(args)...);
  703|  16.9k|        m_has_value = false;
  704|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  84.8k|    {
  730|  84.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  84.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  84.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  84.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  16.9k|    {
 1316|  16.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  16.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  16.9k|    {
  903|  16.9k|        assign_common(std::move(other));
  904|  16.9k|        return *this;
  905|  16.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  16.9k|    {
  950|  16.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 16.9k, False: 0]
  ------------------
  951|  16.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 16.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  16.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  16.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  86.1k|    {
  687|  86.1k|        return m_has_value;
  688|  86.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  17.8k|    {
  653|  17.8k|        return *value_ptr();
  654|  17.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  16.9k|    {
 1046|  16.9k|        this->destroy_value();
 1047|  16.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  17.4k|    {
  708|  17.4k|        scn::detail::destroy_at(value_ptr());
  709|  17.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  17.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  17.4k|    else {
  408|  17.4k|        p->~T();
  409|  17.4k|    }
  410|  17.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  17.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  16.9k|    {
  701|  16.9k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.9k|                                  std::forward<Args>(args)...);
  703|  16.9k|        m_has_value = false;
  704|  16.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  16.9k|    {
  678|  16.9k|        return std::move(*unexpected_ptr());
  679|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  33.9k|    {
  712|  33.9k|        scn::detail::destroy_at(unexpected_ptr());
  713|  33.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  17.8k|    {
 1815|  17.8k|        return &value();
 1816|  17.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  17.8k|    {
 1769|  17.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.8k|        return this->get_value();
 1771|  17.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  34.3k|    {
  643|  34.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 442, False: 33.9k]
  ------------------
  644|    442|            destroy_value();
  645|    442|        }
  646|  33.9k|        else {
  647|  33.9k|            destroy_unexpected();
  648|  33.9k|        }
  649|  34.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9636|  17.4k|{
 9637|  17.4k|    return scan_result_type<Source, Args...>();
 9638|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  17.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.4k|        : m_value(T{}), m_has_value(true)
  427|  17.4k|    {
  428|  17.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6570|  17.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6344|  17.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  17.4k|{
 9622|  17.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.9k, False: 442]
  |  |  ------------------
  ------------------
 9623|  16.9k|        out = unexpected(in.error());
 9624|  16.9k|    }
 9625|    442|    else {
 9626|    442|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    442|    static_cast<    \
  |  |  935|    442|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    442|    }
 9628|  17.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  16.9k|        : base(unexpect, std::move(e.error())),
 1616|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.9k|    {
 1618|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  16.9k|          m_has_value(false)
  451|  16.9k|    {
  452|  16.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  16.9k|    {
 1316|  16.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  16.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  16.9k|    {
  903|  16.9k|        assign_common(std::move(other));
  904|  16.9k|        return *this;
  905|  16.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  16.9k|    {
  950|  16.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 16.9k, False: 0]
  ------------------
  951|  16.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 16.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  16.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  16.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  51.8k|    {
  490|  51.8k|        return m_has_value;
  491|  51.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.8k|    {
  456|  17.8k|        return m_value;
  457|  17.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  16.9k|    {
 1046|  16.9k|        this->destroy_value();
 1047|  16.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  16.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  16.9k|    {
  504|  16.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  16.9k|                                  std::forward<Args>(args)...);
  506|  16.9k|        m_has_value = false;
  507|  16.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  16.9k|    {
  473|  16.9k|        return m_unexpected;
  474|  16.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  16.9k|    {
  481|  16.9k|        return std::move(m_unexpected);
  482|  16.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8767|  17.4k|    {
 8768|  17.4k|        return m_str;
 8769|  17.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  17.4k|{
 6110|  17.4k|    detail::check_scan_arg_types<Args...>();
 6111|  17.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.4k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5824|  17.4k|{
 5825|  17.4k|    constexpr bool default_constructible_constraint =
 5826|  17.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  17.4k|    static_assert(default_constructible_constraint,
 5828|  17.4k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  17.4k|    constexpr bool destructible_constraint =
 5831|  17.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  17.4k|    static_assert(destructible_constraint,
 5833|  17.4k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  17.4k|    constexpr bool non_reference_constraint =
 5836|  17.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  17.4k|    static_assert(non_reference_constraint,
 5838|  17.4k|                  "Scan argument types must not be references");
 5839|       |
 5840|  17.4k|    constexpr bool movable_constraint =
 5841|  17.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  17.4k|    static_assert(movable_constraint,
 5843|  17.4k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  17.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  17.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  17.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  17.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.4k|    {
 6087|  17.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  17.4k|    {
 6095|  17.4k|        return {detail::make_arg<
 6096|  17.4k|            kind, Context,
 6097|  17.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5874|  17.4k|{
 5875|  17.4k|    return make_value<Context>(value).ref_value;
 5876|  17.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5809|  17.4k|{
 5810|  17.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.4k|                                  needs_context_tag>) {
 5814|  17.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5648|  17.4k|    {                                                                        \
 5649|  17.4k|        return val;                                                          \
 5650|  17.4k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5778|  17.4k|{
 5779|  17.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  17.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  17.4k|    constexpr bool scannable_char =
 5783|  17.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  17.4k|    static_assert(scannable_char,
 5785|  17.4k|                  "Cannot scan an argument of an unsupported character "
 5786|  17.4k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  17.4k|    constexpr bool scannable_const =
 5789|  17.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  17.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  17.4k|    constexpr bool scannable_disabled =
 5793|  17.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  17.4k|    static_assert(scannable_disabled,
 5795|  17.4k|                  "Cannot scan an argument that has been disabled by "
 5796|  17.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  17.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  17.4k|    static_assert(
 5800|  17.4k|        scannable,
 5801|  17.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  17.4k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  17.4k|    return arg_value{arg};
 5805|  17.4k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5562|  17.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  17.4k|    {
 5564|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  17.8k|    {
 1815|  17.8k|        return &value();
 1816|  17.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  17.8k|    {
 1769|  17.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.8k|        return this->get_value();
 1771|  17.8k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6353|  17.4k|    {
 6354|  17.4k|        return m_values;
 6355|  17.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.4k|    {
 6137|  17.4k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.4k|        : m_str(r.str)
 8763|  17.4k|    {
 8764|  17.4k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   462k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   462k|    {
 3742|   462k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   462k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   462k|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|  20.7k|    {
 3753|  20.7k|        return m_code;
 3754|  20.7k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  69.8k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  69.8k|    else {
 3981|  69.8k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  69.8k|    }
 3983|  69.8k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  2.42M|    {
  572|  2.42M|        return m_has_value;
  573|  2.42M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   279k|    {
  555|   279k|        return m_unexpected;
  556|   279k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   267k|    {
 1746|   267k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   267k|        return this->get_unexpected().error();
 1748|   267k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 6932|  3.45k|    {
 6933|  3.45k|        return m_size;
 6934|  3.45k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6973|  12.7k|    {
 6974|  12.7k|        SCN_GCC_COMPAT_PUSH
 6975|  12.7k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6976|  12.7k|        switch (type) {
 6977|  1.73k|            case presentation_type::none:
  ------------------
  |  Branch (6977:13): [True: 1.73k, False: 10.9k]
  ------------------
 6978|  1.73k|                return 10;
 6979|     78|            case presentation_type::int_generic:
  ------------------
  |  Branch (6979:13): [True: 78, False: 12.6k]
  ------------------
 6980|     78|                return 0;
 6981|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6981:13): [True: 0, False: 12.7k]
  ------------------
 6982|      0|                return arbitrary_base;
 6983|       |
 6984|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6984:13): [True: 38, False: 12.6k]
  ------------------
 6985|     38|                return 2;
 6986|     72|            case presentation_type::int_octal:
  ------------------
  |  Branch (6986:13): [True: 72, False: 12.6k]
  ------------------
 6987|     72|                return 8;
 6988|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6988:13): [True: 40, False: 12.6k]
  ------------------
 6989|     78|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6989:13): [True: 38, False: 12.6k]
  ------------------
 6990|     78|                return 10;
 6991|  10.7k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6991:13): [True: 10.7k, False: 1.99k]
  ------------------
 6992|  10.7k|                return 16;
 6993|       |
 6994|      0|            default:
  ------------------
  |  Branch (6994:13): [True: 0, False: 12.7k]
  ------------------
 6995|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6996|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6997|  12.7k|        }
 6998|  12.7k|        SCN_GCC_COMPAT_POP
 6999|  12.7k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  67.1k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7014|  6.94k|    {
 7015|  6.94k|        m_specs.align = align;
 7016|  6.94k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7034|  9.99k|    {
 7035|  9.99k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7035:13): [True: 0, False: 9.99k]
  |  Branch (7035:39): [True: 0, False: 0]
  ------------------
 7036|       |            // clang-format off
 7037|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7038|       |            // clang-format on
 7039|      0|        }
 7040|       |
 7041|  9.99k|        m_specs.width = width;
 7042|  9.99k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7044|  8.68k|    {
 7045|  8.68k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7045:13): [True: 68, False: 8.62k]
  ------------------
 7046|       |            // clang-format off
 7047|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7048|       |            // clang-format on
 7049|     68|        }
 7050|       |
 7051|  8.62k|        m_specs.precision = prec;
 7052|  8.62k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|  66.1k|    {
 7056|  66.1k|        m_specs.type = type;
 7057|  66.1k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7060|  1.01M|    {
 7061|  1.01M|        const auto cp_value = static_cast<unsigned>(cp);
 7062|  1.01M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  864|  1.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 868k, False: 145k]
  |  |  ------------------
  ------------------
 7063|   868k|            m_specs.charset_literals[cp_value / 8] |=
 7064|   868k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7065|   868k|        }
 7066|   145k|        else {
 7067|   145k|            m_specs.charset_has_nonascii = true;
 7068|   145k|        }
 7069|  1.01M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7072|  9.12k|    {
 7073|  9.12k|        const auto begin_value = static_cast<unsigned>(begin);
 7074|  9.12k|        const auto end_value = static_cast<unsigned>(end);
 7075|  9.12k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  9.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7076|       |
 7077|  9.12k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  9.12k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.63k, False: 4.49k]
  |  |  ------------------
  ------------------
 7078|       |            // No need to bit-twiddle with a mask, because with the
 7079|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7080|  4.63k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  4.63k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7081|   312k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7081:40): [True: 308k, False: 4.63k]
  ------------------
 7082|   308k|                m_specs.charset_literals[v / 8] |=
 7083|   308k|                    static_cast<unsigned char>(1ul << (v % 8));
 7084|   308k|            }
 7085|  4.63k|        }
 7086|  4.49k|        else {
 7087|  4.49k|            m_specs.charset_has_nonascii = true;
 7088|  4.49k|        }
 7089|  9.12k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7092|  2.94k|    {
 7093|  2.94k|        m_specs.charset_is_inverted = true;
 7094|  2.94k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7111|  37.4k|    {
 7112|  37.4k|        m_specs.regexp_flags = flags;
 7113|  37.4k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|  9.94k|    {
 7118|  9.94k|        SCN_UNLIKELY_ATTR
 7119|  9.94k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|  9.94k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  1.09M|    {
 7129|  1.09M|        return m_error;
 7130|  1.09M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   271k|{
 3918|   271k|    return unexpected(scan_error{c, m});
 3919|   271k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4168|  94.0k|{
 4169|  94.0k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  94.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4170|       |
 4171|  94.0k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  94.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  94.0k|    };
 4174|       |
 4175|  94.0k|    if (input.size() == 1) {
  ------------------
  |  Branch (4175:9): [True: 82.0k, False: 11.9k]
  ------------------
 4176|  82.0k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  930|  82.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  82.0k|        return static_cast<char32_t>(input[0]);
 4178|  82.0k|    }
 4179|       |
 4180|  11.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (4180:9): [True: 11.3k, False: 690]
  ------------------
 4181|  11.3k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4182|  11.3k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4183|       |
 4184|  11.3k|        char32_t cp{};
 4185|  11.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4186|  11.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4187|  11.3k|        return cp;
 4188|  11.3k|    }
 4189|       |
 4190|    690|    if (input.size() == 3) {
  ------------------
  |  Branch (4190:9): [True: 566, False: 124]
  ------------------
 4191|    566|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  930|    566|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    566|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4192|    566|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    566|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    566|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4193|    566|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    566|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    566|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4194|       |
 4195|    566|        char32_t cp{};
 4196|    566|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4197|    566|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4198|    566|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4199|    566|        return cp;
 4200|    566|    }
 4201|       |
 4202|    124|    if (input.size() == 4) {
  ------------------
  |  Branch (4202:9): [True: 124, False: 0]
  ------------------
 4203|    124|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4204|    124|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4205|    124|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|    124|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4207|    124|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4208|       |
 4209|    124|        char32_t cp{};
 4210|    124|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4211|    124|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4212|    124|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4213|    124|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4214|    124|        return cp;
 4215|    124|    }
 4216|       |
 4217|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4218|       |    // gcc 7 thinks we'll get here, even when we won't
 4219|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|      0|#endif
 4221|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4222|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   321M|{
 4308|       |    // Pattern_White_Space property
 4309|   321M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 746k, False: 321M]
  |  Branch (4309:27): [True: 164k, False: 582k]
  ------------------
 4310|   321M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 30.5k, False: 321M]
  ------------------
 4311|   321M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 5.55k, False: 321M]
  ------------------
 4312|   321M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 1.89k, False: 321M]
  ------------------
 4313|   321M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 3.30k, False: 321M]
  ------------------
 4314|   321M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.20k, False: 321M]
  ------------------
 4315|   321M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 102, False: 321M]
  ------------------
 4316|   321M|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6862|  53.7k|{
 6863|  53.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6864|  53.7k|                                    static_cast<unsigned>(b));
 6865|  53.7k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6867|  4.20k|{
 6868|  4.20k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6869|  4.20k|                                    static_cast<unsigned>(b));
 6870|  4.20k|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6882|  4.20k|{
 6883|  4.20k|    return a = a | b;
 6884|  4.20k|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|    910|{
 7812|    910|    switch (type) {
 7813|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 100, False: 810]
  ------------------
 7814|    100|            return arg_type_category::none;
 7815|       |
 7816|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 910]
  ------------------
 7817|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 910]
  ------------------
 7818|     90|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 90, False: 820]
  ------------------
 7819|     90|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 910]
  ------------------
 7820|     90|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 910]
  ------------------
 7821|     90|            return arg_type_category::integer;
 7822|       |
 7823|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 910]
  ------------------
 7824|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 910]
  ------------------
 7825|     90|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 90, False: 820]
  ------------------
 7826|     90|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 910]
  ------------------
 7827|     90|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 910]
  ------------------
 7828|     90|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|     90|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 90, False: 820]
  ------------------
 7831|     90|            return arg_type_category::pointer;
 7832|     90|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 90, False: 820]
  ------------------
 7833|     90|            return arg_type_category::boolean;
 7834|     48|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 48, False: 862]
  ------------------
 7835|     90|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 42, False: 868]
  ------------------
 7836|     90|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 910]
  ------------------
 7837|     90|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 910]
  ------------------
 7840|     90|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 90, False: 820]
  ------------------
 7841|     90|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 910]
  ------------------
 7842|     90|            return arg_type_category::floating;
 7843|       |
 7844|     48|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 48, False: 862]
  ------------------
 7845|    138|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 90, False: 820]
  ------------------
 7846|    180|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 42, False: 868]
  ------------------
 7847|    270|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 90, False: 820]
  ------------------
 7848|    270|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 910]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 910]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|    910|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|    910|            SCN_CLANG_POP
 7859|    910|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|    910|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  12.1k|    {
 1756|  12.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  12.1k|        return std::move(this->get_unexpected().error());
 1758|  12.1k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7897|  13.6k|{
 7898|  13.6k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.6k, False: 2.04k]
  |  |  ------------------
  ------------------
 7899|  11.6k|        return handler.on_error("Invalid type specifier for integer type");
 7900|  11.6k|    }
 7901|  2.04k|    if (specs.localized) {
  ------------------
  |  Branch (7901:9): [True: 120, False: 1.92k]
  ------------------
 7902|    120|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 112]
  |  |  ------------------
  ------------------
 7903|       |            // clang-format off
 7904|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7905|       |            // clang-format on
 7906|      8|            return;
 7907|      8|        }
 7908|    112|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 112]
  |  |  ------------------
  ------------------
 7909|       |            // clang-format off
 7910|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7911|       |            // clang-format on
 7912|      0|        }
 7913|    112|    }
 7914|  2.04k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   235k|{
 2094|   235k|    return SCN_FWD(t);
  ------------------
  |  |  936|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   235k|}
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7941|  6.84k|{
 7942|  6.84k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7942:9): [True: 5.96k, False: 888]
  ------------------
 7943|  6.84k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7943:10): [True: 132, False: 5.82k]
  ------------------
 7944|  5.96k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7944:10): [True: 5.73k, False: 98]
  ------------------
 7945|  5.86k|        SCN_UNLIKELY_ATTR
 7946|  5.86k|        return handler.on_error("Invalid type specifier for float type");
 7947|  5.86k|    }
 7948|  6.84k|}
_ZNK3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  489|  24.7k|    {
  490|  24.7k|        return m_has_value;
  491|  24.7k|    }
_ZNK3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1739|  12.3k|    {
 1740|  12.3k|        return has_value();
 1741|  12.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.3k|    {
  456|  12.3k|        return m_value;
  457|  12.3k|    }
_ZNR3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  12.3k|    {
 1769|  12.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.3k|        return this->get_value();
 1771|  12.3k|    }
_ZNO3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  12.3k|    {
 1805|  12.3k|        return std::move(value());
 1806|  12.3k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  2.14M|    {
 1740|  2.14M|        return has_value();
 1741|  2.14M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7953|  20.3k|{
 7954|  20.3k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7954:9): [True: 2.59k, False: 17.7k]
  ------------------
 7955|  20.3k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7955:9): [True: 786, False: 16.9k]
  ------------------
 7956|  20.3k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7956:9): [True: 3.73k, False: 13.2k]
  ------------------
 7957|  20.3k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7957:9): [True: 11.8k, False: 1.32k]
  ------------------
 7958|  20.3k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7958:9): [True: 558, False: 762]
  ------------------
 7959|  19.5k|        return;
 7960|  19.5k|    }
 7961|    762|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7961:9): [True: 168, False: 594]
  ------------------
 7962|    168|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 156]
  |  |  ------------------
  ------------------
 7963|       |            // clang-format off
 7964|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7965|       |            // clang-format on
 7966|     12|        }
 7967|    156|        return;
 7968|    168|    }
 7969|    594|    SCN_UNLIKELY_ATTR
 7970|    594|    handler.on_error("Invalid type specifier for string");
 7971|    594|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7987|  6.84k|{
 7988|  6.84k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7988:9): [True: 5.96k, False: 888]
  ------------------
 7989|  6.84k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7989:9): [True: 5.68k, False: 272]
  ------------------
 7990|  6.84k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7990:9): [True: 5.65k, False: 32]
  ------------------
 7991|  6.84k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7991:9): [True: 5.63k, False: 24]
  ------------------
 7992|  6.84k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7992:9): [True: 5.61k, False: 18]
  ------------------
 7993|  6.84k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7993:9): [True: 5.60k, False: 14]
  ------------------
 7994|  6.84k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7994:9): [True: 5.57k, False: 28]
  ------------------
 7995|  6.84k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7995:9): [True: 5.55k, False: 16]
  ------------------
 7996|  5.55k|        SCN_UNLIKELY_ATTR
 7997|  5.55k|        return handler.on_error("Invalid type specifier for boolean");
 7998|  5.55k|    }
 7999|  6.84k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7919|  6.77k|{
 7920|  6.77k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7920:9): [True: 5.81k, False: 960]
  ------------------
 7921|  6.77k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7921:9): [True: 0, False: 960]
  ------------------
 7922|  5.81k|        SCN_UNLIKELY_ATTR
 7923|  5.81k|        return handler.on_error("Invalid type specifier for character type");
 7924|  5.81k|    }
 7925|  6.77k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7976|  6.77k|{
 7977|  6.77k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7977:9): [True: 5.90k, False: 864]
  ------------------
 7978|  6.77k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7978:9): [True: 5.89k, False: 10]
  ------------------
 7979|  5.89k|        SCN_UNLIKELY_ATTR
 7980|  5.89k|        return handler.on_error("Invalid type specifier for pointer");
 7981|  5.89k|    }
 7982|  6.77k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   321M|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   321M|    else {
 3981|   321M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   321M|    }
 3983|   321M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.16M|    {
 3480|  1.16M|        return m_iterator;
 3481|  1.16M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.04M|    {
 3484|  1.04M|        return m_sentinel;
 3485|  1.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  2.96M|    {
 3480|  2.96M|        return m_iterator;
 3481|  2.96M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   644M|    {
 3484|   644M|        return m_sentinel;
 3485|   644M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   132k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|    174|{
 1350|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    174|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  2.21k|    {
  365|  2.21k|        return m_unexpected;
  366|  2.21k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   271k|        : m_unexpected(std::forward<Err>(e))
  350|   271k|    {
  351|   271k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   271k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   271k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   251k|        : base(unexpect, std::move(e.error())),
 1616|   251k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   251k|    {
 1618|   251k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   251k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   251k|          m_has_value(false)
  451|   251k|    {
  452|   251k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   255k|    {
 1316|   255k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  67.2k|        : base(unexpect, std::move(e.error())),
 1616|  67.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  67.2k|    {
 1618|  67.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  68.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  68.2k|          m_has_value(false)
  451|  68.2k|    {
  452|  68.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  95.5k|    {
 1316|  95.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  25.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  25.8k|    {
 1572|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  25.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  25.8k|    {
  442|  25.8k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  96.4k|    {
 1740|  96.4k|        return has_value();
 1741|  96.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   190k|    {
  490|   190k|        return m_has_value;
  491|   190k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  67.3k|    {
 1746|  67.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  67.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  67.3k|        return this->get_unexpected().error();
 1748|  67.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  67.3k|    {
  473|  67.3k|        return m_unexpected;
  474|  67.3k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  18.6k|    {
 1805|  18.6k|        return std::move(value());
 1806|  18.6k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  26.4k|    {
 1769|  26.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  26.4k|        return this->get_value();
 1771|  26.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  26.4k|    {
  456|  26.4k|        return m_value;
  457|  26.4k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   135k|        : base(unexpect, std::move(e.error())),
 1616|   135k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   135k|    {
 1618|   135k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   145k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   145k|          m_has_value(false)
  451|   145k|    {
  452|   145k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   330k|    {
 1316|   330k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   184k|        : base(std::in_place, std::forward<U>(val)),
 1570|   184k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   184k|    {
 1572|   184k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   184k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   184k|    {
  442|   184k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   339k|    {
 1740|   339k|        return has_value();
 1741|   339k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   651k|    {
  490|   651k|        return m_has_value;
  491|   651k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   135k|    {
 1746|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   135k|        return this->get_unexpected().error();
 1748|   135k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   135k|    {
  473|   135k|        return m_unexpected;
  474|   135k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   136k|    {
 1805|   136k|        return std::move(value());
 1806|   136k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   175k|    {
 1769|   175k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   175k|        return this->get_value();
 1771|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   175k|    {
  456|   175k|        return m_value;
  457|   175k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  8.35k|    {
 1979|  8.35k|        return detail::transform_error_impl(std::move(*this),
 1980|  8.35k|                                            std::forward<F>(f));
 1981|  8.35k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  8.35k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  8.35k|    else {
 1472|  8.35k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  8.35k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  8.35k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.35k, False: 0]
  |  |  ------------------
  ------------------
 1474|  8.35k|                   ? result(*std::forward<Exp>(exp))
 1475|  8.35k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  8.35k|    }
 1479|  8.35k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  74.0k|    {
  490|  74.0k|        return m_has_value;
  491|  74.0k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  10.2k|    {
 1805|  10.2k|        return std::move(value());
 1806|  10.2k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  34.0k|    {
 1769|  34.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.0k|        return this->get_value();
 1771|  34.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  34.0k|    {
  456|  34.0k|        return m_value;
  457|  34.0k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    104|    {
 1756|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    104|        return std::move(this->get_unexpected().error());
 1758|    104|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    104|    {
  473|    104|        return m_unexpected;
  474|    104|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    932|        : base(unexpect, std::forward<Args>(args)...),
 1626|    932|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    932|    {
 1628|    932|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8836|  5.79k|    {
 8837|  5.79k|        return m_args;
 8838|  5.79k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|  45.8k|    {
 8842|  45.8k|        return m_locale;
 8843|  45.8k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|  78.3k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  78.3k|    static_cast<    \
  |  |  935|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  78.3k|    static_cast<    \
  |  |  935|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  78.3k|    {
 8849|  78.3k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  6.28k|    {
 3000|  6.28k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  6.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  6.28k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  6.28k|    {
 2981|  6.28k|        return t.data();
 2982|  6.28k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8836|  82.6k|    {
 8837|  82.6k|        return m_args;
 8838|  82.6k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   104k|    {
 8842|   104k|        return m_locale;
 8843|   104k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   156k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   156k|    {
 8849|   156k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   478k|        : base(unexpect, std::move(e.error())),
 1616|   478k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   478k|    {
 1618|   478k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   478k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   478k|          m_has_value(false)
  550|   478k|    {
  551|   478k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   478k|    {
 1316|   478k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|   600k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|   600k|        : m_deferred_init(), m_has_value(true)
  529|   600k|    {
  530|   600k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 6938|  1.79k|    {
 6939|  1.79k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|  1.79k|        CharT r{};
 6941|  1.79k|        std::memcpy(&r, m_data, m_size);
 6942|  1.79k|        return r;
 6943|  1.79k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  1.13k|        : m_unexpected(std::forward<Err>(e))
  350|  1.13k|    {
  351|  1.13k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.13k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.13k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  1.31k|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.31k|    {
  360|  1.31k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.31k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6947|    788|    {
 6948|    788|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6949|    788|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3106|     52|    {
 3107|     52|        return fn::impl(std::forward<T>(t));
 3108|     52|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3097|     52|    {
 3098|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|     52|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|     52|    {
 3075|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|     52|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|     52|    {
 3041|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|     52|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|    174|        : m_unexpected(std::forward<Err>(e))
  350|    174|    {
  351|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|    174|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|      8|        : m_unexpected(std::forward<Err>(e))
  350|      8|    {
  351|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|      8|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  78.2k|    {
  365|  78.2k|        return m_unexpected;
  366|  78.2k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  12.2k|        : m_unexpected(std::forward<Args>(args)...)
  359|  12.2k|    {
  360|  12.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  12.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  12.2k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|   130k|        : m_unexpected(std::forward<Err>(e))
  350|   130k|    {
  351|   130k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   130k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   130k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|   130k|    {
  365|   130k|        return m_unexpected;
  366|   130k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|   130k|        : m_unexpected(std::forward<Args>(args)...)
  359|   130k|    {
  360|   130k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   130k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   130k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|    730|{
 1350|    730|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    730|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  11.4k|        : m_unexpected(std::forward<Err>(e))
  350|  11.4k|    {
  351|  11.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  11.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  11.4k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|  1.05k|{
 1350|  1.05k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  1.05k|}
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   207k|{
  316|   207k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   207k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   141k|    {
 3496|   141k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   141k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    432|        : base(unexpect, std::move(e.error())),
 1616|    432|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    432|    {
 1618|    432|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    432|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    432|          m_has_value(false)
  451|    432|    {
  452|    432|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  39.8k|    {
 1316|  39.8k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  39.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  39.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  39.4k|    {
 1572|  39.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  39.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  39.4k|    {
  442|  39.4k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  29.4k|    {
 1740|  29.4k|        return has_value();
 1741|  29.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  23.8k|    {
 1795|  23.8k|        return value();
 1796|  23.8k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  6.99k|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.99k|    {
 1572|  6.99k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  6.99k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.99k|    {
  442|  6.99k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.34k|    {
 1316|  7.34k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    344|        : base(unexpect, std::move(e.error())),
 1616|    344|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    344|    {
 1618|    344|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    344|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    344|          m_has_value(false)
  451|    344|    {
  452|    344|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1739|  5.01k|    {
 1740|  5.01k|        return has_value();
 1741|  5.01k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  13.2k|    {
  490|  13.2k|        return m_has_value;
  491|  13.2k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|  3.58k|    {
 1795|  3.58k|        return value();
 1796|  3.58k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  5.59k|    {
 1769|  5.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.59k|        return this->get_value();
 1771|  5.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  5.59k|    {
  456|  5.59k|        return m_value;
  457|  5.59k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    174|        : base(unexpect, std::move(e.error())),
 1616|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    174|    {
 1618|    174|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    174|          m_has_value(false)
  451|    174|    {
  452|    174|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.41k|    {
 1316|  3.41k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  3.24k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.24k|    {
 1572|  3.24k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  3.24k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.24k|    {
  442|  3.24k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    676|    {
 1979|    676|        return detail::transform_error_impl(std::move(*this),
 1980|    676|                                            std::forward<F>(f));
 1981|    676|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    676|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    676|    else {
 1472|    676|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    676|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    676|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 676, False: 0]
  |  |  ------------------
  ------------------
 1474|    676|                   ? result(*std::forward<Exp>(exp))
 1475|    676|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    676|    }
 1479|    676|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.00k|    {
 1805|  2.00k|        return std::move(value());
 1806|  2.00k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|  1.97k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.97k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.97k|    {
 1572|  1.97k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.97k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.97k|    {
  442|  1.97k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.79k|    {
 1316|  6.79k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1755|    316|    {
 1756|    316|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    316|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    316|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    316|        return std::move(this->get_unexpected().error());
 1758|    316|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    316|    {
  473|    316|        return m_unexpected;
  474|    316|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.23k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.23k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.23k|    {
 1628|  1.23k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  4.20k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.20k|          m_has_value(false)
  451|  4.20k|    {
  452|  4.20k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.49k|    {
 2869|  1.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.49k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.49k|    {
 2850|  1.49k|        return decay_copy(t.begin());
 2851|  1.49k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2093|  3.22k|{
 2094|  3.22k|    return SCN_FWD(t);
  ------------------
  |  |  936|  3.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  3.22k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3479|  1.49k|    {
 3480|  1.49k|        return m_iterator;
 3481|  1.49k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.49k|    {
 2926|  1.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.49k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.49k|    {
 2908|  1.49k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.49k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3483|  1.49k|    {
 3484|  1.49k|        return m_sentinel;
 3485|  1.49k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|  1.49k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.49k|    static_cast<    \
  |  |  935|  1.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.49k|    static_cast<    \
  |  |  935|  1.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.49k|    {
 3466|  1.49k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  3.41k|    {
 1740|  3.41k|        return has_value();
 1741|  3.41k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.83k|    {
  490|  6.83k|        return m_has_value;
  491|  6.83k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1745|    174|    {
 1746|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    174|        return this->get_unexpected().error();
 1748|    174|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    174|    {
  473|    174|        return m_unexpected;
  474|    174|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  3.24k|    {
 1805|  3.24k|        return std::move(value());
 1806|  3.24k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  3.24k|    {
 1769|  3.24k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.24k|        return this->get_value();
 1771|  3.24k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.24k|    {
  456|  3.24k|        return m_value;
  457|  3.24k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  16.9k|    {
 1316|  16.9k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  16.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  16.9k|    {
 1572|  16.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  16.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  16.9k|    {
  442|  16.9k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  16.9k|    {
 1740|  16.9k|        return has_value();
 1741|  16.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  33.8k|    {
  490|  33.8k|        return m_has_value;
  491|  33.8k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  16.9k|    {
 1805|  16.9k|        return std::move(value());
 1806|  16.9k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  16.9k|    {
 1769|  16.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  16.9k|        return this->get_value();
 1771|  16.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  16.9k|    {
  456|  16.9k|        return m_value;
  457|  16.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  2.97k|        : base(unexpect, std::move(e.error())),
 1616|  2.97k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.97k|    {
 1618|  2.97k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    564|        : base(unexpect, std::move(e.error())),
 1616|    564|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    564|    {
 1618|    564|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    880|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    880|          m_has_value(false)
  451|    880|    {
  452|    880|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.11k|    {
 1316|  6.11k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  3.90k|        : base(unexpect, std::move(e.error())),
 1616|  3.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.90k|    {
 1618|  3.90k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.90k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.90k|          m_has_value(false)
  451|  3.90k|    {
  452|  3.90k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1739|  5.62k|    {
 1740|  5.62k|        return has_value();
 1741|  5.62k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  10.9k|    {
  490|  10.9k|        return m_has_value;
  491|  10.9k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1745|  2.06k|    {
 1746|  2.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.06k|        return this->get_unexpected().error();
 1748|  2.06k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  2.80k|    {
  473|  2.80k|        return m_unexpected;
  474|  2.80k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|  1.00k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.00k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.00k|    {
 1572|  1.00k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|  1.00k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.00k|    {
  442|  1.00k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.00k|    {
 1316|  1.00k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.33k|    {
 1769|  1.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.33k|        return this->get_value();
 1771|  1.33k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|  1.33k|    {
  456|  1.33k|        return m_value;
  457|  1.33k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|    760|    {
 1740|    760|        return has_value();
 1741|    760|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  2.01k|    {
  490|  2.01k|        return m_has_value;
  491|  2.01k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    760|    {
 1316|    760|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|  1.00k|    {
 1805|  1.00k|        return std::move(value());
 1806|  1.00k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.00k|    {
 1769|  1.00k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.00k|        return this->get_value();
 1771|  1.00k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|  1.00k|    {
  456|  1.00k|        return m_value;
  457|  1.00k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  56.7k|    {
 3484|  56.7k|        return m_sentinel;
 3485|  56.7k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|  1.64k|    {
 1979|  1.64k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.64k|                                            std::forward<F>(f));
 1981|  1.64k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|  1.64k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.64k|    else {
 1472|  1.64k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.64k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.64k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.33k, False: 316]
  |  |  ------------------
  ------------------
 1474|  1.64k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.64k|                   : result(unexpect,
 1476|    316|                            trivial_invoke(std::forward<F>(f),
 1477|    316|                                           std::forward<Exp>(exp).error()));
 1478|  1.64k|    }
 1479|  1.64k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|  1.33k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.33k|    {
 1572|  1.33k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.33k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.33k|    {
  442|  1.33k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    316|        : base(unexpect, std::forward<Args>(args)...),
 1626|    316|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    316|    {
 1628|    316|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.33k|    {
 1805|  1.33k|        return std::move(value());
 1806|  1.33k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  69.2k|    {
 3480|  69.2k|        return m_iterator;
 3481|  69.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|    760|        : base(std::in_place, std::forward<U>(val)),
 1570|    760|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    760|    {
 1572|    760|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    760|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    760|    {
  442|    760|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    760|    {
 1979|    760|        return detail::transform_error_impl(std::move(*this),
 1980|    760|                                            std::forward<F>(f));
 1981|    760|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|    760|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    760|    else {
 1472|    760|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    760|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    760|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 760, False: 0]
  |  |  ------------------
  ------------------
 1474|    760|                   ? result(*std::forward<Exp>(exp))
 1475|    760|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    760|    }
 1479|    760|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.52k|    {
  490|  1.52k|        return m_has_value;
  491|  1.52k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    760|    {
 1805|    760|        return std::move(value());
 1806|    760|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    760|    {
 1769|    760|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    760|        return this->get_value();
 1771|    760|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    760|    {
  456|    760|        return m_value;
  457|    760|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|    760|        : base(std::in_place, std::forward<U>(val)),
 1570|    760|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    760|    {
 1572|    760|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    760|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    760|    {
  442|    760|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    760|    {
 1316|    760|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1739|    760|    {
 1740|    760|        return has_value();
 1741|    760|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.52k|    {
  490|  1.52k|        return m_has_value;
  491|  1.52k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    760|    {
 1805|    760|        return std::move(value());
 1806|    760|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    760|    {
 1769|    760|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    760|        return this->get_value();
 1771|    760|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    760|    {
  456|    760|        return m_value;
  457|    760|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    736|    {
 1979|    736|        return detail::transform_error_impl(std::move(*this),
 1980|    736|                                            std::forward<F>(f));
 1981|    736|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    736|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    736|    else {
 1472|    736|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    736|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    736|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 736]
  |  |  ------------------
  ------------------
 1474|    736|                   ? result(*std::forward<Exp>(exp))
 1475|    736|                   : result(unexpect,
 1476|    736|                            trivial_invoke(std::forward<F>(f),
 1477|    736|                                           std::forward<Exp>(exp).error()));
 1478|    736|    }
 1479|    736|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1755|    736|    {
 1756|    736|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    736|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    736|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    736|        return std::move(this->get_unexpected().error());
 1758|    736|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|  1.23k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.23k|    static_cast<    \
  |  |  935|  1.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.23k|    {
 3912|  1.23k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  28.0k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  28.0k|    static_cast<    \
  |  |  935|  28.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  28.0k|    static_cast<    \
  |  |  935|  28.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  28.0k|    {
 3466|  28.0k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|     24|        : m_has_value(false)
  637|     24|    {
  638|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|     24|    {
  701|     24|        scn::detail::construct_at(unexpected_ptr(),
  702|     24|                                  std::forward<Args>(args)...);
  703|     24|        m_has_value = false;
  704|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     72|    {
  730|     72|        return reinterpret_cast<unexpected<E>*>(
  731|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     24|    {
 1316|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1739|     24|    {
 1740|     24|        return has_value();
 1741|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     72|    {
  687|     72|        return m_has_value;
  688|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1745|     24|    {
 1746|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     24|        return this->get_unexpected().error();
 1748|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     24|    {
  670|     24|        return *unexpected_ptr();
  671|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  642|     24|    {
  643|     24|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 24]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     24|        else {
  647|     24|            destroy_unexpected();
  648|     24|        }
  649|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     24|    {
  712|     24|        scn::detail::destroy_at(unexpected_ptr());
  713|     24|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1739|  7.04k|    {
 1740|  7.04k|        return has_value();
 1741|  7.04k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  13.5k|    {
  490|  13.5k|        return m_has_value;
  491|  13.5k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1745|  3.96k|    {
 1746|  3.96k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.96k|        return this->get_unexpected().error();
 1748|  3.96k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.96k|    {
  473|  3.96k|        return m_unexpected;
  474|  3.96k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.97k|    {
 1805|  1.97k|        return std::move(value());
 1806|  1.97k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  2.59k|    {
 1769|  2.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.59k|        return this->get_value();
 1771|  2.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.59k|    {
  456|  2.59k|        return m_value;
  457|  2.59k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.02k|        : base(unexpect, std::move(e.error())),
 1616|  1.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.02k|    {
 1618|  1.02k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.12k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.12k|          m_has_value(false)
  451|  1.12k|    {
  452|  1.12k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.1k|    {
 1316|  14.1k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.1k|        : base(unexpect, std::move(e.error())),
 1616|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.1k|    {
 1618|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.1k|          m_has_value(false)
  451|  11.1k|    {
  452|  11.1k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  15.0k|    {
 1740|  15.0k|        return has_value();
 1741|  15.0k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  23.4k|    {
  490|  23.4k|        return m_has_value;
  491|  23.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  5.56k|    {
 1746|  5.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.56k|        return this->get_unexpected().error();
 1748|  5.56k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  5.56k|    {
  473|  5.56k|        return m_unexpected;
  474|  5.56k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  3.61k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.61k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.61k|    {
 1572|  3.61k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.61k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.61k|    {
  442|  3.61k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.61k|    {
 1316|  3.61k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.90k|    {
 1769|  1.90k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.90k|        return this->get_value();
 1771|  1.90k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.90k|    {
  456|  1.90k|        return m_value;
  457|  1.90k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.71k|    {
 1740|  2.71k|        return has_value();
 1741|  2.71k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  7.23k|    {
  490|  7.23k|        return m_has_value;
  491|  7.23k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.71k|    {
 1316|  2.71k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.61k|    {
 1805|  3.61k|        return std::move(value());
 1806|  3.61k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.61k|    {
 1769|  3.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.61k|        return this->get_value();
 1771|  3.61k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.61k|    {
  456|  3.61k|        return m_value;
  457|  3.61k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   199k|    {
 3375|   199k|        return detail::to_address(ranges::begin(derived()));
 3376|   199k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   199k|    {
 2869|   199k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   199k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   199k|    {
 2850|   199k|        return decay_copy(t.begin());
 2851|   199k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   199k|    {
 3334|   199k|        return static_cast<D&>(*this);
 3335|   199k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.90k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.90k|    {
 1572|  1.90k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.90k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.90k|    {
  442|  1.90k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.71k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.71k|    {
 1572|  2.71k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.71k|    {
  442|  2.71k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.71k|    {
 1979|  2.71k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.71k|                                            std::forward<F>(f));
 1981|  2.71k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.71k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.71k|    else {
 1472|  2.71k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.71k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.71k, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.71k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.71k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.71k|    }
 1479|  2.71k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.42k|    {
  490|  5.42k|        return m_has_value;
  491|  5.42k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.71k|    {
 1805|  2.71k|        return std::move(value());
 1806|  2.71k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.71k|    {
 1769|  2.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.71k|        return this->get_value();
 1771|  2.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.71k|    {
  456|  2.71k|        return m_value;
  457|  2.71k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.71k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.71k|    {
 1572|  2.71k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.71k|    {
  442|  2.71k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.71k|    {
 1316|  2.71k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|  2.71k|    {
 1740|  2.71k|        return has_value();
 1741|  2.71k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.42k|    {
  490|  5.42k|        return m_has_value;
  491|  5.42k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.71k|    {
 1805|  2.71k|        return std::move(value());
 1806|  2.71k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.71k|    {
 1769|  2.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.71k|        return this->get_value();
 1771|  2.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.71k|    {
  456|  2.71k|        return m_value;
  457|  2.71k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|     24|        : m_has_value(false)
  637|     24|    {
  638|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|     24|    {
  701|     24|        scn::detail::construct_at(unexpected_ptr(),
  702|     24|                                  std::forward<Args>(args)...);
  703|     24|        m_has_value = false;
  704|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     72|    {
  730|     72|        return reinterpret_cast<unexpected<E>*>(
  731|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     24|    {
 1316|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|     24|    {
 1740|     24|        return has_value();
 1741|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     72|    {
  687|     72|        return m_has_value;
  688|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|     24|    {
 1746|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     24|        return this->get_unexpected().error();
 1748|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     24|    {
  670|     24|        return *unexpected_ptr();
  671|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|     24|    {
  643|     24|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 24]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     24|        else {
  647|     24|            destroy_unexpected();
  648|     24|        }
  649|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     24|    {
  712|     24|        scn::detail::destroy_at(unexpected_ptr());
  713|     24|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   186k|    {
 3000|   186k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   186k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   186k|    {
 2981|   186k|        return t.data();
 2982|   186k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  4.30k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.30k|    {
 1572|  4.30k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  4.30k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.30k|    {
  442|  4.30k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  11.1k|{
 1350|  11.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  11.1k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    248|    {
 1979|    248|        return detail::transform_error_impl(std::move(*this),
 1980|    248|                                            std::forward<F>(f));
 1981|    248|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    248|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    248|    else {
 1472|    248|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    248|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 248, False: 0]
  |  |  ------------------
  ------------------
 1474|    248|                   ? result(*std::forward<Exp>(exp))
 1475|    248|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    248|    }
 1479|    248|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    248|        : base(std::in_place, std::forward<U>(val)),
 1570|    248|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    248|    {
 1572|    248|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    248|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    248|    {
  442|    248|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    248|    {
 1316|    248|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    248|    {
 1740|    248|        return has_value();
 1741|    248|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    496|    {
  490|    496|        return m_has_value;
  491|    496|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    248|    {
 1805|    248|        return std::move(value());
 1806|    248|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    248|    {
 1769|    248|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    248|        return this->get_value();
 1771|    248|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    248|    {
  456|    248|        return m_value;
  457|    248|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1964|    496|    {
 1965|    496|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    496|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1461|    496|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    496|    else {
 1472|    496|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    496|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    496|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 496]
  |  |  ------------------
  ------------------
 1474|    496|                   ? result(*std::forward<Exp>(exp))
 1475|    496|                   : result(unexpect,
 1476|    496|                            trivial_invoke(std::forward<F>(f),
 1477|    496|                                           std::forward<Exp>(exp).error()));
 1478|    496|    }
 1479|    496|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    612|    {
 1795|    612|        return value();
 1796|    612|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    244|    {
 2869|    244|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    244|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    244|    {
 2850|    244|        return decay_copy(t.begin());
 2851|    244|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|    226|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|    908|    {
 1979|    908|        return detail::transform_error_impl(std::move(*this),
 1980|    908|                                            std::forward<F>(f));
 1981|    908|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|    908|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    908|    else {
 1472|    908|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    908|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    908|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 908, False: 0]
  |  |  ------------------
  ------------------
 1474|    908|                   ? result(*std::forward<Exp>(exp))
 1475|    908|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    908|    }
 1479|    908|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    908|        : base(std::in_place, std::forward<U>(val)),
 1570|    908|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    908|    {
 1572|    908|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    908|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    908|    {
  442|    908|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    908|    {
 1316|    908|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    908|    {
 1740|    908|        return has_value();
 1741|    908|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.81k|    {
  490|  1.81k|        return m_has_value;
  491|  1.81k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    908|    {
 1805|    908|        return std::move(value());
 1806|    908|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    908|    {
 1769|    908|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    908|        return this->get_value();
 1771|    908|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    908|    {
  456|    908|        return m_value;
  457|    908|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|    932|    {
 1965|    932|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    932|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|    932|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    932|    else {
 1472|    932|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    932|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    932|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 932]
  |  |  ------------------
  ------------------
 1474|    932|                   ? result(*std::forward<Exp>(exp))
 1475|    932|                   : result(unexpect,
 1476|    932|                            trivial_invoke(std::forward<F>(f),
 1477|    932|                                           std::forward<Exp>(exp).error()));
 1478|    932|    }
 1479|    932|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|    932|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    932|    static_cast<    \
  |  |  935|    932|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    932|    {
 3912|    932|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  7.83k|    {
 1795|  7.83k|        return value();
 1796|  7.83k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|  2.56k|{
 7445|  2.56k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  2.56k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  2.56k|    auto start = begin;
 7449|  2.56k|    ++begin;
 7450|       |
 7451|  2.56k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.56k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  2.56k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 366, False: 2.19k]
  ------------------
 7458|    366|        handler.on_charset_inverted();
 7459|    366|        ++begin;
 7460|    366|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 366]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|    366|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 6, False: 360]
  ------------------
 7467|      6|            handler.on_charset_single(char32_t{']'});
 7468|      6|            ++begin;
 7469|      6|        }
 7470|    366|    }
 7471|  2.19k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 2.19k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|   337k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 337k, False: 0]
  ------------------
 7476|   337k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 337k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|   337k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 2.56k, False: 334k]
  ------------------
 7481|  2.56k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  2.56k|        }
 7483|       |
 7484|   334k|        parse_presentation_set_literal(begin, end, handler);
 7485|   334k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  2.56k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|   334k|{
 7409|   334k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|   334k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|   334k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|   334k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 334k, False: 0]
  |  Branch (7416:25): [True: 2.40k, False: 332k]
  |  Branch (7416:49): [True: 2.40k, False: 0]
  ------------------
 7417|   334k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 2.34k, False: 66]
  ------------------
 7418|  2.34k|        ++begin;
 7419|       |
 7420|  2.34k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  2.34k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.34k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  2.34k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.34k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  2.34k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  2.34k|        return;
 7434|  2.34k|    }
 7435|       |
 7436|   332k|    handler.on_charset_single(cp_first);
 7437|   332k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|   336k|{
 7385|   336k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|   336k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|   336k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 336k]
  |  |  |  Branch (865:45): [True: 0, False: 336k]
  |  |  |  Branch (865:45): [True: 0, False: 336k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|   336k|    const auto cp =
 7394|   336k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|   336k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 336k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|   336k|    begin += len;
 7401|   336k|    return cp;
 7402|   336k|}
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1569|  12.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  12.3k|    {
 1572|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  440|  12.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  12.3k|    {
  442|  12.3k|    }
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|  10.2k|    {
 7004|  10.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|  10.2k|                charset_string_size};
 7006|  10.2k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    612|        : base(std::in_place, std::forward<U>(val)),
 1570|    612|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    612|    {
 1572|    612|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    612|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    612|    {
  442|    612|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.47k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.47k|    {
 1572|  1.47k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.47k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.47k|    {
  442|  1.47k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4293|  94.0k|{
 4294|  94.0k|    if constexpr (sizeof(CharT) == 1) {
 4295|  94.0k|        return decode_utf8_code_point_exhaustive_valid(input);
 4296|       |    }
 4297|       |    else if constexpr (sizeof(CharT) == 2) {
 4298|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4299|       |    }
 4300|       |    else {
 4301|       |        SCN_EXPECT(input.size() == 1);
 4302|       |        return static_cast<char32_t>(input.front());
 4303|       |    }
 4304|  94.0k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4171|  12.8k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  12.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  12.8k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 6938|    872|    {
 6939|    872|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|    872|        CharT r{};
 6941|    872|        std::memcpy(&r, m_data, m_size);
 6942|    872|        return r;
 6943|    872|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   321M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   321M|    else {
 4075|       |        // utf-32
 4076|   321M|        static_assert(sizeof(U) == 4);
 4077|   321M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   321M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   321M|        return 1;
 4079|   321M|    }
 4080|   321M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   321M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   321M|    else {
 4281|   321M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   321M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   321M|        auto cp = static_cast<char32_t>(input.front());
 4283|   321M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   321M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.2k, False: 321M]
  |  |  ------------------
  ------------------
 4284|  57.2k|            return invalid_code_point;
 4285|  57.2k|        }
 4286|   321M|        return cp;
 4287|   321M|    }
 4288|   321M|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   151k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   151k|    else {
 3966|   151k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   151k|                                       to_address(first), to_address(last)))};
 3968|   151k|    }
 3969|   151k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   694k|{
  316|   694k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   694k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   694k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.08M|{
  294|  1.08M|    return p;
  295|  1.08M|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  7.14k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  7.14k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  7.14k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  7.14k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  7.14k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  7.14k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   392k|{
  316|   392k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   392k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   287k|    {
 3496|   287k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   287k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    140|        : base(unexpect, std::move(e.error())),
 1616|    140|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    140|    {
 1618|    140|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    140|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    140|          m_has_value(false)
  451|    140|    {
  452|    140|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   208k|    {
 1316|   208k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   208k|        : base(std::in_place, std::forward<U>(val)),
 1570|   208k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   208k|    {
 1572|   208k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   208k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   208k|    {
  442|   208k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|  57.0k|    {
 1740|  57.0k|        return has_value();
 1741|  57.0k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   360k|    {
  490|   360k|        return m_has_value;
  491|   360k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   151k|    {
 1769|   151k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   151k|        return this->get_value();
 1771|   151k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   151k|    {
  456|   151k|        return m_value;
  457|   151k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  1.61k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.61k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.61k|    {
 1572|  1.61k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.61k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.61k|    {
  442|  1.61k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.78k|    {
 1316|  1.78k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    170|        : base(unexpect, std::move(e.error())),
 1616|    170|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    170|    {
 1618|    170|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    170|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    170|          m_has_value(false)
  451|    170|    {
  452|    170|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1739|    756|    {
 1740|    756|        return has_value();
 1741|    756|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  2.81k|    {
  490|  2.81k|        return m_has_value;
  491|  2.81k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    858|    {
 1769|    858|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    858|        return this->get_value();
 1771|    858|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|    858|    {
  456|    858|        return m_value;
  457|    858|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.36k|    {
 1316|  1.36k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.36k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.36k|    {
 1572|  1.36k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  1.36k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.36k|    {
  442|  1.36k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    288|    {
 1979|    288|        return detail::transform_error_impl(std::move(*this),
 1980|    288|                                            std::forward<F>(f));
 1981|    288|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    288|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    288|    else {
 1472|    288|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    288|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    288|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 288, False: 0]
  |  |  ------------------
  ------------------
 1474|    288|                   ? result(*std::forward<Exp>(exp))
 1475|    288|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    288|    }
 1479|    288|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    858|    {
 1805|    858|        return std::move(value());
 1806|    858|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|    818|        : base(std::in_place, std::forward<U>(val)),
 1570|    818|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    818|    {
 1572|    818|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    818|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    818|    {
  442|    818|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.84k|    {
 1316|  2.84k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1755|    170|    {
 1756|    170|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    170|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    170|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    170|        return std::move(this->get_unexpected().error());
 1758|    170|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    170|    {
  473|    170|        return m_unexpected;
  474|    170|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    536|        : base(unexpect, std::forward<Args>(args)...),
 1626|    536|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    536|    {
 1628|    536|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.82k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.82k|          m_has_value(false)
  451|  1.82k|    {
  452|  1.82k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    398|    {
 2869|    398|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    398|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    398|    {
 2850|    398|        return decay_copy(t.begin());
 2851|    398|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2093|    898|{
 2094|    898|    return SCN_FWD(t);
  ------------------
  |  |  936|    898|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|    898|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3479|    398|    {
 3480|    398|        return m_iterator;
 3481|    398|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|    398|    {
 2926|    398|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|    398|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|    398|    {
 2908|    398|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|    398|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3483|    398|    {
 3484|    398|        return m_sentinel;
 3485|    398|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|    398|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    398|    static_cast<    \
  |  |  935|    398|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    398|    static_cast<    \
  |  |  935|    398|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|    398|    {
 3466|    398|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  1.36k|    {
 1740|  1.36k|        return has_value();
 1741|  1.36k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.73k|    {
  490|  2.73k|        return m_has_value;
  491|  2.73k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.36k|    {
 1805|  1.36k|        return std::move(value());
 1806|  1.36k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.36k|    {
 1769|  1.36k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.36k|        return this->get_value();
 1771|  1.36k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.36k|    {
  456|  1.36k|        return m_value;
  457|  1.36k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.0k|    {
 1316|  10.0k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  10.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  10.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  10.0k|    {
 1572|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  10.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.0k|    {
  442|  10.0k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  94.7k|    {
 1979|  94.7k|        return detail::transform_error_impl(std::move(*this),
 1980|  94.7k|                                            std::forward<F>(f));
 1981|  94.7k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  94.7k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  94.7k|    else {
 1472|  94.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  94.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  94.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 94.7k, False: 0]
  |  |  ------------------
  ------------------
 1474|  94.7k|                   ? result(*std::forward<Exp>(exp))
 1475|  94.7k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  94.7k|    }
 1479|  94.7k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   151k|    {
 1805|   151k|        return std::move(value());
 1806|   151k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    140|    {
 1756|    140|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    140|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    140|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    140|        return std::move(this->get_unexpected().error());
 1758|    140|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    140|    {
  473|    140|        return m_unexpected;
  474|    140|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  9.49k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  9.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  9.49k|    {
 1628|  9.49k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  10.0k|    {
 1740|  10.0k|        return has_value();
 1741|  10.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  20.1k|    {
  490|  20.1k|        return m_has_value;
  491|  20.1k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  10.0k|    {
 1805|  10.0k|        return std::move(value());
 1806|  10.0k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  10.0k|    {
 1769|  10.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.0k|        return this->get_value();
 1771|  10.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.0k|    {
  456|  10.0k|        return m_value;
  457|  10.0k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.28k|        : base(unexpect, std::move(e.error())),
 1616|  1.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.28k|    {
 1618|  1.28k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    278|        : base(unexpect, std::move(e.error())),
 1616|    278|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    278|    {
 1618|    278|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    448|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    448|          m_has_value(false)
  451|    448|    {
  452|    448|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.81k|    {
 1316|  2.81k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  1.79k|        : base(unexpect, std::move(e.error())),
 1616|  1.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.79k|    {
 1618|  1.79k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  1.79k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.79k|          m_has_value(false)
  451|  1.79k|    {
  452|  1.79k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1739|  2.60k|    {
 1740|  2.60k|        return has_value();
 1741|  2.60k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  4.98k|    {
  490|  4.98k|        return m_has_value;
  491|  4.98k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1745|    958|    {
 1746|    958|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    958|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    958|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    958|        return this->get_unexpected().error();
 1748|    958|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  1.27k|    {
  473|  1.27k|        return m_unexpected;
  474|  1.27k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|    464|        : base(std::in_place, std::forward<U>(val)),
 1570|    464|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    464|    {
 1572|    464|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    464|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    464|    {
  442|    464|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    464|    {
 1316|    464|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    570|    {
 1769|    570|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    570|        return this->get_value();
 1771|    570|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|    570|    {
  456|    570|        return m_value;
  457|    570|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|    356|    {
 1740|    356|        return has_value();
 1741|    356|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|    928|    {
  490|    928|        return m_has_value;
  491|    928|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    356|    {
 1316|    356|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    464|    {
 1805|    464|        return std::move(value());
 1806|    464|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    464|    {
 1769|    464|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    464|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    464|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    464|        return this->get_value();
 1771|    464|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|    464|    {
  456|    464|        return m_value;
  457|    464|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  17.1k|    {
 3484|  17.1k|        return m_sentinel;
 3485|  17.1k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    740|    {
 1979|    740|        return detail::transform_error_impl(std::move(*this),
 1980|    740|                                            std::forward<F>(f));
 1981|    740|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    740|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    740|    else {
 1472|    740|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    740|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    740|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 570, False: 170]
  |  |  ------------------
  ------------------
 1474|    740|                   ? result(*std::forward<Exp>(exp))
 1475|    740|                   : result(unexpect,
 1476|    170|                            trivial_invoke(std::forward<F>(f),
 1477|    170|                                           std::forward<Exp>(exp).error()));
 1478|    740|    }
 1479|    740|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|    570|        : base(std::in_place, std::forward<U>(val)),
 1570|    570|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    570|    {
 1572|    570|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    570|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    570|    {
  442|    570|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    170|        : base(unexpect, std::forward<Args>(args)...),
 1626|    170|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    170|    {
 1628|    170|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    570|    {
 1805|    570|        return std::move(value());
 1806|    570|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  20.4k|    {
 3480|  20.4k|        return m_iterator;
 3481|  20.4k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|    356|        : base(std::in_place, std::forward<U>(val)),
 1570|    356|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    356|    {
 1572|    356|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    356|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    356|    {
  442|    356|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    356|    {
 1979|    356|        return detail::transform_error_impl(std::move(*this),
 1980|    356|                                            std::forward<F>(f));
 1981|    356|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|    356|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    356|    else {
 1472|    356|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    356|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    356|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 356, False: 0]
  |  |  ------------------
  ------------------
 1474|    356|                   ? result(*std::forward<Exp>(exp))
 1475|    356|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    356|    }
 1479|    356|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|    712|    {
  490|    712|        return m_has_value;
  491|    712|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    356|    {
 1805|    356|        return std::move(value());
 1806|    356|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    356|    {
 1769|    356|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    356|        return this->get_value();
 1771|    356|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    356|    {
  456|    356|        return m_value;
  457|    356|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|    356|        : base(std::in_place, std::forward<U>(val)),
 1570|    356|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    356|    {
 1572|    356|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    356|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    356|    {
  442|    356|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    356|    {
 1316|    356|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1739|    356|    {
 1740|    356|        return has_value();
 1741|    356|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    712|    {
  490|    712|        return m_has_value;
  491|    712|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    356|    {
 1805|    356|        return std::move(value());
 1806|    356|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    356|    {
 1769|    356|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    356|        return this->get_value();
 1771|    356|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    356|    {
  456|    356|        return m_value;
  457|    356|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    320|    {
 1979|    320|        return detail::transform_error_impl(std::move(*this),
 1980|    320|                                            std::forward<F>(f));
 1981|    320|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1461|    320|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    320|    else {
 1472|    320|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    320|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    320|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 320]
  |  |  ------------------
  ------------------
 1474|    320|                   ? result(*std::forward<Exp>(exp))
 1475|    320|                   : result(unexpect,
 1476|    320|                            trivial_invoke(std::forward<F>(f),
 1477|    320|                                           std::forward<Exp>(exp).error()));
 1478|    320|    }
 1479|    320|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1755|    320|    {
 1756|    320|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    320|        return std::move(this->get_unexpected().error());
 1758|    320|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|    536|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    536|    static_cast<    \
  |  |  935|    536|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    536|    {
 3912|    536|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  7.04k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  7.04k|    static_cast<    \
  |  |  935|  7.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  7.04k|    static_cast<    \
  |  |  935|  7.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  7.04k|    {
 3466|  7.04k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1615|     36|        : base(unexpect, std::move(e.error())),
 1616|     36|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     36|    {
 1618|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  636|     36|        : m_has_value(false)
  637|     36|    {
  638|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  700|     36|    {
  701|     36|        scn::detail::construct_at(unexpected_ptr(),
  702|     36|                                  std::forward<Args>(args)...);
  703|     36|        m_has_value = false;
  704|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|    108|    {
  730|    108|        return reinterpret_cast<unexpected<E>*>(
  731|    108|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|    108|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     36|    {
 1316|     36|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     36|    {
 1740|     36|        return has_value();
 1741|     36|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|    108|    {
  687|    108|        return m_has_value;
  688|    108|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     36|    {
 1746|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     36|        return this->get_unexpected().error();
 1748|     36|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     36|    {
  670|     36|        return *unexpected_ptr();
  671|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     36|    {
  643|     36|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 36]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     36|        else {
  647|     36|            destroy_unexpected();
  648|     36|        }
  649|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     36|    {
  712|     36|        scn::detail::destroy_at(unexpected_ptr());
  713|     36|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1739|  2.95k|    {
 1740|  2.95k|        return has_value();
 1741|  2.95k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.68k|    {
  490|  5.68k|        return m_has_value;
  491|  5.68k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1745|  1.71k|    {
 1746|  1.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.71k|        return this->get_unexpected().error();
 1748|  1.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.71k|    {
  473|  1.71k|        return m_unexpected;
  474|  1.71k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    818|    {
 1805|    818|        return std::move(value());
 1806|    818|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.02k|    {
 1769|  1.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.02k|        return this->get_value();
 1771|  1.02k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.02k|    {
  456|  1.02k|        return m_value;
  457|  1.02k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  9.63k|        : base(unexpect, std::move(e.error())),
 1616|  9.63k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.63k|    {
 1618|  9.63k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  9.77k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.77k|          m_has_value(false)
  451|  9.77k|    {
  452|  9.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   180k|    {
 1316|   180k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   113k|        : base(unexpect, std::move(e.error())),
 1616|   113k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   113k|    {
 1618|   113k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   113k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   113k|          m_has_value(false)
  451|   113k|    {
  452|   113k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|   190k|    {
 1740|   190k|        return has_value();
 1741|   190k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   313k|    {
  490|   313k|        return m_has_value;
  491|   313k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  57.1k|    {
 1746|  57.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  57.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  57.1k|        return this->get_unexpected().error();
 1748|  57.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  57.1k|    {
  473|  57.1k|        return m_unexpected;
  474|  57.1k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  37.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  37.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  37.9k|    {
 1572|  37.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  37.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  37.9k|    {
  442|  37.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  37.9k|    {
 1316|  37.9k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  56.9k|    {
 1769|  56.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  56.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  56.9k|        return this->get_value();
 1771|  56.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  56.9k|    {
  456|  56.9k|        return m_value;
  457|  56.9k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  28.4k|    {
 1740|  28.4k|        return has_value();
 1741|  28.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  75.9k|    {
  490|  75.9k|        return m_has_value;
  491|  75.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.4k|    {
 1316|  28.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  37.9k|    {
 1805|  37.9k|        return std::move(value());
 1806|  37.9k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  37.9k|    {
 1769|  37.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  37.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  37.9k|        return this->get_value();
 1771|  37.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  37.9k|    {
  456|  37.9k|        return m_value;
  457|  37.9k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  57.0k|    {
 1979|  57.0k|        return detail::transform_error_impl(std::move(*this),
 1980|  57.0k|                                            std::forward<F>(f));
 1981|  57.0k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  57.0k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  57.0k|    else {
 1472|  57.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  57.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  57.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 56.9k, False: 140]
  |  |  ------------------
  ------------------
 1474|  57.0k|                   ? result(*std::forward<Exp>(exp))
 1475|  57.0k|                   : result(unexpect,
 1476|    140|                            trivial_invoke(std::forward<F>(f),
 1477|    140|                                           std::forward<Exp>(exp).error()));
 1478|  57.0k|    }
 1479|  57.0k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  56.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  56.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  56.9k|    {
 1572|  56.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  56.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  56.9k|    {
  442|  56.9k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    140|        : base(unexpect, std::forward<Args>(args)...),
 1626|    140|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    140|    {
 1628|    140|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  56.9k|    {
 1805|  56.9k|        return std::move(value());
 1806|  56.9k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  28.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  28.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  28.4k|    {
 1572|  28.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  28.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  28.4k|    {
  442|  28.4k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  28.4k|    {
 1979|  28.4k|        return detail::transform_error_impl(std::move(*this),
 1980|  28.4k|                                            std::forward<F>(f));
 1981|  28.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  28.4k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  28.4k|    else {
 1472|  28.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  28.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 28.4k, False: 0]
  |  |  ------------------
  ------------------
 1474|  28.4k|                   ? result(*std::forward<Exp>(exp))
 1475|  28.4k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  28.4k|    }
 1479|  28.4k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|  56.9k|    {
  490|  56.9k|        return m_has_value;
  491|  56.9k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  28.4k|    {
 1805|  28.4k|        return std::move(value());
 1806|  28.4k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  28.4k|    {
 1769|  28.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  28.4k|        return this->get_value();
 1771|  28.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|  28.4k|    {
  456|  28.4k|        return m_value;
  457|  28.4k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  28.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  28.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  28.4k|    {
 1572|  28.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  28.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  28.4k|    {
  442|  28.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.4k|    {
 1316|  28.4k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|  28.4k|    {
 1740|  28.4k|        return has_value();
 1741|  28.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|  56.9k|    {
  490|  56.9k|        return m_has_value;
  491|  56.9k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  28.4k|    {
 1805|  28.4k|        return std::move(value());
 1806|  28.4k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  28.4k|    {
 1769|  28.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  28.4k|        return this->get_value();
 1771|  28.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|  28.4k|    {
  456|  28.4k|        return m_value;
  457|  28.4k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|     28|        : base(unexpect, std::move(e.error())),
 1616|     28|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     28|    {
 1618|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|     28|        : m_has_value(false)
  637|     28|    {
  638|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|     28|    {
  701|     28|        scn::detail::construct_at(unexpected_ptr(),
  702|     28|                                  std::forward<Args>(args)...);
  703|     28|        m_has_value = false;
  704|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     84|    {
  730|     84|        return reinterpret_cast<unexpected<E>*>(
  731|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     84|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     28|    {
 1316|     28|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     28|    {
 1740|     28|        return has_value();
 1741|     28|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|     84|    {
  687|     84|        return m_has_value;
  688|     84|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     28|    {
 1746|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     28|        return this->get_unexpected().error();
 1748|     28|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     28|    {
  670|     28|        return *unexpected_ptr();
  671|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     28|    {
  643|     28|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 28]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     28|        else {
  647|     28|            destroy_unexpected();
  648|     28|        }
  649|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     28|    {
  712|     28|        scn::detail::destroy_at(unexpected_ptr());
  713|     28|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   384k|    {
 3000|   384k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   384k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   384k|    {
 2981|   384k|        return t.data();
 2982|   384k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   391k|    {
 3375|   391k|        return detail::to_address(ranges::begin(derived()));
 3376|   391k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   391k|    {
 2869|   391k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   391k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   391k|    {
 2850|   391k|        return decay_copy(t.begin());
 2851|   391k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   391k|    {
 3334|   391k|        return static_cast<D&>(*this);
 3335|   391k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    108|    {
 1979|    108|        return detail::transform_error_impl(std::move(*this),
 1980|    108|                                            std::forward<F>(f));
 1981|    108|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    108|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    108|    else {
 1472|    108|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    108|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    108|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 108, False: 0]
  |  |  ------------------
  ------------------
 1474|    108|                   ? result(*std::forward<Exp>(exp))
 1475|    108|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    108|    }
 1479|    108|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    108|        : base(std::in_place, std::forward<U>(val)),
 1570|    108|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    108|    {
 1572|    108|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    108|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    108|    {
  442|    108|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    108|    {
 1316|    108|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    108|    {
 1740|    108|        return has_value();
 1741|    108|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    216|    {
  490|    216|        return m_has_value;
  491|    216|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    108|    {
 1805|    108|        return std::move(value());
 1806|    108|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    108|    {
 1769|    108|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    108|        return this->get_value();
 1771|    108|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    108|    {
  456|    108|        return m_value;
  457|    108|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1964|    216|    {
 1965|    216|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    216|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1461|    216|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    216|    else {
 1472|    216|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    216|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    216|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 1474|    216|                   ? result(*std::forward<Exp>(exp))
 1475|    216|                   : result(unexpect,
 1476|    216|                            trivial_invoke(std::forward<F>(f),
 1477|    216|                                           std::forward<Exp>(exp).error()));
 1478|    216|    }
 1479|    216|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    204|    {
 1795|    204|        return value();
 1796|    204|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    102|    {
 2869|    102|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    102|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    102|    {
 2850|    102|        return decay_copy(t.begin());
 2851|    102|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|     94|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|  9.49k|    {
 1979|  9.49k|        return detail::transform_error_impl(std::move(*this),
 1980|  9.49k|                                            std::forward<F>(f));
 1981|  9.49k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|  9.49k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  9.49k|    else {
 1472|  9.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  9.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  9.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 9.49k, False: 0]
  |  |  ------------------
  ------------------
 1474|  9.49k|                   ? result(*std::forward<Exp>(exp))
 1475|  9.49k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  9.49k|    }
 1479|  9.49k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  9.49k|        : base(std::in_place, std::forward<U>(val)),
 1570|  9.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  9.49k|    {
 1572|  9.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  9.49k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  9.49k|    {
  442|  9.49k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.49k|    {
 1316|  9.49k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  9.49k|    {
 1740|  9.49k|        return has_value();
 1741|  9.49k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.9k|    {
  490|  18.9k|        return m_has_value;
  491|  18.9k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  9.49k|    {
 1805|  9.49k|        return std::move(value());
 1806|  9.49k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  9.49k|    {
 1769|  9.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.49k|        return this->get_value();
 1771|  9.49k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  9.49k|    {
  456|  9.49k|        return m_value;
  457|  9.49k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|  9.49k|    {
 1965|  9.49k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  9.49k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|  9.49k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  9.49k|    else {
 1472|  9.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  9.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  9.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 9.49k]
  |  |  ------------------
  ------------------
 1474|  9.49k|                   ? result(*std::forward<Exp>(exp))
 1475|  9.49k|                   : result(unexpect,
 1476|  9.49k|                            trivial_invoke(std::forward<F>(f),
 1477|  9.49k|                                           std::forward<Exp>(exp).error()));
 1478|  9.49k|    }
 1479|  9.49k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  9.49k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  9.49k|    static_cast<    \
  |  |  935|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  9.49k|    {
 3912|  9.49k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  38.6k|    {
 1795|  38.6k|        return value();
 1796|  38.6k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|    432|{
 7445|    432|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    432|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|    432|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|    432|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|    432|    auto start = begin;
 7449|    432|    ++begin;
 7450|       |
 7451|    432|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|    432|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 216, False: 216]
  ------------------
 7458|    216|        handler.on_charset_inverted();
 7459|    216|        ++begin;
 7460|    216|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|    216|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 6, False: 210]
  ------------------
 7467|      6|            handler.on_charset_single(char32_t{']'});
 7468|      6|            ++begin;
 7469|      6|        }
 7470|    216|    }
 7471|    216|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 216]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  3.89k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 3.89k, False: 0]
  ------------------
 7476|  3.89k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.89k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  3.89k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 432, False: 3.46k]
  ------------------
 7481|    432|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|    432|        }
 7483|       |
 7484|  3.46k|        parse_presentation_set_literal(begin, end, handler);
 7485|  3.46k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|    432|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|  3.46k|{
 7409|  3.46k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  3.46k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  3.46k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.46k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  3.46k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 3.46k, False: 0]
  |  Branch (7416:25): [True: 246, False: 3.21k]
  |  Branch (7416:49): [True: 246, False: 0]
  ------------------
 7417|  3.46k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 240, False: 6]
  ------------------
 7418|    240|        ++begin;
 7419|       |
 7420|    240|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|    240|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|    240|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|    240|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|    240|        return;
 7434|    240|    }
 7435|       |
 7436|  3.22k|    handler.on_charset_single(cp_first);
 7437|  3.22k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|  3.70k|{
 7385|  3.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  3.70k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  3.70k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.70k]
  |  |  |  Branch (865:45): [True: 0, False: 3.70k]
  |  |  |  Branch (865:45): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  3.70k|    const auto cp =
 7394|  3.70k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  3.70k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  3.70k|    begin += len;
 7401|  3.70k|    return cp;
 7402|  3.70k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|  5.19k|    {
 7004|  5.19k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|  5.19k|                charset_string_size};
 7006|  5.19k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    204|        : base(std::in_place, std::forward<U>(val)),
 1570|    204|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    204|    {
 1572|    204|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    204|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    204|    {
  442|    204|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    342|        : base(std::in_place, std::forward<U>(val)),
 1570|    342|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    342|    {
 1572|    342|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    342|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    342|    {
  442|    342|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|  78.3k|    {
 6177|  78.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.3k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  78.3k|        return static_cast<std::size_t>(m_desc &
 6182|  78.3k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  78.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|   127k|    {
 6203|   127k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   127k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|  49.0k|    {
 6145|  49.0k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 49.0k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  49.0k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 48.9k]
  |  |  ------------------
  ------------------
 6153|     68|            return {};
 6154|     68|        }
 6155|       |
 6156|  48.9k|        const auto t = type(id);
 6157|  48.9k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.31k, False: 47.6k]
  |  |  ------------------
  ------------------
 6158|  1.31k|            return {};
 6159|  1.31k|        }
 6160|       |
 6161|  47.6k|        basic_scan_arg<Context> arg;
 6162|  47.6k|        arg.m_type = t;
 6163|  47.6k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 47.6k, False: 0]
  ------------------
 6164|  47.6k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  47.6k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  47.6k|        return arg;
 6170|  48.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|  49.0k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|   155k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|  48.9k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  48.9k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  48.9k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  48.9k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  48.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|  47.6k|    {
 6207|  47.6k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  47.6k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  94.6k|    {
 5961|  94.6k|        return m_type != detail::arg_type::none_type;
 5962|  94.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  5.67k|{
 9300|  5.67k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  5.67k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  5.67k|{
 9201|  5.67k|#define SCN_VISIT(Type)                                                \
 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  5.67k|    }                                                                  \
 9205|  5.67k|    else {                                                             \
 9206|  5.67k|        return vis(monostate_val);                                     \
 9207|  5.67k|    }
 9208|       |
 9209|  5.67k|    monostate monostate_val{};
 9210|       |
 9211|  5.67k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 5.67k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 5.67k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|    630|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 630, False: 5.04k]
  ------------------
 9217|    630|            SCN_VISIT(int);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9218|    630|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 5.67k]
  ------------------
 9219|    630|            SCN_VISIT(long);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9220|    630|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 5.67k]
  ------------------
 9221|    630|            SCN_VISIT(long long);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9222|    630|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 5.67k]
  ------------------
 9223|    630|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9224|    630|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 5.67k]
  ------------------
 9225|    630|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9226|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 630, False: 5.04k]
  ------------------
 9227|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9228|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 5.67k]
  ------------------
 9229|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9230|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 5.67k]
  ------------------
 9231|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9232|  1.89k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 630, False: 5.04k]
  ------------------
 9233|  1.89k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  1.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.89k|    }                                                                  \
  |  | 9205|  1.89k|    else {                                                             \
  |  | 9206|  1.89k|        return vis(monostate_val);                                     \
  |  | 9207|  1.89k|    }
  ------------------
 9234|  2.52k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 630, False: 5.04k]
  ------------------
 9235|  2.52k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.52k|    }                                                                  \
  |  | 9205|  2.52k|    else {                                                             \
  |  | 9206|  2.52k|        return vis(monostate_val);                                     \
  |  | 9207|  2.52k|    }
  ------------------
 9236|  3.15k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 630, False: 5.04k]
  ------------------
 9237|  3.15k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9238|  3.15k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 5.67k]
  ------------------
 9239|  3.15k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9240|  3.15k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 5.67k]
  ------------------
 9241|  3.15k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9242|  3.15k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 5.67k]
  ------------------
 9243|  3.15k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9244|  3.78k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 630, False: 5.04k]
  ------------------
 9245|  3.78k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  3.78k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.78k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.78k|    }                                                                  \
  |  | 9205|  3.78k|    else {                                                             \
  |  | 9206|  3.78k|        return vis(monostate_val);                                     \
  |  | 9207|  3.78k|    }
  ------------------
 9246|  3.78k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 5.67k]
  ------------------
 9247|  3.78k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  3.78k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.78k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.78k|    }                                                                  \
  |  | 9205|  3.78k|    else {                                                             \
  |  | 9206|  3.78k|        return vis(monostate_val);                                     \
  |  | 9207|  3.78k|    }
  ------------------
 9248|  4.41k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 630, False: 5.04k]
  ------------------
 9249|  4.41k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  4.41k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.41k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.41k|    }                                                                  \
  |  | 9205|  4.41k|    else {                                                             \
  |  | 9206|  4.41k|        return vis(monostate_val);                                     \
  |  | 9207|  4.41k|    }
  ------------------
 9250|  5.04k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 630, False: 5.04k]
  ------------------
 9251|  5.04k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  5.04k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.04k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.04k|    }                                                                  \
  |  | 9205|  5.04k|    else {                                                             \
  |  | 9206|  5.04k|        return vis(monostate_val);                                     \
  |  | 9207|  5.04k|    }
  ------------------
 9252|  5.04k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 5.67k]
  ------------------
 9253|  5.04k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  5.04k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.04k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.04k|    }                                                                  \
  |  | 9205|  5.04k|    else {                                                             \
  |  | 9206|  5.04k|        return vis(monostate_val);                                     \
  |  | 9207|  5.04k|    }
  ------------------
 9254|  5.67k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 630, False: 5.04k]
  ------------------
 9255|  5.67k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.67k|    }                                                                  \
  |  | 9205|  5.67k|    else {                                                             \
  |  | 9206|  5.67k|        return vis(monostate_val);                                     \
  |  | 9207|  5.67k|    }
  ------------------
 9256|  5.67k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 5.67k]
  ------------------
 9257|  5.67k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.67k|    }                                                                  \
  |  | 9205|  5.67k|    else {                                                             \
  |  | 9206|  5.67k|        return vis(monostate_val);                                     \
  |  | 9207|  5.67k|    }
  ------------------
 9258|  5.67k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 5.67k]
  ------------------
 9259|  5.67k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.67k|    }                                                                  \
  |  | 9205|  5.67k|    else {                                                             \
  |  | 9206|  5.67k|        return vis(monostate_val);                                     \
  |  | 9207|  5.67k|    }
  ------------------
 9260|       |
 9261|  5.67k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 5.67k]
  ------------------
 9262|  5.67k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  5.67k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  5.67k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 5.67k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 5.67k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  5.67k|            SCN_CLANG_POP
 9279|  5.67k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   132k|{
 6006|   132k|    return arg.m_type;
 6007|   132k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  45.6k|{
 6018|  45.6k|    return arg.m_value;
 6019|  45.6k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  2.00k|    {
 1979|  2.00k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.00k|                                            std::forward<F>(f));
 1981|  2.00k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  2.00k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.00k|    else {
 1472|  2.00k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.00k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.90k, False: 104]
  |  |  ------------------
  ------------------
 1474|  2.00k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.00k|                   : result(unexpect,
 1476|    104|                            trivial_invoke(std::forward<F>(f),
 1477|    104|                                           std::forward<Exp>(exp).error()));
 1478|  2.00k|    }
 1479|  2.00k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    104|        : base(unexpect, std::forward<Args>(args)...),
 1626|    104|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    104|    {
 1628|    104|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.90k|    {
 1805|  1.90k|        return std::move(value());
 1806|  1.90k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|  78.3k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  78.3k|    {
 6258|  78.3k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  78.3k|    {
 3075|  78.3k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  78.3k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  78.3k|    {
 3041|  78.3k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  78.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  78.3k|{
 7793|  78.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  78.3k|    handler.check_args_exhausted();
 7795|  78.3k|    return handler.get_error();
 7796|  78.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  78.3k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  78.3k|    auto begin = format.data();
 7761|  78.3k|    auto it = begin;
 7762|  78.3k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   188k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 181k, False: 6.66k]
  ------------------
 7765|   181k|        const auto ch = *it++;
 7766|   181k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 82.3k, False: 99.4k]
  ------------------
 7767|  82.3k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  82.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  82.3k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 70.8k, False: 11.4k]
  ------------------
 7771|  70.8k|                return;
 7772|  70.8k|            }
 7773|  82.3k|        }
 7774|  99.4k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 1.95k, False: 97.5k]
  ------------------
 7775|  1.95k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  3.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 790, False: 1.16k]
  |  |  |  Branch (865:45): [True: 234, False: 1.72k]
  |  |  |  Branch (865:45): [True: 556, False: 1.16k]
  |  |  ------------------
  ------------------
 7776|    790|                handler.on_error("Unmatched '}' in format string");
 7777|    790|                return;
 7778|    790|            }
 7779|       |
 7780|  1.16k|            handler.on_literal_text(begin, it);
 7781|  1.16k|            begin = ++it;
 7782|  1.16k|        }
 7783|   181k|    }
 7784|       |
 7785|  6.66k|    handler.on_literal_text(begin, end);
 7786|  6.66k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  82.3k|{
 7690|  82.3k|    struct id_adapter {
 7691|  82.3k|        constexpr void operator()()
 7692|  82.3k|        {
 7693|  82.3k|            arg_id = handler.on_arg_id();
 7694|  82.3k|        }
 7695|  82.3k|        constexpr void operator()(std::size_t id)
 7696|  82.3k|        {
 7697|  82.3k|            arg_id = handler.on_arg_id(id);
 7698|  82.3k|        }
 7699|       |
 7700|  82.3k|        constexpr void on_error(const char* msg)
 7701|  82.3k|        {
 7702|  82.3k|            SCN_UNLIKELY_ATTR
 7703|  82.3k|            handler.on_error(msg);
 7704|  82.3k|        }
 7705|       |
 7706|  82.3k|        Handler& handler;
 7707|  82.3k|        std::size_t arg_id;
 7708|  82.3k|    };
 7709|       |
 7710|  82.3k|    ++begin;
 7711|  82.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 104, False: 82.2k]
  |  |  ------------------
  ------------------
 7712|    104|        handler.on_error("Unexpected end of replacement field");
 7713|    104|        return begin;
 7714|    104|    }
 7715|       |
 7716|  82.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 5.64k, False: 76.5k]
  ------------------
 7717|  5.64k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|  5.64k|    }
 7719|  76.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 5.24k, False: 71.3k]
  ------------------
 7720|  5.24k|        handler.on_literal_text(begin, begin + 1);
 7721|  5.24k|    }
 7722|  71.3k|    else {
 7723|  71.3k|        auto adapter = id_adapter{handler, 0};
 7724|  71.3k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  71.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 110, False: 71.2k]
  |  |  ------------------
  ------------------
 7727|    110|            handler.on_error("Missing '}' in format string");
 7728|    110|            return begin;
 7729|    110|        }
 7730|       |
 7731|  71.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 146, False: 71.0k]
  ------------------
 7732|    146|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|    146|        }
 7734|  71.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 43.3k, False: 27.7k]
  ------------------
 7735|  43.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74, False: 43.2k]
  |  |  ------------------
  ------------------
 7736|     74|                handler.on_error("Unexpected end of replacement field");
 7737|     74|                return begin;
 7738|     74|            }
 7739|  43.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  43.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.88k, False: 40.3k]
  |  |  |  Branch (865:45): [True: 0, False: 43.2k]
  |  |  |  Branch (865:45): [True: 2.88k, False: 40.3k]
  |  |  ------------------
  ------------------
 7741|  2.88k|                handler.on_error("Unknown format specifier");
 7742|  2.88k|                return begin;
 7743|  2.88k|            }
 7744|  43.2k|        }
 7745|  27.7k|        else {
 7746|  27.7k|            SCN_UNLIKELY_ATTR
 7747|  27.7k|            handler.on_error("Missing '}' in format string");
 7748|  27.7k|            return begin;
 7749|  27.7k|        }
 7750|  71.2k|    }
 7751|  51.3k|    return begin + 1;
 7752|  82.2k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|  49.0k|    {
 8832|  49.0k|        return m_args.get(id);
 8833|  49.0k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|  47.3k|    {
 6286|  47.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 47.3k]
  |  |  ------------------
  ------------------
 6287|     42|            on_error(
 6288|     42|                "Cannot switch from manual to automatic argument indexing");
 6289|     42|            return 0;
 6290|     42|        }
 6291|       |
 6292|  47.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  47.3k|        do_check_arg_id(id);
 6294|  47.3k|        return id;
 6295|  47.3k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6315|    118|    {
 6316|    118|        m_error = unexpected(detail::handle_error(
 6317|    118|            scan_error{scan_error::invalid_format_string, msg}));
 6318|    118|        return m_error.error();
 6319|    118|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|  48.9k|{
 6806|  48.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  48.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  48.9k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  71.3k|{
 7191|  71.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  71.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  71.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 71.3k, False: 0]
  |  Branch (7192:26): [True: 29.6k, False: 41.7k]
  ------------------
 7193|  29.6k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|  29.6k|    }
 7195|       |
 7196|  41.7k|    handler();
 7197|  41.7k|    return begin;
 7198|  71.3k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|  29.6k|{
 7161|  29.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  29.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|  29.6k|    CharT c = *begin;
 7164|  29.6k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 27.6k, False: 1.97k]
  |  Branch (7164:27): [True: 76, False: 1.90k]
  ------------------
 7165|  27.7k|        handler.on_error("Invalid argument ID");
 7166|  27.7k|        return begin;
 7167|  27.7k|    }
 7168|       |
 7169|  1.90k|    int idx = 0;
 7170|  1.90k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 312, False: 1.59k]
  ------------------
 7171|    312|        idx = parse_simple_int(begin, end);
 7172|    312|    }
 7173|  1.59k|    else {
 7174|  1.59k|        ++begin;
 7175|  1.59k|    }
 7176|       |
 7177|  1.90k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 110, False: 1.79k]
  |  Branch (7177:26): [True: 1.64k, False: 146]
  |  Branch (7177:50): [True: 78, False: 1.56k]
  ------------------
 7178|    188|        handler.on_error("Invalid argument ID");
 7179|    188|        return begin;
 7180|    188|    }
 7181|  1.71k|    handler(idx);
 7182|       |
 7183|  1.71k|    return begin;
 7184|  1.90k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|  27.8k|        {
 7702|  27.8k|            SCN_UNLIKELY_ATTR
 7703|  27.8k|            handler.on_error(msg);
 7704|  27.8k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7139|  9.76k|{
 7140|  9.76k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  9.76k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  9.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  9.76k|    unsigned long long value = 0;
 7144|  22.9k|    do {
 7145|  22.9k|        value *= 10;
 7146|  22.9k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  22.9k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 116, False: 22.8k]
  ------------------
 7148|  22.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|    116|            return -1;
 7150|    116|        }
 7151|  22.8k|        ++begin;
 7152|  22.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 22.5k, False: 294]
  |  Branch (7152:30): [True: 21.4k, False: 1.10k]
  |  Branch (7152:47): [True: 13.1k, False: 8.24k]
  ------------------
 7153|  9.64k|    return static_cast<int>(value);
 7154|  9.76k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|  1.71k|        {
 7697|  1.71k|            arg_id = handler.on_arg_id(id);
 7698|  1.71k|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6298|  1.71k|    {
 6299|  1.71k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 76, False: 1.63k]
  |  |  ------------------
  ------------------
 6300|     76|            on_error(
 6301|     76|                "Cannot switch from manual to automatic argument indexing");
 6302|     76|            return;
 6303|     76|        }
 6304|  1.63k|        m_next_arg_id = -1;
 6305|  1.63k|        do_check_arg_id(id);
 6306|  1.63k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  41.7k|        {
 7693|  41.7k|            arg_id = handler.on_arg_id();
 7694|  41.7k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|  40.0k|    {
 6281|  40.0k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  40.0k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  83.3k|    {
 6270|  83.3k|        return m_format.data();
 6271|  83.3k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  43.2k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  43.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  43.2k|    {
 7871|  43.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  43.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  43.2k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|  43.2k|{
 7606|  43.2k|    auto do_presentation = [&]() -> const CharT* {
 7607|  43.2k|        if (*begin == CharT{'['}) {
 7608|  43.2k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  43.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  43.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  43.2k|                return begin;
 7614|  43.2k|            }
 7615|  43.2k|            handler.on_character_set_string(set);
 7616|  43.2k|            return begin;
 7617|  43.2k|        }
 7618|  43.2k|        if (*begin == CharT{'/'}) {
 7619|  43.2k|            return parse_presentation_regex(begin, end, handler);
 7620|  43.2k|        }
 7621|  43.2k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  43.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  43.2k|            handler.on_error("Invalid type specifier in format string");
 7624|  43.2k|            return begin;
 7625|  43.2k|        }
 7626|  43.2k|        handler.on_type(type);
 7627|  43.2k|        return begin;
 7628|  43.2k|    };
 7629|       |
 7630|  43.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 42.1k, False: 1.07k]
  |  Branch (7630:28): [True: 2.27k, False: 39.8k]
  ------------------
 7631|  43.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 896, False: 1.37k]
  |  Branch (7631:36): [True: 862, False: 34]
  ------------------
 7632|    862|        return do_presentation();
 7633|    862|    }
 7634|       |
 7635|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  42.3k|    begin = parse_align(begin, end, handler);
 7641|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 126, False: 42.2k]
  |  |  ------------------
  ------------------
 7642|    126|        handler.on_error("Unexpected end of format string");
 7643|    126|        return begin;
 7644|    126|    }
 7645|       |
 7646|  42.2k|    begin = parse_width(begin, end, handler);
 7647|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 42.1k]
  |  |  ------------------
  ------------------
 7648|    102|        handler.on_error("Unexpected end of format string");
 7649|    102|        return begin;
 7650|    102|    }
 7651|       |
 7652|  42.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 6.19k, False: 35.9k]
  ------------------
 7653|  6.19k|        ++begin;
 7654|  6.19k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 6.16k]
  |  |  ------------------
  ------------------
 7655|     34|            handler.on_error("Unexpected end of format string");
 7656|     34|            return begin;
 7657|     34|        }
 7658|  6.16k|        begin = parse_precision(begin, end, handler);
 7659|  6.16k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 114, False: 6.05k]
  |  |  ------------------
  ------------------
 7660|    114|            handler.on_error("Unexpected end of format string");
 7661|    114|            return begin;
 7662|    114|        }
 7663|  6.16k|    }
 7664|       |
 7665|  41.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 482, False: 41.5k]
  ------------------
 7666|    482|        handler.on_localized();
 7667|    482|        ++begin;
 7668|    482|    }
 7669|  41.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 41.9k]
  |  |  ------------------
  ------------------
 7670|     52|        handler.on_error("Unexpected end of format string");
 7671|     52|        return begin;
 7672|     52|    }
 7673|       |
 7674|  41.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 41.9k, False: 0]
  |  Branch (7674:25): [True: 37.4k, False: 4.49k]
  ------------------
 7675|  37.4k|        do_presentation();
 7676|  37.4k|    }
 7677|  41.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.97k, False: 39.9k]
  |  |  ------------------
  ------------------
 7678|  1.97k|        handler.on_error("Unexpected end of format string");
 7679|  1.97k|        return begin;
 7680|  1.97k|    }
 7681|       |
 7682|  39.9k|    return begin;
 7683|  41.9k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|  2.27k|{
 7255|  2.27k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 860, False: 1.41k]
  |  Branch (7255:33): [True: 808, False: 52]
  ------------------
 7256|  2.27k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 268, False: 1.19k]
  |  Branch (7256:33): [True: 88, False: 180]
  ------------------
 7257|  2.27k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  38.3k|    auto do_presentation = [&]() -> const CharT* {
 7607|  38.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 10.2k, False: 28.0k]
  ------------------
 7608|  10.2k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  10.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 810, False: 9.40k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|    810|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|    810|                return begin;
 7614|    810|            }
 7615|  9.40k|            handler.on_character_set_string(set);
 7616|  9.40k|            return begin;
 7617|  10.2k|        }
 7618|  28.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 23.5k, False: 4.55k]
  ------------------
 7619|  23.5k|            return parse_presentation_regex(begin, end, handler);
 7620|  23.5k|        }
 7621|  4.55k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  4.55k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  4.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 458, False: 4.09k]
  |  |  ------------------
  ------------------
 7623|    458|            handler.on_error("Invalid type specifier in format string");
 7624|    458|            return begin;
 7625|    458|        }
 7626|  4.09k|        handler.on_type(type);
 7627|  4.09k|        return begin;
 7628|  4.55k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  10.2k|{
 7445|  10.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  10.2k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  10.2k|    auto start = begin;
 7449|  10.2k|    ++begin;
 7450|       |
 7451|  10.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 10.1k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|     42|        return {};
 7456|     42|    }
 7457|  10.1k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 1.93k, False: 8.23k]
  ------------------
 7458|  1.93k|        handler.on_charset_inverted();
 7459|  1.93k|        ++begin;
 7460|  1.93k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.90k]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|     34|            return {};
 7465|     34|        }
 7466|  1.90k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 52, False: 1.85k]
  ------------------
 7467|     52|            handler.on_charset_single(char32_t{']'});
 7468|     52|            ++begin;
 7469|     52|        }
 7470|  1.90k|    }
 7471|  8.23k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 34, False: 8.19k]
  ------------------
 7472|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|     34|    }
 7474|       |
 7475|  1.01M|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 1.01M, False: 484]
  ------------------
 7476|  1.01M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 216, False: 1.01M]
  |  |  ------------------
  ------------------
 7477|    216|            break;
 7478|    216|        }
 7479|       |
 7480|  1.01M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 9.40k, False: 1.00M]
  ------------------
 7481|  9.40k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  9.40k|        }
 7483|       |
 7484|  1.00M|        parse_presentation_set_literal(begin, end, handler);
 7485|  1.00M|    }
 7486|       |
 7487|    700|    SCN_UNLIKELY_ATTR
 7488|    700|    handler.on_error("Invalid [character set] specifier in format string");
 7489|    700|    return {};
 7490|  10.1k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7408|  1.00M|{
 7409|  1.00M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  1.00M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  1.00M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 94, False: 1.00M]
  |  |  ------------------
  ------------------
 7413|     94|        return;
 7414|     94|    }
 7415|       |
 7416|  1.00M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 1.00M, False: 188]
  |  Branch (7416:25): [True: 8.40k, False: 999k]
  |  Branch (7416:49): [True: 8.36k, False: 34]
  ------------------
 7417|  1.00M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 8.13k, False: 232]
  ------------------
 7418|  8.13k|        ++begin;
 7419|       |
 7420|  8.13k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  8.13k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  8.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 8.06k]
  |  |  ------------------
  ------------------
 7422|     70|            return;
 7423|     70|        }
 7424|       |
 7425|  8.06k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  8.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 8.03k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|     34|            return;
 7430|     34|        }
 7431|       |
 7432|  8.03k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  8.03k|        return;
 7434|  8.06k|    }
 7435|       |
 7436|  1.00M|    handler.on_charset_single(cp_first);
 7437|  1.00M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7384|  1.01M|{
 7385|  1.01M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  1.01M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  1.01M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 96, False: 1.01M]
  |  |  |  Branch (865:45): [True: 70, False: 1.01M]
  |  |  |  Branch (865:45): [True: 26, False: 1.01M]
  |  |  ------------------
  ------------------
 7389|     96|        handler.on_error("Invalid encoding in format string");
 7390|     96|        return invalid_code_point;
 7391|     96|    }
 7392|       |
 7393|  1.01M|    const auto cp =
 7394|  1.01M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  1.01M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 1.01M]
  |  |  ------------------
  ------------------
 7396|     68|        handler.on_error("Invalid encoding in format string");
 7397|     68|        return invalid_code_point;
 7398|     68|    }
 7399|       |
 7400|  1.01M|    begin += len;
 7401|  1.01M|    return cp;
 7402|  1.01M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  9.40k|    {
 7099|  9.40k|        m_specs.charset_string_data = fmt.data();
 7100|  9.40k|        m_specs.charset_string_size = fmt.size();
 7101|  9.40k|        on_type(presentation_type::string_set);
 7102|  9.40k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7496|  23.5k|{
 7497|  23.5k|#if !SCN_DISABLE_REGEX
 7498|  23.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|  23.5k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|       |                  std::is_same_v<CharT, wchar_t>) {
 7503|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|       |        return begin;
 7505|       |    }
 7506|       |
 7507|  23.5k|    auto start = begin;
 7508|  23.5k|    ++begin;
 7509|       |
 7510|  23.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 23.5k]
  |  |  ------------------
  ------------------
 7511|     34|        handler.on_error("Unexpected end of regex in format string");
 7512|     34|        return begin;
 7513|     34|    }
 7514|       |
 7515|  23.5k|    handler.on_type(presentation_type::regex);
 7516|  2.56M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 2.56M, False: 194]
  ------------------
 7517|  2.56M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 30.6k, False: 2.53M]
  ------------------
 7518|  30.6k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 23.3k, False: 7.30k]
  ------------------
 7519|  23.3k|                break;
 7520|  23.3k|            }
 7521|  7.30k|            else {
 7522|  7.30k|                handler.on_type(presentation_type::regex_escaped);
 7523|  7.30k|            }
 7524|  30.6k|        }
 7525|  2.56M|    }
 7526|  23.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 194, False: 23.3k]
  |  |  ------------------
  ------------------
 7527|    194|        handler.on_error("Unexpected end of regex in format string");
 7528|    194|        return begin;
 7529|    194|    }
 7530|       |
 7531|  23.3k|    auto regex_end = begin;
 7532|  23.3k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|  23.3k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 23.2k]
  |  |  ------------------
  ------------------
 7534|     34|        handler.on_error("Invalid (empty) regex in format string");
 7535|     34|        return begin;
 7536|     34|    }
 7537|  23.2k|    handler.on_regex_pattern(regex_pattern);
 7538|  23.2k|    ++begin;
 7539|       |
 7540|  23.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 23.2k]
  |  |  ------------------
  ------------------
 7541|     34|        handler.on_error("Unexpected end of regex in format string");
 7542|     34|        return begin;
 7543|     34|    }
 7544|       |
 7545|  23.2k|    regex_flags flags{regex_flags::none};
 7546|  23.2k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|  23.2k|        {{'m', regex_flags::multiline},
 7548|  23.2k|         {'s', regex_flags::singleline},
 7549|  23.2k|         {'i', regex_flags::nocase},
 7550|  23.2k|         {'n', regex_flags::nocapture}}};
 7551|  26.0k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 25.9k, False: 58]
  ------------------
 7552|  25.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 23.0k, False: 2.92k]
  ------------------
 7553|  23.0k|            break;
 7554|  23.0k|        }
 7555|  2.92k|        bool found_flag = false;
 7556|  7.42k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 7.42k, False: 98]
  ------------------
 7557|  7.42k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 4.59k, False: 2.82k]
  ------------------
 7558|  4.59k|                continue;
 7559|  4.59k|            }
 7560|  2.82k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 34, False: 2.79k]
  ------------------
 7561|     34|                handler.on_error("Flag set multiple times in regex");
 7562|     34|                return begin;
 7563|     34|            }
 7564|  2.79k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|  2.79k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7565:17): [True: 48, False: 2.74k]
  ------------------
 7566|       |                // clang-format off
 7567|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|     48|            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|  2.79k|#endif
 7578|  2.79k|            flags |= flag.second;
 7579|  2.79k|            found_flag = true;
 7580|  2.79k|            break;
 7581|  2.82k|        }
 7582|  2.89k|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 98, False: 2.79k]
  ------------------
 7583|     98|            handler.on_error("Invalid flag in regex");
 7584|     98|            return begin;
 7585|     98|        }
 7586|  2.89k|    }
 7587|  23.1k|    handler.on_regex_flags(flags);
 7588|       |
 7589|  23.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 58, False: 23.0k]
  |  |  ------------------
  ------------------
 7590|     58|        handler.on_error("Unexpected end of regex in format string");
 7591|     58|        return begin;
 7592|     58|    }
 7593|       |
 7594|  23.0k|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|  23.1k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7106|  23.2k|    {
 7107|  23.2k|        m_specs.charset_string_data = pattern.data();
 7108|  23.2k|        m_specs.charset_string_size = pattern.size();
 7109|  23.2k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|  4.55k|{
 7203|  4.55k|    switch (type) {
 7204|    106|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 106, False: 4.44k]
  ------------------
 7205|    158|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 52, False: 4.50k]
  ------------------
 7206|    158|            return presentation_type::int_binary;
 7207|    108|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 108, False: 4.44k]
  ------------------
 7208|    108|            return presentation_type::int_decimal;
 7209|    196|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 196, False: 4.35k]
  ------------------
 7210|    196|            return presentation_type::int_generic;
 7211|     70|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 70, False: 4.48k]
  ------------------
 7212|     70|            return presentation_type::int_unsigned_decimal;
 7213|    178|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 178, False: 4.37k]
  ------------------
 7214|    178|            return presentation_type::int_octal;
 7215|    134|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 134, False: 4.41k]
  ------------------
 7216|    186|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 52, False: 4.50k]
  ------------------
 7217|    186|            return presentation_type::int_hex;
 7218|     34|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 34, False: 4.51k]
  ------------------
 7219|     68|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 34, False: 4.51k]
  ------------------
 7220|     68|            return presentation_type::int_arbitrary_base;
 7221|    106|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 106, False: 4.44k]
  ------------------
 7222|    194|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 88, False: 4.46k]
  ------------------
 7223|    194|            return presentation_type::float_hex;
 7224|     70|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 70, False: 4.48k]
  ------------------
 7225|    140|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 70, False: 4.48k]
  ------------------
 7226|    140|            return presentation_type::float_scientific;
 7227|    214|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 214, False: 4.33k]
  ------------------
 7228|    320|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 106, False: 4.44k]
  ------------------
 7229|    320|            return presentation_type::float_fixed;
 7230|    150|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 150, False: 4.40k]
  ------------------
 7231|    208|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 58, False: 4.49k]
  ------------------
 7232|    208|            return presentation_type::float_general;
 7233|  1.83k|        case 's':
  ------------------
  |  Branch (7233:9): [True: 1.83k, False: 2.71k]
  ------------------
 7234|  1.83k|            return presentation_type::string;
 7235|    322|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 322, False: 4.23k]
  ------------------
 7236|    322|            return presentation_type::character;
 7237|     34|        case '?':
  ------------------
  |  Branch (7237:9): [True: 34, False: 4.51k]
  ------------------
 7238|     34|            return presentation_type::escaped_character;
 7239|     78|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 78, False: 4.47k]
  ------------------
 7240|     78|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 4.55k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 4.55k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    458|        default:
  ------------------
  |  Branch (7247:9): [True: 458, False: 4.09k]
  ------------------
 7248|    458|            return presentation_type::none;
 7249|  4.55k|    }
 7250|  4.55k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  42.3k|{
 7280|  42.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  42.3k|    auto check_align = [](wchar_t ch) {
 7283|  42.3k|        switch (ch) {
 7284|  42.3k|            case L'<':
 7285|  42.3k|                return align_type::left;
 7286|  42.3k|            case L'>':
 7287|  42.3k|                return align_type::right;
 7288|  42.3k|            case L'^':
 7289|  42.3k|                return align_type::center;
 7290|  42.3k|            default:
 7291|  42.3k|                return align_type::none;
 7292|  42.3k|        }
 7293|  42.3k|    };
 7294|       |
 7295|  42.3k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  42.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 42.3k]
  |  |  |  Branch (865:45): [True: 38, False: 42.3k]
  |  |  |  Branch (865:45): [True: 4, False: 42.3k]
  |  |  ------------------
  ------------------
 7297|  42.3k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|     42|        handler.on_error("Invalid encoding in fill character");
 7299|     42|        return begin;
 7300|     42|    }
 7301|       |
 7302|  42.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  42.3k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  42.3k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  42.3k|    const auto begin_before_fill = begin;
 7307|  42.3k|    begin += potential_fill_len;
 7308|       |
 7309|  42.3k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 1.03k, False: 41.2k]
  ------------------
 7310|  1.03k|        return begin_before_fill;
 7311|  1.03k|    }
 7312|       |
 7313|  41.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  41.2k|    const auto begin_after_fill = begin;
 7315|  41.2k|    ++begin;
 7316|       |
 7317|  41.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 39.9k, False: 1.32k]
  ------------------
 7318|  39.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60, False: 39.9k]
  |  |  ------------------
  ------------------
 7319|     60|            handler.on_error("Invalid fill character '{' in format string");
 7320|     60|            return begin;
 7321|     60|        }
 7322|  39.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 7.53k, False: 32.3k]
  ------------------
 7323|  7.53k|            return begin_before_fill;
 7324|  7.53k|        }
 7325|  39.9k|    }
 7326|       |
 7327|  33.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 30.8k, False: 2.83k]
  ------------------
 7328|  30.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 2.39k, False: 28.4k]
  ------------------
 7329|  2.39k|            handler.on_align(potential_align_on_fill);
 7330|  2.39k|            return begin_after_fill;
 7331|  2.39k|        }
 7332|  28.4k|        return begin_before_fill;
 7333|  30.8k|    }
 7334|       |
 7335|  2.83k|    handler.on_fill(potential_fill);
 7336|  2.83k|    handler.on_align(potential_align_after_fill);
 7337|  2.83k|    return begin;
 7338|  33.6k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|  42.3k|{
 7262|  42.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|  42.3k|    else {
 7267|  42.3k|        const auto lengths =
 7268|  42.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|  42.3k|            "\3\4";
 7270|  42.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|  42.3k|        return len;
 7272|  42.3k|    }
 7273|  42.3k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  83.6k|    auto check_align = [](wchar_t ch) {
 7283|  83.6k|        switch (ch) {
 7284|  1.25k|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 1.25k, False: 82.3k]
  ------------------
 7285|  1.25k|                return align_type::left;
 7286|    832|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 832, False: 82.7k]
  ------------------
 7287|    832|                return align_type::right;
 7288|  4.13k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 4.13k, False: 79.4k]
  ------------------
 7289|  4.13k|                return align_type::center;
 7290|  77.3k|            default:
  ------------------
  |  Branch (7290:13): [True: 77.3k, False: 6.21k]
  ------------------
 7291|  77.3k|                return align_type::none;
 7292|  83.6k|        }
 7293|  83.6k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|  2.83k|    {
 7020|  2.83k|        m_specs.fill = fill;
 7021|  2.83k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|  2.83k|    {
 6901|  2.83k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  2.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|  2.83k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  2.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|  2.83k|        if constexpr (sizeof(CharT) == 1) {
 6904|  7.75k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6904:32): [True: 4.92k, False: 2.83k]
  ------------------
 6905|  4.92k|                SCN_GCC_PUSH
 6906|  4.92k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|  4.92k|                m_data[i] = s[i];
 6908|  4.92k|                SCN_GCC_POP
 6909|  4.92k|            }
 6910|  2.83k|            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|       |        else {
 6923|       |            const auto front = static_cast<unsigned>(s.front());
 6924|       |            m_data[0] = static_cast<char>(front);
 6925|       |            m_data[1] = static_cast<char>(front >> 8);
 6926|       |            m_data[2] = static_cast<char>(front >> 16);
 6927|       |            m_data[3] = static_cast<char>(front >> 24);
 6928|       |        }
 6929|  2.83k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  42.2k|{
 7345|  42.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  42.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 13.3k, False: 28.8k]
  |  Branch (7347:33): [True: 3.37k, False: 9.99k]
  ------------------
 7348|  3.37k|        int width = parse_simple_int(begin, end);
 7349|  3.37k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.33k, False: 34]
  |  |  ------------------
  ------------------
 7350|  3.33k|            handler.on_width(width);
 7351|  3.33k|        }
 7352|     34|        else {
 7353|     34|            handler.on_error("Invalid field width");
 7354|     34|            return begin;
 7355|     34|        }
 7356|  3.37k|    }
 7357|  42.2k|    return begin;
 7358|  42.2k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  6.16k|{
 7365|  6.16k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  6.16k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 6.13k, False: 34]
  |  Branch (7367:33): [True: 6.07k, False: 52]
  ------------------
 7368|  6.07k|        int prec = parse_simple_int(begin, end);
 7369|  6.07k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  6.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.03k, False: 48]
  |  |  ------------------
  ------------------
 7370|  6.03k|            handler.on_precision(prec);
 7371|  6.03k|        }
 7372|     48|        else {
 7373|     48|            handler.on_error("Invalid field precision");
 7374|     48|            return begin;
 7375|     48|        }
 7376|  6.07k|    }
 7377|  6.11k|    return begin;
 7378|  6.16k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|    482|    {
 7876|    482|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|    482|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 434, False: 48]
  ------------------
 7878|    482|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 386, False: 48]
  ------------------
 7879|    482|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 338, False: 48]
  ------------------
 7880|    482|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 290, False: 48]
  ------------------
 7881|    290|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|    290|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|    290|        }
 7886|       |
 7887|    192|        Handler::on_localized();
 7888|    192|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|    360|    {
 7025|    360|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|    360|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|    360|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  39.9k|{
 9300|  39.9k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  39.9k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  39.9k|{
 9201|  39.9k|#define SCN_VISIT(Type)                                                \
 9202|  39.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  39.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  39.9k|    }                                                                  \
 9205|  39.9k|    else {                                                             \
 9206|  39.9k|        return vis(monostate_val);                                     \
 9207|  39.9k|    }
 9208|       |
 9209|  39.9k|    monostate monostate_val{};
 9210|       |
 9211|  39.9k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 39.9k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 39.9k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|  4.46k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.46k, False: 35.5k]
  ------------------
 9217|  4.46k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9218|  4.46k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 39.9k]
  ------------------
 9219|  4.46k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9220|  4.46k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 39.9k]
  ------------------
 9221|  4.46k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9222|  4.46k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 39.9k]
  ------------------
 9223|  4.46k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9224|  4.46k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 39.9k]
  ------------------
 9225|  4.46k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9226|  8.92k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.46k, False: 35.5k]
  ------------------
 9227|  8.92k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  8.92k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.92k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.92k|    }                                                                  \
  |  | 9205|  8.92k|    else {                                                             \
  |  | 9206|  8.92k|        return vis(monostate_val);                                     \
  |  | 9207|  8.92k|    }
  ------------------
 9228|  8.92k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 39.9k]
  ------------------
 9229|  8.92k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  8.92k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.92k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.92k|    }                                                                  \
  |  | 9205|  8.92k|    else {                                                             \
  |  | 9206|  8.92k|        return vis(monostate_val);                                     \
  |  | 9207|  8.92k|    }
  ------------------
 9230|  8.92k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 39.9k]
  ------------------
 9231|  8.92k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  8.92k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.92k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.92k|    }                                                                  \
  |  | 9205|  8.92k|    else {                                                             \
  |  | 9206|  8.92k|        return vis(monostate_val);                                     \
  |  | 9207|  8.92k|    }
  ------------------
 9232|  13.3k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 4.42k, False: 35.5k]
  ------------------
 9233|  13.3k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  13.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  13.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  13.3k|    }                                                                  \
  |  | 9205|  13.3k|    else {                                                             \
  |  | 9206|  13.3k|        return vis(monostate_val);                                     \
  |  | 9207|  13.3k|    }
  ------------------
 9234|  17.8k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 4.46k, False: 35.5k]
  ------------------
 9235|  17.8k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  17.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.8k|    }                                                                  \
  |  | 9205|  17.8k|    else {                                                             \
  |  | 9206|  17.8k|        return vis(monostate_val);                                     \
  |  | 9207|  17.8k|    }
  ------------------
 9236|  22.2k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 4.42k, False: 35.5k]
  ------------------
 9237|  22.2k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  22.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.2k|    }                                                                  \
  |  | 9205|  22.2k|    else {                                                             \
  |  | 9206|  22.2k|        return vis(monostate_val);                                     \
  |  | 9207|  22.2k|    }
  ------------------
 9238|  22.2k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 39.9k]
  ------------------
 9239|  22.2k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  22.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.2k|    }                                                                  \
  |  | 9205|  22.2k|    else {                                                             \
  |  | 9206|  22.2k|        return vis(monostate_val);                                     \
  |  | 9207|  22.2k|    }
  ------------------
 9240|  22.2k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 39.9k]
  ------------------
 9241|  22.2k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  22.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.2k|    }                                                                  \
  |  | 9205|  22.2k|    else {                                                             \
  |  | 9206|  22.2k|        return vis(monostate_val);                                     \
  |  | 9207|  22.2k|    }
  ------------------
 9242|  22.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 39.9k]
  ------------------
 9243|  22.2k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  22.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.2k|    }                                                                  \
  |  | 9205|  22.2k|    else {                                                             \
  |  | 9206|  22.2k|        return vis(monostate_val);                                     \
  |  | 9207|  22.2k|    }
  ------------------
 9244|  26.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 4.46k, False: 35.5k]
  ------------------
 9245|  26.7k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.7k|    }                                                                  \
  |  | 9205|  26.7k|    else {                                                             \
  |  | 9206|  26.7k|        return vis(monostate_val);                                     \
  |  | 9207|  26.7k|    }
  ------------------
 9246|  26.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 39.9k]
  ------------------
 9247|  26.7k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.7k|    }                                                                  \
  |  | 9205|  26.7k|    else {                                                             \
  |  | 9206|  26.7k|        return vis(monostate_val);                                     \
  |  | 9207|  26.7k|    }
  ------------------
 9248|  31.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 4.42k, False: 35.5k]
  ------------------
 9249|  31.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  31.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  31.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  31.1k|    }                                                                  \
  |  | 9205|  31.1k|    else {                                                             \
  |  | 9206|  31.1k|        return vis(monostate_val);                                     \
  |  | 9207|  31.1k|    }
  ------------------
 9250|  35.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 4.42k, False: 35.5k]
  ------------------
 9251|  35.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  35.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  35.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  35.5k|    }                                                                  \
  |  | 9205|  35.5k|    else {                                                             \
  |  | 9206|  35.5k|        return vis(monostate_val);                                     \
  |  | 9207|  35.5k|    }
  ------------------
 9252|  35.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 39.9k]
  ------------------
 9253|  35.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  35.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  35.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  35.5k|    }                                                                  \
  |  | 9205|  35.5k|    else {                                                             \
  |  | 9206|  35.5k|        return vis(monostate_val);                                     \
  |  | 9207|  35.5k|    }
  ------------------
 9254|  39.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 4.42k, False: 35.5k]
  ------------------
 9255|  39.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  39.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  39.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  39.9k|    }                                                                  \
  |  | 9205|  39.9k|    else {                                                             \
  |  | 9206|  39.9k|        return vis(monostate_val);                                     \
  |  | 9207|  39.9k|    }
  ------------------
 9256|  39.9k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 39.9k]
  ------------------
 9257|  39.9k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  39.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  39.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  39.9k|    }                                                                  \
  |  | 9205|  39.9k|    else {                                                             \
  |  | 9206|  39.9k|        return vis(monostate_val);                                     \
  |  | 9207|  39.9k|    }
  ------------------
 9258|  39.9k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 39.9k]
  ------------------
 9259|  39.9k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  39.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  39.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  39.9k|    }                                                                  \
  |  | 9205|  39.9k|    else {                                                             \
  |  | 9206|  39.9k|        return vis(monostate_val);                                     \
  |  | 9207|  39.9k|    }
  ------------------
 9260|       |
 9261|  39.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 39.9k]
  ------------------
 9262|  39.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  39.9k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  39.9k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 39.9k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 39.9k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  39.9k|            SCN_CLANG_POP
 9279|  39.9k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  11.0k|    {
 3480|  11.0k|        return m_iterator;
 3481|  11.0k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|  1.80k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.80k|    {
 1572|  1.80k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  1.80k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.80k|    {
  442|  1.80k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.03k|    {
 1316|  2.03k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  6.44k|    {
 3484|  6.44k|        return m_sentinel;
 3485|  6.44k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1615|    226|        : base(unexpect, std::move(e.error())),
 1616|    226|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    226|    {
 1618|    226|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    226|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    226|          m_has_value(false)
  451|    226|    {
  452|    226|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  5.03k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.03k|    static_cast<    \
  |  |  935|  5.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.03k|    static_cast<    \
  |  |  935|  5.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  5.03k|    {
 3466|  5.03k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1739|    246|    {
 1740|    246|        return has_value();
 1741|    246|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  4.01k|    {
  490|  4.01k|        return m_has_value;
  491|  4.01k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1794|    194|    {
 1795|    194|        return value();
 1796|    194|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  1.80k|    {
 1769|  1.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.80k|        return this->get_value();
 1771|  1.80k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.80k|    {
  456|  1.80k|        return m_value;
  457|  1.80k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|  1.78k|    {
 1979|  1.78k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.78k|                                            std::forward<F>(f));
 1981|  1.78k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|  1.78k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.78k|    else {
 1472|  1.78k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.78k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.78k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.61k, False: 174]
  |  |  ------------------
  ------------------
 1474|  1.78k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.78k|                   : result(unexpect,
 1476|    174|                            trivial_invoke(std::forward<F>(f),
 1477|    174|                                           std::forward<Exp>(exp).error()));
 1478|  1.78k|    }
 1479|  1.78k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  1.61k|    {
 1805|  1.61k|        return std::move(value());
 1806|  1.61k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|  1.61k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.61k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.61k|    {
 1572|  1.61k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  1.61k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.61k|    {
  442|  1.61k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.78k|    {
 1316|  1.78k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1755|    174|    {
 1756|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    174|        return std::move(this->get_unexpected().error());
 1758|    174|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    174|    {
  473|    174|        return m_unexpected;
  474|    174|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1625|    174|        : base(unexpect, std::forward<Args>(args)...),
 1626|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    174|    {
 1628|    174|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    174|          m_has_value(false)
  451|    174|    {
  452|    174|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|  1.78k|    {
 1740|  1.78k|        return has_value();
 1741|  1.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.57k|    {
  490|  3.57k|        return m_has_value;
  491|  3.57k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1745|    174|    {
 1746|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    174|        return this->get_unexpected().error();
 1748|    174|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    174|    {
  473|    174|        return m_unexpected;
  474|    174|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  1.61k|    {
 1805|  1.61k|        return std::move(value());
 1806|  1.61k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  1.61k|    {
 1769|  1.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.61k|        return this->get_value();
 1771|  1.61k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.61k|    {
  456|  1.61k|        return m_value;
  457|  1.61k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   156k|    {
 6177|   156k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   156k|        return static_cast<std::size_t>(m_desc &
 6182|   156k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   156k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   263k|    {
 6203|   263k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   263k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|   106k|    {
 6145|   106k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   106k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 106k]
  |  |  ------------------
  ------------------
 6153|     68|            return {};
 6154|     68|        }
 6155|       |
 6156|   106k|        const auto t = type(id);
 6157|   106k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.12k, False: 105k]
  |  |  ------------------
  ------------------
 6158|  1.12k|            return {};
 6159|  1.12k|        }
 6160|       |
 6161|   105k|        basic_scan_arg<Context> arg;
 6162|   105k|        arg.m_type = t;
 6163|   105k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 105k, False: 0]
  ------------------
 6164|   105k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   105k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   105k|        return arg;
 6170|   106k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|   106k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|   106k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   106k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   106k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   106k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   106k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|   105k|    {
 6207|   105k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   105k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|   210k|    {
 5961|   210k|        return m_type != detail::arg_type::none_type;
 5962|   210k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  82.5k|{
 9300|  82.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  82.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  82.5k|{
 9201|  82.5k|#define SCN_VISIT(Type)                                                \
 9202|  82.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  82.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  82.5k|    }                                                                  \
 9205|  82.5k|    else {                                                             \
 9206|  82.5k|        return vis(monostate_val);                                     \
 9207|  82.5k|    }
 9208|       |
 9209|  82.5k|    monostate monostate_val{};
 9210|       |
 9211|  82.5k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 82.5k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 82.5k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|  9.17k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 9.17k, False: 73.3k]
  ------------------
 9217|  9.17k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  9.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.17k|    }                                                                  \
  |  | 9205|  9.17k|    else {                                                             \
  |  | 9206|  9.17k|        return vis(monostate_val);                                     \
  |  | 9207|  9.17k|    }
  ------------------
 9218|  9.17k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 82.5k]
  ------------------
 9219|  9.17k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  9.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.17k|    }                                                                  \
  |  | 9205|  9.17k|    else {                                                             \
  |  | 9206|  9.17k|        return vis(monostate_val);                                     \
  |  | 9207|  9.17k|    }
  ------------------
 9220|  9.17k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 82.5k]
  ------------------
 9221|  9.17k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  9.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.17k|    }                                                                  \
  |  | 9205|  9.17k|    else {                                                             \
  |  | 9206|  9.17k|        return vis(monostate_val);                                     \
  |  | 9207|  9.17k|    }
  ------------------
 9222|  9.17k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 82.5k]
  ------------------
 9223|  9.17k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  9.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.17k|    }                                                                  \
  |  | 9205|  9.17k|    else {                                                             \
  |  | 9206|  9.17k|        return vis(monostate_val);                                     \
  |  | 9207|  9.17k|    }
  ------------------
 9224|  9.17k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 82.5k]
  ------------------
 9225|  9.17k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  9.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.17k|    }                                                                  \
  |  | 9205|  9.17k|    else {                                                             \
  |  | 9206|  9.17k|        return vis(monostate_val);                                     \
  |  | 9207|  9.17k|    }
  ------------------
 9226|  18.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 9.17k, False: 73.3k]
  ------------------
 9227|  18.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  18.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.3k|    }                                                                  \
  |  | 9205|  18.3k|    else {                                                             \
  |  | 9206|  18.3k|        return vis(monostate_val);                                     \
  |  | 9207|  18.3k|    }
  ------------------
 9228|  18.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 82.5k]
  ------------------
 9229|  18.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  18.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.3k|    }                                                                  \
  |  | 9205|  18.3k|    else {                                                             \
  |  | 9206|  18.3k|        return vis(monostate_val);                                     \
  |  | 9207|  18.3k|    }
  ------------------
 9230|  18.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 82.5k]
  ------------------
 9231|  18.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  18.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.3k|    }                                                                  \
  |  | 9205|  18.3k|    else {                                                             \
  |  | 9206|  18.3k|        return vis(monostate_val);                                     \
  |  | 9207|  18.3k|    }
  ------------------
 9232|  27.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 9.17k, False: 73.3k]
  ------------------
 9233|  27.5k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  27.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  27.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  27.5k|    }                                                                  \
  |  | 9205|  27.5k|    else {                                                             \
  |  | 9206|  27.5k|        return vis(monostate_val);                                     \
  |  | 9207|  27.5k|    }
  ------------------
 9234|  36.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 9.17k, False: 73.3k]
  ------------------
 9235|  36.6k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  36.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  36.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  36.6k|    }                                                                  \
  |  | 9205|  36.6k|    else {                                                             \
  |  | 9206|  36.6k|        return vis(monostate_val);                                     \
  |  | 9207|  36.6k|    }
  ------------------
 9236|  36.6k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 82.5k]
  ------------------
 9237|  36.6k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  36.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  36.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  36.6k|    }                                                                  \
  |  | 9205|  36.6k|    else {                                                             \
  |  | 9206|  36.6k|        return vis(monostate_val);                                     \
  |  | 9207|  36.6k|    }
  ------------------
 9238|  45.8k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 9.17k, False: 73.3k]
  ------------------
 9239|  45.8k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  45.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  45.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  45.8k|    }                                                                  \
  |  | 9205|  45.8k|    else {                                                             \
  |  | 9206|  45.8k|        return vis(monostate_val);                                     \
  |  | 9207|  45.8k|    }
  ------------------
 9240|  45.8k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 82.5k]
  ------------------
 9241|  45.8k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  45.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  45.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  45.8k|    }                                                                  \
  |  | 9205|  45.8k|    else {                                                             \
  |  | 9206|  45.8k|        return vis(monostate_val);                                     \
  |  | 9207|  45.8k|    }
  ------------------
 9242|  45.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 82.5k]
  ------------------
 9243|  45.8k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  45.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  45.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  45.8k|    }                                                                  \
  |  | 9205|  45.8k|    else {                                                             \
  |  | 9206|  45.8k|        return vis(monostate_val);                                     \
  |  | 9207|  45.8k|    }
  ------------------
 9244|  55.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 9.17k, False: 73.3k]
  ------------------
 9245|  55.0k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  55.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  55.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  55.0k|    }                                                                  \
  |  | 9205|  55.0k|    else {                                                             \
  |  | 9206|  55.0k|        return vis(monostate_val);                                     \
  |  | 9207|  55.0k|    }
  ------------------
 9246|  55.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 82.5k]
  ------------------
 9247|  55.0k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  55.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  55.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  55.0k|    }                                                                  \
  |  | 9205|  55.0k|    else {                                                             \
  |  | 9206|  55.0k|        return vis(monostate_val);                                     \
  |  | 9207|  55.0k|    }
  ------------------
 9248|  55.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 82.5k]
  ------------------
 9249|  55.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  55.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  55.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  55.0k|    }                                                                  \
  |  | 9205|  55.0k|    else {                                                             \
  |  | 9206|  55.0k|        return vis(monostate_val);                                     \
  |  | 9207|  55.0k|    }
  ------------------
 9250|  64.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 9.17k, False: 73.3k]
  ------------------
 9251|  64.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  64.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  64.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  64.2k|    }                                                                  \
  |  | 9205|  64.2k|    else {                                                             \
  |  | 9206|  64.2k|        return vis(monostate_val);                                     \
  |  | 9207|  64.2k|    }
  ------------------
 9252|  73.3k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 9.17k, False: 73.3k]
  ------------------
 9253|  73.3k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  73.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  73.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  73.3k|    }                                                                  \
  |  | 9205|  73.3k|    else {                                                             \
  |  | 9206|  73.3k|        return vis(monostate_val);                                     \
  |  | 9207|  73.3k|    }
  ------------------
 9254|  82.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 9.17k, False: 73.3k]
  ------------------
 9255|  82.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  82.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  82.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  82.5k|    }                                                                  \
  |  | 9205|  82.5k|    else {                                                             \
  |  | 9206|  82.5k|        return vis(monostate_val);                                     \
  |  | 9207|  82.5k|    }
  ------------------
 9256|  82.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 82.5k]
  ------------------
 9257|  82.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  82.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  82.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  82.5k|    }                                                                  \
  |  | 9205|  82.5k|    else {                                                             \
  |  | 9206|  82.5k|        return vis(monostate_val);                                     \
  |  | 9207|  82.5k|    }
  ------------------
 9258|  82.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 82.5k]
  ------------------
 9259|  82.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  82.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  82.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  82.5k|    }                                                                  \
  |  | 9205|  82.5k|    else {                                                             \
  |  | 9206|  82.5k|        return vis(monostate_val);                                     \
  |  | 9207|  82.5k|    }
  ------------------
 9260|       |
 9261|  82.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 82.5k]
  ------------------
 9262|  82.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  82.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  82.5k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 82.5k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 82.5k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  82.5k|            SCN_CLANG_POP
 9279|  82.5k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   151k|{
 6006|   151k|    return arg.m_type;
 6007|   151k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   103k|{
 6018|   103k|    return arg.m_value;
 6019|   103k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   156k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   156k|    {
 6258|   156k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   156k|    {
 3075|   156k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   156k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   156k|    {
 3041|   156k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   156k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   156k|{
 7793|   156k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   156k|    handler.check_args_exhausted();
 7795|   156k|    return handler.get_error();
 7796|   156k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   156k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   156k|    auto begin = format.data();
 7761|   156k|    auto it = begin;
 7762|   156k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   322M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 322M, False: 52.8k]
  ------------------
 7765|   322M|        const auto ch = *it++;
 7766|   322M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 141k, False: 322M]
  ------------------
 7767|   141k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   141k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   141k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 103k, False: 38.3k]
  ------------------
 7771|   103k|                return;
 7772|   103k|            }
 7773|   141k|        }
 7774|   322M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 1.16k, False: 322M]
  ------------------
 7775|  1.16k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 252, False: 914]
  |  |  |  Branch (865:45): [True: 88, False: 1.07k]
  |  |  |  Branch (865:45): [True: 164, False: 914]
  |  |  ------------------
  ------------------
 7776|    252|                handler.on_error("Unmatched '}' in format string");
 7777|    252|                return;
 7778|    252|            }
 7779|       |
 7780|    914|            handler.on_literal_text(begin, it);
 7781|    914|            begin = ++it;
 7782|    914|        }
 7783|   322M|    }
 7784|       |
 7785|  52.8k|    handler.on_literal_text(begin, end);
 7786|  52.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   141k|{
 7690|   141k|    struct id_adapter {
 7691|   141k|        constexpr void operator()()
 7692|   141k|        {
 7693|   141k|            arg_id = handler.on_arg_id();
 7694|   141k|        }
 7695|   141k|        constexpr void operator()(std::size_t id)
 7696|   141k|        {
 7697|   141k|            arg_id = handler.on_arg_id(id);
 7698|   141k|        }
 7699|       |
 7700|   141k|        constexpr void on_error(const char* msg)
 7701|   141k|        {
 7702|   141k|            SCN_UNLIKELY_ATTR
 7703|   141k|            handler.on_error(msg);
 7704|   141k|        }
 7705|       |
 7706|   141k|        Handler& handler;
 7707|   141k|        std::size_t arg_id;
 7708|   141k|    };
 7709|       |
 7710|   141k|    ++begin;
 7711|   141k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 141k]
  |  |  ------------------
  ------------------
 7712|     70|        handler.on_error("Unexpected end of replacement field");
 7713|     70|        return begin;
 7714|     70|    }
 7715|       |
 7716|   141k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 82.5k, False: 59.3k]
  ------------------
 7717|  82.5k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|  82.5k|    }
 7719|  59.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 132, False: 59.2k]
  ------------------
 7720|    132|        handler.on_literal_text(begin, begin + 1);
 7721|    132|    }
 7722|  59.2k|    else {
 7723|  59.2k|        auto adapter = id_adapter{handler, 0};
 7724|  59.2k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  59.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 59.1k]
  |  |  ------------------
  ------------------
 7727|    120|            handler.on_error("Missing '}' in format string");
 7728|    120|            return begin;
 7729|    120|        }
 7730|       |
 7731|  59.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 134, False: 58.9k]
  ------------------
 7732|    134|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|    134|        }
 7734|  58.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 23.9k, False: 35.0k]
  ------------------
 7735|  23.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50, False: 23.9k]
  |  |  ------------------
  ------------------
 7736|     50|                handler.on_error("Unexpected end of replacement field");
 7737|     50|                return begin;
 7738|     50|            }
 7739|  23.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  23.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.15k, False: 21.7k]
  |  |  |  Branch (865:45): [True: 0, False: 23.9k]
  |  |  |  Branch (865:45): [True: 2.15k, False: 21.7k]
  |  |  ------------------
  ------------------
 7741|  2.15k|                handler.on_error("Unknown format specifier");
 7742|  2.15k|                return begin;
 7743|  2.15k|            }
 7744|  23.9k|        }
 7745|  35.0k|        else {
 7746|  35.0k|            SCN_UNLIKELY_ATTR
 7747|  35.0k|            handler.on_error("Missing '}' in format string");
 7748|  35.0k|            return begin;
 7749|  35.0k|        }
 7750|  59.1k|    }
 7751|   104k|    return begin + 1;
 7752|   141k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   106k|    {
 8832|   106k|        return m_args.get(id);
 8833|   106k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   106k|    {
 6286|   106k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 106k]
  |  |  ------------------
  ------------------
 6287|     40|            on_error(
 6288|     40|                "Cannot switch from manual to automatic argument indexing");
 6289|     40|            return 0;
 6290|     40|        }
 6291|       |
 6292|   106k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   106k|        do_check_arg_id(id);
 6294|   106k|        return id;
 6295|   106k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6315|    112|    {
 6316|    112|        m_error = unexpected(detail::handle_error(
 6317|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6318|    112|        return m_error.error();
 6319|    112|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   106k|{
 6806|   106k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   106k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   106k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  59.2k|{
 7191|  59.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  59.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 59.2k, False: 0]
  |  Branch (7192:26): [True: 35.4k, False: 23.8k]
  ------------------
 7193|  35.4k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|  35.4k|    }
 7195|       |
 7196|  23.8k|    handler();
 7197|  23.8k|    return begin;
 7198|  59.2k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|  35.4k|{
 7161|  35.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  35.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|  35.4k|    CharT c = *begin;
 7164|  35.4k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 34.8k, False: 580]
  |  Branch (7164:27): [True: 124, False: 456]
  ------------------
 7165|  34.9k|        handler.on_error("Invalid argument ID");
 7166|  34.9k|        return begin;
 7167|  34.9k|    }
 7168|       |
 7169|    456|    int idx = 0;
 7170|    456|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 278, False: 178]
  ------------------
 7171|    278|        idx = parse_simple_int(begin, end);
 7172|    278|    }
 7173|    178|    else {
 7174|    178|        ++begin;
 7175|    178|    }
 7176|       |
 7177|    456|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 120, False: 336]
  |  Branch (7177:26): [True: 202, False: 134]
  |  Branch (7177:50): [True: 66, False: 136]
  ------------------
 7178|    186|        handler.on_error("Invalid argument ID");
 7179|    186|        return begin;
 7180|    186|    }
 7181|    270|    handler(idx);
 7182|       |
 7183|    270|    return begin;
 7184|    456|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|  35.1k|        {
 7702|  35.1k|            SCN_UNLIKELY_ATTR
 7703|  35.1k|            handler.on_error(msg);
 7704|  35.1k|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7139|  9.63k|{
 7140|  9.63k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  9.63k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  9.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  9.63k|    unsigned long long value = 0;
 7144|  11.8k|    do {
 7145|  11.8k|        value *= 10;
 7146|  11.8k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  11.8k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 68, False: 11.8k]
  ------------------
 7148|  11.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|     68|            return -1;
 7150|     68|        }
 7151|  11.8k|        ++begin;
 7152|  11.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 11.5k, False: 288]
  |  Branch (7152:30): [True: 7.24k, False: 4.29k]
  |  Branch (7152:47): [True: 2.26k, False: 4.98k]
  ------------------
 7153|  9.56k|    return static_cast<int>(value);
 7154|  9.63k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|    270|        {
 7697|    270|            arg_id = handler.on_arg_id(id);
 7698|    270|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6298|    270|    {
 6299|    270|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 198]
  |  |  ------------------
  ------------------
 6300|     72|            on_error(
 6301|     72|                "Cannot switch from manual to automatic argument indexing");
 6302|     72|            return;
 6303|     72|        }
 6304|    198|        m_next_arg_id = -1;
 6305|    198|        do_check_arg_id(id);
 6306|    198|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  23.8k|        {
 7693|  23.8k|            arg_id = handler.on_arg_id();
 7694|  23.8k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|  21.3k|    {
 6281|  21.3k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  21.3k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  45.3k|    {
 6270|  45.3k|        return m_format.data();
 6271|  45.3k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  23.9k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  23.9k|    {
 7871|  23.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  23.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  23.9k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|  23.9k|{
 7606|  23.9k|    auto do_presentation = [&]() -> const CharT* {
 7607|  23.9k|        if (*begin == CharT{'['}) {
 7608|  23.9k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  23.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  23.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  23.9k|                return begin;
 7614|  23.9k|            }
 7615|  23.9k|            handler.on_character_set_string(set);
 7616|  23.9k|            return begin;
 7617|  23.9k|        }
 7618|  23.9k|        if (*begin == CharT{'/'}) {
 7619|  23.9k|            return parse_presentation_regex(begin, end, handler);
 7620|  23.9k|        }
 7621|  23.9k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  23.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  23.9k|            handler.on_error("Invalid type specifier in format string");
 7624|  23.9k|            return begin;
 7625|  23.9k|        }
 7626|  23.9k|        handler.on_type(type);
 7627|  23.9k|        return begin;
 7628|  23.9k|    };
 7629|       |
 7630|  23.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 22.9k, False: 926]
  |  Branch (7630:28): [True: 2.44k, False: 20.5k]
  ------------------
 7631|  23.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 266, False: 2.18k]
  |  Branch (7631:36): [True: 232, False: 34]
  ------------------
 7632|    232|        return do_presentation();
 7633|    232|    }
 7634|       |
 7635|  23.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 23.6k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  23.6k|    begin = parse_align(begin, end, handler);
 7641|  23.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 23.5k]
  |  |  ------------------
  ------------------
 7642|    102|        handler.on_error("Unexpected end of format string");
 7643|    102|        return begin;
 7644|    102|    }
 7645|       |
 7646|  23.5k|    begin = parse_width(begin, end, handler);
 7647|  23.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 23.4k]
  |  |  ------------------
  ------------------
 7648|     98|        handler.on_error("Unexpected end of format string");
 7649|     98|        return begin;
 7650|     98|    }
 7651|       |
 7652|  23.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 2.76k, False: 20.7k]
  ------------------
 7653|  2.76k|        ++begin;
 7654|  2.76k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.72k]
  |  |  ------------------
  ------------------
 7655|     34|            handler.on_error("Unexpected end of format string");
 7656|     34|            return begin;
 7657|     34|        }
 7658|  2.72k|        begin = parse_precision(begin, end, handler);
 7659|  2.72k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 96, False: 2.63k]
  |  |  ------------------
  ------------------
 7660|     96|            handler.on_error("Unexpected end of format string");
 7661|     96|            return begin;
 7662|     96|        }
 7663|  2.72k|    }
 7664|       |
 7665|  23.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 428, False: 22.9k]
  ------------------
 7666|    428|        handler.on_localized();
 7667|    428|        ++begin;
 7668|    428|    }
 7669|  23.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 23.3k]
  |  |  ------------------
  ------------------
 7670|     52|        handler.on_error("Unexpected end of format string");
 7671|     52|        return begin;
 7672|     52|    }
 7673|       |
 7674|  23.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 23.3k, False: 0]
  |  Branch (7674:25): [True: 19.6k, False: 3.64k]
  ------------------
 7675|  19.6k|        do_presentation();
 7676|  19.6k|    }
 7677|  23.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 21.7k]
  |  |  ------------------
  ------------------
 7678|  1.54k|        handler.on_error("Unexpected end of format string");
 7679|  1.54k|        return begin;
 7680|  1.54k|    }
 7681|       |
 7682|  21.7k|    return begin;
 7683|  23.3k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|  2.44k|{
 7255|  2.44k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 230, False: 2.21k]
  |  Branch (7255:33): [True: 196, False: 34]
  ------------------
 7256|  2.44k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 140, False: 2.11k]
  |  Branch (7256:33): [True: 70, False: 70]
  ------------------
 7257|  2.44k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  19.8k|    auto do_presentation = [&]() -> const CharT* {
 7607|  19.8k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 2.48k, False: 17.4k]
  ------------------
 7608|  2.48k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  2.48k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 562, False: 1.92k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|    562|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|    562|                return begin;
 7614|    562|            }
 7615|  1.92k|            handler.on_character_set_string(set);
 7616|  1.92k|            return begin;
 7617|  2.48k|        }
 7618|  17.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 14.6k, False: 2.78k]
  ------------------
 7619|  14.6k|            return parse_presentation_regex(begin, end, handler);
 7620|  14.6k|        }
 7621|  2.78k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  2.78k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 352, False: 2.43k]
  |  |  ------------------
  ------------------
 7623|    352|            handler.on_error("Invalid type specifier in format string");
 7624|    352|            return begin;
 7625|    352|        }
 7626|  2.43k|        handler.on_type(type);
 7627|  2.43k|        return begin;
 7628|  2.78k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  2.48k|{
 7445|  2.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  2.48k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  2.48k|    auto start = begin;
 7449|  2.48k|    ++begin;
 7450|       |
 7451|  2.48k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.44k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|     34|        return {};
 7456|     34|    }
 7457|  2.44k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 1.00k, False: 1.44k]
  ------------------
 7458|  1.00k|        handler.on_charset_inverted();
 7459|  1.00k|        ++begin;
 7460|  1.00k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 970]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|     34|            return {};
 7465|     34|        }
 7466|    970|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 52, False: 918]
  ------------------
 7467|     52|            handler.on_charset_single(char32_t{']'});
 7468|     52|            ++begin;
 7469|     52|        }
 7470|    970|    }
 7471|  1.44k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 34, False: 1.41k]
  ------------------
 7472|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|     34|    }
 7474|       |
 7475|  17.4k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 17.1k, False: 320]
  ------------------
 7476|  17.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 140, False: 16.9k]
  |  |  ------------------
  ------------------
 7477|    140|            break;
 7478|    140|        }
 7479|       |
 7480|  16.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 1.92k, False: 15.0k]
  ------------------
 7481|  1.92k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  1.92k|        }
 7483|       |
 7484|  15.0k|        parse_presentation_set_literal(begin, end, handler);
 7485|  15.0k|    }
 7486|       |
 7487|    460|    SCN_UNLIKELY_ATTR
 7488|    460|    handler.on_error("Invalid [character set] specifier in format string");
 7489|    460|    return {};
 7490|  2.38k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7408|  15.0k|{
 7409|  15.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  15.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  15.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 104, False: 14.9k]
  |  |  ------------------
  ------------------
 7413|    104|        return;
 7414|    104|    }
 7415|       |
 7416|  14.9k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 14.8k, False: 88]
  |  Branch (7416:25): [True: 1.25k, False: 13.6k]
  |  Branch (7416:49): [True: 1.21k, False: 34]
  ------------------
 7417|  14.9k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 1.16k, False: 52]
  ------------------
 7418|  1.16k|        ++begin;
 7419|       |
 7420|  1.16k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  1.16k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.13k]
  |  |  ------------------
  ------------------
 7422|     34|            return;
 7423|     34|        }
 7424|       |
 7425|  1.13k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.09k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|     34|            return;
 7430|     34|        }
 7431|       |
 7432|  1.09k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  1.09k|        return;
 7434|  1.13k|    }
 7435|       |
 7436|  13.7k|    handler.on_charset_single(cp_first);
 7437|  13.7k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7384|  16.2k|{
 7385|  16.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  16.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  16.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  |  Branch (865:45): [True: 0, False: 16.2k]
  |  |  |  Branch (865:45): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  16.2k|    const auto cp =
 7394|  16.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  16.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 138, False: 16.0k]
  |  |  ------------------
  ------------------
 7396|    138|        handler.on_error("Invalid encoding in format string");
 7397|    138|        return invalid_code_point;
 7398|    138|    }
 7399|       |
 7400|  16.0k|    begin += len;
 7401|  16.0k|    return cp;
 7402|  16.2k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  1.92k|    {
 7099|  1.92k|        m_specs.charset_string_data = fmt.data();
 7100|  1.92k|        m_specs.charset_string_size = fmt.size();
 7101|  1.92k|        on_type(presentation_type::string_set);
 7102|  1.92k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7496|  14.6k|{
 7497|  14.6k|#if !SCN_DISABLE_REGEX
 7498|  14.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|  14.6k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|       |                  std::is_same_v<CharT, wchar_t>) {
 7503|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|       |        return begin;
 7505|       |    }
 7506|       |
 7507|  14.6k|    auto start = begin;
 7508|  14.6k|    ++begin;
 7509|       |
 7510|  14.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 14.5k]
  |  |  ------------------
  ------------------
 7511|     34|        handler.on_error("Unexpected end of regex in format string");
 7512|     34|        return begin;
 7513|     34|    }
 7514|       |
 7515|  14.5k|    handler.on_type(presentation_type::regex);
 7516|   748k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 748k, False: 72]
  ------------------
 7517|   748k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 17.4k, False: 730k]
  ------------------
 7518|  17.4k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 14.5k, False: 2.93k]
  ------------------
 7519|  14.5k|                break;
 7520|  14.5k|            }
 7521|  2.93k|            else {
 7522|  2.93k|                handler.on_type(presentation_type::regex_escaped);
 7523|  2.93k|            }
 7524|  17.4k|        }
 7525|   748k|    }
 7526|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 14.5k]
  |  |  ------------------
  ------------------
 7527|     72|        handler.on_error("Unexpected end of regex in format string");
 7528|     72|        return begin;
 7529|     72|    }
 7530|       |
 7531|  14.5k|    auto regex_end = begin;
 7532|  14.5k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|  14.5k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 14.4k]
  |  |  ------------------
  ------------------
 7534|     34|        handler.on_error("Invalid (empty) regex in format string");
 7535|     34|        return begin;
 7536|     34|    }
 7537|  14.4k|    handler.on_regex_pattern(regex_pattern);
 7538|  14.4k|    ++begin;
 7539|       |
 7540|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 14.4k]
  |  |  ------------------
  ------------------
 7541|     34|        handler.on_error("Unexpected end of regex in format string");
 7542|     34|        return begin;
 7543|     34|    }
 7544|       |
 7545|  14.4k|    regex_flags flags{regex_flags::none};
 7546|  14.4k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|  14.4k|        {{'m', regex_flags::multiline},
 7548|  14.4k|         {'s', regex_flags::singleline},
 7549|  14.4k|         {'i', regex_flags::nocase},
 7550|  14.4k|         {'n', regex_flags::nocapture}}};
 7551|  15.8k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 15.8k, False: 44]
  ------------------
 7552|  15.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 14.3k, False: 1.50k]
  ------------------
 7553|  14.3k|            break;
 7554|  14.3k|        }
 7555|  1.50k|        bool found_flag = false;
 7556|  4.02k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 4.02k, False: 54]
  ------------------
 7557|  4.02k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 2.57k, False: 1.44k]
  ------------------
 7558|  2.57k|                continue;
 7559|  2.57k|            }
 7560|  1.44k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 34, False: 1.41k]
  ------------------
 7561|     34|                handler.on_error("Flag set multiple times in regex");
 7562|     34|                return begin;
 7563|     34|            }
 7564|  1.41k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|  1.41k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7565:17): [True: 34, False: 1.37k]
  ------------------
 7566|       |                // clang-format off
 7567|     34|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|     34|            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|  1.41k|#endif
 7578|  1.41k|            flags |= flag.second;
 7579|  1.41k|            found_flag = true;
 7580|  1.41k|            break;
 7581|  1.44k|        }
 7582|  1.46k|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 54, False: 1.41k]
  ------------------
 7583|     54|            handler.on_error("Invalid flag in regex");
 7584|     54|            return begin;
 7585|     54|        }
 7586|  1.46k|    }
 7587|  14.3k|    handler.on_regex_flags(flags);
 7588|       |
 7589|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44, False: 14.3k]
  |  |  ------------------
  ------------------
 7590|     44|        handler.on_error("Unexpected end of regex in format string");
 7591|     44|        return begin;
 7592|     44|    }
 7593|       |
 7594|  14.3k|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|  14.3k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7106|  14.4k|    {
 7107|  14.4k|        m_specs.charset_string_data = pattern.data();
 7108|  14.4k|        m_specs.charset_string_size = pattern.size();
 7109|  14.4k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|  2.78k|{
 7203|  2.78k|    switch (type) {
 7204|     88|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 88, False: 2.69k]
  ------------------
 7205|    122|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 34, False: 2.74k]
  ------------------
 7206|    122|            return presentation_type::int_binary;
 7207|    106|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 106, False: 2.67k]
  ------------------
 7208|    106|            return presentation_type::int_decimal;
 7209|    160|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 160, False: 2.62k]
  ------------------
 7210|    160|            return presentation_type::int_generic;
 7211|    106|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 106, False: 2.67k]
  ------------------
 7212|    106|            return presentation_type::int_unsigned_decimal;
 7213|    142|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 142, False: 2.64k]
  ------------------
 7214|    142|            return presentation_type::int_octal;
 7215|     88|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 88, False: 2.69k]
  ------------------
 7216|    140|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 52, False: 2.73k]
  ------------------
 7217|    140|            return presentation_type::int_hex;
 7218|     34|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 34, False: 2.74k]
  ------------------
 7219|     68|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 34, False: 2.74k]
  ------------------
 7220|     68|            return presentation_type::int_arbitrary_base;
 7221|    150|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 150, False: 2.63k]
  ------------------
 7222|    238|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 88, False: 2.69k]
  ------------------
 7223|    238|            return presentation_type::float_hex;
 7224|     70|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 70, False: 2.71k]
  ------------------
 7225|    104|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 34, False: 2.74k]
  ------------------
 7226|    104|            return presentation_type::float_scientific;
 7227|     52|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 52, False: 2.73k]
  ------------------
 7228|    140|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 88, False: 2.69k]
  ------------------
 7229|    140|            return presentation_type::float_fixed;
 7230|     34|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 34, False: 2.74k]
  ------------------
 7231|     86|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 52, False: 2.73k]
  ------------------
 7232|     86|            return presentation_type::float_general;
 7233|    664|        case 's':
  ------------------
  |  Branch (7233:9): [True: 664, False: 2.11k]
  ------------------
 7234|    664|            return presentation_type::string;
 7235|    250|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 250, False: 2.53k]
  ------------------
 7236|    250|            return presentation_type::character;
 7237|     34|        case '?':
  ------------------
  |  Branch (7237:9): [True: 34, False: 2.74k]
  ------------------
 7238|     34|            return presentation_type::escaped_character;
 7239|     70|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 70, False: 2.71k]
  ------------------
 7240|     70|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 2.78k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 2.78k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    352|        default:
  ------------------
  |  Branch (7247:9): [True: 352, False: 2.43k]
  ------------------
 7248|    352|            return presentation_type::none;
 7249|  2.78k|    }
 7250|  2.78k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  23.6k|{
 7280|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  23.6k|    auto check_align = [](wchar_t ch) {
 7283|  23.6k|        switch (ch) {
 7284|  23.6k|            case L'<':
 7285|  23.6k|                return align_type::left;
 7286|  23.6k|            case L'>':
 7287|  23.6k|                return align_type::right;
 7288|  23.6k|            case L'^':
 7289|  23.6k|                return align_type::center;
 7290|  23.6k|            default:
 7291|  23.6k|                return align_type::none;
 7292|  23.6k|        }
 7293|  23.6k|    };
 7294|       |
 7295|  23.6k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  23.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 23.6k]
  |  |  |  Branch (865:45): [True: 0, False: 23.6k]
  |  |  |  Branch (865:45): [True: 0, False: 23.6k]
  |  |  ------------------
  ------------------
 7297|  23.6k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  23.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  23.6k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  23.6k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  23.6k|    const auto begin_before_fill = begin;
 7307|  23.6k|    begin += potential_fill_len;
 7308|       |
 7309|  23.6k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 926, False: 22.7k]
  ------------------
 7310|    926|        return begin_before_fill;
 7311|    926|    }
 7312|       |
 7313|  22.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  22.7k|    const auto begin_after_fill = begin;
 7315|  22.7k|    ++begin;
 7316|       |
 7317|  22.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 22.7k, False: 0]
  ------------------
 7318|  22.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 22.7k]
  |  |  ------------------
  ------------------
 7319|     42|            handler.on_error("Invalid fill character '{' in format string");
 7320|     42|            return begin;
 7321|     42|        }
 7322|  22.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 1.47k, False: 21.2k]
  ------------------
 7323|  1.47k|            return begin_before_fill;
 7324|  1.47k|        }
 7325|  22.7k|    }
 7326|       |
 7327|  21.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 20.4k, False: 744]
  ------------------
 7328|  20.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 966, False: 19.5k]
  ------------------
 7329|    966|            handler.on_align(potential_align_on_fill);
 7330|    966|            return begin_after_fill;
 7331|    966|        }
 7332|  19.5k|        return begin_before_fill;
 7333|  20.4k|    }
 7334|       |
 7335|    744|    handler.on_fill(potential_fill);
 7336|    744|    handler.on_align(potential_align_after_fill);
 7337|    744|    return begin;
 7338|  21.2k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|  23.6k|{
 7262|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|  23.6k|    if constexpr (sizeof(CharT) != 1) {
 7264|  23.6k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|  23.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  46.4k|    auto check_align = [](wchar_t ch) {
 7283|  46.4k|        switch (ch) {
 7284|    646|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 646, False: 45.7k]
  ------------------
 7285|    646|                return align_type::left;
 7286|    230|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 230, False: 46.2k]
  ------------------
 7287|    230|                return align_type::right;
 7288|  1.26k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 1.26k, False: 45.1k]
  ------------------
 7289|  1.26k|                return align_type::center;
 7290|  44.3k|            default:
  ------------------
  |  Branch (7290:13): [True: 44.3k, False: 2.13k]
  ------------------
 7291|  44.3k|                return align_type::none;
 7292|  46.4k|        }
 7293|  46.4k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|    744|    {
 7020|    744|        m_specs.fill = fill;
 7021|    744|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|    744|    {
 6901|    744|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|    744|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|       |        if constexpr (sizeof(CharT) == 1) {
 6904|       |            for (size_t i = 0; i < s.size(); ++i) {
 6905|       |                SCN_GCC_PUSH
 6906|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|       |                m_data[i] = s[i];
 6908|       |                SCN_GCC_POP
 6909|       |            }
 6910|       |            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|    744|        else {
 6923|    744|            const auto front = static_cast<unsigned>(s.front());
 6924|    744|            m_data[0] = static_cast<char>(front);
 6925|    744|            m_data[1] = static_cast<char>(front >> 8);
 6926|    744|            m_data[2] = static_cast<char>(front >> 16);
 6927|    744|            m_data[3] = static_cast<char>(front >> 24);
 6928|    744|        }
 6929|    744|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  23.5k|{
 7345|  23.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  23.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 10.3k, False: 13.2k]
  |  Branch (7347:33): [True: 6.69k, False: 3.63k]
  ------------------
 7348|  6.69k|        int width = parse_simple_int(begin, end);
 7349|  6.69k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  6.69k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.65k, False: 40]
  |  |  ------------------
  ------------------
 7350|  6.65k|            handler.on_width(width);
 7351|  6.65k|        }
 7352|     40|        else {
 7353|     40|            handler.on_error("Invalid field width");
 7354|     40|            return begin;
 7355|     40|        }
 7356|  6.69k|    }
 7357|  23.5k|    return begin;
 7358|  23.5k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  2.72k|{
 7365|  2.72k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  2.72k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 2.69k, False: 34]
  |  Branch (7367:33): [True: 2.65k, False: 34]
  ------------------
 7368|  2.65k|        int prec = parse_simple_int(begin, end);
 7369|  2.65k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  2.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.65k, False: 0]
  |  |  ------------------
  ------------------
 7370|  2.65k|            handler.on_precision(prec);
 7371|  2.65k|        }
 7372|      0|        else {
 7373|      0|            handler.on_error("Invalid field precision");
 7374|      0|            return begin;
 7375|      0|        }
 7376|  2.65k|    }
 7377|  2.72k|    return begin;
 7378|  2.72k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|    428|    {
 7876|    428|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|    428|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 386, False: 42]
  ------------------
 7878|    428|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 344, False: 42]
  ------------------
 7879|    428|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 302, False: 42]
  ------------------
 7880|    428|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 260, False: 42]
  ------------------
 7881|    260|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|    260|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|    260|        }
 7886|       |
 7887|    168|        Handler::on_localized();
 7888|    168|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  21.2k|{
 9300|  21.2k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  21.2k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  21.2k|{
 9201|  21.2k|#define SCN_VISIT(Type)                                                \
 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  21.2k|    }                                                                  \
 9205|  21.2k|    else {                                                             \
 9206|  21.2k|        return vis(monostate_val);                                     \
 9207|  21.2k|    }
 9208|       |
 9209|  21.2k|    monostate monostate_val{};
 9210|       |
 9211|  21.2k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 21.2k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 21.2k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|  2.38k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 2.38k, False: 18.8k]
  ------------------
 9217|  2.38k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  2.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.38k|    }                                                                  \
  |  | 9205|  2.38k|    else {                                                             \
  |  | 9206|  2.38k|        return vis(monostate_val);                                     \
  |  | 9207|  2.38k|    }
  ------------------
 9218|  2.38k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 21.2k]
  ------------------
 9219|  2.38k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  2.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.38k|    }                                                                  \
  |  | 9205|  2.38k|    else {                                                             \
  |  | 9206|  2.38k|        return vis(monostate_val);                                     \
  |  | 9207|  2.38k|    }
  ------------------
 9220|  2.38k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 21.2k]
  ------------------
 9221|  2.38k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  2.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.38k|    }                                                                  \
  |  | 9205|  2.38k|    else {                                                             \
  |  | 9206|  2.38k|        return vis(monostate_val);                                     \
  |  | 9207|  2.38k|    }
  ------------------
 9222|  2.38k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 21.2k]
  ------------------
 9223|  2.38k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  2.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.38k|    }                                                                  \
  |  | 9205|  2.38k|    else {                                                             \
  |  | 9206|  2.38k|        return vis(monostate_val);                                     \
  |  | 9207|  2.38k|    }
  ------------------
 9224|  2.38k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 21.2k]
  ------------------
 9225|  2.38k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  2.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.38k|    }                                                                  \
  |  | 9205|  2.38k|    else {                                                             \
  |  | 9206|  2.38k|        return vis(monostate_val);                                     \
  |  | 9207|  2.38k|    }
  ------------------
 9226|  4.77k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 2.38k, False: 18.8k]
  ------------------
 9227|  4.77k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  4.77k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.77k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.77k|    }                                                                  \
  |  | 9205|  4.77k|    else {                                                             \
  |  | 9206|  4.77k|        return vis(monostate_val);                                     \
  |  | 9207|  4.77k|    }
  ------------------
 9228|  4.77k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 21.2k]
  ------------------
 9229|  4.77k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  4.77k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.77k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.77k|    }                                                                  \
  |  | 9205|  4.77k|    else {                                                             \
  |  | 9206|  4.77k|        return vis(monostate_val);                                     \
  |  | 9207|  4.77k|    }
  ------------------
 9230|  4.77k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 21.2k]
  ------------------
 9231|  4.77k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  4.77k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.77k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.77k|    }                                                                  \
  |  | 9205|  4.77k|    else {                                                             \
  |  | 9206|  4.77k|        return vis(monostate_val);                                     \
  |  | 9207|  4.77k|    }
  ------------------
 9232|  7.11k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 2.34k, False: 18.9k]
  ------------------
 9233|  7.11k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  7.11k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.11k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.11k|    }                                                                  \
  |  | 9205|  7.11k|    else {                                                             \
  |  | 9206|  7.11k|        return vis(monostate_val);                                     \
  |  | 9207|  7.11k|    }
  ------------------
 9234|  9.50k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 2.38k, False: 18.8k]
  ------------------
 9235|  9.50k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  9.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.50k|    }                                                                  \
  |  | 9205|  9.50k|    else {                                                             \
  |  | 9206|  9.50k|        return vis(monostate_val);                                     \
  |  | 9207|  9.50k|    }
  ------------------
 9236|  9.50k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 21.2k]
  ------------------
 9237|  9.50k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  9.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.50k|    }                                                                  \
  |  | 9205|  9.50k|    else {                                                             \
  |  | 9206|  9.50k|        return vis(monostate_val);                                     \
  |  | 9207|  9.50k|    }
  ------------------
 9238|  11.8k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 2.34k, False: 18.9k]
  ------------------
 9239|  11.8k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  11.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  11.8k|    }                                                                  \
  |  | 9205|  11.8k|    else {                                                             \
  |  | 9206|  11.8k|        return vis(monostate_val);                                     \
  |  | 9207|  11.8k|    }
  ------------------
 9240|  11.8k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 21.2k]
  ------------------
 9241|  11.8k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  11.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  11.8k|    }                                                                  \
  |  | 9205|  11.8k|    else {                                                             \
  |  | 9206|  11.8k|        return vis(monostate_val);                                     \
  |  | 9207|  11.8k|    }
  ------------------
 9242|  11.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 21.2k]
  ------------------
 9243|  11.8k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  11.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  11.8k|    }                                                                  \
  |  | 9205|  11.8k|    else {                                                             \
  |  | 9206|  11.8k|        return vis(monostate_val);                                     \
  |  | 9207|  11.8k|    }
  ------------------
 9244|  14.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 2.38k, False: 18.8k]
  ------------------
 9245|  14.2k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  14.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.2k|    }                                                                  \
  |  | 9205|  14.2k|    else {                                                             \
  |  | 9206|  14.2k|        return vis(monostate_val);                                     \
  |  | 9207|  14.2k|    }
  ------------------
 9246|  14.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 21.2k]
  ------------------
 9247|  14.2k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  14.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.2k|    }                                                                  \
  |  | 9205|  14.2k|    else {                                                             \
  |  | 9206|  14.2k|        return vis(monostate_val);                                     \
  |  | 9207|  14.2k|    }
  ------------------
 9248|  14.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 21.2k]
  ------------------
 9249|  14.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  14.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.2k|    }                                                                  \
  |  | 9205|  14.2k|    else {                                                             \
  |  | 9206|  14.2k|        return vis(monostate_val);                                     \
  |  | 9207|  14.2k|    }
  ------------------
 9250|  16.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 2.34k, False: 18.9k]
  ------------------
 9251|  16.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  16.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.5k|    }                                                                  \
  |  | 9205|  16.5k|    else {                                                             \
  |  | 9206|  16.5k|        return vis(monostate_val);                                     \
  |  | 9207|  16.5k|    }
  ------------------
 9252|  18.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 2.34k, False: 18.9k]
  ------------------
 9253|  18.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  18.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.9k|    }                                                                  \
  |  | 9205|  18.9k|    else {                                                             \
  |  | 9206|  18.9k|        return vis(monostate_val);                                     \
  |  | 9207|  18.9k|    }
  ------------------
 9254|  21.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 2.34k, False: 18.9k]
  ------------------
 9255|  21.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.2k|    }                                                                  \
  |  | 9205|  21.2k|    else {                                                             \
  |  | 9206|  21.2k|        return vis(monostate_val);                                     \
  |  | 9207|  21.2k|    }
  ------------------
 9256|  21.2k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 21.2k]
  ------------------
 9257|  21.2k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.2k|    }                                                                  \
  |  | 9205|  21.2k|    else {                                                             \
  |  | 9206|  21.2k|        return vis(monostate_val);                                     \
  |  | 9207|  21.2k|    }
  ------------------
 9258|  21.2k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 21.2k]
  ------------------
 9259|  21.2k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.2k|    }                                                                  \
  |  | 9205|  21.2k|    else {                                                             \
  |  | 9206|  21.2k|        return vis(monostate_val);                                     \
  |  | 9207|  21.2k|    }
  ------------------
 9260|       |
 9261|  21.2k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 21.2k]
  ------------------
 9262|  21.2k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  21.2k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  21.2k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 21.2k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 21.2k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  21.2k|            SCN_CLANG_POP
 9279|  21.2k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  2.79k|    {
 3480|  2.79k|        return m_iterator;
 3481|  2.79k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|    698|        : base(std::in_place, std::forward<U>(val)),
 1570|    698|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    698|    {
 1572|    698|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    698|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    698|    {
  442|    698|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    698|    {
 1316|    698|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  1.39k|    {
 3484|  1.39k|        return m_sentinel;
 3485|  1.39k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  1.39k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.39k|    static_cast<    \
  |  |  935|  1.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.39k|    static_cast<    \
  |  |  935|  1.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.39k|    {
 3466|  1.39k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.39k|    {
  490|  1.39k|        return m_has_value;
  491|  1.39k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    698|    {
 1769|    698|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    698|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    698|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    698|        return this->get_value();
 1771|    698|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    698|    {
  456|    698|        return m_value;
  457|    698|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|    698|    {
 1979|    698|        return detail::transform_error_impl(std::move(*this),
 1980|    698|                                            std::forward<F>(f));
 1981|    698|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|    698|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    698|    else {
 1472|    698|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    698|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    698|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 698, False: 0]
  |  |  ------------------
  ------------------
 1474|    698|                   ? result(*std::forward<Exp>(exp))
 1475|    698|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    698|    }
 1479|    698|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    698|    {
 1805|    698|        return std::move(value());
 1806|    698|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    698|        : base(std::in_place, std::forward<U>(val)),
 1570|    698|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    698|    {
 1572|    698|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    698|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    698|    {
  442|    698|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    698|    {
 1316|    698|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|    698|    {
 1740|    698|        return has_value();
 1741|    698|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.39k|    {
  490|  1.39k|        return m_has_value;
  491|  1.39k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    698|    {
 1805|    698|        return std::move(value());
 1806|    698|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    698|    {
 1769|    698|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    698|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    698|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    698|        return this->get_value();
 1771|    698|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    698|    {
  456|    698|        return m_value;
  457|    698|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  78.3k|{
   44|  78.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  78.3k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  78.3k|{
   60|  78.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  78.3k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.70k|{
   89|  8.70k|    auto result = make_scan_result<Source, Args...>();
   90|  8.70k|    fill_scan_result(result,
   91|  8.70k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.70k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.70k|    return result;
   94|  8.70k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.70k|{
  131|  8.70k|    auto result = make_scan_result<Source, Args...>();
  132|  8.70k|    fill_scan_result(result,
  133|  8.70k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.70k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.70k|    return result;
  136|  8.70k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   117k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   117k|{
  309|   117k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   117k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    176|{
  315|    176|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    176|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 88, False: 88]
  ------------------
  317|    176|                    : std::locale{};
  318|    176|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|    884|{
  895|    884|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|    884|                                  m_nan_payload_buffer, value);
  897|    884|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|    884|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|    884|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 884]
  ------------------
  903|    884|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|    884|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 884]
  ------------------
  908|    884|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|    884|    return n;
  913|    884|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|  9.48k|{
  895|  9.48k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|  9.48k|                                  m_nan_payload_buffer, value);
  897|  9.48k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  9.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 9.48k]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|  9.48k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 9.48k]
  ------------------
  903|  9.48k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|  9.48k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 9.48k]
  ------------------
  908|  9.48k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|  9.48k|    return n;
  913|  9.48k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     22|{
 1153|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 22, False: 0]
  ------------------
 1159|     22|        SCN_UNLIKELY_ATTR
 1160|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     22|                                             "Invalid integer value");
 1162|     22|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    894|{
 1153|    894|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    894|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    894|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    894|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    894|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 894, False: 0]
  ------------------
 1159|    894|        SCN_UNLIKELY_ATTR
 1160|    894|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    894|                                             "Invalid integer value");
 1162|    894|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  9.50k|{
 1153|  9.50k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  9.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  9.50k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  9.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  9.50k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  9.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  9.50k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  9.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  9.50k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 9.50k, False: 0]
  ------------------
 1159|  9.50k|        SCN_UNLIKELY_ATTR
 1160|  9.50k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  9.50k|                                             "Invalid integer value");
 1162|  9.50k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    894|{
 1153|    894|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    894|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    894|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    894|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    894|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 894, False: 0]
  ------------------
 1159|    894|        SCN_UNLIKELY_ATTR
 1160|    894|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    894|                                             "Invalid integer value");
 1162|    894|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  9.48k|{
 1153|  9.48k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  9.48k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  9.48k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  9.48k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  9.48k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 9.48k, False: 0]
  ------------------
 1159|  9.48k|        SCN_UNLIKELY_ATTR
 1160|  9.48k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  9.48k|                                             "Invalid integer value");
 1162|  9.48k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    876|{
 1153|    876|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    876|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    876|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    876|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    876|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 876, False: 0]
  ------------------
 1159|    876|        SCN_UNLIKELY_ATTR
 1160|    876|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    876|                                             "Invalid integer value");
 1162|    876|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  9.47k|{
 1153|  9.47k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  9.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  9.47k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  9.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  9.47k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  9.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  9.47k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  9.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  9.47k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 9.47k, False: 0]
  ------------------
 1159|  9.47k|        SCN_UNLIKELY_ATTR
 1160|  9.47k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  9.47k|                                             "Invalid integer value");
 1162|  9.47k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  39.1k|{
 1903|  39.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  39.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  78.3k|{
 1921|  78.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  78.3k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  3.49k|{
  207|  3.49k|    return find_classic_impl(
  208|  3.49k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  3.49k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  3.49k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  21.6k|{
  215|  21.6k|    return find_classic_impl(
  216|  21.6k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  21.6k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  21.6k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    230|{
  329|    230|    SCN_UNLIKELY_ATTR
  330|    230|    return e;
  331|    230|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  39.1k|{
 1872|  39.1k|    return vscan_internal(source, format, args);
 1873|  39.1k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  78.3k|{
 1886|  78.3k|    return vscan_internal(source, format, args);
 1887|  78.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  3.49k|{
  131|  3.49k|    auto it = source.begin();
  132|       |
  133|  10.8k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 8.05k, False: 2.74k]
  ------------------
  134|  8.05k|        auto sv =
  135|  8.05k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  8.05k|                .substr(0, 8);
  137|       |
  138|  8.05k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.58k, False: 5.47k]
  ------------------
  139|  2.58k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.58k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.58k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 438, False: 2.14k]
  ------------------
  142|    438|                break;
  143|    438|            }
  144|  2.14k|            continue;
  145|  2.58k|        }
  146|       |
  147|  20.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 15.8k, False: 5.17k]
  ------------------
  148|  15.8k|            auto tmp =
  149|  15.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  15.8k|            auto res = get_next_code_point(tmp);
  151|  15.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 306, False: 15.5k]
  ------------------
  152|    306|                return it;
  153|    306|            }
  154|  15.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  15.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  15.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  15.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  15.5k|        }
  158|  5.47k|    }
  159|       |
  160|  3.18k|    return detail::make_string_view_iterator(source, it);
  161|  3.49k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  28.8k|{
  118|  28.8k|    static_assert(sizeof(*source.data()) == 1);
  119|  28.8k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  28.8k|    uint64_t word{};
  121|  28.8k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  28.8k|    return has_byte_greater(word, 127) != 0;
  124|  28.8k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  14.4k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  15.8k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  21.6k|{
  131|  21.6k|    auto it = source.begin();
  132|       |
  133|  27.1k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 20.7k, False: 6.36k]
  ------------------
  134|  20.7k|        auto sv =
  135|  20.7k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  20.7k|                .substr(0, 8);
  137|       |
  138|  20.7k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 9.86k, False: 10.8k]
  ------------------
  139|  9.86k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  9.86k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  9.86k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 8.12k, False: 1.74k]
  ------------------
  142|  8.12k|                break;
  143|  8.12k|            }
  144|  1.74k|            continue;
  145|  9.86k|        }
  146|       |
  147|  20.8k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.0k, False: 3.73k]
  ------------------
  148|  17.0k|            auto tmp =
  149|  17.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.0k|            auto res = get_next_code_point(tmp);
  151|  17.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 7.16k, False: 9.91k]
  ------------------
  152|  7.16k|                return it;
  153|  7.16k|            }
  154|  9.91k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.91k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.91k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  9.91k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.91k|        }
  158|  10.8k|    }
  159|       |
  160|  14.4k|    return detail::make_string_view_iterator(source, it);
  161|  21.6k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  19.2k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  17.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|    884|{
  804|    884|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 884]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|    884|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 884]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|    884|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 884]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|    884|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 884]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|    884|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|    884|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 8, False: 876]
  ------------------
  851|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
  852|      8|            return detail::unexpected_scan_error(
  853|      8|                scan_error::invalid_scanned_value,
  854|      8|                "Invalid floating-point digit");
  855|      8|        }
  856|      8|    }
  857|    876|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 876, False: 0]
  |  |  ------------------
  ------------------
  858|    876|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|    876|                                             "Invalid floating-point digit");
  860|    876|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|  9.48k|{
  804|  9.48k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 9.48k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|  9.48k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 9.48k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|  9.48k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 9.48k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|  9.48k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 9.48k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|  9.48k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|  9.48k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 12, False: 9.47k]
  ------------------
  851|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
  852|     12|            return detail::unexpected_scan_error(
  853|     12|                scan_error::invalid_scanned_value,
  854|     12|                "Invalid floating-point digit");
  855|     12|        }
  856|     12|    }
  857|  9.47k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|  9.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.47k, False: 0]
  |  |  ------------------
  ------------------
  858|  9.47k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  9.47k|                                             "Invalid floating-point digit");
  860|  9.47k|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  78.3k|{
 1317|  78.3k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 77.9k, False: 378]
  ------------------
 1318|  77.9k|        return false;
 1319|  77.9k|    }
 1320|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 252]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|  78.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  78.3k|        : format_handler_base{argcount},
 1593|  78.3k|          parse_ctx{format},
 1594|  78.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  78.3k|    static_cast<    \
  |  |  935|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  78.3k|    static_cast<    \
  |  |  935|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  78.3k|    {
 1596|  78.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   235k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   235k|    {
 1412|   235k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   235k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  78.3k|        : contiguous_ctx(source, args, loc)
 1544|  78.3k|    {
 1545|  78.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  78.3k|{
 1734|  78.3k|    const auto beg = handler.get_ctx().begin();
 1735|  78.3k|    detail::parse_format_string<false>(format, handler);
 1736|  78.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 75.4k, False: 2.87k]
  |  |  ------------------
  ------------------
 1737|  75.4k|        return unexpected(err.error());
 1738|  75.4k|    }
 1739|  2.87k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  78.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   403k|    {
 1718|   403k|        return ctx.get();
 1719|   403k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   403k|    {
 1549|   403k|        return contiguous_ctx;
 1550|   403k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  95.3k|    {
 1600|   132k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 41.3k, False: 91.1k]
  ------------------
 1601|  41.3k|            auto it = get_ctx().begin();
 1602|  41.3k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 1.03k, False: 40.2k]
  ------------------
 1603|  1.03k|                SCN_UNLIKELY_ATTR
 1604|  1.03k|                return on_error(
 1605|  1.03k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|  1.03k|            }
 1607|       |
 1608|  40.2k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|  40.2k|                    detail::make_string_view_from_pointers(begin, end));
 1610|  40.2k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 2.22k, False: 38.0k]
  ------------------
 1611|  2.22k|                SCN_UNLIKELY_ATTR
 1612|  2.22k|                return on_error({scan_error::invalid_format_string,
 1613|  2.22k|                                 "Invalid encoding in format string"});
 1614|  2.22k|            }
 1615|  38.0k|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 6.28k, False: 31.7k]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  6.28k|                get_ctx().advance_to(
 1618|  6.28k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  6.28k|                auto begin_it = impl::read_while_classic_space(
 1621|  6.28k|                    detail::make_string_view_from_pointers(
 1622|  6.28k|                        detail::to_address(after_space_it),
 1623|  6.28k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  6.28k|                begin = detail::to_address(begin_it) - 1;
 1626|  6.28k|                continue;
 1627|  6.28k|            }
 1628|       |
 1629|  31.7k|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 966, False: 30.8k]
  ------------------
 1630|    966|                SCN_UNLIKELY_ATTR
 1631|    966|                return on_error({scan_error::invalid_literal,
 1632|    966|                                 "Unexpected literal character in source"});
 1633|    966|            }
 1634|  30.8k|            get_ctx().advance_to(ranges::next(it));
 1635|  30.8k|        }
 1636|  95.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   285k|    {
 1460|   285k|        error = unexpected(err);
 1461|   285k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1666|  5.79k|    {
 1667|  5.79k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  5.79k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  5.79k|        on_visit_scan_arg(
 1671|  5.79k|            impl::default_arg_reader<context_type>{
 1672|  5.79k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  5.79k|            arg);
 1674|  5.79k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  49.0k|{
 1372|  49.0k|    auto arg = ctx.arg(id);
 1373|  49.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.37k, False: 47.6k]
  |  |  ------------------
  ------------------
 1374|  1.37k|        handler.on_error("Failed to find argument with ID");
 1375|  1.37k|    }
 1376|  49.0k|    return arg;
 1377|  49.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   155k|    {
 1486|   155k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.57k, False: 153k]
  |  |  ------------------
  ------------------
 1487|  2.57k|            on_error({scan_error::invalid_format_string,
 1488|  2.57k|                      "Argument ID out-of-range"});
 1489|  2.57k|            return;
 1490|  2.57k|        }
 1491|       |
 1492|   153k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 152k]
  |  |  ------------------
  ------------------
 1493|     98|            on_error({scan_error::invalid_format_string,
 1494|     98|                      "Argument with this ID has already been scanned"});
 1495|     98|        }
 1496|       |
 1497|   153k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   153k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 153k, False: 0]
  |  |  ------------------
  ------------------
 1498|   153k|            visited_args_lower64 |= (1ull << id);
 1499|   153k|            return;
 1500|   153k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   153k|    {
 1470|   153k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   153k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   153k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 153k, False: 0]
  |  |  ------------------
  ------------------
 1477|   153k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   153k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  5.79k|    {
 1651|  5.79k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 138, False: 5.65k]
  |  Branch (1651:13): [True: 138, False: 5.65k]
  |  Branch (1651:29): [True: 0, False: 5.65k]
  ------------------
 1652|    138|            SCN_UNLIKELY_ATTR
 1653|    138|            return;
 1654|    138|        }
 1655|       |
 1656|  5.65k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  5.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  5.65k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  5.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.90k, False: 1.74k]
  |  |  ------------------
  ------------------
 1658|  3.90k|            on_error(r.error());
 1659|  3.90k|        }
 1660|  1.74k|        else {
 1661|  1.74k|            get_ctx().advance_to(*r);
 1662|  1.74k|        }
 1663|  5.65k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  47.3k|    {
 1640|  47.3k|        return parse_ctx.next_arg_id();
 1641|  47.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1643|  1.71k|    {
 1644|  1.71k|        parse_ctx.check_arg_id(id);
 1645|  1.71k|        return id;
 1646|  1.71k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  43.2k|    {
 1680|  43.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  43.2k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  43.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 43.2k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  43.2k|        auto specs = detail::format_specs{};
 1693|  43.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  43.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  43.2k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  43.2k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  43.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 2.40k, False: 40.8k]
  |  Branch (1698:29): [True: 514, False: 40.3k]
  ------------------
 1699|  2.91k|            SCN_UNLIKELY_ATTR
 1700|  2.91k|            on_error({scan_error::invalid_format_string,
 1701|  2.91k|                      "Missing '}' in format string"});
 1702|  2.91k|            return parse_ctx.begin();
 1703|  2.91k|        }
 1704|  40.3k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 240, False: 40.0k]
  |  |  ------------------
  ------------------
 1705|    240|            return parse_ctx.begin();
 1706|    240|        }
 1707|  40.0k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  40.0k|        on_visit_scan_arg(
 1710|  40.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  40.0k|                                           get_ctx().locale()},
 1712|  40.0k|            arg);
 1713|  40.0k|        return parse_ctx.begin();
 1714|  40.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  43.2k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  43.2k|    {
 1391|  43.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  40.0k|    {
 1651|  40.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 96, False: 39.9k]
  |  Branch (1651:13): [True: 96, False: 39.9k]
  |  Branch (1651:29): [True: 0, False: 39.9k]
  ------------------
 1652|     96|            SCN_UNLIKELY_ATTR
 1653|     96|            return;
 1654|     96|        }
 1655|       |
 1656|  39.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  39.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.3k, False: 4.62k]
  |  |  ------------------
  ------------------
 1658|  35.3k|            on_error(r.error());
 1659|  35.3k|        }
 1660|  4.62k|        else {
 1661|  4.62k|            get_ctx().advance_to(*r);
 1662|  4.62k|        }
 1663|  39.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|   135k|    {
 1454|   135k|        SCN_UNLIKELY_ATTR
 1455|   135k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|   135k|                                              msg);
 1457|   135k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   235k|    {
 1419|   235k|        {
 1420|   235k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 235k]
  ------------------
 1421|   235k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 235k]
  ------------------
 1422|   235k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   235k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   235k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 82.1k, False: 152k]
  ------------------
 1426|  82.1k|                return on_error({scan_error::invalid_format_string,
 1427|  82.1k|                                 "Argument list not exhausted"});
 1428|  82.1k|            }
 1429|   235k|        }
 1430|       |
 1431|   152k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 152k, False: 0]
  ------------------
 1432|   152k|            return;
 1433|   152k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|   844k|    {
 1465|   844k|        return error;
 1466|   844k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  78.3k|{
 1749|  78.3k|    const auto argcount = args.size();
 1750|  78.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 78.3k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|  78.3k|    auto handler = format_handler<true, CharT>{
 1756|  78.3k|        ranges::subrange<const CharT*>{source.data(),
 1757|  78.3k|                                       source.data() + source.size()},
 1758|  78.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  78.3k|    static_cast<    \
  |  |  935|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  78.3k|    static_cast<    \
  |  |  935|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  78.3k|    return vscan_parse_format_string(format, handler);
 1760|  78.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   156k|{
 1749|   156k|    const auto argcount = args.size();
 1750|   156k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 156k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|   156k|    auto handler = format_handler<true, CharT>{
 1756|   156k|        ranges::subrange<const CharT*>{source.data(),
 1757|   156k|                                       source.data() + source.size()},
 1758|   156k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   156k|    return vscan_parse_format_string(format, handler);
 1760|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   156k|{
 1317|   156k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 145k, False: 11.0k]
  ------------------
 1318|   145k|        return false;
 1319|   145k|    }
 1320|  11.0k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 10.9k]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   156k|        : format_handler_base{argcount},
 1593|   156k|          parse_ctx{format},
 1594|   156k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   156k|    {
 1596|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   156k|        : contiguous_ctx(source, args, loc)
 1544|   156k|    {
 1545|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   156k|{
 1734|   156k|    const auto beg = handler.get_ctx().begin();
 1735|   156k|    detail::parse_format_string<false>(format, handler);
 1736|   156k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 155k, False: 1.41k]
  |  |  ------------------
  ------------------
 1737|   155k|        return unexpected(err.error());
 1738|   155k|    }
 1739|  1.41k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   964M|    {
 1718|   964M|        return ctx.get();
 1719|   964M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   964M|    {
 1549|   964M|        return contiguous_ctx;
 1550|   964M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   195k|    {
 1600|   321M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 321M, False: 109k]
  ------------------
 1601|   321M|            auto it = get_ctx().begin();
 1602|   321M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 396, False: 321M]
  ------------------
 1603|    396|                SCN_UNLIKELY_ATTR
 1604|    396|                return on_error(
 1605|    396|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|    396|            }
 1607|       |
 1608|   321M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|   321M|                    detail::make_string_view_from_pointers(begin, end));
 1610|   321M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 50.5k, False: 321M]
  ------------------
 1611|  50.5k|                SCN_UNLIKELY_ATTR
 1612|  50.5k|                return on_error({scan_error::invalid_format_string,
 1613|  50.5k|                                 "Invalid encoding in format string"});
 1614|  50.5k|            }
 1615|   321M|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 80.1k, False: 321M]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  80.1k|                get_ctx().advance_to(
 1618|  80.1k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  80.1k|                auto begin_it = impl::read_while_classic_space(
 1621|  80.1k|                    detail::make_string_view_from_pointers(
 1622|  80.1k|                        detail::to_address(after_space_it),
 1623|  80.1k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  80.1k|                begin = detail::to_address(begin_it) - 1;
 1626|  80.1k|                continue;
 1627|  80.1k|            }
 1628|       |
 1629|   321M|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 35.2k, False: 321M]
  ------------------
 1630|  35.2k|                SCN_UNLIKELY_ATTR
 1631|  35.2k|                return on_error({scan_error::invalid_literal,
 1632|  35.2k|                                 "Unexpected literal character in source"});
 1633|  35.2k|            }
 1634|   321M|            get_ctx().advance_to(ranges::next(it));
 1635|   321M|        }
 1636|   195k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1666|  82.6k|    {
 1667|  82.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  82.6k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  82.6k|        on_visit_scan_arg(
 1671|  82.6k|            impl::default_arg_reader<context_type>{
 1672|  82.6k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  82.6k|            arg);
 1674|  82.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   106k|{
 1372|   106k|    auto arg = ctx.arg(id);
 1373|   106k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.19k, False: 105k]
  |  |  ------------------
  ------------------
 1374|  1.19k|        handler.on_error("Failed to find argument with ID");
 1375|  1.19k|    }
 1376|   106k|    return arg;
 1377|   106k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  82.6k|    {
 1651|  82.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 120, False: 82.5k]
  |  Branch (1651:13): [True: 120, False: 82.5k]
  |  Branch (1651:29): [True: 0, False: 82.5k]
  ------------------
 1652|    120|            SCN_UNLIKELY_ATTR
 1653|    120|            return;
 1654|    120|        }
 1655|       |
 1656|  82.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  82.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 46.5k, False: 36.0k]
  |  |  ------------------
  ------------------
 1658|  46.5k|            on_error(r.error());
 1659|  46.5k|        }
 1660|  36.0k|        else {
 1661|  36.0k|            get_ctx().advance_to(*r);
 1662|  36.0k|        }
 1663|  82.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   106k|    {
 1640|   106k|        return parse_ctx.next_arg_id();
 1641|   106k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1643|    270|    {
 1644|    270|        parse_ctx.check_arg_id(id);
 1645|    270|        return id;
 1646|    270|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  23.9k|    {
 1680|  23.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  23.9k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  23.9k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 23.9k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  23.9k|        auto specs = detail::format_specs{};
 1693|  23.9k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  23.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  23.9k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  23.9k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  23.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 1.93k, False: 21.9k]
  |  Branch (1698:29): [True: 352, False: 21.6k]
  ------------------
 1699|  2.28k|            SCN_UNLIKELY_ATTR
 1700|  2.28k|            on_error({scan_error::invalid_format_string,
 1701|  2.28k|                      "Missing '}' in format string"});
 1702|  2.28k|            return parse_ctx.begin();
 1703|  2.28k|        }
 1704|  21.6k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 246, False: 21.3k]
  |  |  ------------------
  ------------------
 1705|    246|            return parse_ctx.begin();
 1706|    246|        }
 1707|  21.3k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  21.3k|        on_visit_scan_arg(
 1710|  21.3k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  21.3k|                                           get_ctx().locale()},
 1712|  21.3k|            arg);
 1713|  21.3k|        return parse_ctx.begin();
 1714|  21.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|  23.9k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  23.9k|    {
 1391|  23.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  21.3k|    {
 1651|  21.3k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 112, False: 21.2k]
  |  Branch (1651:13): [True: 112, False: 21.2k]
  |  Branch (1651:29): [True: 0, False: 21.2k]
  ------------------
 1652|    112|            SCN_UNLIKELY_ATTR
 1653|    112|            return;
 1654|    112|        }
 1655|       |
 1656|  21.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  21.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.0k, False: 2.27k]
  |  |  ------------------
  ------------------
 1658|  19.0k|            on_error(r.error());
 1659|  19.0k|        }
 1660|  2.27k|        else {
 1661|  2.27k|            get_ctx().advance_to(*r);
 1662|  2.27k|        }
 1663|  21.2k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  4.35k|{
 1462|  4.35k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  4.35k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  4.35k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  4.35k|            return transcode_to_string_impl_to32(src, dest);
 1473|  4.35k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  4.35k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  4.35k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  4.35k|{
 1355|  4.35k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  4.35k|    auto it = src.begin();
 1358|   433k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 429k, False: 4.35k]
  ------------------
 1359|   429k|        auto res = get_next_code_point(
 1360|   429k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   429k|                                                                 src.end()));
 1362|   429k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 419k]
  |  |  ------------------
  ------------------
 1363|  10.0k|            dest.push_back(DestCharT{0xfffd});
 1364|  10.0k|        }
 1365|   419k|        else {
 1366|   419k|            dest.push_back(res.value);
 1367|   419k|        }
 1368|   429k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   429k|    }
 1370|  4.35k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   542k|{
 1279|   542k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   542k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   542k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   542k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   542k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 532k]
  |  |  ------------------
  ------------------
 1283|  10.0k|        return {get_start_for_next_code_point(input),
 1284|  10.0k|                detail::invalid_code_point};
 1285|  10.0k|    }
 1286|   532k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 940, False: 531k]
  |  |  ------------------
  ------------------
 1287|    940|        return {input.end(), detail::invalid_code_point};
 1288|    940|    }
 1289|       |
 1290|   531k|    return {input.begin() + len,
 1291|   531k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   532k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  10.0k|{
 1265|  10.0k|    auto it = input.begin();
 1266|  30.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 29.1k, False: 1.34k]
  ------------------
 1267|  29.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 8.68k, False: 20.4k]
  ------------------
 1268|  8.68k|            break;
 1269|  8.68k|        }
 1270|  29.1k|    }
 1271|  10.0k|    return it;
 1272|  10.0k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|   211k|    constexpr parse_error(code c) : m_code(c)
  808|   211k|    {
  809|   211k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   211k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|   211k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  79.6k|    {
  823|  79.6k|        return a.m_code == b.m_code;
  824|  79.6k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  12.1k|    {
  827|  12.1k|        return !(a == b);
  828|  12.1k|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  35.3k|    {
 3046|  35.3k|        SCN_UNLIKELY_ATTR
 3047|  35.3k|        m_msg = msg;
 3048|  35.3k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  61.2k|    {
 3051|  61.2k|        return m_msg == nullptr;
 3052|  61.2k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|    952|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5030|   335k|    {
 5031|   335k|        on_charset_range(cp, cp + 1);
 5032|   335k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5035|   338k|    {
 5036|   338k|        if (end <= 127) {
  ------------------
  |  Branch (5036:13): [True: 169k, False: 168k]
  ------------------
 5037|   169k|            return;
 5038|   169k|        }
 5039|       |
 5040|  31.2M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5040:25): [True: 31.2M, False: 166k]
  ------------------
 5041|       |            // TODO: check for overlap
 5042|  31.2M|            if (elem.first == end) {
  ------------------
  |  Branch (5042:17): [True: 762, False: 31.2M]
  ------------------
 5043|    762|                elem.first = begin;
 5044|    762|                return;
 5045|    762|            }
 5046|       |
 5047|  31.2M|            if (elem.second == begin) {
  ------------------
  |  Branch (5047:17): [True: 1.00k, False: 31.2M]
  ------------------
 5048|  1.00k|                elem.second = end;
 5049|  1.00k|                return;
 5050|  1.00k|            }
 5051|  31.2M|        }
 5052|       |
 5053|   166k|        extra_ranges.push_back(std::make_pair(begin, end));
 5054|   166k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5057|    582|    {
 5058|       |        // no-op
 5059|    582|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5072|   343k|    {
 5073|   343k|        return err;
 5074|   343k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5386|  1.25k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  33.7k|{
  458|  33.7k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  33.7k|        static_cast<unsigned char>(ch))];
  460|  33.7k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   237k|{
  469|   237k|    return static_cast<unsigned char>(ch) <= 127;
  470|   237k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  1.66k|{
  474|  1.66k|#if WCHAR_MIN < 0
  475|  1.66k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.65k, False: 12]
  |  Branch (475:23): [True: 1.65k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.66k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   256k|{
  483|   256k|    return cp <= 127;
  484|   256k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  28.8k|{
  539|  28.8k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  28.8k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   279k|{
  784|   279k|    return e != eof_error::good;
  785|   279k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_input, "EOF"};
  800|    174|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    738|{
  845|    738|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|    738|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    738|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    738|    return parse_error::eof;
  847|    738|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  12.1k|{
  854|  12.1k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 12.1k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  12.1k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 82, False: 12.1k]
  ------------------
  859|     82|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|     82|    }
  861|       |
  862|  12.1k|    return detail::unexpected_scan_error(code, msg);
  863|  12.1k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  12.1k|{
  868|  12.1k|    return [code, msg](parse_error err) {
  869|  12.1k|        assert(err != parse_error::good);
  870|  12.1k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  12.1k|    };
  872|  12.1k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  3.67k|{
 2320|  3.67k|    unsigned char running_diff{0};
 2321|  12.8k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 9.15k, False: 3.67k]
  ------------------
 2322|  9.15k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  9.15k|    }
 2324|  3.67k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 0, False: 3.67k]
  |  Branch (2324:33): [True: 0, False: 3.67k]
  ------------------
 2325|  3.67k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2402|   109k|{
 2403|   109k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2403:9): [True: 23.6k, False: 85.9k]
  ------------------
 2404|   109k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2404:10): [True: 92, False: 23.5k]
  ------------------
 2405|  23.6k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2405:10): [True: 108, False: 23.4k]
  ------------------
 2406|  23.6k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2406:10): [True: 72, False: 23.3k]
  ------------------
 2407|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2408|  23.6k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2408:11): [True: 8.79k, False: 14.5k]
  |  Branch (2408:27): [True: 1.27k, False: 7.51k]
  |  Branch (2408:43): [True: 444, False: 834]
  ------------------
 2409|  23.6k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2409:11): [True: 7.51k, False: 15.3k]
  |  Branch (2409:27): [True: 86, False: 7.42k]
  ------------------
 2410|  23.6k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2410:11): [True: 7.40k, False: 15.4k]
  |  Branch (2410:27): [True: 42, False: 7.36k]
  ------------------
 2411|  23.6k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2411:11): [True: 7.36k, False: 15.4k]
  |  Branch (2411:27): [True: 462, False: 6.90k]
  ------------------
 2412|  23.6k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2412:11): [True: 6.90k, False: 15.4k]
  |  Branch (2412:27): [True: 82, False: 6.81k]
  ------------------
 2413|  23.6k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2413:11): [True: 6.81k, False: 15.4k]
  |  Branch (2413:27): [True: 206, False: 6.61k]
  ------------------
 2414|  23.6k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2414:11): [True: 6.61k, False: 15.4k]
  |  Branch (2414:27): [True: 80, False: 6.53k]
  ------------------
 2415|  23.6k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2415:11): [True: 6.38k, False: 15.5k]
  |  Branch (2415:28): [True: 222, False: 6.16k]
  ------------------
 2416|  23.6k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2416:11): [True: 6.16k, False: 15.5k]
  |  Branch (2416:28): [True: 446, False: 5.71k]
  ------------------
 2417|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2418|  23.6k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2418:11): [True: 5.86k, False: 15.4k]
  |  Branch (2418:28): [True: 78, False: 5.78k]
  ------------------
 2419|       |         // Supplemental Symbols and Pictographs:
 2420|  23.6k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2420:11): [True: 5.78k, False: 15.4k]
  |  Branch (2420:28): [True: 72, False: 5.71k]
  ------------------
 2421|  2.49k|        return 2;
 2422|  2.49k|    }
 2423|   107k|    return 1;
 2424|   109k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2427|  62.5k|{
 2428|  62.5k|    return calculate_text_width_for_fmt_v10(cp);
 2429|  62.5k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2442|    184|{
 2443|    184|    return calculate_text_width_for_fmt_v10(cp);
 2444|    184|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  75.3k|{
 3240|  75.3k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  75.3k|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  67.2k|{
 3244|  67.2k|#if WCHAR_MIN < 0
 3245|  67.2k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 67.2k, False: 0]
  |  Branch (3245:20): [True: 67.2k, False: 0]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  67.2k|        return char_to_int(static_cast<char>(ch));
 3250|  67.2k|    }
 3251|      0|    return 255;
 3252|  67.2k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4303|  12.3k|{
 4304|  12.3k|    std::regex_constants::syntax_option_type result{};
 4305|  12.3k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4305:9): [True: 294, False: 12.0k]
  ------------------
 4306|    294|#if SCN_HAS_STD_REGEX_MULTILINE
 4307|    294|        result |= std::regex_constants::multiline;
 4308|       |#else
 4309|       |        return detail::unexpected_scan_error(
 4310|       |            scan_error::invalid_format_string,
 4311|       |            "/m flag for regex isn't supported by regex backend");
 4312|       |#endif
 4313|    294|    }
 4314|  12.3k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4314:9): [True: 0, False: 12.3k]
  ------------------
 4315|  12.3k|        detail::regex_flags::none) {
 4316|      0|        return detail::unexpected_scan_error(
 4317|      0|            scan_error::invalid_format_string,
 4318|      0|            "/s flag for regex isn't supported by regex backend");
 4319|      0|    }
 4320|  12.3k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4320:9): [True: 1.00k, False: 11.3k]
  ------------------
 4321|  1.00k|        result |= std::regex_constants::icase;
 4322|  1.00k|    }
 4323|  12.3k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4323:9): [True: 12, False: 12.3k]
  ------------------
 4324|     12|        result |= std::regex_constants::nosubs;
 4325|     12|    }
 4326|  12.3k|    return result;
 4327|  12.3k|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4680|    408|{
 4681|    408|    std::string result{pattern};
 4682|  2.79k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4682:24): [True: 2.38k, False: 408]
  ------------------
 4683|  2.38k|        result.replace(n, 2, "/");
 4684|  2.38k|        ++n;
 4685|  2.38k|    }
 4686|    408|    return result;
 4687|    408|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4689|    150|{
 4690|    150|    std::wstring result{pattern};
 4691|    984|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4691:24): [True: 834, False: 150]
  ------------------
 4692|    834|        result.replace(n, 2, L"/");
 4693|    834|        ++n;
 4694|    834|    }
 4695|    150|    return result;
 4696|    150|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6045|  7.81k|{
 6046|  7.81k|    if (specs.width != 0) {
  ------------------
  |  Branch (6046:9): [True: 1.99k, False: 5.81k]
  ------------------
 6047|  1.99k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6047:13): [True: 918, False: 1.07k]
  ------------------
 6048|    918|            return detail::unexpected_scan_error(
 6049|    918|                scan_error::length_too_short,
 6050|    918|                "Scanned value too narrow, width did not exceed what "
 6051|    918|                "was specified in the format string");
 6052|    918|        }
 6053|  1.99k|    }
 6054|  6.89k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6054:9): [True: 1.83k, False: 5.06k]
  ------------------
 6055|       |        // Ensured by take_width_view
 6056|  1.83k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|  1.83k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6057|  1.83k|                   specs.precision);
 6058|  1.83k|    }
 6059|  6.89k|    return {};
 6060|  6.89k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  49.3k|    {
  304|  49.3k|        ranges::advance(x, n);
  305|  49.3k|        return x;
  306|  49.3k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  49.3k|    {
  268|  49.3k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  49.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  82.4k|    {
  151|  82.4k|        i += n;
  152|  82.4k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  53.6k|    {
  108|  53.6k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  53.6k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  53.6k|    {
   87|  53.6k|        return s - i;
   88|  53.6k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  57.9k|    {
  304|  57.9k|        ranges::advance(x, n);
  305|  57.9k|        return x;
  306|  57.9k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  57.9k|    {
  268|  57.9k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  57.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  57.9k|    {
  151|  57.9k|        i += n;
  152|  57.9k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.45k|    {
  108|  3.45k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.45k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.45k|    {
   87|  3.45k|        return s - i;
   88|  3.45k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   174k|    {
 2993|   174k|        return m_current;
 2994|   174k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   321M|    {
 2993|   321M|        return m_current;
 2994|   321M|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5661|  4.42k|    {
 5662|  4.42k|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|  4.42k|        else {
 5667|  4.42k|            detail::check_char_type_specs(specs, eh);
 5668|  4.42k|        }
 5669|  4.42k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.89k, False: 536]
  |  |  ------------------
  ------------------
 5670|  3.89k|            return detail::unexpected_scan_error(
 5671|  3.89k|                scan_error::invalid_format_string, eh.m_msg);
 5672|  3.89k|        }
 5673|    536|        return {};
 5674|  4.42k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  21.8k|    {
  763|  21.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  21.8k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.92k|        : m_fptr([](storage fn,
  743|  2.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.92k|              cvref<T> obj = *get<T>(fn);
  745|  2.92k|              if constexpr (std::is_void_v<R>) {
  746|  2.92k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.92k|              }
  748|  2.92k|              else {
  749|  2.92k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.92k|              }
  751|  2.92k|          }),
  752|  2.92k|          m_storage(std::addressof(f))
  753|  2.92k|    {
  754|  2.92k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.74k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.74k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.74k|              else {
  749|  6.74k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.74k|              }
  751|  6.74k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.74k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.74k|        else if constexpr (std::is_object_v<T>) {
  688|  6.74k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.74k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.92k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.92k|        {
  662|  2.92k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.28M|    {
  763|  1.28M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.28M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   241k|        : m_fptr([](storage fn,
  743|   241k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   241k|              cvref<T> obj = *get<T>(fn);
  745|   241k|              if constexpr (std::is_void_v<R>) {
  746|   241k|                  obj(static_cast<decltype(args)>(args)...);
  747|   241k|              }
  748|   241k|              else {
  749|   241k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   241k|              }
  751|   241k|          }),
  752|   241k|          m_storage(std::addressof(f))
  753|   241k|    {
  754|   241k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   568k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   568k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   568k|              else {
  749|   568k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   568k|              }
  751|   568k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   568k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   568k|        else if constexpr (std::is_object_v<T>) {
  688|   568k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   568k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   241k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   241k|        {
  662|   241k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5656|  1.64k|    {
 5657|  1.64k|        return false;
 5658|  1.64k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  12.1k|    return [code, msg](parse_error err) {
  869|  12.1k|        assert(err != parse_error::good);
  870|  12.1k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  12.1k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|     64|    {
 1879|     64|        auto stdloc = loc.get<std::locale>();
 1880|     64|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     64|        grouping = numpunct.grouping();
 1882|     64|        thousands_sep =
 1883|     64|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 64]
  ------------------
 1884|     64|        decimal_point = numpunct.decimal_point();
 1885|     64|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|     82|{
 1816|     82|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 82, False: 0]
  ------------------
 1817|     82|        return std::use_facet<Facet>(stdloc);
 1818|     82|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     82|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  28.5k|{
 2449|  28.5k|    size_t count{0};
 2450|  28.5k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  28.5k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  28.5k|    });
 2453|  28.5k|    return count;
 2454|  28.5k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  28.5k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  28.5k|    auto it = input.begin();
 1547|  68.2k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 39.6k, False: 28.5k]
  ------------------
 1548|  39.6k|        auto res = get_next_code_point(
 1549|  39.6k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  39.6k|        cb(res.value);
 1551|  39.6k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  39.6k|    }
 1553|  28.5k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  46.8k|    {
  763|  46.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  46.8k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  28.5k|        : m_fptr([](storage fn,
  743|  28.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.5k|              cvref<T> obj = *get<T>(fn);
  745|  28.5k|              if constexpr (std::is_void_v<R>) {
  746|  28.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.5k|              }
  748|  28.5k|              else {
  749|  28.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.5k|              }
  751|  28.5k|          }),
  752|  28.5k|          m_storage(std::addressof(f))
  753|  28.5k|    {
  754|  28.5k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  39.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.6k|              cvref<T> obj = *get<T>(fn);
  745|  39.6k|              if constexpr (std::is_void_v<R>) {
  746|  39.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  39.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  39.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.6k|        else if constexpr (std::is_object_v<T>) {
  688|  39.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.6k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  39.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  39.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  39.6k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  28.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  28.5k|        {
  662|  28.5k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  3.61k|    {
 1681|  3.61k|        return m_view;
 1682|  3.61k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  3.80k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2520|  14.0k|    {
 2521|  14.0k|        return m_multibyte_left;
 2522|  14.0k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E22is_current_double_wideEv:
 2525|  6.14k|    {
 2526|  6.14k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  6.14k|        return _get_width_at_current_cp_start(
 2528|  6.14k|                   _get_cp_length_at_current()) == 2;
 2529|  6.14k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2753|  65.6k|    {
 2754|  65.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 698, False: 64.9k]
  |  |  ------------------
  ------------------
 2755|    698|            return 0;
 2756|    698|        }
 2757|       |
 2758|  64.9k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 41.3k, False: 23.6k]
  ------------------
 2759|  41.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  41.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  41.3k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  41.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  41.3k|        }
 2763|       |
 2764|  23.6k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  23.6k|                                           cplen);
 2766|  23.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 322, False: 23.3k]
  |  |  ------------------
  ------------------
 2767|    322|            return 0;
 2768|    322|        }
 2769|       |
 2770|  23.3k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  23.3k|        return static_cast<difference_type>(
 2772|  23.3k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  23.6k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  26.0k|{
 1956|  26.0k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  26.0k|    if constexpr (ranges::sized_range<Range>) {
 1959|  26.0k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  26.0k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 432, False: 25.5k]
  ------------------
 1961|    432|            return unexpected(eof_error::eof);
 1962|    432|        }
 1963|       |
 1964|  25.5k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  26.0k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2747|  65.6k|    {
 2748|  65.6k|        return static_cast<difference_type>(
 2749|  65.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  65.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2532|  97.2k|    {
 2533|  97.2k|        return *m_current;
 2534|  97.2k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2541|   114k|    {
 2542|   114k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|   114k|        _increment_current();
 2544|   114k|        return *this;
 2545|   114k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2776|   114k|    {
 2777|   114k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 59.5k, False: 54.6k]
  ------------------
 2778|  59.5k|            auto cplen = _get_cp_length_at_current();
 2779|  59.5k|            m_multibyte_left = cplen - 1;
 2780|  59.5k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  59.5k|        }
 2782|  54.6k|        else {
 2783|  54.6k|            --m_multibyte_left;
 2784|  54.6k|        }
 2785|       |
 2786|   114k|        ++m_current;
 2787|   114k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|  69.0k|    {
 2638|  69.0k|        return !(a == b);
 2639|  69.0k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|  77.3k|    {
 2630|  77.3k|        return a.m_current == b.m_current;
 2631|  77.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2536|  10.1k|    {
 2537|  10.1k|        return *m_current;
 2538|  10.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.11k|    {
  268|  1.11k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.11k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.11k|    {
  161|  1.11k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.11k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.11k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.11k|        else {
  169|  1.11k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.11k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.11k|        }
  173|  1.11k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  19.8k|    {
 1989|  19.8k|        return !codepoint.empty();
 1990|  19.8k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|  1.49k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  1.49k|    else {
 1788|  1.49k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  1.49k|    }
 1790|  1.49k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|  1.49k|    {
 1636|  1.49k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  1.49k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|  1.49k|    {
 1720|  1.49k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|  1.49k|        else {
 1753|  1.49k|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|  1.49k|            if constexpr (ranges::common_range<Range>) {
 1758|  1.49k|                std::copy(ranges::begin(range), ranges::end(range),
 1759|  1.49k|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|  1.49k|            m_view = string_view_type{str};
 1768|  1.49k|        }
 1769|  1.49k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2480|  18.4k|        : m_current(x), m_end(s), m_count(n)
 2481|  18.4k|    {
 2482|  18.4k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2512|   109k|    {
 2513|   109k|        return m_current;
 2514|   109k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  7.35k|    {
 2943|  7.35k|        return take_width_view{r, n};
 2944|  7.35k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2910|  7.35k|        : m_base(base), m_count(count)
 2911|  7.35k|    {
 2912|  7.35k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2822|  7.35k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5701|    266|    {
 5702|    266|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 234, False: 32]
  ------------------
 5703|    266|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 32]
  ------------------
 5704|    234|            return read_default(range, value, loc);
 5705|    234|        }
 5706|       |
 5707|     32|        reader_impl_for_int<CharT> reader{};
 5708|     32|        signed char tmp_value{};
 5709|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     32|        value = static_cast<signed char>(value);
 5711|     32|        return ret;
 5712|    266|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5683|    234|    {
 5684|    234|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    234|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    234|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    234|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    234|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5601|    234|    {
 5602|    234|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    234|        ch = *range.begin();
 5604|    234|        return it;
 5605|    234|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  1.75k|{
 1945|  1.75k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.75k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  1.75k|    return ranges::next(range.begin());
 1950|  1.75k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|  1.75k|{
  951|  1.75k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.75k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  1.75k|    return eof_error::good;
  955|  1.75k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|  1.75k|{
  945|  1.75k|    return is_range_eof(r.begin(), r.end());
  946|  1.75k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  21.6k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  21.6k|    {
  938|  21.6k|        return begin == end;
  939|  21.6k|    }
  940|  21.6k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|   103k|        {
 2879|   103k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 4.51k, False: 99.1k]
  |  Branch (2879:39): [True: 826, False: 3.69k]
  ------------------
 2880|   103k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 924, False: 101k]
  ------------------
 2881|   103k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 9.52k, False: 92.4k]
  |  Branch (2881:39): [True: 6.14k, False: 3.37k]
  ------------------
 2882|   101k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 54, False: 6.09k]
  ------------------
 2883|   103k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2926|  54.1k|    {
 2927|  54.1k|        return sentinel<true>{m_base.get().end()};
 2928|  54.1k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2825|  91.1k|    {
 2826|  91.1k|        return view;
 2827|  91.1k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2859|  54.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  54.1k|    static_cast<    \
  |  |  935|  54.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.78k|    {
  296|  1.78k|        ++x;
  297|  1.78k|        return x;
  298|  1.78k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2920|  18.4k|    {
 2921|  18.4k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  18.4k|                                      m_count};
 2923|  18.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|     32|    {
 3590|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     32|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 32]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 32]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3616|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|    760|{
 3377|    760|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    760|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    760|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    760|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    760|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 760]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    760|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    760|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|    760|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|    760|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|    760|        parse_integer_base_prefix(
 3382|    760|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|    760|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 760]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|    760|    else {
 3394|    760|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 760]
  |  Branch (3394:13): [True: 760, False: 0]
  ------------------
 3395|    760|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 760, False: 0]
  ------------------
 3396|    760|            digits_begin_it = base_prefix_begin_it;
 3397|    760|        }
 3398|    760|    }
 3399|       |
 3400|    760|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 760, False: 0]
  ------------------
 3401|    760|        sign = sign_type::plus_sign;
 3402|    760|    }
 3403|    760|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|    760|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|    760|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|  1.00k|{
 3258|  1.00k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.00k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 1.00k, False: 0]
  ------------------
 3260|  1.00k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 1.00k, False: 0]
  ------------------
 3261|  1.00k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  1.00k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  1.00k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|  1.00k|{
 2372|  1.00k|    auto it = read_code_unit(range);
 2373|  1.00k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  2.01k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.01k, False: 1.00k]
  ------------------
 2378|  2.01k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 2.01k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  2.01k|    }
 2382|       |
 2383|  1.00k|    return unexpected(parse_error::error);
 2384|  1.00k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|    760|{
 3344|    760|    switch (base) {
 3345|     14|        case 2:
  ------------------
  |  Branch (3345:9): [True: 14, False: 746]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     14|                    false};
 3349|       |
 3350|     14|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 14, False: 746]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     14|            bool zero_parsed = false;
 3353|     14|            auto it = apply_opt(
 3354|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     14|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    246|        case 16:
  ------------------
  |  Branch (3358:9): [True: 246, False: 514]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    246|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    246|                    false};
 3362|       |
 3363|     20|        case 0:
  ------------------
  |  Branch (3363:9): [True: 20, False: 740]
  ------------------
 3364|       |            // detect base
 3365|     20|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    466|        default:
  ------------------
  |  Branch (3367:9): [True: 466, False: 294]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    466|            return {range.begin(), base, false};
 3370|    760|    }
 3371|    760|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    274|{
 2391|    274|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 274, False: 0]
  ------------------
 2392|    274|        return range.begin();
 2393|    274|    }
 2394|      0|    return *result;
 2395|    274|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     34|{
 3295|     34|    return read_matching_string_classic_nocase(range, "0b");
 3296|     34|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|  1.06k|{
 2331|  1.06k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.06k|    else {
 2344|  1.06k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.06k|            if (ch < 'A' || ch > 'Z') {
 2346|  1.06k|                return ch;
 2347|  1.06k|            }
 2348|  1.06k|            return static_cast<char_type>(ch +
 2349|  1.06k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.06k|        };
 2351|       |
 2352|  1.06k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 182, False: 878]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    182|    }                                                  \
  |  |  |  | 3939|  1.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    878|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    878|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    878|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    878|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 878, False: 0]
  |  |  ------------------
  ------------------
 2357|    878|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    878|                    return ascii_tolower(a) ==
 2359|    878|                           static_cast<detail::char_t<Range>>(b);
 2360|    878|                }))) {
 2361|    878|            return unexpected(parse_error::error);
 2362|    878|        }
 2363|       |
 2364|      0|        return it;
 2365|    878|    }
 2366|  1.06k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  4.52k|{
 1956|  4.52k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  4.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  4.52k|    else {
 1967|  4.52k|        auto it = range.begin();
 1968|  4.52k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 4.52k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  16.6k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 12.3k, False: 4.31k]
  ------------------
 1973|  12.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 210, False: 12.1k]
  ------------------
 1974|    210|                return unexpected(eof_error::eof);
 1975|    210|            }
 1976|  12.3k|        }
 1977|       |
 1978|  4.31k|        return it;
 1979|  4.52k|    }
 1980|  4.52k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  4.52k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  4.52k|    else {
 1116|  4.52k|        return 0;
 1117|  4.52k|    }
 1118|  4.52k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2344|    878|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    878|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 42, False: 836]
  |  Branch (2345:29): [True: 836, False: 0]
  ------------------
 2346|    878|                return ch;
 2347|    878|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    878|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     34|{
 3309|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 34]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 34]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     34|    return unexpected(parse_error::error);
 3319|     34|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     34|{
 2246|     34|    auto it = read_code_unit(range);
 2247|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2252|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     34|        return unexpected(parse_error::error);
 2254|     34|    }
 2255|       |
 2256|      0|    return *it;
 2257|     34|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     34|{
 1945|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     34|    return ranges::next(range.begin());
 1950|     34|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     34|{
  951|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     34|    return eof_error::good;
  955|     34|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  19.9k|{
  945|  19.9k|    return is_range_eof(r.begin(), r.end());
  946|  19.9k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    266|{
 3302|    266|    return read_matching_string_classic_nocase(range, "0x");
 3303|    266|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     20|{
 3325|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 20]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 20]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     20|    {
 3332|     20|        bool zero_parsed{false};
 3333|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 20]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     20|    }
 3337|     20|    return {range.begin(), 10, false};
 3338|     20|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|    736|{
 3411|    736|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|    736|    else {
 3422|    736|        return read_while1_code_unit(range,
 3423|    736|                                     [&](char_type ch) noexcept {
 3424|    736|                                         return char_to_int(ch) < base;
 3425|    736|                                     })
 3426|    736|            .transform_error(map_parse_error_to_scan_error(
 3427|    736|                scan_error::invalid_scanned_value,
 3428|    736|                "Failed to parse integer: No digits found"));
 3429|    736|    }
 3430|    736|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    984|{
 2095|    984|    auto it = read_while_code_unit(range, pred);
 2096|    984|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 984, False: 0]
  ------------------
 2097|    984|        return unexpected(parse_error::error);
 2098|    984|    }
 2099|      0|    return it;
 2100|    984|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    984|{
 2075|    984|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    984|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    984|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    984|    else {
 2060|    984|        auto first = range.begin();
 2061|    984|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 984, False: 0]
  ------------------
 2062|    984|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 984, False: 0]
  ------------------
 2063|    984|                return first;
 2064|    984|            }
 2065|    984|        }
 2066|      0|        return first;
 2067|    984|    }
 2068|    984|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  54.0k|        {
 2892|  54.0k|            return !(y == x);
 2893|  54.0k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    736|        : m_fptr([](storage fn,
  743|    736|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    736|              cvref<T> obj = *get<T>(fn);
  745|    736|              if constexpr (std::is_void_v<R>) {
  746|    736|                  obj(static_cast<decltype(args)>(args)...);
  747|    736|              }
  748|    736|              else {
  749|    736|                  return obj(static_cast<decltype(args)>(args)...);
  750|    736|              }
  751|    736|          }),
  752|    736|          m_storage(std::addressof(f))
  753|    736|    {
  754|    736|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    736|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    736|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    736|              else {
  749|    736|                  return obj(static_cast<decltype(args)>(args)...);
  750|    736|              }
  751|    736|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    736|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    736|        else if constexpr (std::is_object_v<T>) {
  688|    736|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    736|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3423|    736|                                     [&](char_type ch) noexcept {
 3424|    736|                                         return char_to_int(ch) < base;
 3425|    736|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    736|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    736|        {
  662|    736|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     24|{
 3441|     24|    std::basic_string<CharT> output;
 3442|     24|    std::string thsep_indices;
 3443|     24|    auto it = range.begin();
 3444|     24|    bool digit_matched = false;
 3445|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 24, False: 0]
  ------------------
 3446|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 24]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 24, False: 0]
  ------------------
 3451|     24|            break;
 3452|     24|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     24|    }
 3458|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3459|     24|        return detail::unexpected_scan_error(
 3460|     24|            scan_error::invalid_scanned_value,
 3461|     24|            "Failed to parse integer: No digits found");
 3462|     24|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     24|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2516|   213k|    {
 2517|   213k|        return m_count;
 2518|   213k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5701|    264|    {
 5702|    264|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 242, False: 22]
  ------------------
 5703|    264|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 22]
  ------------------
 5704|    242|            return read_default(range, value, loc);
 5705|    242|        }
 5706|       |
 5707|     22|        reader_impl_for_int<CharT> reader{};
 5708|     22|        signed char tmp_value{};
 5709|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     22|        value = static_cast<signed char>(value);
 5711|     22|        return ret;
 5712|    264|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5683|    872|    {
 5684|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    872|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    872|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    872|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5601|    872|    {
 5602|    872|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    872|        ch = *range.begin();
 5604|    872|        return it;
 5605|    872|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.35k|{
 1945|  6.35k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.35k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.35k|    return ranges::next(range.begin());
 1950|  6.35k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  21.3k|{
  951|  21.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.3k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  21.3k|    return eof_error::good;
  955|  21.3k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   263k|{
  945|   263k|    return is_range_eof(r.begin(), r.end());
  946|   263k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   305k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   305k|    {
  938|   305k|        return begin == end;
  939|   305k|    }
  940|   305k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  37.1k|    {
  296|  37.1k|        ++x;
  297|  37.1k|        return x;
  298|  37.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|     22|    {
 3590|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     22|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 22]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 22]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3616|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     22|                    parse_integer_digits_without_thsep(
 3618|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     22|                        prefix_result.parsed_base));
 3620|       |
 3621|     22|            auto buf = make_contiguous_buffer(
 3622|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|     22|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  2.71k|{
 3377|  2.71k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  2.71k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  2.71k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  2.71k|        parse_integer_base_prefix(
 3382|  2.71k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  2.71k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 2.71k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  2.71k|    else {
 3394|  2.71k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 2.71k]
  ------------------
 3395|  2.71k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 2.71k, False: 0]
  ------------------
 3396|  2.71k|            digits_begin_it = base_prefix_begin_it;
 3397|  2.71k|        }
 3398|  2.71k|    }
 3399|       |
 3400|  2.71k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 2.71k, False: 0]
  ------------------
 3401|  2.71k|        sign = sign_type::plus_sign;
 3402|  2.71k|    }
 3403|  2.71k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  2.71k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  2.71k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  3.61k|{
 3258|  3.61k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  3.61k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 3.61k, False: 0]
  ------------------
 3260|  3.61k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 3.61k, False: 0]
  ------------------
 3261|  3.61k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  3.61k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  3.61k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.61k|{
 2372|  3.61k|    auto it = read_code_unit(range);
 2373|  3.61k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.61k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  7.23k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 7.23k, False: 3.61k]
  ------------------
 2378|  7.23k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 7.23k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  7.23k|    }
 2382|       |
 2383|  3.61k|    return unexpected(parse_error::error);
 2384|  3.61k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  2.71k|{
 3344|  2.71k|    switch (base) {
 3345|      6|        case 2:
  ------------------
  |  Branch (3345:9): [True: 6, False: 2.70k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      6|                    false};
 3349|       |
 3350|     26|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 26, False: 2.68k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     26|            bool zero_parsed = false;
 3353|     26|            auto it = apply_opt(
 3354|     26|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     26|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    888|        case 16:
  ------------------
  |  Branch (3358:9): [True: 888, False: 1.82k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    888|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    888|                    false};
 3362|       |
 3363|     20|        case 0:
  ------------------
  |  Branch (3363:9): [True: 20, False: 2.69k]
  ------------------
 3364|       |            // detect base
 3365|     20|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  1.77k|        default:
  ------------------
  |  Branch (3367:9): [True: 1.77k, False: 940]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  1.77k|            return {range.begin(), base, false};
 3370|  2.71k|    }
 3371|  2.71k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    920|{
 2391|    920|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 920, False: 0]
  ------------------
 2392|    920|        return range.begin();
 2393|    920|    }
 2394|      0|    return *result;
 2395|    920|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     26|{
 3295|     26|    return read_matching_string_classic_nocase(range, "0b");
 3296|     26|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.68k|{
 2331|  3.68k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  3.68k|                  std::is_same_v<char_type, char>) {
 2335|  3.68k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 8, False: 3.67k]
  ------------------
 2336|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|      8|        }
 2338|  3.67k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 3.67k, False: 0]
  ------------------
 2339|  3.67k|            return unexpected(parse_error::error);
 2340|  3.67k|        }
 2341|      0|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  3.68k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     46|{
 3309|     46|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 46]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     46|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 46]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     46|    return unexpected(parse_error::error);
 3319|     46|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.86k|{
 2246|  1.86k|    auto it = read_code_unit(range);
 2247|  1.86k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.86k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.86k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.86k, False: 0]
  |  |  ------------------
  ------------------
 2252|  1.86k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.86k|        return unexpected(parse_error::error);
 2254|  1.86k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  1.86k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|    908|{
 3302|    908|    return read_matching_string_classic_nocase(range, "0x");
 3303|    908|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     20|{
 3325|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 20]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 20]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     20|    {
 3332|     20|        bool zero_parsed{false};
 3333|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 20]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     20|    }
 3337|     20|    return {range.begin(), 10, false};
 3338|     20|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  2.68k|{
 3411|  2.68k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  2.68k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  2.68k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  2.68k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  2.68k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     24|{
 3441|     24|    std::basic_string<CharT> output;
 3442|     24|    std::string thsep_indices;
 3443|     24|    auto it = range.begin();
 3444|     24|    bool digit_matched = false;
 3445|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 24, False: 0]
  ------------------
 3446|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 24]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 24, False: 0]
  ------------------
 3451|     24|            break;
 3452|     24|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     24|    }
 3458|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3459|     24|        return detail::unexpected_scan_error(
 3460|     24|            scan_error::invalid_scanned_value,
 3461|     24|            "Failed to parse integer: No digits found");
 3462|     24|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     24|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  13.0k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  13.0k|                  ranges::sized_range<Range>) {
 1785|  13.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  13.0k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  13.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  13.0k|    {
 1589|  13.0k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  60.6k|    {
 1602|  60.6k|        return sv;
 1603|  60.6k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5988|  1.55k|{
 5989|  1.55k|    using char_type = detail::char_t<Range>;
 5990|  1.55k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|  1.55k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 1.17k, False: 380]
  ------------------
 5993|  1.17k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|  1.17k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|  1.17k|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 1.04k, False: 128]
  ------------------
 5997|  1.04k|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|  1.04k|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 118, False: 928]
  ------------------
 6000|    118|                auto prefix_width =
 6001|    118|                    static_cast<std::ptrdiff_t>(
 6002|    118|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|    118|                    ranges::distance(range.begin(), it);
 6004|    118|                return result_type{it, prefix_width};
 6005|    118|            }
 6006|    928|            return result_type{it, 0};
 6007|  1.04k|        }
 6008|       |
 6009|    128|        auto max_width_view = take_width(range, max_width);
 6010|    128|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|    128|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 128, False: 0]
  ------------------
 6013|    128|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|    128|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|    128|    }
 6017|       |
 6018|    380|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|    380|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 200, False: 180]
  ------------------
 6020|    200|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|    200|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 52, False: 148]
  ------------------
 6023|     52|            auto prefix_width =
 6024|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|     52|            return result_type{it, prefix_width};
 6027|     52|        }
 6028|    148|        return result_type{it, 0};
 6029|    200|    }
 6030|       |
 6031|    180|    auto max_width_view = take_width(range, max_width);
 6032|    180|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|    180|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 180, False: 0]
  ------------------
 6035|    180|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|    180|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|    180|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  1.21k|{
 2075|  1.21k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.21k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  1.41k|{
 2056|  1.41k|    if constexpr (ranges::common_range<Range>) {
 2057|  1.41k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  1.41k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  1.17k|        : m_fptr([](storage fn,
  743|  1.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17k|              cvref<T> obj = *get<T>(fn);
  745|  1.17k|              if constexpr (std::is_void_v<R>) {
  746|  1.17k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.17k|              }
  748|  1.17k|              else {
  749|  1.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17k|              }
  751|  1.17k|          }),
  752|  1.17k|          m_storage(std::addressof(f))
  753|  1.17k|    {
  754|  1.17k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  1.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.56k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.56k|              else {
  749|  1.56k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.56k|              }
  751|  1.56k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.56k|    {
  684|  1.56k|        if constexpr (std::is_const_v<T>) {
  685|  1.56k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.56k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5994|  1.56k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  1.17k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.17k|        {
  667|  1.17k|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    284|{
 2075|    284|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    284|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    518|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    518|    else {
 2060|    518|        auto first = range.begin();
 2061|  7.01k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 6.73k, False: 280]
  ------------------
 2062|  6.73k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 238, False: 6.49k]
  ------------------
 2063|    238|                return first;
 2064|    238|            }
 2065|  6.73k|        }
 2066|    280|        return first;
 2067|    518|    }
 2068|    518|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2135|    200|{
 2136|    200|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    200|    auto it = range.begin();
 2139|    352|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 352, False: 0]
  ------------------
 2140|    352|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    352|                                           needle.size());
 2142|    352|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 6, False: 346]
  ------------------
 2143|      6|            return it;
 2144|      6|        }
 2145|    346|        static_assert(
 2146|    346|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    346|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 194, False: 152]
  ------------------
 2148|    194|            return it;
 2149|    194|        }
 2150|    152|        it = *r;
 2151|    152|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2135|    180|{
 2136|    180|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    180|    auto it = range.begin();
 2139|    326|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 296, False: 30]
  ------------------
 2140|    296|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    296|                                           needle.size());
 2142|    296|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 28, False: 268]
  ------------------
 2143|     28|            return it;
 2144|     28|        }
 2145|    268|        static_assert(
 2146|    268|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    268|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 122, False: 146]
  ------------------
 2148|    122|            return it;
 2149|    122|        }
 2150|    146|        it = *r;
 2151|    146|    }
 2152|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|     30|    return it;
 2154|     30|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    442|{
 3066|    442|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 442]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    442|    return read_while_classic_space(range);
 3077|    442|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    442|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    442|    else {
 2225|    442|        auto it = range.begin();
 2226|       |
 2227|    442|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|    442|            auto seg = get_contiguous_beginning(range);
 2229|    442|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|    442|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 442]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|    442|            ranges::advance(it, seg.size());
 2234|    442|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    442|            return detail::is_cp_space(cp);
 2238|    442|        });
 2239|    442|    }
 2240|    442|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|  1.11k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.11k|    else {
 1059|  1.11k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.11k|    }
 1061|  1.11k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    628|{
 2181|    628|    return read_until_code_point(range, std::not_fn(pred));
 2182|    628|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|    796|{
 2160|    796|    auto it = range.begin();
 2161|  12.5k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 12.2k, False: 268]
  ------------------
 2162|  12.2k|        const auto val =
 2163|  12.2k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  12.2k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  12.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 11.3k, False: 940]
  |  |  ------------------
  ------------------
 2165|  11.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  11.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  11.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 528, False: 10.7k]
  ------------------
 2168|    528|                return it;
 2169|    528|            }
 2170|  11.3k|        }
 2171|  11.7k|        it = val.iterator;
 2172|  11.7k|    }
 2173|       |
 2174|    268|    return it;
 2175|    796|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  19.8k|{
 1998|  19.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  19.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  19.8k|    auto it = range.begin();
 2002|  19.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  19.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.98k, False: 17.8k]
  |  |  ------------------
  ------------------
 2005|  1.98k|        ++it;
 2006|  1.98k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.98k|        return {it, {}};
 2008|  1.98k|    }
 2009|       |
 2010|  17.8k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 14.9k, False: 2.90k]
  ------------------
 2011|  14.9k|        ++it;
 2012|  14.9k|        return {it, string_type(1, *range.begin())};
 2013|  14.9k|    }
 2014|       |
 2015|  2.90k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  2.90k|    return {it, string_type{range.begin(), it}};
 2017|  17.8k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  1.98k|{
 1265|  1.98k|    auto it = input.begin();
 1266|  2.58k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.45k, False: 138]
  ------------------
 1267|  2.45k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.84k, False: 604]
  ------------------
 1268|  1.84k|            break;
 1269|  1.84k|        }
 1270|  2.45k|    }
 1271|  1.98k|    return it;
 1272|  1.98k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  2.90k|    {
  283|  2.90k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  2.90k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  2.90k|    {
  227|  2.90k|        constexpr iter_difference_t<I> zero{0};
  228|  2.90k|        iter_difference_t<I> counter{0};
  229|       |
  230|  2.90k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 2.90k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  2.90k|        else {
  237|  9.67k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 6.86k, False: 2.81k]
  |  Branch (237:34): [True: 6.77k, False: 84]
  ------------------
  238|  6.77k|                ++i;
  239|  6.77k|                ++counter;
  240|  6.77k|            }
  241|  2.90k|        }
  242|       |
  243|  2.90k|        return counter;
  244|  2.90k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    442|        : m_fptr([](storage fn,
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
  752|    442|          m_storage(std::addressof(f))
  753|    442|    {
  754|    442|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.20k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.20k|              else {
  749|  1.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.20k|              }
  751|  1.20k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.20k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.20k|        else if constexpr (std::is_object_v<T>) {
  688|  1.20k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.20k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|  1.20k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.20k|            return detail::is_cp_space(cp);
 2238|  1.20k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    442|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    442|        {
  662|    442|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  6.85k|{
 3066|  6.85k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 6.67k, False: 184]
  ------------------
 3067|  6.67k|        auto it = read_while_classic_space(range);
 3068|  6.67k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  6.67k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.67k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  6.67k|        return it;
 3074|  6.67k|    }
 3075|       |
 3076|    184|    return read_while_classic_space(range);
 3077|  6.85k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  13.1k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  13.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  13.1k|        auto buf = make_contiguous_buffer(range);
 2220|  13.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  13.1k|        return ranges::next(range.begin(),
 2222|  13.1k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  13.1k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  15.9k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  15.9k|                  ranges::sized_range<Range>) {
 1785|  15.9k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  15.9k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  15.9k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  15.9k|    {
 1589|  15.9k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  8.92k|    {
 3156|  8.92k|        reader_error_handler eh{};
 3157|  8.92k|        get_derived().check_specs_impl(specs, eh);
 3158|  8.92k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  8.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.80k, False: 1.12k]
  |  |  ------------------
  ------------------
 3159|  7.80k|            return detail::unexpected_scan_error(
 3160|  7.80k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  7.80k|        }
 3162|  1.12k|        return {};
 3163|  8.92k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3167|  8.92k|    {
 3168|  8.92k|        return static_cast<Derived&>(*this);
 3169|  8.92k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  8.92k|    {
 3536|  8.92k|        detail::check_int_type_specs(specs, eh);
 3537|  8.92k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3150|  2.38k|    {
 3151|  2.38k|        return true;
 3152|  2.38k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    254|    {
 3590|    254|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    254|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    254|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 254]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    254|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 254]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    254|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    254|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 242, False: 12]
  |  |  ------------------
  ------------------
 3616|    242|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    242|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    276|    {
 3590|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    276|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 276]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 276]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 264, False: 12]
  |  |  ------------------
  ------------------
 3616|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    264|                    parse_integer_digits_without_thsep(
 3618|    264|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    264|                        prefix_result.parsed_base));
 3620|       |
 3621|    264|            auto buf = make_contiguous_buffer(
 3622|    264|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    264|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    264|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    254|    {
 3590|    254|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    254|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    254|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 254]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    254|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 254]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    254|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    254|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 242, False: 12]
  |  |  ------------------
  ------------------
 3616|    242|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    242|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    276|    {
 3590|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    276|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 276]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 276]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 264, False: 12]
  |  |  ------------------
  ------------------
 3616|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    264|                    parse_integer_digits_without_thsep(
 3618|    264|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    264|                        prefix_result.parsed_base));
 3620|       |
 3621|    264|            auto buf = make_contiguous_buffer(
 3622|    264|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    264|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    264|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    220|    {
 3590|    220|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 220]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    220|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    220|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 220]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    220|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 220]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    220|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    220|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 220, False: 0]
  |  |  ------------------
  ------------------
 3616|    220|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    876|    {
 3590|    876|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    876|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    876|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    876|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 876]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    876|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 876]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    876|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    876|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 876, False: 0]
  |  |  ------------------
  ------------------
 3616|    876|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    876|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    876|                    parse_integer_digits_without_thsep(
 3618|    876|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    876|                        prefix_result.parsed_base));
 3620|       |
 3621|    876|            auto buf = make_contiguous_buffer(
 3622|    876|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    876|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    876|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    876|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  4.46k|    {
 3156|  4.46k|        reader_error_handler eh{};
 3157|  4.46k|        get_derived().check_specs_impl(specs, eh);
 3158|  4.46k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.90k, False: 556]
  |  |  ------------------
  ------------------
 3159|  3.90k|            return detail::unexpected_scan_error(
 3160|  3.90k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  3.90k|        }
 3162|    556|        return {};
 3163|  4.46k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  4.46k|    {
 3168|  4.46k|        return static_cast<Derived&>(*this);
 3169|  4.46k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  4.46k|    {
 4178|  4.46k|        detail::check_float_type_specs(specs, eh);
 4179|  4.46k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  1.18k|    {
 3151|  1.18k|        return true;
 3152|  1.18k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|    526|    {
 4250|    526|        unsigned options{};
 4251|    526|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 16, False: 510]
  ------------------
 4252|     16|            options |= float_reader_base::allow_thsep;
 4253|     16|        }
 4254|       |
 4255|    526|        SCN_GCC_COMPAT_PUSH
 4256|    526|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    526|        switch (specs.type) {
 4259|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 28, False: 498]
  ------------------
 4260|     28|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 4, False: 522]
  ------------------
 4263|      4|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 12, False: 514]
  ------------------
 4266|     12|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|     10|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 10, False: 516]
  ------------------
 4269|     10|                return options | float_reader_base::allow_scientific |
 4270|     10|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    472|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 472, False: 54]
  ------------------
 4273|    472|                return options | float_reader_base::allow_scientific |
 4274|    472|                       float_reader_base::allow_fixed |
 4275|    472|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 526]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    526|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    526|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    526|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|    526|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.15k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.31k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|    884|    {
 4090|    884|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 884, False: 0]
  ------------------
 4091|    884|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 884, False: 0]
  ------------------
 4092|    884|            return;
 4093|    884|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|    712|    {
 1686|    712|        return m_storage.has_value();
 1687|    712|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|    356|    {
 1691|    356|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    356|        return *m_storage;
 1693|    356|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    248|    {
  763|    248|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    248|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|      8|    {
 3721|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      8|        return read_source_impl(range);
 3727|      8|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    248|    {
 3747|    248|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    248|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    248|        auto it = sign_result.first;
 3750|    248|        m_sign = sign_result.second;
 3751|       |
 3752|    248|        auto digits_begin = it;
 3753|    248|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    248|        else {
 3780|    248|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 248, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    248|    }                                                  \
  |  | 3939|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|      0|                it,
 3782|      0|                do_read_source_impl(
 3783|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|      0|        }
 3786|       |
 3787|    248|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 0, False: 0]
  |  Branch (3789:48): [True: 0, False: 0]
  ------------------
 3790|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 0, False: 0]
  ------------------
 3791|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 0, False: 0]
  ------------------
 3792|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|      0|        }
 3794|       |
 3795|      0|        handle_separators();
 3796|       |
 3797|      0|        return it;
 3798|    248|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    248|    {
 4033|    248|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    248|        const bool allowed_nonhex =
 4035|    248|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    248|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    248|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 248, False: 0]
  |  Branch (4038:45): [True: 0, False: 248]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    248|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 248]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    248|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 248, False: 0]
  |  Branch (4047:45): [True: 0, False: 248]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    248|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 248]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    248|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 230, False: 18]
  |  Branch (4054:28): [True: 4, False: 226]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      4|            auto it = range.begin();
 4058|       |
 4059|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 4]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      4|            else {
 4064|      4|                m_kind = float_kind::hex_without_prefix;
 4065|      4|            }
 4066|       |
 4067|      4|            return read_hex(ranges::subrange{it, range.end()});
 4068|      4|        }
 4069|    244|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 18, False: 226]
  |  Branch (4069:29): [True: 18, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     18|            m_kind = float_kind::generic;
 4073|     18|            return read_regular_float(range);
 4074|     18|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    226|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 226]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    226|        m_kind = float_kind::generic;
 4085|    226|        return read_regular(range);
 4086|    226|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    248|    {
 3841|    248|        auto it = range.begin();
 3842|    248|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 248, False: 0]
  ------------------
 3843|    248|            return unexpected(r.error());
 3844|    248|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    248|    {
 3864|    248|        auto it = range.begin();
 3865|    248|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 248, False: 0]
  ------------------
 3866|    248|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    248|                scan_error::invalid_scanned_value,
 3868|    248|                "Invalid floating-point NaN value"));
 3869|    248|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    230|    {
 3834|    230|        return read_matching_string_classic_nocase(range, "0x");
 3835|    230|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|      4|    {
 3935|      4|        auto it = range.begin();
 3936|       |
 3937|      4|        std::ptrdiff_t digits_count = 0;
 3938|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3940|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3941|      4|                scan_error::invalid_scanned_value,
 3942|      4|                "Invalid hexadecimal floating-point value"));
 3943|      4|        }
 3944|      0|        else {
 3945|      0|            digits_count += ranges::distance(it, *r);
 3946|      0|            it = *r;
 3947|      0|        }
 3948|       |
 3949|      0|        m_integral_part_length = digits_count;
 3950|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 0]
  ------------------
 3951|      0|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      0|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 0]
  ------------------
 3956|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      0|        return it;
 3970|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|      4|    {
 3819|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|      4|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|      4|        return read_while1_code_unit(
 3828|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|      4|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  688|      4|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      4|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3828|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    244|    {
 3976|    244|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    244|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 230, False: 14]
  |  Branch (3977:50): [True: 0, False: 230]
  ------------------
 3978|       |
 3979|    244|        auto it = ranges::begin(range);
 3980|    244|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    244|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    244|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 3984|    244|            return r.transform_error(
 3985|    244|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    244|                                              "Invalid floating-point value"));
 3987|    244|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    244|    {
 3804|    244|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 244]
  |  |  |  Branch (865:45): [True: 0, False: 244]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    244|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    244|        return read_while1_code_unit(
 3813|    244|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    244|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    244|        : m_fptr([](storage fn,
  743|    244|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    244|              cvref<T> obj = *get<T>(fn);
  745|    244|              if constexpr (std::is_void_v<R>) {
  746|    244|                  obj(static_cast<decltype(args)>(args)...);
  747|    244|              }
  748|    244|              else {
  749|    244|                  return obj(static_cast<decltype(args)>(args)...);
  750|    244|              }
  751|    244|          }),
  752|    244|          m_storage(std::addressof(f))
  753|    244|    {
  754|    244|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    244|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    244|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    244|              else {
  749|    244|                  return obj(static_cast<decltype(args)>(args)...);
  750|    244|              }
  751|    244|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    244|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    244|        else if constexpr (std::is_object_v<T>) {
  688|    244|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    244|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3813|    244|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    244|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    244|        {
  662|    244|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    240|    {
 3707|    240|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    240|        return read_source_impl(range);
 3713|    240|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    908|    {
  763|    908|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    908|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|      8|    {
 3721|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      8|        return read_source_impl(range);
 3727|      8|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|    908|    {
 3747|    908|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 908]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    908|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    908|        auto it = sign_result.first;
 3750|    908|        m_sign = sign_result.second;
 3751|       |
 3752|    908|        auto digits_begin = it;
 3753|    908|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|    908|                      ranges::sized_range<Range>) {
 3756|    908|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 908]
  |  |  |  Branch (865:45): [True: 0, False: 908]
  |  |  |  Branch (865:45): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 3757|    908|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|    908|            else {
 3766|    908|                auto cb = [&](const auto& rr)
 3767|    908|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    908|                    auto res = read_all(rr);
 3769|    908|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|    908|                        return detail::unexpected_scan_error(
 3771|    908|                            scan_error::invalid_scanned_value,
 3772|    908|                            "Invalid float value");
 3773|    908|                    }
 3774|    908|                    return res;
 3775|    908|                };
 3776|    908|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 24, False: 884]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     24|    }                                                  \
  |  | 3939|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|    884|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|    908|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|    884|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 884, False: 0]
  |  Branch (3789:48): [True: 884, False: 0]
  ------------------
 3790|    884|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 884, False: 0]
  ------------------
 3791|    884|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 884, False: 0]
  ------------------
 3792|    884|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|    884|        }
 3794|       |
 3795|    884|        handle_separators();
 3796|       |
 3797|    884|        return it;
 3798|    908|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|    908|    {
 3841|    908|        auto it = range.begin();
 3842|    908|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 908, False: 0]
  ------------------
 3843|    908|            return unexpected(r.error());
 3844|    908|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|    908|    {
 3864|    908|        auto it = range.begin();
 3865|    908|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 908, False: 0]
  ------------------
 3866|    908|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    908|                scan_error::invalid_scanned_value,
 3868|    908|                "Invalid floating-point NaN value"));
 3869|    908|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    884|    {
 3834|    884|        return read_matching_string_classic_nocase(range, "0x");
 3835|    884|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|     24|{
 2095|     24|    auto it = read_while_code_unit(range, pred);
 2096|     24|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 24, False: 0]
  ------------------
 2097|     24|        return unexpected(parse_error::error);
 2098|     24|    }
 2099|      0|    return it;
 2100|     24|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|     24|    {
 3976|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 10, False: 14]
  |  Branch (3977:50): [True: 4, False: 6]
  ------------------
 3978|       |
 3979|     24|        auto it = ranges::begin(range);
 3980|     24|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3984|     24|            return r.transform_error(
 3985|     24|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|     24|                                              "Invalid floating-point value"));
 3987|     24|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|     24|    {
 3804|     24|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  Branch (865:45): [True: 0, False: 24]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|     24|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|     24|        return read_while1_code_unit(
 3813|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|     24|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     24|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     24|        else if constexpr (std::is_object_v<T>) {
  688|     24|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     24|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     24|        {
  662|     24|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|    908|    {
 4033|    908|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    908|        const bool allowed_nonhex =
 4035|    908|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    908|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    908|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 908, False: 0]
  |  Branch (4038:45): [True: 0, False: 908]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    908|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 908]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    908|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 908, False: 0]
  |  Branch (4047:45): [True: 0, False: 908]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    908|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 908]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    908|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 884, False: 24]
  |  Branch (4054:28): [True: 8, False: 876]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      8|            auto it = range.begin();
 4058|       |
 4059|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 8]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      8|            else {
 4064|      8|                m_kind = float_kind::hex_without_prefix;
 4065|      8|            }
 4066|       |
 4067|      8|            return read_hex(ranges::subrange{it, range.end()});
 4068|      8|        }
 4069|    900|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 24, False: 876]
  |  Branch (4069:29): [True: 24, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     24|            m_kind = float_kind::generic;
 4073|     24|            return read_regular_float(range);
 4074|     24|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    876|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    876|        m_kind = float_kind::generic;
 4085|    876|        return read_regular(range);
 4086|    876|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|    884|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    884|                    auto res = read_all(rr);
 3769|    884|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|    884|                    return res;
 3775|    884|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    884|{
 1938|    884|    return ranges::next(range.begin(), range.end());
 1939|    884|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    884|    {
  313|    884|        ranges::advance(x, bound);
  314|    884|        return x;
  315|    884|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    884|    {
  275|    884|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    884|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    950|    {
  190|    950|        i = std::move(bound);
  191|    950|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    884|    {
 1676|    884|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    884|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|    884|    {
 1720|    884|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    884|                      ranges::sized_range<Range>) {
 1725|    884|            m_storage.reset();
 1726|    884|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    884|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|    900|    {
 3707|    900|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 900]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    900|        return read_source_impl(range);
 3713|    900|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|    884|    {
 3733|    884|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|    884|        const std::ptrdiff_t sign_len =
 3736|    884|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 884]
  ------------------
 3737|       |
 3738|    884|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    884|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|    884|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    248|    {
 4203|    248|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    248|#if !SCN_DISABLE_LOCALE
 4206|    248|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 8, False: 240]
  ------------------
 4207|      8|            return read_impl<Range>(
 4208|      8|                range, rd,
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      8|                },
 4212|      8|                value, loc);
 4213|      8|        }
 4214|    240|#endif
 4215|       |
 4216|    240|        return read_impl<Range>(
 4217|    240|            range, rd,
 4218|    240|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    240|                return r.read_source(SCN_FWD(args)...);
 4220|    240|            },
 4221|    240|            value);
 4222|    248|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    248|    {
 4239|    248|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    248|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 248, False: 0]
  |  |  ------------------
  ------------------
 4241|    248|            return unexpected(r.error());
 4242|    248|        }
 4243|       |
 4244|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      8|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    240|        : m_fptr([](storage fn,
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|    240|              if constexpr (std::is_void_v<R>) {
  746|    240|                  obj(static_cast<decltype(args)>(args)...);
  747|    240|              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
  752|    240|          m_storage(std::addressof(f))
  753|    240|    {
  754|    240|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    240|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    240|        else if constexpr (std::is_object_v<T>) {
  688|    240|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    240|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    240|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    240|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    240|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    240|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    240|        {
  662|    240|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    278|    {
 4203|    278|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    278|#if !SCN_DISABLE_LOCALE
 4206|    278|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 8, False: 270]
  ------------------
 4207|      8|            return read_impl<Range>(
 4208|      8|                range, rd,
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      8|                },
 4212|      8|                value, loc);
 4213|      8|        }
 4214|    270|#endif
 4215|       |
 4216|    270|        return read_impl<Range>(
 4217|    270|            range, rd,
 4218|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    270|                return r.read_source(SCN_FWD(args)...);
 4220|    270|            },
 4221|    270|            value);
 4222|    278|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|    908|    {
 4239|    908|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    908|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 884]
  |  |  ------------------
  ------------------
 4241|     24|            return unexpected(r.error());
 4242|     24|        }
 4243|       |
 4244|    884|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    884|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|    884|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      8|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    270|        : m_fptr([](storage fn,
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|    270|              if constexpr (std::is_void_v<R>) {
  746|    270|                  obj(static_cast<decltype(args)>(args)...);
  747|    270|              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
  752|    270|          m_storage(std::addressof(f))
  753|    270|    {
  754|    270|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    270|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    270|        else if constexpr (std::is_object_v<T>) {
  688|    270|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    270|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    270|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    270|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    270|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    270|        {
  662|    270|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|  5.05k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  5.05k|                       std::is_same_v<T, std::wstring>) {
 5867|  5.05k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  5.05k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|  15.1k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  13.2k|    {
 3156|  13.2k|        reader_error_handler eh{};
 3157|  13.2k|        get_derived().check_specs_impl(specs, eh);
 3158|  13.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 372, False: 12.9k]
  |  |  ------------------
  ------------------
 3159|    372|            return detail::unexpected_scan_error(
 3160|    372|                scan_error::invalid_format_string, eh.m_msg);
 3161|    372|        }
 3162|  12.9k|        return {};
 3163|  13.2k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|  13.2k|    {
 3168|  13.2k|        return static_cast<Derived&>(*this);
 3169|  13.2k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  13.2k|    {
 5247|  13.2k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  13.2k|        SCN_GCC_PUSH
 5250|  13.2k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  13.2k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  13.2k|        SCN_CLANG_PUSH
 5254|  13.2k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  13.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  13.2k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 366, False: 12.9k]
  ------------------
 5258|  1.44k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.44k, False: 11.8k]
  ------------------
 5259|  1.44k|                m_type = reader_type::word;
 5260|  1.44k|                break;
 5261|       |
 5262|    582|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 582, False: 12.6k]
  ------------------
 5263|    582|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 114, False: 468]
  ------------------
 5264|    582|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 234, False: 234]
  ------------------
 5265|    348|                    m_type = reader_type::custom_word;
 5266|    348|                }
 5267|    234|                else {
 5268|    234|                    m_type = reader_type::word;
 5269|    234|                }
 5270|    582|                break;
 5271|      0|            }
 5272|       |
 5273|     96|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 96, False: 13.1k]
  ------------------
 5274|     96|                m_type = reader_type::character;
 5275|     96|                break;
 5276|       |
 5277|  3.12k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 3.12k, False: 10.1k]
  ------------------
 5278|  3.12k|                m_type = reader_type::character_set;
 5279|  3.12k|                break;
 5280|       |
 5281|  7.26k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 7.26k, False: 6.01k]
  ------------------
 5282|  7.26k|                m_type = reader_type::regex;
 5283|  7.26k|                break;
 5284|       |
 5285|    408|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 408, False: 12.8k]
  ------------------
 5286|    408|                m_type = reader_type::regex_escaped;
 5287|    408|                break;
 5288|  13.2k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  13.2k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|  18.2k|    {
 5296|  18.2k|        return m_type == reader_type::word;
 5297|  18.2k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  9.39k|{
 1242|  9.39k|    auto it = src.begin();
 1243|   398k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 390k, False: 7.60k]
  ------------------
 1244|   390k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   390k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 1.19k, False: 389k]
  ------------------
 1246|  1.19k|            return false;
 1247|  1.19k|        }
 1248|   389k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 234, False: 389k]
  ------------------
 1249|    234|            return false;
 1250|    234|        }
 1251|   389k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   389k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   389k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 354, False: 388k]
  ------------------
 1254|    354|            return false;
 1255|    354|        }
 1256|   388k|        it += len;
 1257|   388k|    }
 1258|  7.60k|    return true;
 1259|  9.39k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    356|{
 3108|    356|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    356|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 356, False: 0]
  ------------------
 3110|    356|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    356|    static_cast<    \
  |  |  935|    356|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    356|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    356|    return {};
 3121|    356|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  3.11k|        {
 5144|  3.11k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 552, False: 2.56k]
  ------------------
 5145|    552|                return {};
 5146|    552|            }
 5147|       |
 5148|  2.56k|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|  2.56k|            auto it = detail::to_address(charset_string.begin());
 5150|  2.56k|            auto set = detail::parse_presentation_set(
 5151|  2.56k|                it, detail::to_address(charset_string.end()), nonascii);
 5152|  2.56k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|  2.56k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.56k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|  2.56k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|  2.56k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|  2.56k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|  2.56k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|  2.56k|            std::sort(nonascii.extra_ranges.begin(),
 5157|  2.56k|                      nonascii.extra_ranges.end());
 5158|  2.56k|            return {};
 5159|  2.56k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|   251k|        {
 5177|   251k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 34.7k, False: 216k]
  ------------------
 5178|  34.7k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  34.7k|            }
 5180|       |
 5181|   216k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|   251k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  34.7k|        {
 5127|       |            // TODO: binary search?
 5128|  34.7k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 34.7k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  34.7k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  34.7k|            return std::find_if(
 5134|  34.7k|                       nonascii.extra_ranges.begin(),
 5135|  34.7k|                       nonascii.extra_ranges.end(),
 5136|  34.7k|                       [cp_val](const auto& pair) noexcept {
 5137|  34.7k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  34.7k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  34.7k|                       }) != nonascii.extra_ranges.end();
 5140|  34.7k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  6.96M|                       [cp_val](const auto& pair) noexcept {
 5137|  6.96M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 6.96M, False: 2.37k]
  ------------------
 5138|  6.96M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 33.5k, False: 6.93M]
  ------------------
 5139|  6.96M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|   223k|        {
 5117|   223k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|   223k|            const auto val =
 5119|   223k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|   223k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|   223k|                    (val % 8)) &
 5122|   223k|                   1u;
 5123|   223k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  8.65k|        {
 5168|  8.65k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.62k, False: 7.02k]
  ------------------
 5169|  1.62k|                return false;
 5170|  1.62k|            }
 5171|       |
 5172|  7.02k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  8.65k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  3.11k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    542|    {
 5314|    542|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    542|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    542|        return read_impl(range, specs, value);
 5316|    542|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    542|    {
 5332|    542|        SCN_CLANG_PUSH
 5333|    542|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    542|        switch (m_type) {
 5336|    224|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 224, False: 318]
  ------------------
 5337|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     60|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 60, False: 482]
  ------------------
 5340|     60|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     60|                                                                   value);
 5342|       |
 5343|     30|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 30, False: 512]
  ------------------
 5344|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    216|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 216, False: 326]
  ------------------
 5347|    216|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    216|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 540]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     10|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 10, False: 532]
  ------------------
 5357|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     10|                    range,
 5359|     10|                    get_unescaped_regex_pattern(
 5360|     10|                        specs.charset_string<SourceCharT>()),
 5361|     10|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 542]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    542|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    542|        }
 5368|       |
 5369|    542|        SCN_CLANG_POP
 5370|    542|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    224|    {
 4861|    224|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    224|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    314|{
 4795|    314|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    314|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    314|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 106, False: 208]
  ------------------
 4799|    106|        return detail::unexpected_scan_error(
 4800|    106|            scan_error::invalid_scanned_value,
 4801|    106|            "Invalid encoding in scanned string");
 4802|    106|    }
 4803|       |
 4804|    208|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    208|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 208]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    208|    return SCN_MOVE(result);
  ------------------
  |  |  934|    208|    static_cast<    \
  |  |  935|    208|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    208|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    672|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    672|    else {
 2196|    672|        auto it = range.begin();
 2197|       |
 2198|    672|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|    672|            auto seg = get_contiguous_beginning(range);
 2200|    672|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|    672|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 672]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|    672|            ranges::advance(it, seg.size());
 2205|    672|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|    672|            ranges::subrange{it, range.end()},
 2209|    672|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    672|    }
 2211|    672|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    672|{
 2160|    672|    auto it = range.begin();
 2161|  8.13k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 7.62k, False: 510]
  ------------------
 2162|  7.62k|        const auto val =
 2163|  7.62k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  7.62k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  7.62k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.57k, False: 1.04k]
  |  |  ------------------
  ------------------
 2165|  6.57k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  6.57k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  6.57k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 162, False: 6.41k]
  ------------------
 2168|    162|                return it;
 2169|    162|            }
 2170|  6.57k|        }
 2171|  7.45k|        it = val.iterator;
 2172|  7.45k|    }
 2173|       |
 2174|    510|    return it;
 2175|    672|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    672|        : m_fptr([](storage fn,
  743|    672|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    672|              cvref<T> obj = *get<T>(fn);
  745|    672|              if constexpr (std::is_void_v<R>) {
  746|    672|                  obj(static_cast<decltype(args)>(args)...);
  747|    672|              }
  748|    672|              else {
  749|    672|                  return obj(static_cast<decltype(args)>(args)...);
  750|    672|              }
  751|    672|          }),
  752|    672|          m_storage(std::addressof(f))
  753|    672|    {
  754|    672|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  6.57k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.57k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.57k|              else {
  749|  6.57k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.57k|              }
  751|  6.57k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  6.57k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.57k|        else if constexpr (std::is_object_v<T>) {
  688|  6.57k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.57k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  6.57k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    672|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    672|        {
  662|    672|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     60|    {
 4882|     60|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 32, False: 28]
  ------------------
 4883|     32|            return read_string_impl(
 4884|     32|                range,
 4885|     32|                read_until_code_unit(
 4886|     32|                    range,
 4887|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     32|                        SourceCharT ch) { return ch == until; }),
 4889|     32|                value);
 4890|     32|        }
 4891|     28|        return read_string_impl(
 4892|     28|            range,
 4893|     28|            read_until_code_units(
 4894|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     28|            value);
 4896|     60|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     32|        : m_fptr([](storage fn,
  743|     32|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     32|              cvref<T> obj = *get<T>(fn);
  745|     32|              if constexpr (std::is_void_v<R>) {
  746|     32|                  obj(static_cast<decltype(args)>(args)...);
  747|     32|              }
  748|     32|              else {
  749|     32|                  return obj(static_cast<decltype(args)>(args)...);
  750|     32|              }
  751|     32|          }),
  752|     32|          m_storage(std::addressof(f))
  753|     32|    {
  754|     32|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    386|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    386|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    386|              else {
  749|    386|                  return obj(static_cast<decltype(args)>(args)...);
  750|    386|              }
  751|    386|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    386|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    386|        else if constexpr (std::is_object_v<T>) {
  688|    386|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    386|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|    386|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     32|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     32|        {
  662|     32|        }
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2105|     84|{
 2106|     84|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|       |    if constexpr (ranges::common_range<Range>) {
 2109|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2110|       |                           needle.end());
 2111|       |    }
 2112|     84|    else {
 2113|     84|        auto first = range.begin();
 2114|    732|        while (true) {
  ------------------
  |  Branch (2114:16): [Folded - Ignored]
  ------------------
 2115|    732|            auto it = first;
 2116|    918|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|    918|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2117:21): [True: 54, False: 864]
  ------------------
 2118|     54|                    return first;
 2119|     54|                }
 2120|    864|                if (it == range.end()) {
  ------------------
  |  Branch (2120:21): [True: 30, False: 834]
  ------------------
 2121|     30|                    return it;
 2122|     30|                }
 2123|    834|                if (*it != *needle_it) {
  ------------------
  |  Branch (2123:21): [True: 648, False: 186]
  ------------------
 2124|    648|                    break;
 2125|    648|                }
 2126|    834|            }
 2127|    648|            ++first;
 2128|    648|        }
 2129|     84|    }
 2130|     84|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     30|    {
 4988|     30|        return read_impl(
 4989|     30|            range,
 4990|     30|            [&](const auto& rng) {
 4991|     30|                return read_string_impl(rng, read_all(rng), value);
 4992|     30|            },
 4993|     30|            detail::priority_tag<1>{});
 4994|     30|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     30|    {
 5015|     30|        return read_cb(range);
 5016|     30|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     30|            [&](const auto& rng) {
 4991|     30|                return read_string_impl(rng, read_all(rng), value);
 4992|     30|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     90|{
 1938|     90|    return ranges::next(range.begin(), range.end());
 1939|     90|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     90|    {
  313|     90|        ranges::advance(x, bound);
  314|     90|        return x;
  315|     90|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     90|    {
  275|     90|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     90|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     90|    {
  203|  1.93k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.84k, False: 90]
  ------------------
  204|  1.84k|            ++i;
  205|  1.84k|        }
  206|     90|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    216|    {
 5089|    216|        auto it = read_source_impl(range, {specs});
 5090|    216|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 204]
  |  |  ------------------
  ------------------
 5091|     12|            return unexpected(it.error());
 5092|     12|        }
 5093|       |
 5094|    204|        return read_string_impl(range, *it, value);
 5095|    216|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    648|    {
 5192|    648|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    648|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    648|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    648|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 648]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    648|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    648|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 354, False: 294]
  ------------------
 5200|    354|            const auto cb = [&](char32_t cp) {
 5201|    354|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    354|            };
 5203|       |
 5204|    354|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 168, False: 186]
  ------------------
 5205|    168|                auto it = read_until_code_point(range, cb);
 5206|    168|                return check_nonempty(it, range);
 5207|    168|            }
 5208|    186|            auto it = read_while_code_point(range, cb);
 5209|    186|            return check_nonempty(it, range);
 5210|    354|        }
 5211|       |
 5212|    294|        const auto cb = [&](SourceCharT ch) {
 5213|    294|            return cb_wrapper.on_ascii_only(ch);
 5214|    294|        };
 5215|       |
 5216|    294|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 138, False: 156]
  ------------------
 5217|    138|            auto it = read_until_code_unit(range, cb);
 5218|    138|            return check_nonempty(it, range);
 5219|    138|        }
 5220|    156|        auto it = read_while_code_unit(range, cb);
 5221|    156|        return check_nonempty(it, range);
 5222|    294|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    354|        : m_fptr([](storage fn,
  743|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    354|              cvref<T> obj = *get<T>(fn);
  745|    354|              if constexpr (std::is_void_v<R>) {
  746|    354|                  obj(static_cast<decltype(args)>(args)...);
  747|    354|              }
  748|    354|              else {
  749|    354|                  return obj(static_cast<decltype(args)>(args)...);
  750|    354|              }
  751|    354|          }),
  752|    354|          m_storage(std::addressof(f))
  753|    354|    {
  754|    354|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  10.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.1k|              else {
  749|  10.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.1k|              }
  751|  10.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  10.1k|    {
  684|  10.1k|        if constexpr (std::is_const_v<T>) {
  685|  10.1k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.1k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  10.1k|            const auto cb = [&](char32_t cp) {
 5201|  10.1k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  10.1k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    354|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    354|        {
  667|    354|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    648|    {
 5228|    648|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 36, False: 612]
  ------------------
 5229|     36|            return detail::unexpected_scan_error(
 5230|     36|                scan_error::invalid_scanned_value,
 5231|     36|                "No characters matched in [character set]");
 5232|     36|        }
 5233|       |
 5234|    612|        return it;
 5235|    648|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    294|        : m_fptr([](storage fn,
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
  752|    294|          m_storage(std::addressof(f))
  753|    294|    {
  754|    294|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  5.28k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.28k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.28k|              else {
  749|  5.28k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.28k|              }
  751|  5.28k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.28k|    {
  684|  5.28k|        if constexpr (std::is_const_v<T>) {
  685|  5.28k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.28k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5212|  5.28k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.28k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.28k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    294|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    294|        {
  667|    294|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    204|{
 4795|    204|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    204|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    204|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 56, False: 148]
  ------------------
 4799|     56|        return detail::unexpected_scan_error(
 4800|     56|            scan_error::invalid_scanned_value,
 4801|     56|            "Invalid encoding in scanned string");
 4802|     56|    }
 4803|       |
 4804|    148|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    148|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 148]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    148|    return SCN_MOVE(result);
  ------------------
  |  |  934|    148|    static_cast<    \
  |  |  935|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    148|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|     12|    {
 4932|     12|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|     12|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|     36|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|     36|        else {
 4961|     36|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 36, False: 0]
  ------------------
 4962|     36|                return detail::unexpected_scan_error(
 4963|     36|                    scan_error::invalid_format_string,
 4964|     36|                    "Cannot use regex with a non-contiguous source "
 4965|     36|                    "range");
 4966|     36|            }
 4967|       |
 4968|      0|            auto input = get_as_contiguous(range);
 4969|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|      0|            return ranges::next(range.begin(),
 4972|      0|                                ranges::distance(input.begin(), it));
 4973|      0|        }
 4974|     36|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|     36|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|     36|    else {
  975|     36|        return false;
  976|     36|    }
  977|     36|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  3.73k|    {
 5314|  3.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  3.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  3.73k|        return read_impl(range, specs, value);
 5316|  3.73k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  3.73k|    {
 5332|  3.73k|        SCN_CLANG_PUSH
 5333|  3.73k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  3.73k|        switch (m_type) {
 5336|    310|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 310, False: 3.42k]
  ------------------
 5337|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 56, False: 3.67k]
  ------------------
 5340|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     56|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 3.73k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    822|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 822, False: 2.91k]
  ------------------
 5347|    822|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    822|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|  2.42k|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2.42k, False: 1.31k]
  ------------------
 5352|  2.42k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|  2.42k|                    range, specs.charset_string<SourceCharT>(),
 5354|  2.42k|                    specs.regexp_flags, value);
 5355|       |
 5356|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 126, False: 3.60k]
  ------------------
 5357|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    126|                    range,
 5359|    126|                    get_unescaped_regex_pattern(
 5360|    126|                        specs.charset_string<SourceCharT>()),
 5361|    126|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 3.73k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  3.73k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  3.73k|        }
 5368|       |
 5369|  3.73k|        SCN_CLANG_POP
 5370|  3.73k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    940|    {
 4861|    940|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    940|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|    996|{
 4795|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 326, False: 670]
  ------------------
 4799|    326|        return detail::unexpected_scan_error(
 4800|    326|            scan_error::invalid_scanned_value,
 4801|    326|            "Invalid encoding in scanned string");
 4802|    326|    }
 4803|       |
 4804|    670|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    670|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 670]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    670|    return SCN_MOVE(result);
  ------------------
  |  |  934|    670|    static_cast<    \
  |  |  935|    670|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    670|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.54k|{
 3128|  1.54k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  1.54k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  1.54k|    return {};
 3136|  1.54k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.82k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|  2.82k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|  2.82k|        auto buf = make_contiguous_buffer(range);
 2191|  2.82k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|  2.82k|        return ranges::next(range.begin(),
 2193|  2.82k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|  2.82k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     56|    {
 4882|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 30, False: 26]
  ------------------
 4883|     30|            return read_string_impl(
 4884|     30|                range,
 4885|     30|                read_until_code_unit(
 4886|     30|                    range,
 4887|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     30|                        SourceCharT ch) { return ch == until; }),
 4889|     30|                value);
 4890|     30|        }
 4891|     26|        return read_string_impl(
 4892|     26|            range,
 4893|     26|            read_until_code_units(
 4894|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     26|            value);
 4896|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2105|     78|{
 2106|     78|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|     78|    if constexpr (ranges::common_range<Range>) {
 2109|     78|        return std::search(range.begin(), range.end(), needle.begin(),
 2110|     78|                           needle.end());
 2111|       |    }
 2112|       |    else {
 2113|       |        auto first = range.begin();
 2114|       |        while (true) {
 2115|       |            auto it = first;
 2116|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|       |                if (needle_it == needle.end()) {
 2118|       |                    return first;
 2119|       |                }
 2120|       |                if (it == range.end()) {
 2121|       |                    return it;
 2122|       |                }
 2123|       |                if (*it != *needle_it) {
 2124|       |                    break;
 2125|       |                }
 2126|       |            }
 2127|       |            ++first;
 2128|       |        }
 2129|       |    }
 2130|     78|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    822|    {
 5089|    822|        auto it = read_source_impl(range, {specs});
 5090|    822|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 490]
  |  |  ------------------
  ------------------
 5091|    332|            return unexpected(it.error());
 5092|    332|        }
 5093|       |
 5094|    490|        return read_string_impl(range, *it, value);
 5095|    822|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  2.46k|    {
 5192|  2.46k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.46k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.46k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.46k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.46k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 2.20k, False: 258]
  ------------------
 5200|  2.20k|            const auto cb = [&](char32_t cp) {
 5201|  2.20k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  2.20k|            };
 5203|       |
 5204|  2.20k|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 198, False: 2.01k]
  ------------------
 5205|    198|                auto it = read_until_code_point(range, cb);
 5206|    198|                return check_nonempty(it, range);
 5207|    198|            }
 5208|  2.01k|            auto it = read_while_code_point(range, cb);
 5209|  2.01k|            return check_nonempty(it, range);
 5210|  2.20k|        }
 5211|       |
 5212|    258|        const auto cb = [&](SourceCharT ch) {
 5213|    258|            return cb_wrapper.on_ascii_only(ch);
 5214|    258|        };
 5215|       |
 5216|    258|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 114, False: 144]
  ------------------
 5217|    114|            auto it = read_until_code_unit(range, cb);
 5218|    114|            return check_nonempty(it, range);
 5219|    114|        }
 5220|    144|        auto it = read_while_code_unit(range, cb);
 5221|    144|        return check_nonempty(it, range);
 5222|    258|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  2.20k|{
 2160|  2.20k|    auto it = range.begin();
 2161|   242k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 242k, False: 150]
  ------------------
 2162|   242k|        const auto val =
 2163|   242k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   242k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   242k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 241k, False: 954]
  |  |  ------------------
  ------------------
 2165|   241k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   241k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   241k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.05k, False: 239k]
  ------------------
 2168|  2.05k|                return it;
 2169|  2.05k|            }
 2170|   241k|        }
 2171|   240k|        it = val.iterator;
 2172|   240k|    }
 2173|       |
 2174|    150|    return it;
 2175|  2.20k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   242k|{
 1998|   242k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   242k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   242k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   242k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   242k|    auto it = range.begin();
 2002|   242k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   242k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 954, False: 241k]
  |  |  ------------------
  ------------------
 2005|    954|        ++it;
 2006|    954|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|    954|        return {it, {}};
 2008|    954|    }
 2009|       |
 2010|   241k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 208k, False: 33.1k]
  ------------------
 2011|   208k|        ++it;
 2012|   208k|        return {it, string_type(1, *range.begin())};
 2013|   208k|    }
 2014|       |
 2015|  33.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  33.1k|    return {it, string_type{range.begin(), it}};
 2017|   241k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1264|    954|{
 1265|    954|    auto it = input.begin();
 1266|  1.46k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.41k, False: 54]
  ------------------
 1267|  1.41k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 900, False: 510]
  ------------------
 1268|    900|            break;
 1269|    900|        }
 1270|  1.41k|    }
 1271|    954|    return it;
 1272|    954|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  33.1k|    {
  283|  33.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  33.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  33.1k|    {
  212|  33.1k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 66, False: 33.1k]
  ------------------
  213|     66|            auto dist = bound - i;
  214|     66|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     66|            return dist;
  216|     66|        }
  217|  33.1k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  33.1k|        return n;
  219|  33.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|  66.3k|    {
  132|  66.3k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 66.3k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  66.3k|        return t;
  136|  66.3k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   242k|    {
 1989|   242k|        return !codepoint.empty();
 1990|   242k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  2.20k|        : m_fptr([](storage fn,
  743|  2.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.20k|              cvref<T> obj = *get<T>(fn);
  745|  2.20k|              if constexpr (std::is_void_v<R>) {
  746|  2.20k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.20k|              }
  748|  2.20k|              else {
  749|  2.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.20k|              }
  751|  2.20k|          }),
  752|  2.20k|          m_storage(std::addressof(f))
  753|  2.20k|    {
  754|  2.20k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   241k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   241k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   241k|              else {
  749|   241k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   241k|              }
  751|   241k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   241k|    {
  684|   241k|        if constexpr (std::is_const_v<T>) {
  685|   241k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   241k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|   241k|            const auto cb = [&](char32_t cp) {
 5201|   241k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|   241k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  2.20k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.20k|        {
  667|  2.20k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  2.46k|    {
 5228|  2.46k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 996, False: 1.47k]
  ------------------
 5229|    996|            return detail::unexpected_scan_error(
 5230|    996|                scan_error::invalid_scanned_value,
 5231|    996|                "No characters matched in [character set]");
 5232|    996|        }
 5233|       |
 5234|  1.47k|        return it;
 5235|  2.46k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  2.01k|{
 2181|  2.01k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  2.01k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    258|        : m_fptr([](storage fn,
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|    258|              if constexpr (std::is_void_v<R>) {
  746|    258|                  obj(static_cast<decltype(args)>(args)...);
  747|    258|              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
  752|    258|          m_storage(std::addressof(f))
  753|    258|    {
  754|    258|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.37k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.37k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.37k|              else {
  749|  3.37k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.37k|              }
  751|  3.37k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.37k|    {
  684|  3.37k|        if constexpr (std::is_const_v<T>) {
  685|  3.37k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.37k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  3.37k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.37k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.37k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    258|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    258|        {
  667|    258|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    982|{
 4795|    982|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    982|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    982|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 106, False: 876]
  ------------------
 4799|    106|        return detail::unexpected_scan_error(
 4800|    106|            scan_error::invalid_scanned_value,
 4801|    106|            "Invalid encoding in scanned string");
 4802|    106|    }
 4803|       |
 4804|    876|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    876|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    876|    return SCN_MOVE(result);
  ------------------
  |  |  934|    876|    static_cast<    \
  |  |  935|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    876|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|  2.54k|    {
 4932|  2.54k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.05k, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.05k|    }                                                  \
  |  |  |  | 3939|  2.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|    492|        return read_string_impl(range, it, value);
 4934|  2.54k|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|  7.63k|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|  7.63k|        else {
 4961|  7.63k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 0, False: 7.63k]
  ------------------
 4962|      0|                return detail::unexpected_scan_error(
 4963|      0|                    scan_error::invalid_format_string,
 4964|      0|                    "Cannot use regex with a non-contiguous source "
 4965|      0|                    "range");
 4966|      0|            }
 4967|       |
 4968|  7.63k|            auto input = get_as_contiguous(range);
 4969|  7.63k|            SCN_TRY(it,
  ------------------
  |  | 3940|  7.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  7.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  7.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  7.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.16k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.16k|    }                                                  \
  |  |  |  | 3939|  7.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|  1.47k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|  1.47k|            return ranges::next(range.begin(),
 4972|  1.47k|                                ranges::distance(input.begin(), it));
 4973|  7.63k|        }
 4974|  7.63k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|  7.63k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  7.63k|                  ranges::sized_range<Range>) {
  962|  7.63k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  7.63k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|  7.63k|{
 1066|  7.63k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  7.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  7.63k|                  ranges::sized_range<Range>) {
 1070|  7.63k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  7.63k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|  7.63k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  7.63k|                  ranges::sized_range<Range>) {
  984|  7.63k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  7.63k|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4378|  7.63k|{
 4379|  7.63k|    static_assert(ranges::contiguous_range<Input> &&
 4380|  7.63k|                  ranges::borrowed_range<Input> &&
 4381|  7.63k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4382|       |
 4383|  7.63k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4384|  7.63k|    std::basic_regex<CharT> re{};
 4385|  7.63k|    try {
 4386|  7.63k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  7.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  7.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  7.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  7.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 7.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  7.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4387|  7.63k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|  7.63k|                                     re_flags | std::regex_constants::nosubs};
 4389|  7.63k|    }
 4390|  7.63k|    catch (const std::regex_error& err) {
 4391|  3.66k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4392|  3.66k|                                             "Invalid regex");
 4393|  3.66k|    }
 4394|       |
 4395|  3.97k|    std::match_results<const CharT*> matches{};
 4396|  3.97k|    try {
 4397|  3.97k|        bool found = std::regex_search(input.data(),
 4398|  3.97k|                                       input.data() + input.size(), matches, re,
 4399|  3.97k|                                       std::regex_constants::match_continuous);
 4400|  3.97k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4400:13): [True: 2.49k, False: 1.47k]
  |  Branch (4400:23): [True: 0, False: 1.47k]
  ------------------
 4401|  2.36k|            return detail::unexpected_scan_error(
 4402|  2.36k|                scan_error::invalid_scanned_value,
 4403|  2.36k|                "Regular expression didn't match");
 4404|  2.36k|        }
 4405|  3.97k|    }
 4406|  3.97k|    catch (const std::regex_error& err) {
 4407|    132|        return detail::unexpected_scan_error(
 4408|    132|            scan_error::invalid_format_string,
 4409|    132|            "Regex matching failed with an error");
 4410|    132|    }
 4411|       |
 4412|  1.47k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4413|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4414|       |    auto re =
 4415|       |#if SCN_REGEX_BOOST_USE_ICU
 4416|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4417|       |                             make_regex_flags(flags) |
 4418|       |                                 boost::regex_constants::no_except |
 4419|       |                                 boost::regex_constants::nosubs);
 4420|       |#else
 4421|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4422|       |                                  make_regex_flags(flags) |
 4423|       |                                      boost::regex_constants::no_except |
 4424|       |                                      boost::regex_constants::nosubs};
 4425|       |#endif
 4426|       |    if (re.status() != 0) {
 4427|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4428|       |                                             "Invalid regex");
 4429|       |    }
 4430|       |
 4431|       |    boost::match_results<const CharT*> matches{};
 4432|       |    try {
 4433|       |        bool found =
 4434|       |#if SCN_REGEX_BOOST_USE_ICU
 4435|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4436|       |                                   matches, re,
 4437|       |                                   boost::regex_constants::match_continuous);
 4438|       |#else
 4439|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4440|       |                                matches, re,
 4441|       |                                boost::regex_constants::match_continuous);
 4442|       |#endif
 4443|       |        if (!found || matches.prefix().matched) {
 4444|       |            return detail::unexpected_scan_error(
 4445|       |                scan_error::invalid_scanned_value,
 4446|       |                "Regular expression didn't match");
 4447|       |        }
 4448|       |    }
 4449|       |    catch (const std::runtime_error& err) {
 4450|       |        return detail::unexpected_scan_error(
 4451|       |            scan_error::invalid_format_string,
 4452|       |            "Regex matching failed with an error");
 4453|       |    }
 4454|       |
 4455|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4456|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4457|       |    static_assert(std::is_same_v<CharT, char>);
 4458|       |    std::string flagged_pattern{};
 4459|       |    auto re = [&]() {
 4460|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4461|       |        opts.set_never_capture(true);
 4462|       |        if (flagstr.empty()) {
 4463|       |            return re2::RE2{pattern, opts};
 4464|       |        }
 4465|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|       |        flagged_pattern.append(flagstr);
 4467|       |        flagged_pattern.append(pattern);
 4468|       |        return re2::RE2{flagged_pattern, opts};
 4469|       |    }();
 4470|       |    if (!re.ok()) {
 4471|       |        return detail::unexpected_scan_error(
 4472|       |            scan_error::invalid_format_string,
 4473|       |            "Failed to parse regular expression");
 4474|       |    }
 4475|       |
 4476|       |    auto new_input = detail::make_string_view_from_pointers(
 4477|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4478|       |    bool found = re2::RE2::Consume(&new_input, re);
 4479|       |    if (!found) {
 4480|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4481|       |                                             "Regular expression didn't match");
 4482|       |    }
 4483|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4484|       |#endif  // SCN_REGEX_BACKEND == ...
 4485|  3.97k|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5848|  5.05k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  5.05k|                       std::is_same_v<T, std::wstring>) {
 5867|  5.05k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  5.05k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    356|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    356|    else {
 3117|    356|        return transcode_impl(source.view(), dest);
 3118|    356|    }
 3119|       |
 3120|      0|    return {};
 3121|    356|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|  1.90k|{
 3083|  1.90k|    dst.clear();
 3084|  1.90k|    transcode_valid_to_string(src, dst);
 3085|  1.90k|    return {};
 3086|  1.90k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.90k|{
 1502|  1.90k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.90k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|  1.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|  1.90k|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|  1.90k|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|  1.90k|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|  1.90k|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|  1.90k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.90k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|  1.90k|{
 1376|  1.90k|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|  1.90k|    auto it = src.begin();
 1379|  95.9k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 94.0k, False: 1.90k]
  ------------------
 1380|  94.0k|        auto res = get_next_code_point_valid(
 1381|  94.0k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|  94.0k|                                                                 src.end()));
 1383|  94.0k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  930|  94.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|  94.0k|        dest.push_back(res.value);
 1385|  94.0k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|  94.0k|    }
 1387|  1.90k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|  94.0k|{
 1299|  94.0k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  94.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|  94.0k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|  94.0k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  930|  94.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|  94.0k|    return {input.begin() + len,
 1305|  94.0k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|  94.0k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    542|    {
 5314|    542|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    542|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    542|        return read_impl(range, specs, value);
 5316|    542|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    542|    {
 5332|    542|        SCN_CLANG_PUSH
 5333|    542|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    542|        switch (m_type) {
 5336|    224|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 224, False: 318]
  ------------------
 5337|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     60|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 60, False: 482]
  ------------------
 5340|     60|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     60|                                                                   value);
 5342|       |
 5343|     30|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 30, False: 512]
  ------------------
 5344|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    216|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 216, False: 326]
  ------------------
 5347|    216|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    216|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 540]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     10|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 10, False: 532]
  ------------------
 5357|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     10|                    range,
 5359|     10|                    get_unescaped_regex_pattern(
 5360|     10|                        specs.charset_string<SourceCharT>()),
 5361|     10|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 542]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    542|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    542|        }
 5368|       |
 5369|    542|        SCN_CLANG_POP
 5370|    542|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    224|    {
 4861|    224|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    224|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    314|{
 4795|    314|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    314|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    314|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 106, False: 208]
  ------------------
 4799|    106|        return detail::unexpected_scan_error(
 4800|    106|            scan_error::invalid_scanned_value,
 4801|    106|            "Invalid encoding in scanned string");
 4802|    106|    }
 4803|       |
 4804|    208|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    208|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 208]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    208|    return SCN_MOVE(result);
  ------------------
  |  |  934|    208|    static_cast<    \
  |  |  935|    208|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    208|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     60|    {
 4882|     60|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 32, False: 28]
  ------------------
 4883|     32|            return read_string_impl(
 4884|     32|                range,
 4885|     32|                read_until_code_unit(
 4886|     32|                    range,
 4887|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     32|                        SourceCharT ch) { return ch == until; }),
 4889|     32|                value);
 4890|     32|        }
 4891|     28|        return read_string_impl(
 4892|     28|            range,
 4893|     28|            read_until_code_units(
 4894|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     28|            value);
 4896|     60|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     32|        : m_fptr([](storage fn,
  743|     32|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     32|              cvref<T> obj = *get<T>(fn);
  745|     32|              if constexpr (std::is_void_v<R>) {
  746|     32|                  obj(static_cast<decltype(args)>(args)...);
  747|     32|              }
  748|     32|              else {
  749|     32|                  return obj(static_cast<decltype(args)>(args)...);
  750|     32|              }
  751|     32|          }),
  752|     32|          m_storage(std::addressof(f))
  753|     32|    {
  754|     32|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    386|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    386|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    386|              else {
  749|    386|                  return obj(static_cast<decltype(args)>(args)...);
  750|    386|              }
  751|    386|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    386|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    386|        else if constexpr (std::is_object_v<T>) {
  688|    386|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    386|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|    386|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     32|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     32|        {
  662|     32|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     30|    {
 4988|     30|        return read_impl(
 4989|     30|            range,
 4990|     30|            [&](const auto& rng) {
 4991|     30|                return read_string_impl(rng, read_all(rng), value);
 4992|     30|            },
 4993|     30|            detail::priority_tag<1>{});
 4994|     30|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     30|    {
 5015|     30|        return read_cb(range);
 5016|     30|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     30|            [&](const auto& rng) {
 4991|     30|                return read_string_impl(rng, read_all(rng), value);
 4992|     30|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    216|    {
 5089|    216|        auto it = read_source_impl(range, {specs});
 5090|    216|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 204]
  |  |  ------------------
  ------------------
 5091|     12|            return unexpected(it.error());
 5092|     12|        }
 5093|       |
 5094|    204|        return read_string_impl(range, *it, value);
 5095|    216|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    204|{
 4795|    204|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    204|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    204|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 56, False: 148]
  ------------------
 4799|     56|        return detail::unexpected_scan_error(
 4800|     56|            scan_error::invalid_scanned_value,
 4801|     56|            "Invalid encoding in scanned string");
 4802|     56|    }
 4803|       |
 4804|    148|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    148|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 148]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    148|    return SCN_MOVE(result);
  ------------------
  |  |  934|    148|    static_cast<    \
  |  |  935|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    148|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|     12|    {
 4932|     12|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|     12|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  3.73k|    {
 5314|  3.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  3.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  3.73k|        return read_impl(range, specs, value);
 5316|  3.73k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  3.73k|    {
 5332|  3.73k|        SCN_CLANG_PUSH
 5333|  3.73k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  3.73k|        switch (m_type) {
 5336|    310|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 310, False: 3.42k]
  ------------------
 5337|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 56, False: 3.67k]
  ------------------
 5340|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     56|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 3.73k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    822|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 822, False: 2.91k]
  ------------------
 5347|    822|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    822|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|  2.42k|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2.42k, False: 1.31k]
  ------------------
 5352|  2.42k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|  2.42k|                    range, specs.charset_string<SourceCharT>(),
 5354|  2.42k|                    specs.regexp_flags, value);
 5355|       |
 5356|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 126, False: 3.60k]
  ------------------
 5357|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    126|                    range,
 5359|    126|                    get_unescaped_regex_pattern(
 5360|    126|                        specs.charset_string<SourceCharT>()),
 5361|    126|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 3.73k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  3.73k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  3.73k|        }
 5368|       |
 5369|  3.73k|        SCN_CLANG_POP
 5370|  3.73k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    940|    {
 4861|    940|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    940|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|    996|{
 4795|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 326, False: 670]
  ------------------
 4799|    326|        return detail::unexpected_scan_error(
 4800|    326|            scan_error::invalid_scanned_value,
 4801|    326|            "Invalid encoding in scanned string");
 4802|    326|    }
 4803|       |
 4804|    670|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    670|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 670]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    670|    return SCN_MOVE(result);
  ------------------
  |  |  934|    670|    static_cast<    \
  |  |  935|    670|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    670|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.54k|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|  1.54k|    else {
 3132|  1.54k|        return transcode_impl(source.view(), dest);
 3133|  1.54k|    }
 3134|       |
 3135|      0|    return {};
 3136|  1.54k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     56|    {
 4882|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 30, False: 26]
  ------------------
 4883|     30|            return read_string_impl(
 4884|     30|                range,
 4885|     30|                read_until_code_unit(
 4886|     30|                    range,
 4887|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     30|                        SourceCharT ch) { return ch == until; }),
 4889|     30|                value);
 4890|     30|        }
 4891|     26|        return read_string_impl(
 4892|     26|            range,
 4893|     26|            read_until_code_units(
 4894|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     26|            value);
 4896|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    822|    {
 5089|    822|        auto it = read_source_impl(range, {specs});
 5090|    822|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 490]
  |  |  ------------------
  ------------------
 5091|    332|            return unexpected(it.error());
 5092|    332|        }
 5093|       |
 5094|    490|        return read_string_impl(range, *it, value);
 5095|    822|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    982|{
 4795|    982|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    982|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    982|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 106, False: 876]
  ------------------
 4799|    106|        return detail::unexpected_scan_error(
 4800|    106|            scan_error::invalid_scanned_value,
 4801|    106|            "Invalid encoding in scanned string");
 4802|    106|    }
 4803|       |
 4804|    876|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    876|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    876|    return SCN_MOVE(result);
  ------------------
  |  |  934|    876|    static_cast<    \
  |  |  935|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    876|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|  2.54k|    {
 4932|  2.54k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.05k, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.05k|    }                                                  \
  |  |  |  | 3939|  2.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|    492|        return read_string_impl(range, it, value);
 4934|  2.54k|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|  5.05k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  5.05k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  5.05k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  5.05k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    542|    {
 5314|    542|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    542|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    542|        return read_impl(range, specs, value);
 5316|    542|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    542|    {
 5332|    542|        SCN_CLANG_PUSH
 5333|    542|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    542|        switch (m_type) {
 5336|    224|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 224, False: 318]
  ------------------
 5337|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     60|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 60, False: 482]
  ------------------
 5340|     60|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     60|                                                                   value);
 5342|       |
 5343|     30|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 30, False: 512]
  ------------------
 5344|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    216|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 216, False: 326]
  ------------------
 5347|    216|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    216|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 540]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     10|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 10, False: 532]
  ------------------
 5357|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     10|                    range,
 5359|     10|                    get_unescaped_regex_pattern(
 5360|     10|                        specs.charset_string<SourceCharT>()),
 5361|     10|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 542]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    542|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    542|        }
 5368|       |
 5369|    542|        SCN_CLANG_POP
 5370|    542|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|    224|    {
 4868|    224|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    224|                                     value);
 4870|    224|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    314|{
 4814|    314|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    314|    auto src = [&]() {
 4817|    314|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    314|            return make_contiguous_buffer(
 4819|    314|                ranges::subrange{range.begin().base(), result.base()});
 4820|    314|        }
 4821|    314|        else {
 4822|    314|            return make_contiguous_buffer(
 4823|    314|                ranges::subrange{range.begin(), result});
 4824|    314|        }
 4825|    314|    }();
 4826|    314|    using src_type = decltype(src);
 4827|       |
 4828|    314|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    314|    else {
 4841|    314|        const auto view = src.view();
 4842|    314|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    314|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 106, False: 208]
  ------------------
 4845|    106|            return detail::unexpected_scan_error(
 4846|    106|                scan_error::invalid_scanned_value,
 4847|    106|                "Invalid encoding in scanned string_view");
 4848|    106|        }
 4849|       |
 4850|    208|        return SCN_MOVE(result);
  ------------------
  |  |  934|    208|    static_cast<    \
  |  |  935|    208|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    314|    }
 4852|    314|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    314|    auto src = [&]() {
 4817|    314|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    314|            return make_contiguous_buffer(
 4819|    314|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    314|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     60|    {
 4904|     60|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 32, False: 28]
  ------------------
 4905|     32|            return read_string_view_impl(
 4906|     32|                range,
 4907|     32|                read_until_code_unit(
 4908|     32|                    range,
 4909|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     32|                        SourceCharT ch) { return ch == until; }),
 4911|     32|                value);
 4912|     32|        }
 4913|     28|        return read_string_view_impl(
 4914|     28|            range,
 4915|     28|            read_until_code_units(
 4916|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     28|            value);
 4918|     60|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     32|        : m_fptr([](storage fn,
  743|     32|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     32|              cvref<T> obj = *get<T>(fn);
  745|     32|              if constexpr (std::is_void_v<R>) {
  746|     32|                  obj(static_cast<decltype(args)>(args)...);
  747|     32|              }
  748|     32|              else {
  749|     32|                  return obj(static_cast<decltype(args)>(args)...);
  750|     32|              }
  751|     32|          }),
  752|     32|          m_storage(std::addressof(f))
  753|     32|    {
  754|     32|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    386|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    386|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    386|              else {
  749|    386|                  return obj(static_cast<decltype(args)>(args)...);
  750|    386|              }
  751|    386|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    386|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    386|        else if constexpr (std::is_object_v<T>) {
  688|    386|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    386|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4910|    386|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     32|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     32|        {
  662|     32|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     30|    {
 5000|     30|        return read_impl(
 5001|     30|            range,
 5002|     30|            [&](const auto& rng) {
 5003|     30|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     30|            },
 5005|     30|            detail::priority_tag<1>{});
 5006|     30|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     30|    {
 5015|     30|        return read_cb(range);
 5016|     30|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     30|            [&](const auto& rng) {
 5003|     30|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     30|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|    216|    {
 5103|    216|        auto it = read_source_impl(range, {specs});
 5104|    216|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 204]
  |  |  ------------------
  ------------------
 5105|     12|            return unexpected(it.error());
 5106|     12|        }
 5107|       |
 5108|    204|        return read_string_view_impl(range, *it, value);
 5109|    216|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|    204|{
 4814|    204|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    204|    auto src = [&]() {
 4817|    204|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    204|            return make_contiguous_buffer(
 4819|    204|                ranges::subrange{range.begin().base(), result.base()});
 4820|    204|        }
 4821|    204|        else {
 4822|    204|            return make_contiguous_buffer(
 4823|    204|                ranges::subrange{range.begin(), result});
 4824|    204|        }
 4825|    204|    }();
 4826|    204|    using src_type = decltype(src);
 4827|       |
 4828|    204|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    204|    else {
 4841|    204|        const auto view = src.view();
 4842|    204|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    204|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 56, False: 148]
  ------------------
 4845|     56|            return detail::unexpected_scan_error(
 4846|     56|                scan_error::invalid_scanned_value,
 4847|     56|                "Invalid encoding in scanned string_view");
 4848|     56|        }
 4849|       |
 4850|    148|        return SCN_MOVE(result);
  ------------------
  |  |  934|    148|    static_cast<    \
  |  |  935|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    204|    }
 4852|    204|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|    204|    auto src = [&]() {
 4817|    204|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    204|            return make_contiguous_buffer(
 4819|    204|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    204|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4942|     12|    {
 4943|     12|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|      0|        return read_string_view_impl(range, it, value);
 4945|     12|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  3.73k|    {
 5314|  3.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  3.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  3.73k|        return read_impl(range, specs, value);
 5316|  3.73k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  3.73k|    {
 5332|  3.73k|        SCN_CLANG_PUSH
 5333|  3.73k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  3.73k|        switch (m_type) {
 5336|    310|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 310, False: 3.42k]
  ------------------
 5337|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 56, False: 3.67k]
  ------------------
 5340|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     56|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 3.73k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    822|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 822, False: 2.91k]
  ------------------
 5347|    822|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    822|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|  2.42k|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2.42k, False: 1.31k]
  ------------------
 5352|  2.42k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|  2.42k|                    range, specs.charset_string<SourceCharT>(),
 5354|  2.42k|                    specs.regexp_flags, value);
 5355|       |
 5356|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 126, False: 3.60k]
  ------------------
 5357|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    126|                    range,
 5359|    126|                    get_unescaped_regex_pattern(
 5360|    126|                        specs.charset_string<SourceCharT>()),
 5361|    126|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 3.73k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  3.73k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  3.73k|        }
 5368|       |
 5369|  3.73k|        SCN_CLANG_POP
 5370|  3.73k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|    940|    {
 4868|    940|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    940|                                     value);
 4870|    940|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|    996|{
 4814|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    996|    auto src = [&]() {
 4817|    996|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    996|            return make_contiguous_buffer(
 4819|    996|                ranges::subrange{range.begin().base(), result.base()});
 4820|    996|        }
 4821|    996|        else {
 4822|    996|            return make_contiguous_buffer(
 4823|    996|                ranges::subrange{range.begin(), result});
 4824|    996|        }
 4825|    996|    }();
 4826|    996|    using src_type = decltype(src);
 4827|       |
 4828|    996|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    996|    else {
 4841|    996|        const auto view = src.view();
 4842|    996|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    996|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 326, False: 670]
  ------------------
 4845|    326|            return detail::unexpected_scan_error(
 4846|    326|                scan_error::invalid_scanned_value,
 4847|    326|                "Invalid encoding in scanned string_view");
 4848|    326|        }
 4849|       |
 4850|    670|        return SCN_MOVE(result);
  ------------------
  |  |  934|    670|    static_cast<    \
  |  |  935|    670|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    996|    }
 4852|    996|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|    996|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    996|        else {
 4822|    996|            return make_contiguous_buffer(
 4823|    996|                ranges::subrange{range.begin(), result});
 4824|    996|        }
 4825|    996|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     56|    {
 4904|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 30, False: 26]
  ------------------
 4905|     30|            return read_string_view_impl(
 4906|     30|                range,
 4907|     30|                read_until_code_unit(
 4908|     30|                    range,
 4909|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     30|                        SourceCharT ch) { return ch == until; }),
 4911|     30|                value);
 4912|     30|        }
 4913|     26|        return read_string_view_impl(
 4914|     26|            range,
 4915|     26|            read_until_code_units(
 4916|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     26|            value);
 4918|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4910|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|    822|    {
 5103|    822|        auto it = read_source_impl(range, {specs});
 5104|    822|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 490]
  |  |  ------------------
  ------------------
 5105|    332|            return unexpected(it.error());
 5106|    332|        }
 5107|       |
 5108|    490|        return read_string_view_impl(range, *it, value);
 5109|    822|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    982|{
 4814|    982|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    982|    auto src = [&]() {
 4817|    982|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    982|            return make_contiguous_buffer(
 4819|    982|                ranges::subrange{range.begin().base(), result.base()});
 4820|    982|        }
 4821|    982|        else {
 4822|    982|            return make_contiguous_buffer(
 4823|    982|                ranges::subrange{range.begin(), result});
 4824|    982|        }
 4825|    982|    }();
 4826|    982|    using src_type = decltype(src);
 4827|       |
 4828|    982|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    982|    else {
 4841|    982|        const auto view = src.view();
 4842|    982|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    982|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 106, False: 876]
  ------------------
 4845|    106|            return detail::unexpected_scan_error(
 4846|    106|                scan_error::invalid_scanned_value,
 4847|    106|                "Invalid encoding in scanned string_view");
 4848|    106|        }
 4849|       |
 4850|    876|        return SCN_MOVE(result);
  ------------------
  |  |  934|    876|    static_cast<    \
  |  |  935|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    982|    }
 4852|    982|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    982|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    982|        else {
 4822|    982|            return make_contiguous_buffer(
 4823|    982|                ranges::subrange{range.begin(), result});
 4824|    982|        }
 4825|    982|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4942|  2.54k|    {
 4943|  2.54k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.05k, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.05k|    }                                                  \
  |  |  |  | 3939|  2.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|    492|        return read_string_view_impl(range, it, value);
 4945|  2.54k|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5661|  2.34k|    {
 5662|  2.34k|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|  2.34k|        else {
 5667|  2.34k|            detail::check_char_type_specs(specs, eh);
 5668|  2.34k|        }
 5669|  2.34k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.92k, False: 424]
  |  |  ------------------
  ------------------
 5670|  1.92k|            return detail::unexpected_scan_error(
 5671|  1.92k|                scan_error::invalid_format_string, eh.m_msg);
 5672|  1.92k|        }
 5673|    424|        return {};
 5674|  2.34k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  7.89k|    {
  763|  7.89k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.89k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.25k|        : m_fptr([](storage fn,
  743|  1.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.25k|              cvref<T> obj = *get<T>(fn);
  745|  1.25k|              if constexpr (std::is_void_v<R>) {
  746|  1.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.25k|              }
  748|  1.25k|              else {
  749|  1.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.25k|              }
  751|  1.25k|          }),
  752|  1.25k|          m_storage(std::addressof(f))
  753|  1.25k|    {
  754|  1.25k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.92k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.92k|              else {
  749|  2.92k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.92k|              }
  751|  2.92k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.92k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.92k|        else if constexpr (std::is_object_v<T>) {
  688|  2.92k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.92k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.25k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.25k|        {
  662|  1.25k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5656|  9.97k|    {
 5657|  9.97k|        return false;
 5658|  9.97k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|     78|    {
 1879|     78|        auto stdloc = loc.get<std::locale>();
 1880|     78|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     78|        grouping = numpunct.grouping();
 1882|     78|        thousands_sep =
 1883|     78|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 78]
  ------------------
 1884|     78|        decimal_point = numpunct.decimal_point();
 1885|     78|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|     94|{
 1816|     94|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 94, False: 0]
  ------------------
 1817|     94|        return std::use_facet<Facet>(stdloc);
 1818|     94|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     94|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  3.37k|{
 2449|  3.37k|    size_t count{0};
 2450|  3.37k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  3.37k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  3.37k|    });
 2453|  3.37k|    return count;
 2454|  3.37k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  3.37k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  3.37k|    auto it = input.begin();
 1547|  10.5k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 7.14k, False: 3.37k]
  ------------------
 1548|  7.14k|        auto res = get_next_code_point(
 1549|  7.14k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  7.14k|        cb(res.value);
 1551|  7.14k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  7.14k|    }
 1553|  3.37k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   321M|{
 1279|   321M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   321M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   321M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   321M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   321M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 321M]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|   321M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   321M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 321M]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|   321M|    return {input.begin() + len,
 1291|   321M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   321M|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.37k|        : m_fptr([](storage fn,
  743|  3.37k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.37k|              cvref<T> obj = *get<T>(fn);
  745|  3.37k|              if constexpr (std::is_void_v<R>) {
  746|  3.37k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.37k|              }
  748|  3.37k|              else {
  749|  3.37k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.37k|              }
  751|  3.37k|          }),
  752|  3.37k|          m_storage(std::addressof(f))
  753|  3.37k|    {
  754|  3.37k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  7.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.14k|              cvref<T> obj = *get<T>(fn);
  745|  7.14k|              if constexpr (std::is_void_v<R>) {
  746|  7.14k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  7.14k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.14k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.14k|        else if constexpr (std::is_object_v<T>) {
  688|  7.14k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.14k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  7.14k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  7.14k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  7.14k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.37k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.37k|        {
  662|  3.37k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  19.5k|    {
 1681|  19.5k|        return m_view;
 1682|  19.5k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  19.5k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2520|  2.23k|    {
 2521|  2.23k|        return m_multibyte_left;
 2522|  2.23k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E22is_current_double_wideEv:
 2525|  1.79k|    {
 2526|  1.79k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  1.79k|        return _get_width_at_current_cp_start(
 2528|  1.79k|                   _get_cp_length_at_current()) == 2;
 2529|  1.79k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2753|  16.6k|    {
 2754|  16.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  16.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 16.6k, False: 0]
  ------------------
 2759|  16.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  16.6k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  16.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  16.6k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  57.0k|{
 1956|  57.0k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  57.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  57.0k|    if constexpr (ranges::sized_range<Range>) {
 1959|  57.0k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  57.0k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 140, False: 56.9k]
  ------------------
 1961|    140|            return unexpected(eof_error::eof);
 1962|    140|        }
 1963|       |
 1964|  56.9k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  57.0k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2747|  16.6k|    {
 2748|  16.6k|        return static_cast<difference_type>(
 2749|  16.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  16.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2532|  21.2k|    {
 2533|  21.2k|        return *m_current;
 2534|  21.2k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2541|  14.8k|    {
 2542|  14.8k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  14.8k|        _increment_current();
 2544|  14.8k|        return *this;
 2545|  14.8k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2776|  14.8k|    {
 2777|  14.8k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 14.8k, False: 0]
  ------------------
 2778|  14.8k|            auto cplen = _get_cp_length_at_current();
 2779|  14.8k|            m_multibyte_left = cplen - 1;
 2780|  14.8k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  14.8k|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|  14.8k|        ++m_current;
 2787|  14.8k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|  5.09k|    {
 2638|  5.09k|        return !(a == b);
 2639|  5.09k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|  5.75k|    {
 2630|  5.75k|        return a.m_current == b.m_current;
 2631|  5.75k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2536|  2.07k|    {
 2537|  2.07k|        return *m_current;
 2538|  2.07k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  5.84k|    {
 1989|  5.84k|        return !codepoint.empty();
 1990|  5.84k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|    398|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|    398|    else {
 1788|    398|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|    398|    }
 1790|    398|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|    398|    {
 1636|    398|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|    398|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|    398|    {
 1720|    398|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|    398|        else {
 1753|    398|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|    398|            if constexpr (ranges::common_range<Range>) {
 1758|    398|                std::copy(ranges::begin(range), ranges::end(range),
 1759|    398|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|    398|            m_view = string_view_type{str};
 1768|    398|        }
 1769|    398|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2480|  7.68k|        : m_current(x), m_end(s), m_count(n)
 2481|  7.68k|    {
 2482|  7.68k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2512|  23.5k|    {
 2513|  23.5k|        return m_current;
 2514|  23.5k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  80.1k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  80.1k|    else {
 2225|  80.1k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  80.1k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  80.1k|            return detail::is_cp_space(cp);
 2238|  80.1k|        });
 2239|  80.1k|    }
 2240|  80.1k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2180|  80.1k|{
 2181|  80.1k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  80.1k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2159|  80.1k|{
 2160|  80.1k|    auto it = range.begin();
 2161|  81.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 80.2k, False: 932]
  ------------------
 2162|  80.2k|        const auto val =
 2163|  80.2k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  80.2k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  80.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 80.2k, False: 0]
  |  |  ------------------
  ------------------
 2165|  80.2k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  80.2k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  80.2k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 79.2k, False: 1.03k]
  ------------------
 2168|  79.2k|                return it;
 2169|  79.2k|            }
 2170|  80.2k|        }
 2171|  1.03k|        it = val.iterator;
 2172|  1.03k|    }
 2173|       |
 2174|    932|    return it;
 2175|  80.1k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   446k|{
 1998|   446k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   446k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   446k|    auto it = range.begin();
 2002|   446k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   446k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   446k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 446k, False: 0]
  ------------------
 2011|   446k|        ++it;
 2012|   446k|        return {it, string_type(1, *range.begin())};
 2013|   446k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   446k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   699k|{
  945|   699k|    return is_range_eof(r.begin(), r.end());
  946|   699k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   321M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   321M|    {
  938|   321M|        return begin == end;
  939|   321M|    }
  940|   321M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  9.48k|    {
  190|  9.48k|        i = std::move(bound);
  191|  9.48k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   446k|    {
 1989|   446k|        return !codepoint.empty();
 1990|   446k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  80.1k|        : m_fptr([](storage fn,
  743|  80.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.1k|              cvref<T> obj = *get<T>(fn);
  745|  80.1k|              if constexpr (std::is_void_v<R>) {
  746|  80.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.1k|              }
  748|  80.1k|              else {
  749|  80.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.1k|              }
  751|  80.1k|          }),
  752|  80.1k|          m_storage(std::addressof(f))
  753|  80.1k|    {
  754|  80.1k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  80.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  80.2k|              else {
  749|  80.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.2k|              }
  751|  80.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  80.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  80.2k|        else if constexpr (std::is_object_v<T>) {
  688|  80.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  80.2k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2236|  80.2k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  80.2k|            return detail::is_cp_space(cp);
 2238|  80.2k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  80.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  80.1k|        {
  662|  80.1k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   253k|{
  951|   253k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 253k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|   253k|    return eof_error::good;
  955|   253k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  2.97k|    {
 2943|  2.97k|        return take_width_view{r, n};
 2944|  2.97k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2910|  2.97k|        : m_base(base), m_count(count)
 2911|  2.97k|    {
 2912|  2.97k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2822|  2.97k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5737|    106|    {
 5738|    106|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 86, False: 20]
  ------------------
 5739|    106|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 20]
  ------------------
 5740|     86|            return read_default(range, value, loc);
 5741|     86|        }
 5742|       |
 5743|     20|        reader_impl_for_int<CharT> reader{};
 5744|     20|        using integer_type =
 5745|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     20|        integer_type tmp_value{};
 5747|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     20|        value = static_cast<integer_type>(value);
 5749|     20|        return ret;
 5750|    106|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5721|     86|    {
 5722|     86|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     86|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|     86|        else {
 5727|     86|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|     86|        }
 5729|     86|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5601|     86|    {
 5602|     86|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     86|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     86|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     86|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     86|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 86]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     86|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|     86|        ch = *range.begin();
 5604|     86|        return it;
 5605|     86|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|    798|{
 1945|    798|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    798|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 798]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|    798|    return ranges::next(range.begin());
 1950|    798|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|    798|{
  951|    798|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    798|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 798]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    798|    return eof_error::good;
  955|    798|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|    798|{
  945|    798|    return is_range_eof(r.begin(), r.end());
  946|    798|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  6.68k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.68k|    {
  938|  6.68k|        return begin == end;
  939|  6.68k|    }
  940|  6.68k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|  21.4k|        {
 2879|  21.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 442, False: 20.9k]
  |  Branch (2879:39): [True: 442, False: 0]
  ------------------
 2880|  21.4k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 126, False: 20.8k]
  ------------------
 2881|  21.4k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 1.79k, False: 19.0k]
  |  Branch (2881:39): [True: 1.79k, False: 0]
  ------------------
 2882|  20.8k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 102, False: 1.69k]
  ------------------
 2883|  21.4k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2926|  10.7k|    {
 2927|  10.7k|        return sentinel<true>{m_base.get().end()};
 2928|  10.7k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2825|  26.1k|    {
 2826|  26.1k|        return view;
 2827|  26.1k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2859|  10.7k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  10.7k|    static_cast<    \
  |  |  935|  10.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    842|    {
  296|    842|        ++x;
  297|    842|        return x;
  298|    842|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2920|  7.68k|    {
 2921|  7.68k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  7.68k|                                      m_count};
 2923|  7.68k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    144|    {
 3590|    144|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    144|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    144|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 144]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    144|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 144]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    144|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    144|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 126, False: 18]
  |  |  ------------------
  ------------------
 3616|    126|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    126|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     18|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     18|            localized_number_formatting_options<CharT>{loc};
 3637|     18|#endif
 3638|       |
 3639|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|    356|{
 3377|    356|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|    356|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|    356|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|    356|        parse_integer_base_prefix(
 3382|    356|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|    356|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 356]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|    356|    else {
 3394|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 356]
  |  Branch (3394:13): [True: 356, False: 0]
  ------------------
 3395|    356|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 356, False: 0]
  ------------------
 3396|    356|            digits_begin_it = base_prefix_begin_it;
 3397|    356|        }
 3398|    356|    }
 3399|       |
 3400|    356|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 356, False: 0]
  ------------------
 3401|    356|        sign = sign_type::plus_sign;
 3402|    356|    }
 3403|    356|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|    356|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|    356|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|    464|{
 3258|    464|    auto r = read_one_of_code_unit(range, "+-");
 3259|    464|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 464, False: 0]
  ------------------
 3260|    464|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 464, False: 0]
  ------------------
 3261|    464|            return std::pair{range.begin(), sign_type::default_sign};
 3262|    464|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|    464|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|    464|{
 2372|    464|    auto it = read_code_unit(range);
 2373|    464|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 464]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|    928|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 928, False: 464]
  ------------------
 2378|    928|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 928]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|    928|    }
 2382|       |
 2383|    464|    return unexpected(parse_error::error);
 2384|    464|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|    356|{
 3344|    356|    switch (base) {
 3345|      6|        case 2:
  ------------------
  |  Branch (3345:9): [True: 6, False: 350]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      6|                    false};
 3349|       |
 3350|     22|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 22, False: 334]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     22|            bool zero_parsed = false;
 3353|     22|            auto it = apply_opt(
 3354|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     22|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|     98|        case 16:
  ------------------
  |  Branch (3358:9): [True: 98, False: 258]
  ------------------
 3359|       |            // allow 0x/0X
 3360|     98|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|     98|                    false};
 3362|       |
 3363|     22|        case 0:
  ------------------
  |  Branch (3363:9): [True: 22, False: 334]
  ------------------
 3364|       |            // detect base
 3365|     22|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    208|        default:
  ------------------
  |  Branch (3367:9): [True: 208, False: 148]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    208|            return {range.begin(), base, false};
 3370|    356|    }
 3371|    356|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    126|{
 2391|    126|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 126, False: 0]
  ------------------
 2392|    126|        return range.begin();
 2393|    126|    }
 2394|      0|    return *result;
 2395|    126|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     28|{
 3295|     28|    return read_matching_string_classic_nocase(range, "0b");
 3296|     28|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|    508|{
 2331|    508|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|    508|    else {
 2344|    508|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    508|            if (ch < 'A' || ch > 'Z') {
 2346|    508|                return ch;
 2347|    508|            }
 2348|    508|            return static_cast<char_type>(ch +
 2349|    508|                                          static_cast<char_type>('a' - 'A'));
 2350|    508|        };
 2351|       |
 2352|    508|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    508|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    508|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    508|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    508|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 100, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    100|    }                                                  \
  |  |  |  | 3939|    508|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    408|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    408|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    408|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 408, False: 0]
  |  |  ------------------
  ------------------
 2357|    408|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    408|                    return ascii_tolower(a) ==
 2359|    408|                           static_cast<detail::char_t<Range>>(b);
 2360|    408|                }))) {
 2361|    408|            return unexpected(parse_error::error);
 2362|    408|        }
 2363|       |
 2364|      0|        return it;
 2365|    408|    }
 2366|    508|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|    508|{
 1956|    508|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    508|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    508|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    508|    else {
 1967|    508|        auto it = range.begin();
 1968|    508|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 508]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.62k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.21k, False: 408]
  ------------------
 1973|  1.21k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 100, False: 1.11k]
  ------------------
 1974|    100|                return unexpected(eof_error::eof);
 1975|    100|            }
 1976|  1.21k|        }
 1977|       |
 1978|    408|        return it;
 1979|    508|    }
 1980|    508|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|    508|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    508|    else {
 1116|    508|        return 0;
 1117|    508|    }
 1118|    508|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2344|    408|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    408|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 32, False: 376]
  |  Branch (2345:29): [True: 376, False: 0]
  ------------------
 2346|    408|                return ch;
 2347|    408|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    408|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     44|{
 3309|     44|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 44]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     44|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 44]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     44|    return unexpected(parse_error::error);
 3319|     44|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     44|{
 2246|     44|    auto it = read_code_unit(range);
 2247|     44|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     44|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 2252|     44|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     44|        return unexpected(parse_error::error);
 2254|     44|    }
 2255|       |
 2256|      0|    return *it;
 2257|     44|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     44|{
 1945|     44|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     44|    return ranges::next(range.begin());
 1950|     44|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     44|{
  951|     44|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     44|    return eof_error::good;
  955|     44|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  5.88k|{
  945|  5.88k|    return is_range_eof(r.begin(), r.end());
  946|  5.88k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    120|{
 3302|    120|    return read_matching_string_classic_nocase(range, "0x");
 3303|    120|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     22|{
 3325|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 22]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 22]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     22|    {
 3332|     22|        bool zero_parsed{false};
 3333|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 22]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     22|    }
 3337|     22|    return {range.begin(), 10, false};
 3338|     22|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|    320|{
 3411|    320|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|    320|    else {
 3422|    320|        return read_while1_code_unit(range,
 3423|    320|                                     [&](char_type ch) noexcept {
 3424|    320|                                         return char_to_int(ch) < base;
 3425|    320|                                     })
 3426|    320|            .transform_error(map_parse_error_to_scan_error(
 3427|    320|                scan_error::invalid_scanned_value,
 3428|    320|                "Failed to parse integer: No digits found"));
 3429|    320|    }
 3430|    320|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    428|{
 2095|    428|    auto it = read_while_code_unit(range, pred);
 2096|    428|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 428, False: 0]
  ------------------
 2097|    428|        return unexpected(parse_error::error);
 2098|    428|    }
 2099|      0|    return it;
 2100|    428|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    428|{
 2075|    428|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    428|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    428|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    428|    else {
 2060|    428|        auto first = range.begin();
 2061|    428|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 428, False: 0]
  ------------------
 2062|    428|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 428, False: 0]
  ------------------
 2063|    428|                return first;
 2064|    428|            }
 2065|    428|        }
 2066|      0|        return first;
 2067|    428|    }
 2068|    428|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  9.85k|        {
 2892|  9.85k|            return !(y == x);
 2893|  9.85k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    320|        : m_fptr([](storage fn,
  743|    320|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    320|              cvref<T> obj = *get<T>(fn);
  745|    320|              if constexpr (std::is_void_v<R>) {
  746|    320|                  obj(static_cast<decltype(args)>(args)...);
  747|    320|              }
  748|    320|              else {
  749|    320|                  return obj(static_cast<decltype(args)>(args)...);
  750|    320|              }
  751|    320|          }),
  752|    320|          m_storage(std::addressof(f))
  753|    320|    {
  754|    320|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    320|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    320|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    320|              else {
  749|    320|                  return obj(static_cast<decltype(args)>(args)...);
  750|    320|              }
  751|    320|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    320|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    320|        else if constexpr (std::is_object_v<T>) {
  688|    320|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    320|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3423|    320|                                     [&](char_type ch) noexcept {
 3424|    320|                                         return char_to_int(ch) < base;
 3425|    320|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    320|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    320|        {
  662|    320|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     36|{
 3441|     36|    std::basic_string<CharT> output;
 3442|     36|    std::string thsep_indices;
 3443|     36|    auto it = range.begin();
 3444|     36|    bool digit_matched = false;
 3445|     36|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 36, False: 0]
  ------------------
 3446|     36|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 36]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     36|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 36, False: 0]
  ------------------
 3451|     36|            break;
 3452|     36|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     36|    }
 3458|     36|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3459|     36|        return detail::unexpected_scan_error(
 3460|     36|            scan_error::invalid_scanned_value,
 3461|     36|            "Failed to parse integer: No digits found");
 3462|     36|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     36|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2516|  44.8k|    {
 2517|  44.8k|        return m_count;
 2518|  44.8k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5737|    316|    {
 5738|    316|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 296, False: 20]
  ------------------
 5739|    316|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 20]
  ------------------
 5740|    296|            return read_default(range, value, loc);
 5741|    296|        }
 5742|       |
 5743|     20|        reader_impl_for_int<CharT> reader{};
 5744|     20|        using integer_type =
 5745|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     20|        integer_type tmp_value{};
 5747|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     20|        value = static_cast<integer_type>(value);
 5749|     20|        return ret;
 5750|    316|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5721|  9.46k|    {
 5722|  9.46k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|  9.46k|        else {
 5727|  9.46k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|  9.46k|        }
 5729|  9.46k|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5601|  9.46k|    {
 5602|  9.46k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|  9.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|  9.46k|        ch = *range.begin();
 5604|  9.46k|        return it;
 5605|  9.46k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  66.4k|{
 1945|  66.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 66.4k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  66.4k|    return ranges::next(range.begin());
 1950|  66.4k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   321M|    {
  296|   321M|        ++x;
  297|   321M|        return x;
  298|   321M|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    350|    {
 3590|    350|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    350|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    350|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    350|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 350]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    350|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 350]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    350|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    350|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 336, False: 14]
  |  |  ------------------
  ------------------
 3616|    336|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    336|                    parse_integer_digits_without_thsep(
 3618|    336|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    336|                        prefix_result.parsed_base));
 3620|       |
 3621|    336|            auto buf = make_contiguous_buffer(
 3622|    336|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    336|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 336, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    336|    }                                                  \
  |  |  |  | 3939|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    336|        }
 3631|       |
 3632|     14|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     14|            localized_number_formatting_options<CharT>{loc};
 3637|     14|#endif
 3638|       |
 3639|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  28.4k|{
 3377|  28.4k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  28.4k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  28.4k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  28.4k|        parse_integer_base_prefix(
 3382|  28.4k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  28.4k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 28.4k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  28.4k|    else {
 3394|  28.4k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 28.4k]
  ------------------
 3395|  28.4k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 28.4k, False: 0]
  ------------------
 3396|  28.4k|            digits_begin_it = base_prefix_begin_it;
 3397|  28.4k|        }
 3398|  28.4k|    }
 3399|       |
 3400|  28.4k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 28.4k, False: 0]
  ------------------
 3401|  28.4k|        sign = sign_type::plus_sign;
 3402|  28.4k|    }
 3403|  28.4k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  28.4k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  28.4k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  37.9k|{
 3258|  37.9k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  37.9k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 37.9k, False: 0]
  ------------------
 3260|  37.9k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 37.9k, False: 0]
  ------------------
 3261|  37.9k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  37.9k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  37.9k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  37.9k|{
 2372|  37.9k|    auto it = read_code_unit(range);
 2373|  37.9k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  75.9k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 75.9k, False: 37.9k]
  ------------------
 2378|  75.9k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 75.9k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  75.9k|    }
 2382|       |
 2383|  37.9k|    return unexpected(parse_error::error);
 2384|  37.9k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  28.4k|{
 3344|  28.4k|    switch (base) {
 3345|     12|        case 2:
  ------------------
  |  Branch (3345:9): [True: 12, False: 28.4k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     12|                    false};
 3349|       |
 3350|     10|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 10, False: 28.4k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     10|            bool zero_parsed = false;
 3353|     10|            auto it = apply_opt(
 3354|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     10|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  9.48k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 9.48k, False: 19.0k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  9.48k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  9.48k|                    false};
 3362|       |
 3363|     16|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16, False: 28.4k]
  ------------------
 3364|       |            // detect base
 3365|     16|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  18.9k|        default:
  ------------------
  |  Branch (3367:9): [True: 18.9k, False: 9.52k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  18.9k|            return {range.begin(), base, false};
 3370|  28.4k|    }
 3371|  28.4k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|  9.50k|{
 2391|  9.50k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 9.50k, False: 0]
  ------------------
 2392|  9.50k|        return range.begin();
 2393|  9.50k|    }
 2394|      0|    return *result;
 2395|  9.50k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     28|{
 3295|     28|    return read_matching_string_classic_nocase(range, "0b");
 3296|     28|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  38.0k|{
 2331|  38.0k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  38.0k|    else {
 2344|  38.0k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  38.0k|            if (ch < 'A' || ch > 'Z') {
 2346|  38.0k|                return ch;
 2347|  38.0k|            }
 2348|  38.0k|            return static_cast<char_type>(ch +
 2349|  38.0k|                                          static_cast<char_type>('a' - 'A'));
 2350|  38.0k|        };
 2351|       |
 2352|  38.0k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  38.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 38.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|  38.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  38.0k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  38.0k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  38.0k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 38.0k, False: 0]
  |  |  ------------------
  ------------------
 2357|  38.0k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  38.0k|                    return ascii_tolower(a) ==
 2359|  38.0k|                           static_cast<detail::char_t<Range>>(b);
 2360|  38.0k|                }))) {
 2361|  38.0k|            return unexpected(parse_error::error);
 2362|  38.0k|        }
 2363|       |
 2364|      0|        return it;
 2365|  38.0k|    }
 2366|  38.0k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  38.0k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  38.0k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 44, False: 37.9k]
  |  Branch (2345:29): [True: 37.9k, False: 0]
  ------------------
 2346|  38.0k|                return ch;
 2347|  38.0k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  38.0k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     26|{
 3309|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 26]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 26]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     26|    return unexpected(parse_error::error);
 3319|     26|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  19.0k|{
 2246|  19.0k|    auto it = read_code_unit(range);
 2247|  19.0k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.0k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  19.0k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.0k, False: 0]
  |  |  ------------------
  ------------------
 2252|  19.0k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  19.0k|        return unexpected(parse_error::error);
 2254|  19.0k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  19.0k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|  9.50k|{
 3302|  9.50k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  9.50k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     16|{
 3325|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     16|    {
 3332|     16|        bool zero_parsed{false};
 3333|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 16]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     16|    }
 3337|     16|    return {range.begin(), 10, false};
 3338|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  28.4k|{
 3411|  28.4k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  28.4k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  28.4k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  28.4k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  28.4k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     28|{
 3441|     28|    std::basic_string<CharT> output;
 3442|     28|    std::string thsep_indices;
 3443|     28|    auto it = range.begin();
 3444|     28|    bool digit_matched = false;
 3445|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 28, False: 0]
  ------------------
 3446|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 28]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 28, False: 0]
  ------------------
 3451|     28|            break;
 3452|     28|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     28|    }
 3458|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3459|     28|        return detail::unexpected_scan_error(
 3460|     28|            scan_error::invalid_scanned_value,
 3461|     28|            "Failed to parse integer: No digits found");
 3462|     28|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     28|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  61.9k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  61.9k|                  ranges::sized_range<Range>) {
 1785|  61.9k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  61.9k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  61.9k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  61.9k|    {
 1589|  61.9k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  81.0k|    {
 1602|  81.0k|        return sv;
 1603|  81.0k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5988|    496|{
 5989|    496|    using char_type = detail::char_t<Range>;
 5990|    496|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|    496|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 496, False: 0]
  ------------------
 5993|    496|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|    496|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|    496|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 426, False: 70]
  ------------------
 5997|    426|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|    426|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 66, False: 360]
  ------------------
 6000|     66|                auto prefix_width =
 6001|     66|                    static_cast<std::ptrdiff_t>(
 6002|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|     66|                    ranges::distance(range.begin(), it);
 6004|     66|                return result_type{it, prefix_width};
 6005|     66|            }
 6006|    360|            return result_type{it, 0};
 6007|    426|        }
 6008|       |
 6009|     70|        auto max_width_view = take_width(range, max_width);
 6010|     70|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|     70|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 70, False: 0]
  ------------------
 6013|     70|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|     70|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|     70|    }
 6017|       |
 6018|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 0, False: 0]
  ------------------
 6020|      0|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 0, False: 0]
  ------------------
 6023|      0|            auto prefix_width =
 6024|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|      0|            return result_type{it, prefix_width};
 6027|      0|        }
 6028|      0|        return result_type{it, 0};
 6029|      0|    }
 6030|       |
 6031|      0|    auto max_width_view = take_width(range, max_width);
 6032|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 0, False: 0]
  ------------------
 6035|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|      0|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    486|{
 2075|    486|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    486|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|    630|{
 2056|    630|    if constexpr (ranges::common_range<Range>) {
 2057|    630|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    630|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    496|        : m_fptr([](storage fn,
  743|    496|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    496|              cvref<T> obj = *get<T>(fn);
  745|    496|              if constexpr (std::is_void_v<R>) {
  746|    496|                  obj(static_cast<decltype(args)>(args)...);
  747|    496|              }
  748|    496|              else {
  749|    496|                  return obj(static_cast<decltype(args)>(args)...);
  750|    496|              }
  751|    496|          }),
  752|    496|          m_storage(std::addressof(f))
  753|    496|    {
  754|    496|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    926|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    926|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    926|              else {
  749|    926|                  return obj(static_cast<decltype(args)>(args)...);
  750|    926|              }
  751|    926|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    926|    {
  684|    926|        if constexpr (std::is_const_v<T>) {
  685|    926|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    926|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5994|    926|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    496|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    496|        {
  667|    496|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    118|{
 2075|    118|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    118|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    208|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    208|    else {
 2060|    208|        auto first = range.begin();
 2061|    980|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 864, False: 116]
  ------------------
 2062|    864|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 92, False: 772]
  ------------------
 2063|     92|                return first;
 2064|     92|            }
 2065|    864|        }
 2066|    116|        return first;
 2067|    208|    }
 2068|    208|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    202|{
 3066|    202|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 202]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    202|    return read_while_classic_space(range);
 3077|    202|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    202|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    202|    else {
 2225|    202|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    202|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    202|            return detail::is_cp_space(cp);
 2238|    202|        });
 2239|    202|    }
 2240|    202|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    256|{
 2181|    256|    return read_until_code_point(range, std::not_fn(pred));
 2182|    256|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|    340|{
 2160|    340|    auto it = range.begin();
 2161|  1.30k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.22k, False: 84]
  ------------------
 2162|  1.22k|        const auto val =
 2163|  1.22k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.22k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.22k, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.22k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.22k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.22k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 256, False: 966]
  ------------------
 2168|    256|                return it;
 2169|    256|            }
 2170|  1.22k|        }
 2171|    966|        it = val.iterator;
 2172|    966|    }
 2173|       |
 2174|     84|    return it;
 2175|    340|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  5.84k|{
 1998|  5.84k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  5.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  5.84k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  5.84k|    auto it = range.begin();
 2002|  5.84k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  5.84k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.84k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  5.84k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 5.84k, False: 0]
  ------------------
 2011|  5.84k|        ++it;
 2012|  5.84k|        return {it, string_type(1, *range.begin())};
 2013|  5.84k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  5.84k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    202|        : m_fptr([](storage fn,
  743|    202|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    202|              cvref<T> obj = *get<T>(fn);
  745|    202|              if constexpr (std::is_void_v<R>) {
  746|    202|                  obj(static_cast<decltype(args)>(args)...);
  747|    202|              }
  748|    202|              else {
  749|    202|                  return obj(static_cast<decltype(args)>(args)...);
  750|    202|              }
  751|    202|          }),
  752|    202|          m_storage(std::addressof(f))
  753|    202|    {
  754|    202|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    262|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    262|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    262|              else {
  749|    262|                  return obj(static_cast<decltype(args)>(args)...);
  750|    262|              }
  751|    262|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    262|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    262|        else if constexpr (std::is_object_v<T>) {
  688|    262|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    262|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|    262|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    262|            return detail::is_cp_space(cp);
 2238|    262|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    202|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    202|        {
  662|    202|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  76.0k|{
 3066|  76.0k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 75.6k, False: 414]
  ------------------
 3067|  75.6k|        auto it = read_while_classic_space(range);
 3068|  75.6k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  75.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  75.6k|        return it;
 3074|  75.6k|    }
 3075|       |
 3076|    414|    return read_while_classic_space(range);
 3077|  76.0k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   156k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   156k|    else {
 2225|   156k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   156k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   156k|            return detail::is_cp_space(cp);
 2238|   156k|        });
 2239|   156k|    }
 2240|   156k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   156k|{
 2181|   156k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   156k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   184k|{
 2160|   184k|    auto it = range.begin();
 2161|   368k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 366k, False: 2.64k]
  ------------------
 2162|   366k|        const auto val =
 2163|   366k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   366k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   366k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 366k, False: 0]
  |  |  ------------------
  ------------------
 2165|   366k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   366k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   366k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 182k, False: 183k]
  ------------------
 2168|   182k|                return it;
 2169|   182k|            }
 2170|   366k|        }
 2171|   183k|        it = val.iterator;
 2172|   183k|    }
 2173|       |
 2174|  2.64k|    return it;
 2175|   184k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   156k|        : m_fptr([](storage fn,
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|   156k|              if constexpr (std::is_void_v<R>) {
  746|   156k|                  obj(static_cast<decltype(args)>(args)...);
  747|   156k|              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
  752|   156k|          m_storage(std::addressof(f))
  753|   156k|    {
  754|   156k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   236k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   236k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   236k|              else {
  749|   236k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   236k|              }
  751|   236k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   236k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   236k|        else if constexpr (std::is_object_v<T>) {
  688|   236k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   236k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   236k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   236k|            return detail::is_cp_space(cp);
 2238|   236k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   156k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   156k|        {
  662|   156k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  4.77k|    {
 3156|  4.77k|        reader_error_handler eh{};
 3157|  4.77k|        get_derived().check_specs_impl(specs, eh);
 3158|  4.77k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.86k, False: 912]
  |  |  ------------------
  ------------------
 3159|  3.86k|            return detail::unexpected_scan_error(
 3160|  3.86k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  3.86k|        }
 3162|    912|        return {};
 3163|  4.77k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3167|  4.77k|    {
 3168|  4.77k|        return static_cast<Derived&>(*this);
 3169|  4.77k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  4.77k|    {
 3536|  4.77k|        detail::check_int_type_specs(specs, eh);
 3537|  4.77k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3150|  19.2k|    {
 3151|  19.2k|        return true;
 3152|  19.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    124|    {
 3590|    124|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    124|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    124|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 124]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    124|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 124]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    124|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    124|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 106, False: 18]
  |  |  ------------------
  ------------------
 3616|    106|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 106, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    106|    }                                                  \
  |  |  |  | 3939|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     18|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     18|            localized_number_formatting_options<CharT>{loc};
 3637|     18|#endif
 3638|       |
 3639|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    330|    {
 3590|    330|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    330|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    330|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 330]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    330|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 330]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    330|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    330|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 316, False: 14]
  |  |  ------------------
  ------------------
 3616|    316|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    316|                    parse_integer_digits_without_thsep(
 3618|    316|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    316|                        prefix_result.parsed_base));
 3620|       |
 3621|    316|            auto buf = make_contiguous_buffer(
 3622|    316|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    316|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    316|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    316|        }
 3631|       |
 3632|     14|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     14|            localized_number_formatting_options<CharT>{loc};
 3637|     14|#endif
 3638|       |
 3639|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|     88|    {
 3590|     88|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     88|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     88|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     88|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 88]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     88|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     88|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     88|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 88]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|     88|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 88]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     88|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     88|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 88, False: 0]
  |  |  ------------------
  ------------------
 3616|     88|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     88|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     88|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     88|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 88, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     88|    }                                                  \
  |  |  |  | 3939|     88|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  9.47k|    {
 3590|  9.47k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  9.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  9.47k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  9.47k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 9.47k]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|  9.47k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 9.47k]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|  9.47k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  9.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 9.47k, False: 0]
  |  |  ------------------
  ------------------
 3616|  9.47k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  9.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  9.47k|                    parse_integer_digits_without_thsep(
 3618|  9.47k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  9.47k|                        prefix_result.parsed_base));
 3620|       |
 3621|  9.47k|            auto buf = make_contiguous_buffer(
 3622|  9.47k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  9.47k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  9.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.47k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.47k|    }                                                  \
  |  |  |  | 3939|  9.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|  9.47k|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.38k|    {
 3156|  2.38k|        reader_error_handler eh{};
 3157|  2.38k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.95k, False: 430]
  |  |  ------------------
  ------------------
 3159|  1.95k|            return detail::unexpected_scan_error(
 3160|  1.95k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.95k|        }
 3162|    430|        return {};
 3163|  2.38k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|  2.38k|    {
 3168|  2.38k|        return static_cast<Derived&>(*this);
 3169|  2.38k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  2.38k|    {
 4178|  2.38k|        detail::check_float_type_specs(specs, eh);
 4179|  2.38k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  9.60k|    {
 3151|  9.60k|        return true;
 3152|  9.60k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|    426|    {
 4250|    426|        unsigned options{};
 4251|    426|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 14, False: 412]
  ------------------
 4252|     14|            options |= float_reader_base::allow_thsep;
 4253|     14|        }
 4254|       |
 4255|    426|        SCN_GCC_COMPAT_PUSH
 4256|    426|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    426|        switch (specs.type) {
 4259|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 8, False: 418]
  ------------------
 4260|      8|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 4, False: 422]
  ------------------
 4263|      4|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 18, False: 408]
  ------------------
 4266|     18|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 2, False: 424]
  ------------------
 4269|      2|                return options | float_reader_base::allow_scientific |
 4270|      2|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    394|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 394, False: 32]
  ------------------
 4273|    394|                return options | float_reader_base::allow_scientific |
 4274|    394|                       float_reader_base::allow_fixed |
 4275|    394|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 426]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    426|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    426|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    426|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|    426|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  9.59k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  19.1k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|  9.48k|    {
 4090|  9.48k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 9.48k, False: 0]
  ------------------
 4091|  9.48k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 9.48k, False: 0]
  ------------------
 4092|  9.48k|            return;
 4093|  9.48k|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|    296|    {
 1686|    296|        return m_storage.has_value();
 1687|    296|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    148|    {
 1691|    148|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    148|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    148|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    148|        return *m_storage;
 1693|    148|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    108|    {
  763|    108|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    108|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|      8|    {
 3721|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      8|        return read_source_impl(range);
 3727|      8|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    108|    {
 3747|    108|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    108|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    108|        auto it = sign_result.first;
 3750|    108|        m_sign = sign_result.second;
 3751|       |
 3752|    108|        auto digits_begin = it;
 3753|    108|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    108|        else {
 3780|    108|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 108, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    108|    }                                                  \
  |  | 3939|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|      0|                it,
 3782|      0|                do_read_source_impl(
 3783|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|      0|        }
 3786|       |
 3787|    108|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 0, False: 0]
  |  Branch (3789:48): [True: 0, False: 0]
  ------------------
 3790|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 0, False: 0]
  ------------------
 3791|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 0, False: 0]
  ------------------
 3792|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|      0|        }
 3794|       |
 3795|      0|        handle_separators();
 3796|       |
 3797|      0|        return it;
 3798|    108|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    108|    {
 4033|    108|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    108|        const bool allowed_nonhex =
 4035|    108|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    108|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    108|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 108, False: 0]
  |  Branch (4038:45): [True: 0, False: 108]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    108|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 108]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    108|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 108, False: 0]
  |  Branch (4047:45): [True: 0, False: 108]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    108|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 108]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    108|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 100, False: 8]
  |  Branch (4054:28): [True: 6, False: 94]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      6|            auto it = range.begin();
 4058|       |
 4059|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 6]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      6|            else {
 4064|      6|                m_kind = float_kind::hex_without_prefix;
 4065|      6|            }
 4066|       |
 4067|      6|            return read_hex(ranges::subrange{it, range.end()});
 4068|      6|        }
 4069|    102|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 8, False: 94]
  |  Branch (4069:29): [True: 8, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|      8|            m_kind = float_kind::generic;
 4073|      8|            return read_regular_float(range);
 4074|      8|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|     94|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 94]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|     94|        m_kind = float_kind::generic;
 4085|     94|        return read_regular(range);
 4086|     94|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    108|    {
 3841|    108|        auto it = range.begin();
 3842|    108|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 108, False: 0]
  ------------------
 3843|    108|            return unexpected(r.error());
 3844|    108|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    108|    {
 3864|    108|        auto it = range.begin();
 3865|    108|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 108, False: 0]
  ------------------
 3866|    108|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    108|                scan_error::invalid_scanned_value,
 3868|    108|                "Invalid floating-point NaN value"));
 3869|    108|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    100|    {
 3834|    100|        return read_matching_string_classic_nocase(range, "0x");
 3835|    100|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|      6|    {
 3935|      6|        auto it = range.begin();
 3936|       |
 3937|      6|        std::ptrdiff_t digits_count = 0;
 3938|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3940|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3941|      6|                scan_error::invalid_scanned_value,
 3942|      6|                "Invalid hexadecimal floating-point value"));
 3943|      6|        }
 3944|      0|        else {
 3945|      0|            digits_count += ranges::distance(it, *r);
 3946|      0|            it = *r;
 3947|      0|        }
 3948|       |
 3949|      0|        m_integral_part_length = digits_count;
 3950|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 0]
  ------------------
 3951|      0|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      0|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 0]
  ------------------
 3956|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      0|        return it;
 3970|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|      6|    {
 3819|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|      6|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|      6|        return read_while1_code_unit(
 3828|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|      6|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3828|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    102|    {
 3976|    102|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    102|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 96, False: 6]
  |  Branch (3977:50): [True: 2, False: 94]
  ------------------
 3978|       |
 3979|    102|        auto it = ranges::begin(range);
 3980|    102|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    102|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    102|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 0]
  |  |  ------------------
  ------------------
 3984|    102|            return r.transform_error(
 3985|    102|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    102|                                              "Invalid floating-point value"));
 3987|    102|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    102|    {
 3804|    102|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 102]
  |  |  |  Branch (865:45): [True: 0, False: 102]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    102|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    102|        return read_while1_code_unit(
 3813|    102|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    102|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    102|        : m_fptr([](storage fn,
  743|    102|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    102|              cvref<T> obj = *get<T>(fn);
  745|    102|              if constexpr (std::is_void_v<R>) {
  746|    102|                  obj(static_cast<decltype(args)>(args)...);
  747|    102|              }
  748|    102|              else {
  749|    102|                  return obj(static_cast<decltype(args)>(args)...);
  750|    102|              }
  751|    102|          }),
  752|    102|          m_storage(std::addressof(f))
  753|    102|    {
  754|    102|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    102|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    102|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    102|              else {
  749|    102|                  return obj(static_cast<decltype(args)>(args)...);
  750|    102|              }
  751|    102|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    102|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    102|        else if constexpr (std::is_object_v<T>) {
  688|    102|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    102|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3813|    102|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    102|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    102|        {
  662|    102|        }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    100|    {
 3707|    100|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 100]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    100|        return read_source_impl(range);
 3713|    100|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  9.49k|    {
  763|  9.49k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.49k|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|      6|    {
 3721|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      6|        return read_source_impl(range);
 3727|      6|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|  9.49k|    {
 3747|  9.49k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  9.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|  9.49k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|  9.49k|        auto it = sign_result.first;
 3750|  9.49k|        m_sign = sign_result.second;
 3751|       |
 3752|  9.49k|        auto digits_begin = it;
 3753|  9.49k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|  9.49k|                      ranges::sized_range<Range>) {
 3756|  9.49k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.49k]
  |  |  |  Branch (865:45): [True: 0, False: 9.49k]
  |  |  |  Branch (865:45): [True: 0, False: 9.49k]
  |  |  ------------------
  ------------------
 3757|  9.49k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|  9.49k|            else {
 3766|  9.49k|                auto cb = [&](const auto& rr)
 3767|  9.49k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|  9.49k|                    auto res = read_all(rr);
 3769|  9.49k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|  9.49k|                        return detail::unexpected_scan_error(
 3771|  9.49k|                            scan_error::invalid_scanned_value,
 3772|  9.49k|                            "Invalid float value");
 3773|  9.49k|                    }
 3774|  9.49k|                    return res;
 3775|  9.49k|                };
 3776|  9.49k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|  9.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  9.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  9.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 9.48k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|  9.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|  9.48k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|  9.49k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  9.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|  9.48k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 9.48k, False: 0]
  |  Branch (3789:48): [True: 9.48k, False: 0]
  ------------------
 3790|  9.48k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 9.48k, False: 0]
  ------------------
 3791|  9.48k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 9.48k, False: 0]
  ------------------
 3792|  9.48k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|  9.48k|        }
 3794|       |
 3795|  9.48k|        handle_separators();
 3796|       |
 3797|  9.48k|        return it;
 3798|  9.49k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|  9.49k|    {
 3841|  9.49k|        auto it = range.begin();
 3842|  9.49k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 9.49k, False: 0]
  ------------------
 3843|  9.49k|            return unexpected(r.error());
 3844|  9.49k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|  9.49k|    {
 3864|  9.49k|        auto it = range.begin();
 3865|  9.49k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 9.49k, False: 0]
  ------------------
 3866|  9.49k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|  9.49k|                scan_error::invalid_scanned_value,
 3868|  9.49k|                "Invalid floating-point NaN value"));
 3869|  9.49k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  9.48k|    {
 3834|  9.48k|        return read_matching_string_classic_nocase(range, "0x");
 3835|  9.48k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|      6|{
 2095|      6|    auto it = read_while_code_unit(range, pred);
 2096|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 6, False: 0]
  ------------------
 2097|      6|        return unexpected(parse_error::error);
 2098|      6|    }
 2099|      0|    return it;
 2100|      6|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|      6|    {
 3976|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 4, False: 2]
  |  Branch (3977:50): [True: 2, False: 2]
  ------------------
 3978|       |
 3979|      6|        auto it = ranges::begin(range);
 3980|      6|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3984|      6|            return r.transform_error(
 3985|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|      6|                                              "Invalid floating-point value"));
 3987|      6|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|      6|    {
 3804|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|      6|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|      6|        return read_while1_code_unit(
 3813|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|      6|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|  9.49k|    {
 4033|  9.49k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|  9.49k|        const bool allowed_nonhex =
 4035|  9.49k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|  9.49k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|  9.49k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 9.49k, False: 0]
  |  Branch (4038:45): [True: 0, False: 9.49k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|  9.49k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 9.49k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|  9.49k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 9.49k, False: 0]
  |  Branch (4047:45): [True: 0, False: 9.49k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|  9.49k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 9.49k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|  9.49k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 9.48k, False: 6]
  |  Branch (4054:28): [True: 12, False: 9.47k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|     12|            auto it = range.begin();
 4058|       |
 4059|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 12]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|     12|            else {
 4064|     12|                m_kind = float_kind::hex_without_prefix;
 4065|     12|            }
 4066|       |
 4067|     12|            return read_hex(ranges::subrange{it, range.end()});
 4068|     12|        }
 4069|  9.47k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 6, False: 9.47k]
  |  Branch (4069:29): [True: 6, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|      6|            m_kind = float_kind::generic;
 4073|      6|            return read_regular_float(range);
 4074|      6|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|  9.47k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|  9.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.47k]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|  9.47k|        m_kind = float_kind::generic;
 4085|  9.47k|        return read_regular(range);
 4086|  9.47k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|  9.48k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|  9.48k|                    auto res = read_all(rr);
 3769|  9.48k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|  9.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.48k]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|  9.48k|                    return res;
 3775|  9.48k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|  9.48k|{
 1938|  9.48k|    return ranges::next(range.begin(), range.end());
 1939|  9.48k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  9.48k|    {
  313|  9.48k|        ranges::advance(x, bound);
  314|  9.48k|        return x;
  315|  9.48k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  9.48k|    {
  275|  9.48k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  9.48k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|  9.48k|    {
 1676|  9.48k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  9.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|  9.48k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|  9.48k|    {
 1720|  9.48k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|  9.48k|                      ranges::sized_range<Range>) {
 1725|  9.48k|            m_storage.reset();
 1726|  9.48k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  9.48k|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|  9.48k|    {
 3707|  9.48k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|  9.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.48k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|  9.48k|        return read_source_impl(range);
 3713|  9.48k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|  9.48k|    {
 3733|  9.48k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|  9.48k|        const std::ptrdiff_t sign_len =
 3736|  9.48k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 9.48k]
  ------------------
 3737|       |
 3738|  9.48k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|  9.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.48k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.48k|    }                                                  \
  |  |  |  | 3939|  9.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|  9.48k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    108|    {
 4203|    108|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    108|#if !SCN_DISABLE_LOCALE
 4206|    108|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 8, False: 100]
  ------------------
 4207|      8|            return read_impl<Range>(
 4208|      8|                range, rd,
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      8|                },
 4212|      8|                value, loc);
 4213|      8|        }
 4214|    100|#endif
 4215|       |
 4216|    100|        return read_impl<Range>(
 4217|    100|            range, rd,
 4218|    100|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    100|                return r.read_source(SCN_FWD(args)...);
 4220|    100|            },
 4221|    100|            value);
 4222|    108|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    108|    {
 4239|    108|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    108|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 108, False: 0]
  |  |  ------------------
  ------------------
 4241|    108|            return unexpected(r.error());
 4242|    108|        }
 4243|       |
 4244|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      8|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    100|        : m_fptr([](storage fn,
  743|    100|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    100|              cvref<T> obj = *get<T>(fn);
  745|    100|              if constexpr (std::is_void_v<R>) {
  746|    100|                  obj(static_cast<decltype(args)>(args)...);
  747|    100|              }
  748|    100|              else {
  749|    100|                  return obj(static_cast<decltype(args)>(args)...);
  750|    100|              }
  751|    100|          }),
  752|    100|          m_storage(std::addressof(f))
  753|    100|    {
  754|    100|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    100|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    100|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    100|              else {
  749|    100|                  return obj(static_cast<decltype(args)>(args)...);
  750|    100|              }
  751|    100|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    100|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    100|        else if constexpr (std::is_object_v<T>) {
  688|    100|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    100|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    100|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    100|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    100|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    100|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    100|        {
  662|    100|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    318|    {
 4203|    318|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    318|#if !SCN_DISABLE_LOCALE
 4206|    318|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 6, False: 312]
  ------------------
 4207|      6|            return read_impl<Range>(
 4208|      6|                range, rd,
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      6|                },
 4212|      6|                value, loc);
 4213|      6|        }
 4214|    312|#endif
 4215|       |
 4216|    312|        return read_impl<Range>(
 4217|    312|            range, rd,
 4218|    312|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    312|                return r.read_source(SCN_FWD(args)...);
 4220|    312|            },
 4221|    312|            value);
 4222|    318|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|  9.49k|    {
 4239|  9.49k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|  9.49k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  9.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 9.48k]
  |  |  ------------------
  ------------------
 4241|      6|            return unexpected(r.error());
 4242|      6|        }
 4243|       |
 4244|  9.48k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|  9.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.48k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.48k|    }                                                  \
  |  |  |  | 3939|  9.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|  9.48k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    312|        : m_fptr([](storage fn,
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|    312|              if constexpr (std::is_void_v<R>) {
  746|    312|                  obj(static_cast<decltype(args)>(args)...);
  747|    312|              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
  752|    312|          m_storage(std::addressof(f))
  753|    312|    {
  754|    312|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    312|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    312|        else if constexpr (std::is_object_v<T>) {
  688|    312|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    312|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    312|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    312|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    312|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    312|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    312|        {
  662|    312|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5848|  11.5k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  11.5k|                       std::is_same_v<T, std::wstring>) {
 5867|  11.5k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  11.5k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  34.5k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  7.03k|    {
 3156|  7.03k|        reader_error_handler eh{};
 3157|  7.03k|        get_derived().check_specs_impl(specs, eh);
 3158|  7.03k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  7.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 234, False: 6.80k]
  |  |  ------------------
  ------------------
 3159|    234|            return detail::unexpected_scan_error(
 3160|    234|                scan_error::invalid_format_string, eh.m_msg);
 3161|    234|        }
 3162|  6.80k|        return {};
 3163|  7.03k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|  7.03k|    {
 3168|  7.03k|        return static_cast<Derived&>(*this);
 3169|  7.03k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  7.03k|    {
 5247|  7.03k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  7.03k|        SCN_GCC_PUSH
 5250|  7.03k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  7.03k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  7.03k|        SCN_CLANG_PUSH
 5254|  7.03k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  7.03k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  7.03k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 228, False: 6.81k]
  ------------------
 5258|  1.15k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.15k, False: 5.88k]
  ------------------
 5259|  1.15k|                m_type = reader_type::word;
 5260|  1.15k|                break;
 5261|       |
 5262|    204|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 204, False: 6.83k]
  ------------------
 5263|    204|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 60, False: 144]
  ------------------
 5264|    204|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 96, False: 48]
  ------------------
 5265|    156|                    m_type = reader_type::custom_word;
 5266|    156|                }
 5267|     48|                else {
 5268|     48|                    m_type = reader_type::word;
 5269|     48|                }
 5270|    204|                break;
 5271|      0|            }
 5272|       |
 5273|     72|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 72, False: 6.96k]
  ------------------
 5274|     72|                m_type = reader_type::character;
 5275|     72|                break;
 5276|       |
 5277|    618|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 618, False: 6.42k]
  ------------------
 5278|    618|                m_type = reader_type::character_set;
 5279|    618|                break;
 5280|       |
 5281|  4.61k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 4.61k, False: 2.42k]
  ------------------
 5282|  4.61k|                m_type = reader_type::regex;
 5283|  4.61k|                break;
 5284|       |
 5285|    150|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 150, False: 6.88k]
  ------------------
 5286|    150|                m_type = reader_type::regex_escaped;
 5287|    150|                break;
 5288|  7.03k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  7.03k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  35.8k|    {
 5296|  35.8k|        return m_type == reader_type::word;
 5297|  35.8k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  40.1k|{
 1242|  40.1k|    auto it = src.begin();
 1243|   183k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 144k, False: 38.9k]
  ------------------
 1244|   144k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   144k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 144k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|   144k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 144k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|   144k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   144k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   144k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 1.24k, False: 143k]
  ------------------
 1254|  1.24k|            return false;
 1255|  1.24k|        }
 1256|   143k|        it += len;
 1257|   143k|    }
 1258|  38.9k|    return true;
 1259|  40.1k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    148|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    148|    else {
 3117|    148|        return transcode_impl(source.view(), dest);
 3118|    148|    }
 3119|       |
 3120|      0|    return {};
 3121|    148|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|  9.73k|{
 3083|  9.73k|    dst.clear();
 3084|  9.73k|    transcode_valid_to_string(src, dst);
 3085|  9.73k|    return {};
 3086|  9.73k|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  9.73k|{
 1502|  9.73k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  9.73k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|  9.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|  9.73k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|  9.73k|        if constexpr (sizeof(DestCharT) == 1) {
 1530|  9.73k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|  9.73k|    }
 1536|       |
 1537|  9.73k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  9.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  9.73k|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|  9.73k|{
 1393|  9.73k|    static_assert(sizeof(SourceCharT) == 4);
 1394|  9.73k|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  33.9k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 33.9k, False: 9.73k]
  ------------------
 1397|  33.9k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  33.9k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [Folded - Ignored]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  33.9k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 32.7k, False: 1.23k]
  ------------------
 1405|  32.7k|            dest.push_back(static_cast<char>(cp));
 1406|  32.7k|        }
 1407|  1.23k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 84, False: 1.15k]
  ------------------
 1408|     84|            dest.push_back(
 1409|     84|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|     84|            dest.push_back(
 1411|     84|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|     84|        }
 1413|  1.15k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 816, False: 334]
  ------------------
 1414|    816|            dest.push_back(
 1415|    816|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|    816|            dest.push_back(static_cast<char>(
 1417|    816|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|    816|            dest.push_back(
 1419|    816|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|    816|        }
 1421|    334|        else {
 1422|    334|            dest.push_back(
 1423|    334|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    334|            dest.push_back(static_cast<char>(
 1425|    334|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    334|            dest.push_back(static_cast<char>(
 1427|    334|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    334|            dest.push_back(
 1429|    334|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    334|        }
 1431|  33.9k|    }
 1432|  9.73k|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|    618|        {
 5144|    618|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 186, False: 432]
  ------------------
 5145|    186|                return {};
 5146|    186|            }
 5147|       |
 5148|    432|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|    432|            auto it = detail::to_address(charset_string.begin());
 5150|    432|            auto set = detail::parse_presentation_set(
 5151|    432|                it, detail::to_address(charset_string.end()), nonascii);
 5152|    432|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|    432|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 432]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|    432|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|    432|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|    432|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|    432|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|    432|            std::sort(nonascii.extra_ranges.begin(),
 5157|    432|                      nonascii.extra_ranges.end());
 5158|    432|            return {};
 5159|    432|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|  4.72k|        {
 5177|  4.72k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 1.07k, False: 3.65k]
  ------------------
 5178|  1.07k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  1.07k|            }
 5180|       |
 5181|  3.65k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|  4.72k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  1.07k|        {
 5127|       |            // TODO: binary search?
 5128|  1.07k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 1.07k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  1.07k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  1.07k|            return std::find_if(
 5134|  1.07k|                       nonascii.extra_ranges.begin(),
 5135|  1.07k|                       nonascii.extra_ranges.end(),
 5136|  1.07k|                       [cp_val](const auto& pair) noexcept {
 5137|  1.07k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  1.07k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  1.07k|                       }) != nonascii.extra_ranges.end();
 5140|  1.07k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  8.56k|                       [cp_val](const auto& pair) noexcept {
 5137|  8.56k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 8.41k, False: 144]
  ------------------
 5138|  8.56k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 1.01k, False: 7.40k]
  ------------------
 5139|  8.56k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  5.31k|        {
 5117|  5.31k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  5.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  5.31k|            const auto val =
 5119|  5.31k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  5.31k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  5.31k|                    (val % 8)) &
 5122|  5.31k|                   1u;
 5123|  5.31k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  1.66k|        {
 5168|  1.66k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 12, False: 1.65k]
  ------------------
 5169|     12|                return false;
 5170|     12|            }
 5171|       |
 5172|  1.65k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  1.66k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|    618|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    212|    {
 5314|    212|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    212|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    212|        return read_impl(range, specs, value);
 5316|    212|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    212|    {
 5332|    212|        SCN_CLANG_PUSH
 5333|    212|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    212|        switch (m_type) {
 5336|     90|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 90, False: 122]
  ------------------
 5337|     90|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     16|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 16, False: 196]
  ------------------
 5340|     16|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     16|                                                                   value);
 5342|       |
 5343|     22|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 22, False: 190]
  ------------------
 5344|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|     76|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 76, False: 136]
  ------------------
 5347|     76|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|     76|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 210]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 6, False: 206]
  ------------------
 5357|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      6|                    range,
 5359|      6|                    get_unescaped_regex_pattern(
 5360|      6|                        specs.charset_string<SourceCharT>()),
 5361|      6|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 212]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    212|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    212|        }
 5368|       |
 5369|    212|        SCN_CLANG_POP
 5370|    212|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|     90|    {
 4861|     90|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|     90|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    128|{
 4795|    128|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    128|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    128|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 48, False: 80]
  ------------------
 4799|     48|        return detail::unexpected_scan_error(
 4800|     48|            scan_error::invalid_scanned_value,
 4801|     48|            "Invalid encoding in scanned string");
 4802|     48|    }
 4803|       |
 4804|     80|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     80|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 80]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     80|    return SCN_MOVE(result);
  ------------------
  |  |  934|     80|    static_cast<    \
  |  |  935|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     80|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    270|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    270|    else {
 2196|    270|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|    270|        return read_until_code_point(
 2208|    270|            ranges::subrange{it, range.end()},
 2209|    270|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    270|    }
 2211|    270|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    270|{
 2160|    270|    auto it = range.begin();
 2161|  4.85k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 4.62k, False: 234]
  ------------------
 2162|  4.62k|        const auto val =
 2163|  4.62k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  4.62k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  4.62k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.62k, False: 0]
  |  |  ------------------
  ------------------
 2165|  4.62k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  4.62k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  4.62k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 36, False: 4.58k]
  ------------------
 2168|     36|                return it;
 2169|     36|            }
 2170|  4.62k|        }
 2171|  4.58k|        it = val.iterator;
 2172|  4.58k|    }
 2173|       |
 2174|    234|    return it;
 2175|    270|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    270|        : m_fptr([](storage fn,
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|    270|              if constexpr (std::is_void_v<R>) {
  746|    270|                  obj(static_cast<decltype(args)>(args)...);
  747|    270|              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
  752|    270|          m_storage(std::addressof(f))
  753|    270|    {
  754|    270|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  4.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.62k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.62k|              else {
  749|  4.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.62k|              }
  751|  4.62k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  4.62k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.62k|        else if constexpr (std::is_object_v<T>) {
  688|  4.62k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.62k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  4.62k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    270|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    270|        {
  662|    270|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     16|    {
 4882|     16|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 16, False: 0]
  ------------------
 4883|     16|            return read_string_impl(
 4884|     16|                range,
 4885|     16|                read_until_code_unit(
 4886|     16|                    range,
 4887|     16|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     16|                        SourceCharT ch) { return ch == until; }),
 4889|     16|                value);
 4890|     16|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     16|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|     74|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     74|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     74|              else {
  749|     74|                  return obj(static_cast<decltype(args)>(args)...);
  750|     74|              }
  751|     74|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|     74|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     74|        else if constexpr (std::is_object_v<T>) {
  688|     74|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     74|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|     74|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     22|    {
 4988|     22|        return read_impl(
 4989|     22|            range,
 4990|     22|            [&](const auto& rng) {
 4991|     22|                return read_string_impl(rng, read_all(rng), value);
 4992|     22|            },
 4993|     22|            detail::priority_tag<1>{});
 4994|     22|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     22|    {
 5015|     22|        return read_cb(range);
 5016|     22|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     22|            [&](const auto& rng) {
 4991|     22|                return read_string_impl(rng, read_all(rng), value);
 4992|     22|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     66|{
 1938|     66|    return ranges::next(range.begin(), range.end());
 1939|     66|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     66|    {
  313|     66|        ranges::advance(x, bound);
  314|     66|        return x;
  315|     66|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     66|    {
  275|     66|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     66|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     66|    {
  203|    438|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 372, False: 66]
  ------------------
  204|    372|            ++i;
  205|    372|        }
  206|     66|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|     76|    {
 5089|     76|        auto it = read_source_impl(range, {specs});
 5090|     76|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 68]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|     68|        return read_string_impl(range, *it, value);
 5095|     76|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    228|    {
 5192|    228|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    228|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    228|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    228|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 228]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    228|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    228|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 138, False: 90]
  ------------------
 5200|    138|            const auto cb = [&](char32_t cp) {
 5201|    138|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    138|            };
 5203|       |
 5204|    138|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 84, False: 54]
  ------------------
 5205|     84|                auto it = read_until_code_point(range, cb);
 5206|     84|                return check_nonempty(it, range);
 5207|     84|            }
 5208|     54|            auto it = read_while_code_point(range, cb);
 5209|     54|            return check_nonempty(it, range);
 5210|    138|        }
 5211|       |
 5212|     90|        const auto cb = [&](SourceCharT ch) {
 5213|     90|            return cb_wrapper.on_ascii_only(ch);
 5214|     90|        };
 5215|       |
 5216|     90|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 42, False: 48]
  ------------------
 5217|     42|            auto it = read_until_code_unit(range, cb);
 5218|     42|            return check_nonempty(it, range);
 5219|     42|        }
 5220|     48|        auto it = read_while_code_unit(range, cb);
 5221|     48|        return check_nonempty(it, range);
 5222|     90|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    138|        : m_fptr([](storage fn,
  743|    138|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    138|              cvref<T> obj = *get<T>(fn);
  745|    138|              if constexpr (std::is_void_v<R>) {
  746|    138|                  obj(static_cast<decltype(args)>(args)...);
  747|    138|              }
  748|    138|              else {
  749|    138|                  return obj(static_cast<decltype(args)>(args)...);
  750|    138|              }
  751|    138|          }),
  752|    138|          m_storage(std::addressof(f))
  753|    138|    {
  754|    138|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|    960|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    960|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    960|              else {
  749|    960|                  return obj(static_cast<decltype(args)>(args)...);
  750|    960|              }
  751|    960|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|    960|    {
  684|    960|        if constexpr (std::is_const_v<T>) {
  685|    960|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    960|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|    960|            const auto cb = [&](char32_t cp) {
 5201|    960|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    960|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    138|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    138|        {
  667|    138|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    228|    {
 5228|    228|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 24, False: 204]
  ------------------
 5229|     24|            return detail::unexpected_scan_error(
 5230|     24|                scan_error::invalid_scanned_value,
 5231|     24|                "No characters matched in [character set]");
 5232|     24|        }
 5233|       |
 5234|    204|        return it;
 5235|    228|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     90|        : m_fptr([](storage fn,
  743|     90|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     90|              cvref<T> obj = *get<T>(fn);
  745|     90|              if constexpr (std::is_void_v<R>) {
  746|     90|                  obj(static_cast<decltype(args)>(args)...);
  747|     90|              }
  748|     90|              else {
  749|     90|                  return obj(static_cast<decltype(args)>(args)...);
  750|     90|              }
  751|     90|          }),
  752|     90|          m_storage(std::addressof(f))
  753|     90|    {
  754|     90|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    396|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    396|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    396|              else {
  749|    396|                  return obj(static_cast<decltype(args)>(args)...);
  750|    396|              }
  751|    396|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    396|    {
  684|    396|        if constexpr (std::is_const_v<T>) {
  685|    396|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    396|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5212|    396|        const auto cb = [&](SourceCharT ch) {
 5213|    396|            return cb_wrapper.on_ascii_only(ch);
 5214|    396|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|     90|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     90|        {
  667|     90|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|     68|{
 4795|     68|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|     68|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|     68|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 68]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|     68|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     68|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 68]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     68|    return SCN_MOVE(result);
  ------------------
  |  |  934|     68|    static_cast<    \
  |  |  935|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     68|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|      8|    {
 4932|      8|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|      8|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4953|     24|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|     24|        else {
 4961|     24|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 24, False: 0]
  ------------------
 4962|     24|                return detail::unexpected_scan_error(
 4963|     24|                    scan_error::invalid_format_string,
 4964|     24|                    "Cannot use regex with a non-contiguous source "
 4965|     24|                    "range");
 4966|     24|            }
 4967|       |
 4968|      0|            auto input = get_as_contiguous(range);
 4969|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|      0|            return ranges::next(range.begin(),
 4972|      0|                                ranges::distance(input.begin(), it));
 4973|      0|        }
 4974|     24|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  959|     24|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|     24|    else {
  975|     24|        return false;
  976|     24|    }
  977|     24|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  2.05k|    {
 5314|  2.05k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  2.05k|        return read_impl(range, specs, value);
 5316|  2.05k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  2.05k|    {
 5332|  2.05k|        SCN_CLANG_PUSH
 5333|  2.05k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  2.05k|        switch (m_type) {
 5336|    308|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 308, False: 1.74k]
  ------------------
 5337|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 34, False: 2.01k]
  ------------------
 5340|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     34|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 2.05k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    130|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 130, False: 1.92k]
  ------------------
 5347|    130|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    130|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|  1.53k|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 1.53k, False: 516]
  ------------------
 5352|  1.53k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|  1.53k|                    range, specs.charset_string<SourceCharT>(),
 5354|  1.53k|                    specs.regexp_flags, value);
 5355|       |
 5356|     44|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 44, False: 2.00k]
  ------------------
 5357|     44|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     44|                    range,
 5359|     44|                    get_unescaped_regex_pattern(
 5360|     44|                        specs.charset_string<SourceCharT>()),
 5361|     44|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 2.05k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  2.05k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  2.05k|        }
 5368|       |
 5369|  2.05k|        SCN_CLANG_POP
 5370|  2.05k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|  9.48k|    {
 4861|  9.48k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  9.48k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  9.51k|{
 4795|  9.51k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  9.51k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  9.51k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 262, False: 9.25k]
  ------------------
 4799|    262|        return detail::unexpected_scan_error(
 4800|    262|            scan_error::invalid_scanned_value,
 4801|    262|            "Invalid encoding in scanned string");
 4802|    262|    }
 4803|       |
 4804|  9.25k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  9.25k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.25k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|  9.25k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  9.25k|    static_cast<    \
  |  |  935|  9.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  9.25k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  9.58k|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|  9.58k|    else {
 3132|  9.58k|        return transcode_impl(source.view(), dest);
 3133|  9.58k|    }
 3134|       |
 3135|      0|    return {};
 3136|  9.58k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  28.4k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  28.4k|    else {
 2196|  28.4k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  28.4k|        return read_until_code_point(
 2208|  28.4k|            ranges::subrange{it, range.end()},
 2209|  28.4k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  28.4k|    }
 2211|  28.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  28.4k|        : m_fptr([](storage fn,
  743|  28.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.4k|              cvref<T> obj = *get<T>(fn);
  745|  28.4k|              if constexpr (std::is_void_v<R>) {
  746|  28.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.4k|              }
  748|  28.4k|              else {
  749|  28.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.4k|              }
  751|  28.4k|          }),
  752|  28.4k|          m_storage(std::addressof(f))
  753|  28.4k|    {
  754|  28.4k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   126k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   126k|              else {
  749|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   126k|              }
  751|   126k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   126k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   126k|        else if constexpr (std::is_object_v<T>) {
  688|   126k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   126k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|   126k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  28.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  28.4k|        {
  662|  28.4k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     34|    {
 4882|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 34, False: 0]
  ------------------
 4883|     34|            return read_string_impl(
 4884|     34|                range,
 4885|     34|                read_until_code_unit(
 4886|     34|                    range,
 4887|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     34|                        SourceCharT ch) { return ch == until; }),
 4889|     34|                value);
 4890|     34|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     34|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  688|    484|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    484|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    484|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    130|    {
 5089|    130|        auto it = read_source_impl(range, {specs});
 5090|    130|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    130|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 114]
  |  |  ------------------
  ------------------
 5091|     16|            return unexpected(it.error());
 5092|     16|        }
 5093|       |
 5094|    114|        return read_string_impl(range, *it, value);
 5095|    130|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|    390|    {
 5192|    390|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    390|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    390|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    390|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 390]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    390|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    390|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 294, False: 96]
  ------------------
 5200|    294|            const auto cb = [&](char32_t cp) {
 5201|    294|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    294|            };
 5203|       |
 5204|    294|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 132, False: 162]
  ------------------
 5205|    132|                auto it = read_until_code_point(range, cb);
 5206|    132|                return check_nonempty(it, range);
 5207|    132|            }
 5208|    162|            auto it = read_while_code_point(range, cb);
 5209|    162|            return check_nonempty(it, range);
 5210|    294|        }
 5211|       |
 5212|     96|        const auto cb = [&](SourceCharT ch) {
 5213|     96|            return cb_wrapper.on_ascii_only(ch);
 5214|     96|        };
 5215|       |
 5216|     96|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 42, False: 54]
  ------------------
 5217|     42|            auto it = read_until_code_unit(range, cb);
 5218|     42|            return check_nonempty(it, range);
 5219|     42|        }
 5220|     54|        auto it = read_while_code_unit(range, cb);
 5221|     54|        return check_nonempty(it, range);
 5222|     96|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    294|        : m_fptr([](storage fn,
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
  752|    294|          m_storage(std::addressof(f))
  753|    294|    {
  754|    294|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  3.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.76k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.76k|              else {
  749|  3.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.76k|              }
  751|  3.76k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  3.76k|    {
  684|  3.76k|        if constexpr (std::is_const_v<T>) {
  685|  3.76k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.76k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  3.76k|            const auto cb = [&](char32_t cp) {
 5201|  3.76k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  3.76k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    294|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    294|        {
  667|    294|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|    390|    {
 5228|    390|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 48, False: 342]
  ------------------
 5229|     48|            return detail::unexpected_scan_error(
 5230|     48|                scan_error::invalid_scanned_value,
 5231|     48|                "No characters matched in [character set]");
 5232|     48|        }
 5233|       |
 5234|    342|        return it;
 5235|    390|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5213|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5214|  1.27k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    442|{
 4795|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    442|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    442|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 106, False: 336]
  ------------------
 4799|    106|        return detail::unexpected_scan_error(
 4800|    106|            scan_error::invalid_scanned_value,
 4801|    106|            "Invalid encoding in scanned string");
 4802|    106|    }
 4803|       |
 4804|    336|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    336|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 336]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    336|    return SCN_MOVE(result);
  ------------------
  |  |  934|    336|    static_cast<    \
  |  |  935|    336|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    336|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|  1.57k|    {
 4932|  1.57k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.25k, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.25k|    }                                                  \
  |  |  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|    328|        return read_string_impl(range, it, value);
 4934|  1.57k|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4953|  4.73k|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|  4.73k|        else {
 4961|  4.73k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 0, False: 4.73k]
  ------------------
 4962|      0|                return detail::unexpected_scan_error(
 4963|      0|                    scan_error::invalid_format_string,
 4964|      0|                    "Cannot use regex with a non-contiguous source "
 4965|      0|                    "range");
 4966|      0|            }
 4967|       |
 4968|  4.73k|            auto input = get_as_contiguous(range);
 4969|  4.73k|            SCN_TRY(it,
  ------------------
  |  | 3940|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.75k, False: 984]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.75k|    }                                                  \
  |  |  |  | 3939|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    984|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|    984|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|    984|            return ranges::next(range.begin(),
 4972|    984|                                ranges::distance(input.begin(), it));
 4973|  4.73k|        }
 4974|  4.73k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  959|  4.73k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  4.73k|                  ranges::sized_range<Range>) {
  962|  4.73k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  4.73k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1065|  4.73k|{
 1066|  4.73k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  4.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  4.73k|                  ranges::sized_range<Range>) {
 1070|  4.73k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  4.73k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  981|  4.73k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  4.73k|                  ranges::sized_range<Range>) {
  984|  4.73k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  4.73k|}
_ZN3scn2v44impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4378|  4.73k|{
 4379|  4.73k|    static_assert(ranges::contiguous_range<Input> &&
 4380|  4.73k|                  ranges::borrowed_range<Input> &&
 4381|  4.73k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4382|       |
 4383|  4.73k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4384|  4.73k|    std::basic_regex<CharT> re{};
 4385|  4.73k|    try {
 4386|  4.73k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4387|  4.73k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|  4.73k|                                     re_flags | std::regex_constants::nosubs};
 4389|  4.73k|    }
 4390|  4.73k|    catch (const std::regex_error& err) {
 4391|  2.04k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4392|  2.04k|                                             "Invalid regex");
 4393|  2.04k|    }
 4394|       |
 4395|  2.69k|    std::match_results<const CharT*> matches{};
 4396|  2.69k|    try {
 4397|  2.69k|        bool found = std::regex_search(input.data(),
 4398|  2.69k|                                       input.data() + input.size(), matches, re,
 4399|  2.69k|                                       std::regex_constants::match_continuous);
 4400|  2.69k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4400:13): [True: 1.71k, False: 984]
  |  Branch (4400:23): [True: 0, False: 984]
  ------------------
 4401|  1.67k|            return detail::unexpected_scan_error(
 4402|  1.67k|                scan_error::invalid_scanned_value,
 4403|  1.67k|                "Regular expression didn't match");
 4404|  1.67k|        }
 4405|  2.69k|    }
 4406|  2.69k|    catch (const std::regex_error& err) {
 4407|     36|        return detail::unexpected_scan_error(
 4408|     36|            scan_error::invalid_format_string,
 4409|     36|            "Regex matching failed with an error");
 4410|     36|    }
 4411|       |
 4412|    984|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4413|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4414|       |    auto re =
 4415|       |#if SCN_REGEX_BOOST_USE_ICU
 4416|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4417|       |                             make_regex_flags(flags) |
 4418|       |                                 boost::regex_constants::no_except |
 4419|       |                                 boost::regex_constants::nosubs);
 4420|       |#else
 4421|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4422|       |                                  make_regex_flags(flags) |
 4423|       |                                      boost::regex_constants::no_except |
 4424|       |                                      boost::regex_constants::nosubs};
 4425|       |#endif
 4426|       |    if (re.status() != 0) {
 4427|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4428|       |                                             "Invalid regex");
 4429|       |    }
 4430|       |
 4431|       |    boost::match_results<const CharT*> matches{};
 4432|       |    try {
 4433|       |        bool found =
 4434|       |#if SCN_REGEX_BOOST_USE_ICU
 4435|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4436|       |                                   matches, re,
 4437|       |                                   boost::regex_constants::match_continuous);
 4438|       |#else
 4439|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4440|       |                                matches, re,
 4441|       |                                boost::regex_constants::match_continuous);
 4442|       |#endif
 4443|       |        if (!found || matches.prefix().matched) {
 4444|       |            return detail::unexpected_scan_error(
 4445|       |                scan_error::invalid_scanned_value,
 4446|       |                "Regular expression didn't match");
 4447|       |        }
 4448|       |    }
 4449|       |    catch (const std::runtime_error& err) {
 4450|       |        return detail::unexpected_scan_error(
 4451|       |            scan_error::invalid_format_string,
 4452|       |            "Regex matching failed with an error");
 4453|       |    }
 4454|       |
 4455|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4456|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4457|       |    static_assert(std::is_same_v<CharT, char>);
 4458|       |    std::string flagged_pattern{};
 4459|       |    auto re = [&]() {
 4460|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4461|       |        opts.set_never_capture(true);
 4462|       |        if (flagstr.empty()) {
 4463|       |            return re2::RE2{pattern, opts};
 4464|       |        }
 4465|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|       |        flagged_pattern.append(flagstr);
 4467|       |        flagged_pattern.append(pattern);
 4468|       |        return re2::RE2{flagged_pattern, opts};
 4469|       |    }();
 4470|       |    if (!re.ok()) {
 4471|       |        return detail::unexpected_scan_error(
 4472|       |            scan_error::invalid_format_string,
 4473|       |            "Failed to parse regular expression");
 4474|       |    }
 4475|       |
 4476|       |    auto new_input = detail::make_string_view_from_pointers(
 4477|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4478|       |    bool found = re2::RE2::Consume(&new_input, re);
 4479|       |    if (!found) {
 4480|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4481|       |                                             "Regular expression didn't match");
 4482|       |    }
 4483|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4484|       |#endif  // SCN_REGEX_BACKEND == ...
 4485|  2.69k|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  11.5k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  11.5k|                       std::is_same_v<T, std::wstring>) {
 5867|  11.5k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  11.5k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    148|{
 3108|    148|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    148|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 148, False: 0]
  ------------------
 3110|    148|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    148|    static_cast<    \
  |  |  935|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    148|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    148|    return {};
 3121|    148|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    212|    {
 5314|    212|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    212|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    212|        return read_impl(range, specs, value);
 5316|    212|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    212|    {
 5332|    212|        SCN_CLANG_PUSH
 5333|    212|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    212|        switch (m_type) {
 5336|     90|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 90, False: 122]
  ------------------
 5337|     90|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     16|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 16, False: 196]
  ------------------
 5340|     16|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     16|                                                                   value);
 5342|       |
 5343|     22|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 22, False: 190]
  ------------------
 5344|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|     76|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 76, False: 136]
  ------------------
 5347|     76|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|     76|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 210]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 6, False: 206]
  ------------------
 5357|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      6|                    range,
 5359|      6|                    get_unescaped_regex_pattern(
 5360|      6|                        specs.charset_string<SourceCharT>()),
 5361|      6|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 212]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    212|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    212|        }
 5368|       |
 5369|    212|        SCN_CLANG_POP
 5370|    212|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|     90|    {
 4861|     90|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|     90|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    128|{
 4795|    128|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    128|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    128|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 48, False: 80]
  ------------------
 4799|     48|        return detail::unexpected_scan_error(
 4800|     48|            scan_error::invalid_scanned_value,
 4801|     48|            "Invalid encoding in scanned string");
 4802|     48|    }
 4803|       |
 4804|     80|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     80|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 80]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     80|    return SCN_MOVE(result);
  ------------------
  |  |  934|     80|    static_cast<    \
  |  |  935|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     80|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     16|    {
 4882|     16|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 16, False: 0]
  ------------------
 4883|     16|            return read_string_impl(
 4884|     16|                range,
 4885|     16|                read_until_code_unit(
 4886|     16|                    range,
 4887|     16|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     16|                        SourceCharT ch) { return ch == until; }),
 4889|     16|                value);
 4890|     16|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     16|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|     74|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     74|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     74|              else {
  749|     74|                  return obj(static_cast<decltype(args)>(args)...);
  750|     74|              }
  751|     74|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|     74|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     74|        else if constexpr (std::is_object_v<T>) {
  688|     74|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     74|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|     74|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     22|    {
 4988|     22|        return read_impl(
 4989|     22|            range,
 4990|     22|            [&](const auto& rng) {
 4991|     22|                return read_string_impl(rng, read_all(rng), value);
 4992|     22|            },
 4993|     22|            detail::priority_tag<1>{});
 4994|     22|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     22|    {
 5015|     22|        return read_cb(range);
 5016|     22|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     22|            [&](const auto& rng) {
 4991|     22|                return read_string_impl(rng, read_all(rng), value);
 4992|     22|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|     76|    {
 5089|     76|        auto it = read_source_impl(range, {specs});
 5090|     76|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 68]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|     68|        return read_string_impl(range, *it, value);
 5095|     76|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|     68|{
 4795|     68|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|     68|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|     68|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 68]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|     68|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     68|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 68]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     68|    return SCN_MOVE(result);
  ------------------
  |  |  934|     68|    static_cast<    \
  |  |  935|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     68|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|      8|    {
 4932|      8|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|      8|    }
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  2.05k|    {
 5314|  2.05k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  2.05k|        return read_impl(range, specs, value);
 5316|  2.05k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  2.05k|    {
 5332|  2.05k|        SCN_CLANG_PUSH
 5333|  2.05k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  2.05k|        switch (m_type) {
 5336|    308|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 308, False: 1.74k]
  ------------------
 5337|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 34, False: 2.01k]
  ------------------
 5340|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     34|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 2.05k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    130|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 130, False: 1.92k]
  ------------------
 5347|    130|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    130|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|  1.53k|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 1.53k, False: 516]
  ------------------
 5352|  1.53k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|  1.53k|                    range, specs.charset_string<SourceCharT>(),
 5354|  1.53k|                    specs.regexp_flags, value);
 5355|       |
 5356|     44|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 44, False: 2.00k]
  ------------------
 5357|     44|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     44|                    range,
 5359|     44|                    get_unescaped_regex_pattern(
 5360|     44|                        specs.charset_string<SourceCharT>()),
 5361|     44|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 2.05k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  2.05k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  2.05k|        }
 5368|       |
 5369|  2.05k|        SCN_CLANG_POP
 5370|  2.05k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|  9.48k|    {
 4861|  9.48k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  9.48k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  9.51k|{
 4795|  9.51k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  9.51k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  9.51k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 262, False: 9.25k]
  ------------------
 4799|    262|        return detail::unexpected_scan_error(
 4800|    262|            scan_error::invalid_scanned_value,
 4801|    262|            "Invalid encoding in scanned string");
 4802|    262|    }
 4803|       |
 4804|  9.25k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  9.25k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.25k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|  9.25k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  9.25k|    static_cast<    \
  |  |  935|  9.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  9.25k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  9.58k|{
 3128|  9.58k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  9.58k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  9.58k|    return {};
 3136|  9.58k|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     34|    {
 4882|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 34, False: 0]
  ------------------
 4883|     34|            return read_string_impl(
 4884|     34|                range,
 4885|     34|                read_until_code_unit(
 4886|     34|                    range,
 4887|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     34|                        SourceCharT ch) { return ch == until; }),
 4889|     34|                value);
 4890|     34|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     34|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  688|    484|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    484|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    484|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    130|    {
 5089|    130|        auto it = read_source_impl(range, {specs});
 5090|    130|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    130|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 114]
  |  |  ------------------
  ------------------
 5091|     16|            return unexpected(it.error());
 5092|     16|        }
 5093|       |
 5094|    114|        return read_string_impl(range, *it, value);
 5095|    130|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    442|{
 4795|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    442|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    442|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 106, False: 336]
  ------------------
 4799|    106|        return detail::unexpected_scan_error(
 4800|    106|            scan_error::invalid_scanned_value,
 4801|    106|            "Invalid encoding in scanned string");
 4802|    106|    }
 4803|       |
 4804|    336|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    336|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 336]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    336|    return SCN_MOVE(result);
  ------------------
  |  |  934|    336|    static_cast<    \
  |  |  935|    336|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    336|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|  1.57k|    {
 4932|  1.57k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.25k, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.25k|    }                                                  \
  |  |  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|    328|        return read_string_impl(range, it, value);
 4934|  1.57k|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|  11.5k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  11.5k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  11.5k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  11.5k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    212|    {
 5314|    212|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    212|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    212|        return read_impl(range, specs, value);
 5316|    212|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    212|    {
 5332|    212|        SCN_CLANG_PUSH
 5333|    212|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    212|        switch (m_type) {
 5336|     90|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 90, False: 122]
  ------------------
 5337|     90|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     16|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 16, False: 196]
  ------------------
 5340|     16|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     16|                                                                   value);
 5342|       |
 5343|     22|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 22, False: 190]
  ------------------
 5344|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|     76|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 76, False: 136]
  ------------------
 5347|     76|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|     76|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 210]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 6, False: 206]
  ------------------
 5357|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      6|                    range,
 5359|      6|                    get_unescaped_regex_pattern(
 5360|      6|                        specs.charset_string<SourceCharT>()),
 5361|      6|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 212]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    212|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    212|        }
 5368|       |
 5369|    212|        SCN_CLANG_POP
 5370|    212|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|     90|    {
 4868|     90|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|     90|                                     value);
 4870|     90|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    128|{
 4814|    128|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    128|    auto src = [&]() {
 4817|    128|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    128|            return make_contiguous_buffer(
 4819|    128|                ranges::subrange{range.begin().base(), result.base()});
 4820|    128|        }
 4821|    128|        else {
 4822|    128|            return make_contiguous_buffer(
 4823|    128|                ranges::subrange{range.begin(), result});
 4824|    128|        }
 4825|    128|    }();
 4826|    128|    using src_type = decltype(src);
 4827|       |
 4828|    128|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    128|    else {
 4841|    128|        const auto view = src.view();
 4842|    128|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    128|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 48, False: 80]
  ------------------
 4845|     48|            return detail::unexpected_scan_error(
 4846|     48|                scan_error::invalid_scanned_value,
 4847|     48|                "Invalid encoding in scanned string_view");
 4848|     48|        }
 4849|       |
 4850|     80|        return SCN_MOVE(result);
  ------------------
  |  |  934|     80|    static_cast<    \
  |  |  935|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    128|    }
 4852|    128|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    128|    auto src = [&]() {
 4817|    128|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    128|            return make_contiguous_buffer(
 4819|    128|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    128|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     16|    {
 4904|     16|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 16, False: 0]
  ------------------
 4905|     16|            return read_string_view_impl(
 4906|     16|                range,
 4907|     16|                read_until_code_unit(
 4908|     16|                    range,
 4909|     16|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     16|                        SourceCharT ch) { return ch == until; }),
 4911|     16|                value);
 4912|     16|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     16|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|     74|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     74|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     74|              else {
  749|     74|                  return obj(static_cast<decltype(args)>(args)...);
  750|     74|              }
  751|     74|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|     74|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     74|        else if constexpr (std::is_object_v<T>) {
  688|     74|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     74|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4910|     74|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     22|    {
 5000|     22|        return read_impl(
 5001|     22|            range,
 5002|     22|            [&](const auto& rng) {
 5003|     22|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     22|            },
 5005|     22|            detail::priority_tag<1>{});
 5006|     22|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     22|    {
 5015|     22|        return read_cb(range);
 5016|     22|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     22|            [&](const auto& rng) {
 5003|     22|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     22|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|     76|    {
 5103|     76|        auto it = read_source_impl(range, {specs});
 5104|     76|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 68]
  |  |  ------------------
  ------------------
 5105|      8|            return unexpected(it.error());
 5106|      8|        }
 5107|       |
 5108|     68|        return read_string_view_impl(range, *it, value);
 5109|     76|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|     68|{
 4814|     68|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|     68|    auto src = [&]() {
 4817|     68|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|     68|            return make_contiguous_buffer(
 4819|     68|                ranges::subrange{range.begin().base(), result.base()});
 4820|     68|        }
 4821|     68|        else {
 4822|     68|            return make_contiguous_buffer(
 4823|     68|                ranges::subrange{range.begin(), result});
 4824|     68|        }
 4825|     68|    }();
 4826|     68|    using src_type = decltype(src);
 4827|       |
 4828|     68|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|     68|    else {
 4841|     68|        const auto view = src.view();
 4842|     68|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|     68|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 68]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|     68|        return SCN_MOVE(result);
  ------------------
  |  |  934|     68|    static_cast<    \
  |  |  935|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|     68|    }
 4852|     68|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|     68|    auto src = [&]() {
 4817|     68|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|     68|            return make_contiguous_buffer(
 4819|     68|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|     68|    }();
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4942|      8|    {
 4943|      8|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|      0|        return read_string_view_impl(range, it, value);
 4945|      8|    }
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  2.05k|    {
 5314|  2.05k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  2.05k|        return read_impl(range, specs, value);
 5316|  2.05k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  2.05k|    {
 5332|  2.05k|        SCN_CLANG_PUSH
 5333|  2.05k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  2.05k|        switch (m_type) {
 5336|    308|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 308, False: 1.74k]
  ------------------
 5337|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 34, False: 2.01k]
  ------------------
 5340|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     34|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 2.05k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    130|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 130, False: 1.92k]
  ------------------
 5347|    130|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    130|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|  1.53k|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 1.53k, False: 516]
  ------------------
 5352|  1.53k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|  1.53k|                    range, specs.charset_string<SourceCharT>(),
 5354|  1.53k|                    specs.regexp_flags, value);
 5355|       |
 5356|     44|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 44, False: 2.00k]
  ------------------
 5357|     44|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     44|                    range,
 5359|     44|                    get_unescaped_regex_pattern(
 5360|     44|                        specs.charset_string<SourceCharT>()),
 5361|     44|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 2.05k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  2.05k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  2.05k|        }
 5368|       |
 5369|  2.05k|        SCN_CLANG_POP
 5370|  2.05k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|  9.48k|    {
 4868|  9.48k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|  9.48k|                                     value);
 4870|  9.48k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  9.51k|{
 4814|  9.51k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  9.51k|    auto src = [&]() {
 4817|  9.51k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  9.51k|            return make_contiguous_buffer(
 4819|  9.51k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  9.51k|        }
 4821|  9.51k|        else {
 4822|  9.51k|            return make_contiguous_buffer(
 4823|  9.51k|                ranges::subrange{range.begin(), result});
 4824|  9.51k|        }
 4825|  9.51k|    }();
 4826|  9.51k|    using src_type = decltype(src);
 4827|       |
 4828|  9.51k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  9.51k|    else {
 4841|  9.51k|        const auto view = src.view();
 4842|  9.51k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  9.51k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 262, False: 9.25k]
  ------------------
 4845|    262|            return detail::unexpected_scan_error(
 4846|    262|                scan_error::invalid_scanned_value,
 4847|    262|                "Invalid encoding in scanned string_view");
 4848|    262|        }
 4849|       |
 4850|  9.25k|        return SCN_MOVE(result);
  ------------------
  |  |  934|  9.25k|    static_cast<    \
  |  |  935|  9.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  9.51k|    }
 4852|  9.51k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  9.51k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  9.51k|        else {
 4822|  9.51k|            return make_contiguous_buffer(
 4823|  9.51k|                ranges::subrange{range.begin(), result});
 4824|  9.51k|        }
 4825|  9.51k|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     34|    {
 4904|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 34, False: 0]
  ------------------
 4905|     34|            return read_string_view_impl(
 4906|     34|                range,
 4907|     34|                read_until_code_unit(
 4908|     34|                    range,
 4909|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     34|                        SourceCharT ch) { return ch == until; }),
 4911|     34|                value);
 4912|     34|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     34|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  688|    484|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    484|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4910|    484|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|    130|    {
 5103|    130|        auto it = read_source_impl(range, {specs});
 5104|    130|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    130|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 114]
  |  |  ------------------
  ------------------
 5105|     16|            return unexpected(it.error());
 5106|     16|        }
 5107|       |
 5108|    114|        return read_string_view_impl(range, *it, value);
 5109|    130|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    442|{
 4814|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    442|    auto src = [&]() {
 4817|    442|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    442|            return make_contiguous_buffer(
 4819|    442|                ranges::subrange{range.begin().base(), result.base()});
 4820|    442|        }
 4821|    442|        else {
 4822|    442|            return make_contiguous_buffer(
 4823|    442|                ranges::subrange{range.begin(), result});
 4824|    442|        }
 4825|    442|    }();
 4826|    442|    using src_type = decltype(src);
 4827|       |
 4828|    442|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    442|    else {
 4841|    442|        const auto view = src.view();
 4842|    442|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    442|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 106, False: 336]
  ------------------
 4845|    106|            return detail::unexpected_scan_error(
 4846|    106|                scan_error::invalid_scanned_value,
 4847|    106|                "Invalid encoding in scanned string_view");
 4848|    106|        }
 4849|       |
 4850|    336|        return SCN_MOVE(result);
  ------------------
  |  |  934|    336|    static_cast<    \
  |  |  935|    336|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    442|    }
 4852|    442|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    442|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    442|        else {
 4822|    442|            return make_contiguous_buffer(
 4823|    442|                ranges::subrange{range.begin(), result});
 4824|    442|        }
 4825|    442|    }();
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4942|  1.57k|    {
 4943|  1.57k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.25k, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.25k|    }                                                  \
  |  |  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|    328|        return read_string_view_impl(range, it, value);
 4945|  1.57k|    }
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  6.28k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  6.28k|                  ranges::sized_range<Range>) {
 1785|  6.28k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  6.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  6.28k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  6.28k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  6.28k|    {
 1589|  6.28k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  5.67k|{
 5835|  5.67k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  5.67k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 630, False: 5.04k]
  ------------------
 5840|    630|        return range.begin();
 5841|    630|    }
 5842|       |
 5843|  5.04k|    return skip_classic_whitespace(range);
 5844|  5.67k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    630|    {
 3579|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    630|        return read_default_with_base(range, value, 10);
 3581|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    630|    {
 3579|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    630|        return read_default_with_base(range, value, 10);
 3581|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5786|  1.11k|    {
 5787|  1.11k|        return true;
 5788|  1.11k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|    876|    {
 5805|    876|        detail::format_specs specs{};
 5806|    876|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    876|        std::uintptr_t intvalue{};
 5809|    876|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    876|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    876|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3150|  1.39k|    {
 3151|  1.39k|        return true;
 3152|  1.39k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|    630|    {
 5542|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|    630|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|    630|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5385|  9.80k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|  1.01k|    {
 5392|  1.01k|        scan_error err{scan_error::invalid_scanned_value,
 5393|  1.01k|                       "Failed to read boolean"};
 5394|       |
 5395|  1.01k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 894, False: 124]
  ------------------
 5396|    894|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 894]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    894|            else {
 5400|    894|                err = r.error();
 5401|    894|            }
 5402|    894|        }
 5403|       |
 5404|  1.01k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 996, False: 22]
  ------------------
 5405|    996|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 996]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    996|            else {
 5409|    996|                err = r.error();
 5410|    996|            }
 5411|    996|        }
 5412|       |
 5413|  1.01k|        return unexpected(err);
 5414|  1.01k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|    908|    {
 5421|    908|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 908]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    908|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 908]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    908|        return detail::unexpected_scan_error(
 5431|    908|            scan_error::invalid_scanned_value,
 5432|    908|            "Failed to read numeric boolean value: No match");
 5433|    908|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|    996|    {
 5439|    996|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 996]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    996|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 996]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    996|        return detail::unexpected_scan_error(
 5449|    996|            scan_error::invalid_scanned_value,
 5450|    996|            "Failed to read textual boolean value: No match");
 5451|    996|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  1.99k|{
 2294|  1.99k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 102, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    102|    }                                                  \
  |  |  |  | 3939|  1.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.89k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.89k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|  1.89k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|  1.89k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|  1.89k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.89k, False: 0]
  |  |  ------------------
  ------------------
 2301|  1.89k|            return unexpected(parse_error::error);
 2302|  1.89k|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|  1.89k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|    630|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|  9.80k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|    630|    {
 4185|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|    630|        float_reader<CharT> rd{};
 4188|    630|        return read_impl<Range>(
 4189|    630|            range, rd,
 4190|    630|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    630|                return r.read_source(SCN_FWD(args)...);
 4192|    630|            },
 4193|    630|            value);
 4194|    630|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    630|        : m_fptr([](storage fn,
  743|    630|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    630|              cvref<T> obj = *get<T>(fn);
  745|    630|              if constexpr (std::is_void_v<R>) {
  746|    630|                  obj(static_cast<decltype(args)>(args)...);
  747|    630|              }
  748|    630|              else {
  749|    630|                  return obj(static_cast<decltype(args)>(args)...);
  750|    630|              }
  751|    630|          }),
  752|    630|          m_storage(std::addressof(f))
  753|    630|    {
  754|    630|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    630|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    630|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    630|              else {
  749|    630|                  return obj(static_cast<decltype(args)>(args)...);
  750|    630|              }
  751|    630|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    630|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    630|        else if constexpr (std::is_object_v<T>) {
  688|    630|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    630|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|    630|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    630|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|    630|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    630|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    630|        {
  662|    630|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|    630|    {
 5303|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    630|    {
 5303|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    630|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    630|                          basic_contiguous_scan_context<char_type>>) {
 5915|    630|            auto rd = make_reader<T, char_type>();
 5916|    630|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    630|    {
 5903|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    630|                        .transform_error(make_eof_scan_error));
 5905|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    630|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    630|    {
 5303|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    630|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  78.3k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  78.3k|    static_cast<    \
  |  |  935|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  78.3k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  78.3k|          m_current(m_range.begin())
 2988|  78.3k|    {
 2989|  78.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   136k|    {
 2998|   136k|        return m_range.end();
 2999|   136k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  40.2k|{
 1319|       |    // TODO: optimize
 1320|  40.2k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  40.2k|    auto res = get_next_code_point(str);
 1322|  40.2k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  40.2k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  43.4k|    {
 3013|  43.4k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  43.4k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  43.4k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 43.4k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  43.4k|        }
 3019|  43.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  43.4k|    static_cast<    \
  |  |  935|  43.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  43.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  52.1k|    {
 3003|  52.1k|        return ranges::subrange{begin(), end()};
 3004|  52.1k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  6.28k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  6.28k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  6.28k|        auto buf = make_contiguous_buffer(range);
 2220|  6.28k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  6.28k|        return ranges::next(range.begin(),
 2222|  6.28k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  6.28k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6073|  3.41k|    {
 6074|  3.41k|        const bool need_skipped_width =
 6075|  3.41k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 46, False: 3.37k]
  |  Branch (6075:33): [True: 3.37k, False: 0]
  ------------------
 6076|  3.41k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  3.41k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 172, False: 3.24k]
  ------------------
 6080|  3.41k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 512, False: 2.73k]
  ------------------
 6081|    684|            return skip_fill(rng, specs.precision, specs.fill,
 6082|    684|                             need_skipped_width);
 6083|    684|        }
 6084|  2.73k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 2.64k, False: 94]
  |  Branch (6084:56): [True: 1.78k, False: 854]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  1.78k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 1.78k, False: 0]
  ------------------
 6088|  1.78k|                auto max_width_view = take_width(rng, specs.precision);
 6089|  1.78k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|  1.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 174, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    174|    }                                                  \
  |  |  |  | 3939|  1.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|  1.61k|                                  .transform_error(make_eof_scan_error));
 6091|  1.61k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|  1.78k|            }
 6093|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|      0|                            make_eof_scan_error));
 6095|       |
 6096|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 0]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|      0|            return result_type{it, 0};
 6104|      0|        }
 6105|       |
 6106|    948|        return result_type{rng.begin(), 0};
 6107|  2.73k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5988|    684|{
 5989|    684|    using char_type = detail::char_t<Range>;
 5990|    684|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|    684|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 438, False: 246]
  ------------------
 5993|    438|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|    438|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|    438|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 0, False: 438]
  ------------------
 5997|      0|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 0, False: 0]
  ------------------
 6000|      0|                auto prefix_width =
 6001|      0|                    static_cast<std::ptrdiff_t>(
 6002|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|      0|                    ranges::distance(range.begin(), it);
 6004|      0|                return result_type{it, prefix_width};
 6005|      0|            }
 6006|      0|            return result_type{it, 0};
 6007|      0|        }
 6008|       |
 6009|    438|        auto max_width_view = take_width(range, max_width);
 6010|    438|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|    438|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 438, False: 0]
  ------------------
 6013|    438|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|    438|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|    438|    }
 6017|       |
 6018|    246|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|    246|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 0, False: 246]
  ------------------
 6020|      0|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 0, False: 0]
  ------------------
 6023|      0|            auto prefix_width =
 6024|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|      0|            return result_type{it, prefix_width};
 6027|      0|        }
 6028|      0|        return result_type{it, 0};
 6029|      0|    }
 6030|       |
 6031|    246|    auto max_width_view = take_width(range, max_width);
 6032|    246|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|    246|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 246, False: 0]
  ------------------
 6035|    246|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|    246|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|    246|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    438|        : m_fptr([](storage fn,
  743|    438|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    438|              cvref<T> obj = *get<T>(fn);
  745|    438|              if constexpr (std::is_void_v<R>) {
  746|    438|                  obj(static_cast<decltype(args)>(args)...);
  747|    438|              }
  748|    438|              else {
  749|    438|                  return obj(static_cast<decltype(args)>(args)...);
  750|    438|              }
  751|    438|          }),
  752|    438|          m_storage(std::addressof(f))
  753|    438|    {
  754|    438|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    620|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    620|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    620|              else {
  749|    620|                  return obj(static_cast<decltype(args)>(args)...);
  750|    620|              }
  751|    620|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    620|    {
  684|    620|        if constexpr (std::is_const_v<T>) {
  685|    620|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    620|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5994|    620|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    438|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    438|        {
  667|    438|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    438|{
 2075|    438|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    438|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    438|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    438|    else {
 2060|    438|        auto first = range.begin();
 2061|    674|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 620, False: 54]
  ------------------
 2062|    620|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 384, False: 236]
  ------------------
 2063|    384|                return first;
 2064|    384|            }
 2065|    620|        }
 2066|     54|        return first;
 2067|    438|    }
 2068|    438|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2920|  4.25k|    {
 2921|  4.25k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  4.25k|                                      m_count};
 2923|  4.25k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2825|  17.6k|    {
 2826|  17.6k|        return view;
 2827|  17.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  4.25k|        : m_current(x), m_end(s), m_count(n)
 2481|  4.25k|    {
 2482|  4.25k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  6.44k|        {
 2892|  6.44k|            return !(y == x);
 2893|  6.44k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  12.0k|        {
 2879|  12.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 784, False: 11.2k]
  |  Branch (2879:39): [True: 454, False: 330]
  ------------------
 2880|  12.0k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 0, False: 11.5k]
  ------------------
 2881|  12.0k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 1.50k, False: 10.0k]
  |  Branch (2881:39): [True: 1.14k, False: 360]
  ------------------
 2882|  11.5k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 1.14k]
  ------------------
 2883|  12.0k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|  2.29k|    {
 2521|  2.29k|        return m_multibyte_left;
 2522|  2.29k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|  1.14k|    {
 2526|  1.14k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  1.14k|        return _get_width_at_current_cp_start(
 2528|  1.14k|                   _get_cp_length_at_current()) == 2;
 2529|  1.14k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  6.67k|    {
 2754|  6.67k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  6.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.67k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  6.67k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 3.50k, False: 3.17k]
  ------------------
 2759|  3.50k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  3.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  3.50k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  3.50k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  3.50k|        }
 2763|       |
 2764|  3.17k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  3.17k|                                           cplen);
 2766|  3.17k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.17k]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|  3.17k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  3.17k|        return static_cast<difference_type>(
 2772|  3.17k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  3.17k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  6.67k|    {
 2748|  6.67k|        return static_cast<difference_type>(
 2749|  6.67k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  6.67k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2926|  9.13k|    {
 2927|  9.13k|        return sentinel<true>{m_base.get().end()};
 2928|  9.13k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  9.13k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  9.13k|    static_cast<    \
  |  |  935|  9.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  8.31k|    {
 2533|  8.31k|        return *m_current;
 2534|  8.31k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|  10.1k|    {
 2542|  10.1k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  10.1k|        _increment_current();
 2544|  10.1k|        return *this;
 2545|  10.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|  10.1k|    {
 2777|  10.1k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 5.53k, False: 4.63k]
  ------------------
 2778|  5.53k|            auto cplen = _get_cp_length_at_current();
 2779|  5.53k|            m_multibyte_left = cplen - 1;
 2780|  5.53k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  5.53k|        }
 2782|  4.63k|        else {
 2783|  4.63k|            --m_multibyte_left;
 2784|  4.63k|        }
 2785|       |
 2786|  10.1k|        ++m_current;
 2787|  10.1k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2135|    246|{
 2136|    246|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    246|    auto it = range.begin();
 2139|    246|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 246, False: 0]
  ------------------
 2140|    246|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    246|                                           needle.size());
 2142|    246|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 52, False: 194]
  ------------------
 2143|     52|            return it;
 2144|     52|        }
 2145|    194|        static_assert(
 2146|    194|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    194|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 194, False: 0]
  ------------------
 2148|    194|            return it;
 2149|    194|        }
 2150|      0|        it = *r;
 2151|      0|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1955|    246|{
 1956|    246|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    246|    else {
 1967|    246|        auto it = range.begin();
 1968|    246|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 246]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|    996|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 802, False: 194]
  ------------------
 1973|    802|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 52, False: 750]
  ------------------
 1974|     52|                return unexpected(eof_error::eof);
 1975|     52|            }
 1976|    802|        }
 1977|       |
 1978|    194|        return it;
 1979|    246|    }
 1980|    246|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1095|    246|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    246|    else {
 1116|    246|        return 0;
 1117|    246|    }
 1118|    246|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  1.78k|    {
  268|  1.78k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.78k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.78k|    {
  161|  1.78k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.78k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.78k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.78k|        else {
  169|  1.78k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.78k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.78k|        }
  173|  1.78k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2637|  6.58k|    {
 2638|  6.58k|        return !(a == b);
 2639|  6.58k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2629|  6.58k|    {
 2630|  6.58k|        return a.m_current == b.m_current;
 2631|  6.58k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|  2.47k|    {
 2943|  2.47k|        return take_width_view{r, n};
 2944|  2.47k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2910|  2.47k|        : m_base(base), m_count(count)
 2911|  2.47k|    {
 2912|  2.47k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2822|  2.47k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  1.78k|{
 3066|  1.78k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.78k, False: 0]
  ------------------
 3067|  1.78k|        auto it = read_while_classic_space(range);
 3068|  1.78k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.78k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 174, False: 1.61k]
  |  |  ------------------
  ------------------
 3070|    174|            return unexpected(e);
 3071|    174|        }
 3072|       |
 3073|  1.61k|        return it;
 3074|  1.78k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.78k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.78k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.78k|    else {
 2225|  1.78k|        auto it = range.begin();
 2226|       |
 2227|  1.78k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.78k|            auto seg = get_contiguous_beginning(range);
 2229|  1.78k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.78k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 1.78k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  1.78k|            ranges::advance(it, seg.size());
 2234|  1.78k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.78k|            return detail::is_cp_space(cp);
 2238|  1.78k|        });
 2239|  1.78k|    }
 2240|  1.78k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|  1.78k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.78k|    else {
 1059|  1.78k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.78k|    }
 1061|  1.78k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  1.78k|{
 2181|  1.78k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.78k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.78k|{
 2160|  1.78k|    auto it = range.begin();
 2161|  3.17k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 3.00k, False: 174]
  ------------------
 2162|  3.00k|        const auto val =
 2163|  3.00k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  3.00k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  3.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.00k, False: 0]
  |  |  ------------------
  ------------------
 2165|  3.00k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  3.00k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  3.00k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.61k, False: 1.39k]
  ------------------
 2168|  1.61k|                return it;
 2169|  1.61k|            }
 2170|  3.00k|        }
 2171|  1.39k|        it = val.iterator;
 2172|  1.39k|    }
 2173|       |
 2174|    174|    return it;
 2175|  1.78k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  3.00k|{
 1998|  3.00k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  3.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  3.00k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  3.00k|    auto it = range.begin();
 2002|  3.00k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  3.00k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.00k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  3.00k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.15k, False: 852]
  ------------------
 2011|  2.15k|        ++it;
 2012|  2.15k|        return {it, string_type(1, *range.begin())};
 2013|  2.15k|    }
 2014|       |
 2015|    852|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|    852|    return {it, string_type{range.begin(), it}};
 2017|  3.00k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  4.79k|{
  945|  4.79k|    return is_range_eof(r.begin(), r.end());
  946|  4.79k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  4.79k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  4.79k|    {
  938|  4.79k|        return begin == end;
  939|  4.79k|    }
  940|  4.79k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    852|    {
  283|    852|        return n - fn::impl_i_n_s(i, n, bound);
  284|    852|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    852|    {
  227|    852|        constexpr iter_difference_t<I> zero{0};
  228|    852|        iter_difference_t<I> counter{0};
  229|       |
  230|    852|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 852]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    852|        else {
  237|  3.19k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.34k, False: 852]
  |  Branch (237:34): [True: 2.34k, False: 0]
  ------------------
  238|  2.34k|                ++i;
  239|  2.34k|                ++counter;
  240|  2.34k|            }
  241|    852|        }
  242|       |
  243|    852|        return counter;
  244|    852|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|  3.00k|    {
 1989|  3.00k|        return !codepoint.empty();
 1990|  3.00k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.78k|        : m_fptr([](storage fn,
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|  1.78k|              if constexpr (std::is_void_v<R>) {
  746|  1.78k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.78k|              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
  752|  1.78k|          m_storage(std::addressof(f))
  753|  1.78k|    {
  754|  1.78k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.00k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.00k|              else {
  749|  3.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.00k|              }
  751|  3.00k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.00k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.00k|        else if constexpr (std::is_object_v<T>) {
  688|  3.00k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.00k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  3.00k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.00k|            return detail::is_cp_space(cp);
 2238|  3.00k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.78k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.78k|        {
  662|  1.78k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  1.78k|{
  951|  1.78k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 174, False: 1.61k]
  |  |  ------------------
  ------------------
  952|    174|        return eof_error::eof;
  953|    174|    }
  954|  1.61k|    return eof_error::good;
  955|  1.78k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  13.8k|    {
 2513|  13.8k|        return m_current;
 2514|  13.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  27.0k|    {
 2517|  27.0k|        return m_count;
 2518|  27.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|  12.9k|    {
 6074|  12.9k|        const bool need_skipped_width =
 6075|  12.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 1.83k, False: 11.1k]
  |  Branch (6075:33): [True: 0, False: 11.1k]
  ------------------
 6076|  12.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  12.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 140, False: 12.8k]
  ------------------
 6080|  12.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 890, False: 11.9k]
  ------------------
 6081|  1.03k|            return skip_fill(rng, specs.precision, specs.fill,
 6082|  1.03k|                             need_skipped_width);
 6083|  1.03k|        }
 6084|  11.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 11.2k, False: 718]
  |  Branch (6084:56): [True: 1.63k, False: 9.57k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  1.63k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 1.63k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  3.26k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  3.26k|                            make_eof_scan_error));
 6095|       |
 6096|  3.26k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 1.01k, False: 614]
  ------------------
 6097|  1.01k|                return result_type{
 6098|  1.01k|                    it,
 6099|  1.01k|                    calculate_text_width(make_contiguous_buffer(
 6100|  1.01k|                                             ranges::subrange{rng.begin(), it})
 6101|  1.01k|                                             .view())};
 6102|  1.01k|            }
 6103|    614|            return result_type{it, 0};
 6104|  3.26k|        }
 6105|       |
 6106|  10.2k|        return result_type{rng.begin(), 0};
 6107|  11.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|  3.95k|    {
 6116|  3.95k|        const bool need_skipped_width =
 6117|  3.95k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 454, False: 3.50k]
  |  Branch (6117:33): [True: 1.06k, False: 2.43k]
  ------------------
 6118|  3.95k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  3.95k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 288, False: 3.66k]
  ------------------
 6121|  3.95k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 328, False: 3.34k]
  ------------------
 6122|    616|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 242, False: 374]
  ------------------
 6123|    616|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 92, False: 150]
  ------------------
 6124|     92|                return result_type{rng.begin(), 0};
 6125|     92|            }
 6126|    524|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|    524|                             specs.fill, need_skipped_width);
 6128|    616|        }
 6129|  3.34k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 3.21k, False: 128]
  ------------------
 6130|  3.34k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 2.90k, False: 306]
  ------------------
 6131|  3.34k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 214, False: 2.69k]
  |  Branch (6131:35): [True: 184, False: 30]
  ------------------
 6132|  2.90k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 542, False: 2.18k]
  ------------------
 6133|  2.72k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 442, False: 100]
  ------------------
 6134|    626|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 442, False: 184]
  ------------------
 6135|    442|                const auto initial_width =
 6136|    442|                    specs.precision - prefix_width - value_width;
 6137|    442|                auto max_width_view = take_width(rng, initial_width);
 6138|    442|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    442|                                  .transform_error(make_eof_scan_error));
 6140|    442|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|    442|            }
 6142|    368|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    368|                            make_eof_scan_error));
 6144|       |
 6145|    368|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 184, False: 0]
  ------------------
 6146|    184|                return result_type{
 6147|    184|                    it,
 6148|    184|                    calculate_text_width(make_contiguous_buffer(
 6149|    184|                                             ranges::subrange{rng.begin(), it})
 6150|    184|                                             .view())};
 6151|    184|            }
 6152|      0|            return result_type{it, 0};
 6153|    368|        }
 6154|  2.71k|        return result_type{rng.begin(), 0};
 6155|  3.34k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6225|  4.46k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.46k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.46k|            auto rd = make_reader<T, char_type>();
 6231|  4.46k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.90k, False: 560]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.90k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.90k|    }
  ------------------
 6232|    560|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.46k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    560|    {
 6161|    560|        const bool need_skipped_width =
 6162|    560|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 186, False: 374]
  |  Branch (6162:33): [True: 282, False: 92]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    560|        auto it = rng.begin();
 6166|    560|        std::ptrdiff_t prefix_width = 0;
 6167|    560|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 284, False: 276]
  ------------------
 6168|    284|            auto max_width_view = take_width(rng, specs.precision);
 6169|    284|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    260|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    260|            it = prefix_result.first.base();
 6172|    260|            prefix_width = prefix_result.second;
 6173|    260|        }
 6174|    276|        else {
 6175|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    276|            std::tie(it, prefix_width) = prefix_result;
 6177|    276|        }
 6178|    536|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    536|        std::ptrdiff_t value_width = 0;
 6182|    536|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 260, False: 276]
  ------------------
 6183|    260|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 254]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    254|            const auto initial_width = specs.precision - prefix_width;
 6191|    254|            auto max_width_view =
 6192|    254|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    254|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    254|    }                                                  \
  |  |  |  | 3939|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    276|        else {
 6198|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    276|    }                                                  \
  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6225|  4.46k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.46k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.46k|            auto rd = make_reader<T, char_type>();
 6231|  4.46k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.90k, False: 560]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.90k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.90k|    }
  ------------------
 6232|    560|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.46k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    560|    {
 6161|    560|        const bool need_skipped_width =
 6162|    560|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 186, False: 374]
  |  Branch (6162:33): [True: 282, False: 92]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    560|        auto it = rng.begin();
 6166|    560|        std::ptrdiff_t prefix_width = 0;
 6167|    560|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 284, False: 276]
  ------------------
 6168|    284|            auto max_width_view = take_width(rng, specs.precision);
 6169|    284|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    260|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    260|            it = prefix_result.first.base();
 6172|    260|            prefix_width = prefix_result.second;
 6173|    260|        }
 6174|    276|        else {
 6175|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    276|            std::tie(it, prefix_width) = prefix_result;
 6177|    276|        }
 6178|    536|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    536|        std::ptrdiff_t value_width = 0;
 6182|    536|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 260, False: 276]
  ------------------
 6183|    260|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 254]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    254|            const auto initial_width = specs.precision - prefix_width;
 6191|    254|            auto max_width_view =
 6192|    254|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    254|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    254|    }                                                  \
  |  |  |  | 3939|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    276|        else {
 6198|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    276|    }                                                  \
  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6225|  4.42k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.42k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.42k|            auto rd = make_reader<T, char_type>();
 6231|  4.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.94k, False: 486]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.94k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.94k|    }
  ------------------
 6232|    486|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.42k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5791|  4.42k|    {
 5792|  4.42k|        reader_error_handler eh{};
 5793|  4.42k|        detail::check_pointer_type_specs(specs, eh);
 5794|  4.42k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.94k, False: 486]
  |  |  ------------------
  ------------------
 5795|  3.94k|            return detail::unexpected_scan_error(
 5796|  3.94k|                scan_error::invalid_format_string, eh.m_msg);
 5797|  3.94k|        }
 5798|    486|        return {};
 5799|  4.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6160|    486|    {
 6161|    486|        const bool need_skipped_width =
 6162|    486|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 180, False: 306]
  |  Branch (6162:33): [True: 238, False: 68]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    486|        auto it = rng.begin();
 6166|    486|        std::ptrdiff_t prefix_width = 0;
 6167|    486|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 240, False: 246]
  ------------------
 6168|    240|            auto max_width_view = take_width(rng, specs.precision);
 6169|    240|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 224]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    224|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    224|            it = prefix_result.first.base();
 6172|    224|            prefix_width = prefix_result.second;
 6173|    224|        }
 6174|    246|        else {
 6175|    246|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    246|            std::tie(it, prefix_width) = prefix_result;
 6177|    246|        }
 6178|    470|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    470|        std::ptrdiff_t value_width = 0;
 6182|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 224, False: 246]
  ------------------
 6183|    224|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 220]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    220|            const auto initial_width = specs.precision - prefix_width;
 6191|    220|            auto max_width_view =
 6192|    220|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    220|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    246|        else {
 6198|    246|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 246, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    246|    }                                                  \
  |  | 3939|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|    220|    {
 5822|    220|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    220|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    220|        return read_default(range, value, loc);
 5824|    220|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|    220|    {
 5805|    220|        detail::format_specs specs{};
 5806|    220|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    220|        std::uintptr_t intvalue{};
 5809|    220|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    220|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    246|    {
 5822|    246|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    246|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    246|        return read_default(range, value, loc);
 5824|    246|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6225|  4.46k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.46k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.46k|            auto rd = make_reader<T, char_type>();
 6231|  4.46k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.70k, False: 762]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.70k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.70k|    }
  ------------------
 6232|    762|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.46k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  4.46k|    {
 3156|  4.46k|        reader_error_handler eh{};
 3157|  4.46k|        get_derived().check_specs_impl(specs, eh);
 3158|  4.46k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.70k, False: 762]
  |  |  ------------------
  ------------------
 3159|  3.70k|            return detail::unexpected_scan_error(
 3160|  3.70k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  3.70k|        }
 3162|    762|        return {};
 3163|  4.46k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3167|  4.46k|    {
 3168|  4.46k|        return static_cast<Derived&>(*this);
 3169|  4.46k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|  4.46k|    {
 5535|  4.46k|        detail::check_bool_type_specs(specs, eh);
 5536|  4.46k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    762|    {
 6161|    762|        const bool need_skipped_width =
 6162|    762|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 196, False: 566]
  |  Branch (6162:33): [True: 352, False: 214]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    762|        auto it = rng.begin();
 6166|    762|        std::ptrdiff_t prefix_width = 0;
 6167|    762|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 356, False: 406]
  ------------------
 6168|    356|            auto max_width_view = take_width(rng, specs.precision);
 6169|    356|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    328|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    328|            it = prefix_result.first.base();
 6172|    328|            prefix_width = prefix_result.second;
 6173|    328|        }
 6174|    406|        else {
 6175|    406|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    406|            std::tie(it, prefix_width) = prefix_result;
 6177|    406|        }
 6178|    734|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    734|        std::ptrdiff_t value_width = 0;
 6182|    734|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 328, False: 406]
  ------------------
 6183|    328|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 322]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    322|            const auto initial_width = specs.precision - prefix_width;
 6191|    322|            auto max_width_view =
 6192|    322|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    322|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 322, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    322|    }                                                  \
  |  |  |  | 3939|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    406|        else {
 6198|    406|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 406, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    406|    }                                                  \
  |  | 3939|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    322|    {
 5554|    322|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    322|#if !SCN_DISABLE_LOCALE
 5557|    322|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 14, False: 308]
  ------------------
 5558|     14|            return rd.read_localized(range, loc, value);
 5559|     14|        }
 5560|    308|#endif
 5561|       |
 5562|    308|        return rd.read_classic(range, value);
 5563|    322|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5566|    728|    {
 5567|    728|        SCN_GCC_COMPAT_PUSH
 5568|    728|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    728|        switch (specs.type) {
 5571|    196|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 196, False: 532]
  ------------------
 5572|    196|                return bool_reader_base::allow_text;
 5573|       |
 5574|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 14, False: 714]
  ------------------
 5575|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 8, False: 720]
  ------------------
 5576|     28|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 6, False: 722]
  ------------------
 5577|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 14, False: 714]
  ------------------
 5578|     56|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 14, False: 714]
  ------------------
 5579|     60|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 4, False: 724]
  ------------------
 5580|     60|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    472|            default:
  ------------------
  |  Branch (5582:13): [True: 472, False: 256]
  ------------------
 5583|    472|                return bool_reader_base::allow_text |
 5584|    472|                       bool_reader_base::allow_numeric;
 5585|    728|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    728|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     14|    {
 5465|     14|        scan_error err{scan_error::invalid_scanned_value,
 5466|     14|                       "Failed to read boolean"};
 5467|       |
 5468|     14|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 12, False: 2]
  ------------------
 5469|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 12]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     12|            else {
 5473|     12|                err = r.error();
 5474|     12|            }
 5475|     12|        }
 5476|       |
 5477|     14|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 10, False: 4]
  ------------------
 5478|     10|            auto stdloc = loc.get<std::locale>();
 5479|     10|            const auto& numpunct =
 5480|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     10|            const auto truename = numpunct.truename();
 5482|     10|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     10|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 10]
  ------------------
 5485|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     10|            else {
 5489|     10|                err = r.error();
 5490|     10|            }
 5491|     10|        }
 5492|       |
 5493|     14|        return unexpected(err);
 5494|     14|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    254|    {
 5421|    254|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 254]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    254|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 254]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    254|        return detail::unexpected_scan_error(
 5431|    254|            scan_error::invalid_scanned_value,
 5432|    254|            "Failed to read numeric boolean value: No match");
 5433|    254|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    508|{
 2246|    508|    auto it = read_code_unit(range);
 2247|    508|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    508|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 508]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    508|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    508|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 508, False: 0]
  |  |  ------------------
  ------------------
 2252|    508|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    508|        return unexpected(parse_error::error);
 2254|    508|    }
 2255|       |
 2256|      0|    return *it;
 2257|    508|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5504|     10|    {
 5505|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     10|        const auto shorter = std::pair{
 5507|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 10, False: 0]
  ------------------
 5508|     10|        const auto longer = std::pair{
 5509|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 10]
  ------------------
 5510|       |
 5511|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 10]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 10]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     10|        return detail::unexpected_scan_error(
 5521|     10|            scan_error::invalid_scanned_value,
 5522|     10|            "Failed to read textual boolean: No match");
 5523|     10|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     20|{
 2279|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     10|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2285|     10|        return unexpected(parse_error::error);
 2286|     10|    }
 2287|      0|    return it;
 2288|     10|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    588|{
 1956|    588|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    588|    else {
 1967|    588|        auto it = range.begin();
 1968|    588|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 588]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  2.89k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 2.43k, False: 454]
  ------------------
 1973|  2.43k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 134, False: 2.30k]
  ------------------
 1974|    134|                return unexpected(eof_error::eof);
 1975|    134|            }
 1976|  2.43k|        }
 1977|       |
 1978|    454|        return it;
 1979|    588|    }
 1980|    588|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|    588|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    588|    else {
 1116|    588|        return 0;
 1117|    588|    }
 1118|    588|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    308|    {
 5392|    308|        scan_error err{scan_error::invalid_scanned_value,
 5393|    308|                       "Failed to read boolean"};
 5394|       |
 5395|    308|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 242, False: 66]
  ------------------
 5396|    242|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 242]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    242|            else {
 5400|    242|                err = r.error();
 5401|    242|            }
 5402|    242|        }
 5403|       |
 5404|    308|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 284, False: 24]
  ------------------
 5405|    284|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 284]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    284|            else {
 5409|    284|                err = r.error();
 5410|    284|            }
 5411|    284|        }
 5412|       |
 5413|    308|        return unexpected(err);
 5414|    308|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    284|    {
 5439|    284|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 284]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    284|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 284]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    284|        return detail::unexpected_scan_error(
 5449|    284|            scan_error::invalid_scanned_value,
 5450|    284|            "Failed to read textual boolean value: No match");
 5451|    284|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    568|{
 2294|    568|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 124, False: 444]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    124|    }                                                  \
  |  |  |  | 3939|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    444|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    444|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    444|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|    444|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|    444|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|    444|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 444, False: 0]
  |  |  ------------------
  ------------------
 2301|    444|            return unexpected(parse_error::error);
 2302|    444|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|    444|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    406|    {
 5554|    406|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    406|#if !SCN_DISABLE_LOCALE
 5557|    406|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 18, False: 388]
  ------------------
 5558|     18|            return rd.read_localized(range, loc, value);
 5559|     18|        }
 5560|    388|#endif
 5561|       |
 5562|    388|        return rd.read_classic(range, value);
 5563|    406|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     18|    {
 5465|     18|        scan_error err{scan_error::invalid_scanned_value,
 5466|     18|                       "Failed to read boolean"};
 5467|       |
 5468|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 14, False: 4]
  ------------------
 5469|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 14]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     14|            else {
 5473|     14|                err = r.error();
 5474|     14|            }
 5475|     14|        }
 5476|       |
 5477|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 8, False: 10]
  ------------------
 5478|      8|            auto stdloc = loc.get<std::locale>();
 5479|      8|            const auto& numpunct =
 5480|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|      8|            const auto truename = numpunct.truename();
 5482|      8|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|      8|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 8]
  ------------------
 5485|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|      8|            else {
 5489|      8|                err = r.error();
 5490|      8|            }
 5491|      8|        }
 5492|       |
 5493|     18|        return unexpected(err);
 5494|     18|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5504|      8|    {
 5505|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|      8|        const auto shorter = std::pair{
 5507|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 8, False: 0]
  ------------------
 5508|      8|        const auto longer = std::pair{
 5509|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 8]
  ------------------
 5510|       |
 5511|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 8]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 8]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|      8|        return detail::unexpected_scan_error(
 5521|      8|            scan_error::invalid_scanned_value,
 5522|      8|            "Failed to read textual boolean: No match");
 5523|      8|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     16|{
 2279|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     14|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2285|     14|        return unexpected(parse_error::error);
 2286|     14|    }
 2287|      0|    return it;
 2288|     14|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6225|  4.42k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.42k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.42k|            auto rd = make_reader<T, char_type>();
 6231|  4.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.89k, False: 536]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.89k|    }
  ------------------
 6232|    536|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    536|    {
 6161|    536|        const bool need_skipped_width =
 6162|    536|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 182, False: 354]
  |  Branch (6162:33): [True: 270, False: 84]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    536|        auto it = rng.begin();
 6166|    536|        std::ptrdiff_t prefix_width = 0;
 6167|    536|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 272, False: 264]
  ------------------
 6168|    272|            auto max_width_view = take_width(rng, specs.precision);
 6169|    272|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    272|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    272|            it = prefix_result.first.base();
 6172|    272|            prefix_width = prefix_result.second;
 6173|    272|        }
 6174|    264|        else {
 6175|    264|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    264|            std::tie(it, prefix_width) = prefix_result;
 6177|    264|        }
 6178|    536|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    536|        std::ptrdiff_t value_width = 0;
 6182|    536|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 272, False: 264]
  ------------------
 6183|    272|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 266]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    266|            const auto initial_width = specs.precision - prefix_width;
 6191|    266|            auto max_width_view =
 6192|    266|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    266|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    234|            it = w_it.base();
 6195|    234|            value_width = initial_width - w_it.count();
 6196|    234|        }
 6197|    264|        else {
 6198|    264|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 242]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    242|                                             specs, value, loc));
 6200|       |
 6201|    242|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 176, False: 66]
  ------------------
 6202|    176|                value_width = calculate_text_width(
 6203|    176|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    176|                        .view());
 6205|    176|            }
 6206|    242|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    476|        std::ptrdiff_t postfix_width = 0;
 6210|    476|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 476, False: 0]
  ------------------
 6211|    476|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    476|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    476|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    476|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 476]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    476|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    476|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    476|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    476|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    476|                                 value_width));
 6215|    476|            std::tie(it, postfix_width) = postfix_result;
 6216|    476|        }
 6217|       |
 6218|    476|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    476|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 156, False: 320]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    156|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    156|    }
  ------------------
 6219|    476|            specs, prefix_width, value_width, postfix_width));
 6220|    320|        return it;
 6221|    476|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6225|  4.46k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.46k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.46k|            auto rd = make_reader<T, char_type>();
 6231|  4.46k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.90k, False: 556]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.90k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.90k|    }
  ------------------
 6232|    556|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.46k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    556|    {
 6161|    556|        const bool need_skipped_width =
 6162|    556|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 188, False: 368]
  |  Branch (6162:33): [True: 274, False: 94]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    556|        auto it = rng.begin();
 6166|    556|        std::ptrdiff_t prefix_width = 0;
 6167|    556|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 278, False: 278]
  ------------------
 6168|    278|            auto max_width_view = take_width(rng, specs.precision);
 6169|    278|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    256|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    256|            it = prefix_result.first.base();
 6172|    256|            prefix_width = prefix_result.second;
 6173|    256|        }
 6174|    278|        else {
 6175|    278|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    278|            std::tie(it, prefix_width) = prefix_result;
 6177|    278|        }
 6178|    534|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    534|        std::ptrdiff_t value_width = 0;
 6182|    534|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 256, False: 278]
  ------------------
 6183|    256|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 8, False: 248]
  ------------------
 6184|      8|                return detail::unexpected_scan_error(
 6185|      8|                    scan_error::invalid_fill,
 6186|      8|                    "Too many fill characters before value, "
 6187|      8|                    "precision exceeded before reading value");
 6188|      8|            }
 6189|       |
 6190|    248|            const auto initial_width = specs.precision - prefix_width;
 6191|    248|            auto max_width_view =
 6192|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    248|    }                                                  \
  |  |  |  | 3939|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    278|        else {
 6198|    278|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 278, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    278|    }                                                  \
  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  4.42k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.42k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.42k|            auto rd = make_reader<T, char_type>();
 6231|  4.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 124, False: 4.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    124|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    124|    }
  ------------------
 6232|  4.30k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6160|  4.30k|    {
 6161|  4.30k|        const bool need_skipped_width =
 6162|  4.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 254, False: 4.04k]
  |  Branch (6162:33): [True: 558, False: 3.49k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  4.30k|        auto it = rng.begin();
 6166|  4.30k|        std::ptrdiff_t prefix_width = 0;
 6167|  4.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 568, False: 3.73k]
  ------------------
 6168|    568|            auto max_width_view = take_width(rng, specs.precision);
 6169|    568|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 548]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    548|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    548|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    548|            it = prefix_result.first.base();
 6172|    548|            prefix_width = prefix_result.second;
 6173|    548|        }
 6174|  3.73k|        else {
 6175|  3.73k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  3.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  3.73k|            std::tie(it, prefix_width) = prefix_result;
 6177|  3.73k|        }
 6178|  4.28k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  4.28k|        std::ptrdiff_t value_width = 0;
 6182|  4.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 548, False: 3.73k]
  ------------------
 6183|    548|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 542]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    542|            const auto initial_width = specs.precision - prefix_width;
 6191|    542|            auto max_width_view =
 6192|    542|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    542|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    542|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    542|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    542|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    542|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 186, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    186|    }                                                  \
  |  |  |  | 3939|    542|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    356|            it = w_it.base();
 6195|    356|            value_width = initial_width - w_it.count();
 6196|    356|        }
 6197|  3.73k|        else {
 6198|  3.73k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  3.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  3.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.56k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.56k|    }                                                  \
  |  | 3939|  3.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  3.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.17k|                                             specs, value, loc));
 6200|       |
 6201|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 208, False: 964]
  ------------------
 6202|    208|                value_width = calculate_text_width(
 6203|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    208|                        .view());
 6205|    208|            }
 6206|  1.17k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.16k, False: 368]
  ------------------
 6211|  1.16k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.16k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.16k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.16k|                                 value_width));
 6215|  1.16k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.16k|        }
 6217|       |
 6218|  1.52k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 94, False: 1.43k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     94|    }
  ------------------
 6219|  1.52k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.43k|        return it;
 6221|  1.52k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  4.42k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.42k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.42k|            auto rd = make_reader<T, char_type>();
 6231|  4.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 124, False: 4.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    124|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    124|    }
  ------------------
 6232|  4.30k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|  4.30k|    {
 6161|  4.30k|        const bool need_skipped_width =
 6162|  4.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 254, False: 4.04k]
  |  Branch (6162:33): [True: 558, False: 3.49k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  4.30k|        auto it = rng.begin();
 6166|  4.30k|        std::ptrdiff_t prefix_width = 0;
 6167|  4.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 568, False: 3.73k]
  ------------------
 6168|    568|            auto max_width_view = take_width(rng, specs.precision);
 6169|    568|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 548]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    548|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    548|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    548|            it = prefix_result.first.base();
 6172|    548|            prefix_width = prefix_result.second;
 6173|    548|        }
 6174|  3.73k|        else {
 6175|  3.73k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  3.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  3.73k|            std::tie(it, prefix_width) = prefix_result;
 6177|  3.73k|        }
 6178|  4.28k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  4.28k|        std::ptrdiff_t value_width = 0;
 6182|  4.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 548, False: 3.73k]
  ------------------
 6183|    548|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 542]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    542|            const auto initial_width = specs.precision - prefix_width;
 6191|    542|            auto max_width_view =
 6192|    542|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    542|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    542|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    542|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    542|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    542|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 186, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    186|    }                                                  \
  |  |  |  | 3939|    542|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    356|            it = w_it.base();
 6195|    356|            value_width = initial_width - w_it.count();
 6196|    356|        }
 6197|  3.73k|        else {
 6198|  3.73k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  3.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  3.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.56k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.56k|    }                                                  \
  |  | 3939|  3.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  3.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.17k|                                             specs, value, loc));
 6200|       |
 6201|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 208, False: 964]
  ------------------
 6202|    208|                value_width = calculate_text_width(
 6203|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    208|                        .view());
 6205|    208|            }
 6206|  1.17k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.16k, False: 368]
  ------------------
 6211|  1.16k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.16k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.16k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.16k|                                 value_width));
 6215|  1.16k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.16k|        }
 6217|       |
 6218|  1.52k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 94, False: 1.43k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     94|    }
  ------------------
 6219|  1.52k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.43k|        return it;
 6221|  1.52k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  4.42k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  4.42k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  4.42k|            auto rd = make_reader<T, char_type>();
 6231|  4.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 124, False: 4.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    124|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    124|    }
  ------------------
 6232|  4.30k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  4.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|  4.30k|    {
 6161|  4.30k|        const bool need_skipped_width =
 6162|  4.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 254, False: 4.04k]
  |  Branch (6162:33): [True: 558, False: 3.49k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  4.30k|        auto it = rng.begin();
 6166|  4.30k|        std::ptrdiff_t prefix_width = 0;
 6167|  4.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 568, False: 3.73k]
  ------------------
 6168|    568|            auto max_width_view = take_width(rng, specs.precision);
 6169|    568|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 548]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    548|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    548|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    548|            it = prefix_result.first.base();
 6172|    548|            prefix_width = prefix_result.second;
 6173|    548|        }
 6174|  3.73k|        else {
 6175|  3.73k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  3.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  3.73k|            std::tie(it, prefix_width) = prefix_result;
 6177|  3.73k|        }
 6178|  4.28k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  4.28k|        std::ptrdiff_t value_width = 0;
 6182|  4.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 548, False: 3.73k]
  ------------------
 6183|    548|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 542]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    542|            const auto initial_width = specs.precision - prefix_width;
 6191|    542|            auto max_width_view =
 6192|    542|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    542|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    542|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    542|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    542|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    542|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 186, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    186|    }                                                  \
  |  |  |  | 3939|    542|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    356|            it = w_it.base();
 6195|    356|            value_width = initial_width - w_it.count();
 6196|    356|        }
 6197|  3.73k|        else {
 6198|  3.73k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  3.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  3.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.56k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.56k|    }                                                  \
  |  | 3939|  3.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  3.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.17k|                                             specs, value, loc));
 6200|       |
 6201|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 208, False: 964]
  ------------------
 6202|    208|                value_width = calculate_text_width(
 6203|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    208|                        .view());
 6205|    208|            }
 6206|  1.17k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.16k, False: 368]
  ------------------
 6211|  1.16k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.16k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.16k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.16k|                                 value_width));
 6215|  1.16k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.16k|        }
 6217|       |
 6218|  1.52k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 94, False: 1.43k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     94|    }
  ------------------
 6219|  1.52k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.43k|        return it;
 6221|  1.52k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  82.5k|{
 5835|  82.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 82.5k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  82.5k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 9.17k, False: 73.3k]
  ------------------
 5840|  9.17k|        return range.begin();
 5841|  9.17k|    }
 5842|       |
 5843|  73.3k|    return skip_classic_whitespace(range);
 5844|  82.5k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  9.17k|    {
 3579|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  9.17k|        return read_default_with_base(range, value, 10);
 3581|  9.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  9.17k|    {
 3543|  9.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  9.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  9.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 9.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  18.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  18.3k|                parse_integer_digits_without_thsep(
 3562|  18.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  18.3k|                    prefix_result.parsed_base));
 3564|       |
 3565|  18.3k|        auto buf = make_contiguous_buffer(
 3566|  18.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  18.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.17k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.17k|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  9.17k|    {
 3579|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  9.17k|        return read_default_with_base(range, value, 10);
 3581|  9.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  9.17k|    {
 3543|  9.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  9.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  9.17k|        if constexpr (!std::is_signed_v<T>) {
 3547|  9.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 9.17k]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|  9.17k|        }
 3554|       |
 3555|  9.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 9.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  18.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  18.3k|                parse_integer_digits_without_thsep(
 3562|  18.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  18.3k|                    prefix_result.parsed_base));
 3564|       |
 3565|  18.3k|        auto buf = make_contiguous_buffer(
 3566|  18.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  18.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.17k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.17k|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5786|  9.56k|    {
 5787|  9.56k|        return true;
 5788|  9.56k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|  9.47k|    {
 5805|  9.47k|        detail::format_specs specs{};
 5806|  9.47k|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|  9.47k|        std::uintptr_t intvalue{};
 5809|  9.47k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|  9.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.47k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.47k|    }                                                  \
  |  |  |  | 3939|  9.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|  9.47k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3150|  9.70k|    {
 3151|  9.70k|        return true;
 3152|  9.70k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|  9.17k|    {
 5542|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|  9.17k|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|  9.17k|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|  9.53k|    {
 5392|  9.53k|        scan_error err{scan_error::invalid_scanned_value,
 5393|  9.53k|                       "Failed to read boolean"};
 5394|       |
 5395|  9.53k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 9.48k, False: 46]
  ------------------
 5396|  9.48k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 9.48k]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|  9.48k|            else {
 5400|  9.48k|                err = r.error();
 5401|  9.48k|            }
 5402|  9.48k|        }
 5403|       |
 5404|  9.53k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 9.51k, False: 20]
  ------------------
 5405|  9.51k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 9.51k]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|  9.51k|            else {
 5409|  9.51k|                err = r.error();
 5410|  9.51k|            }
 5411|  9.51k|        }
 5412|       |
 5413|  9.53k|        return unexpected(err);
 5414|  9.53k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|  9.50k|    {
 5421|  9.50k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 9.50k]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|  9.50k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 9.50k]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|  9.50k|        return detail::unexpected_scan_error(
 5431|  9.50k|            scan_error::invalid_scanned_value,
 5432|  9.50k|            "Failed to read numeric boolean value: No match");
 5433|  9.50k|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|  9.51k|    {
 5439|  9.51k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 9.51k]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|  9.51k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 9.51k]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|  9.51k|        return detail::unexpected_scan_error(
 5449|  9.51k|            scan_error::invalid_scanned_value,
 5450|  9.51k|            "Failed to read textual boolean value: No match");
 5451|  9.51k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  19.0k|{
 2294|  19.0k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 130, False: 18.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    130|    }                                                  \
  |  |  |  | 3939|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  18.8k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  18.8k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|  18.8k|    else {
 2306|  18.8k|        auto range_it = range.begin();
 2307|  18.8k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 18.8k, False: 0]
  ------------------
 2308|  18.8k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 2309|  18.8k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|  18.8k|                return unexpected(parse_error::error);
 2311|  18.8k|            }
 2312|  18.8k|        }
 2313|      0|        return it;
 2314|  18.8k|    }
 2315|  18.8k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|  9.17k|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  9.17k|    {
 4185|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  9.17k|        float_reader<CharT> rd{};
 4188|  9.17k|        return read_impl<Range>(
 4189|  9.17k|            range, rd,
 4190|  9.17k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  9.17k|                return r.read_source(SCN_FWD(args)...);
 4192|  9.17k|            },
 4193|  9.17k|            value);
 4194|  9.17k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  9.17k|        : m_fptr([](storage fn,
  743|  9.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.17k|              cvref<T> obj = *get<T>(fn);
  745|  9.17k|              if constexpr (std::is_void_v<R>) {
  746|  9.17k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.17k|              }
  748|  9.17k|              else {
  749|  9.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.17k|              }
  751|  9.17k|          }),
  752|  9.17k|          m_storage(std::addressof(f))
  753|  9.17k|    {
  754|  9.17k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  9.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.17k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.17k|              else {
  749|  9.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.17k|              }
  751|  9.17k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  9.17k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.17k|        else if constexpr (std::is_object_v<T>) {
  688|  9.17k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.17k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  9.17k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  9.17k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  9.17k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  9.17k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  9.17k|        {
  662|  9.17k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  9.17k|    {
 5303|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  9.17k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  9.17k|    {
 5303|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  9.17k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  9.17k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  9.17k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  9.17k|            auto rd = make_reader<T, char_type>();
 5916|  9.17k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  9.17k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  9.17k|    {
 5903|  9.17k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  9.17k|                        .transform_error(make_eof_scan_error));
 5905|  9.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  9.17k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  9.17k|    {
 5303|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  9.17k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  9.17k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   156k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   156k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   156k|          m_current(m_range.begin())
 2988|   156k|    {
 2989|   156k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   642M|    {
 2998|   642M|        return m_range.end();
 2999|   642M|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|   321M|{
 1319|       |    // TODO: optimize
 1320|   321M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|   321M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|   321M|    auto res = get_next_code_point(str);
 1322|   321M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|   321M|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   321M|    {
 3013|   321M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   321M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   321M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   321M|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 321M]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   321M|        }
 3019|   321M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   321M|    static_cast<    \
  |  |  935|   321M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   321M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   184k|    {
 3003|   184k|        return ranges::subrange{begin(), end()};
 3004|   184k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6073|  1.36k|    {
 6074|  1.36k|        const bool need_skipped_width =
 6075|  1.36k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 34, False: 1.33k]
  |  Branch (6075:33): [True: 1.33k, False: 0]
  ------------------
 6076|  1.36k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  1.36k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 36, False: 1.33k]
  ------------------
 6080|  1.36k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 190, False: 1.14k]
  ------------------
 6081|    226|            return skip_fill(rng, specs.precision, specs.fill,
 6082|    226|                             need_skipped_width);
 6083|    226|        }
 6084|  1.14k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 1.09k, False: 44]
  |  Branch (6084:56): [True: 698, False: 398]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|    698|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 698, False: 0]
  ------------------
 6088|    698|                auto max_width_view = take_width(rng, specs.precision);
 6089|    698|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|    698|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    698|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    698|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 698]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    698|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    698|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|    698|                                  .transform_error(make_eof_scan_error));
 6091|    698|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|    698|            }
 6093|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|      0|                            make_eof_scan_error));
 6095|       |
 6096|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 0]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|      0|            return result_type{it, 0};
 6104|      0|        }
 6105|       |
 6106|    442|        return result_type{rng.begin(), 0};
 6107|  1.14k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5988|    226|{
 5989|    226|    using char_type = detail::char_t<Range>;
 5990|    226|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|    226|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 226, False: 0]
  ------------------
 5993|    226|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|    226|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|    226|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 0, False: 226]
  ------------------
 5997|      0|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 0, False: 0]
  ------------------
 6000|      0|                auto prefix_width =
 6001|      0|                    static_cast<std::ptrdiff_t>(
 6002|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|      0|                    ranges::distance(range.begin(), it);
 6004|      0|                return result_type{it, prefix_width};
 6005|      0|            }
 6006|      0|            return result_type{it, 0};
 6007|      0|        }
 6008|       |
 6009|    226|        auto max_width_view = take_width(range, max_width);
 6010|    226|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|    226|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 226, False: 0]
  ------------------
 6013|    226|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|    226|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|    226|    }
 6017|       |
 6018|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 0, False: 0]
  ------------------
 6020|      0|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 0, False: 0]
  ------------------
 6023|      0|            auto prefix_width =
 6024|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|      0|            return result_type{it, prefix_width};
 6027|      0|        }
 6028|      0|        return result_type{it, 0};
 6029|      0|    }
 6030|       |
 6031|      0|    auto max_width_view = take_width(range, max_width);
 6032|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 0, False: 0]
  ------------------
 6035|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|      0|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    226|        : m_fptr([](storage fn,
  743|    226|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    226|              cvref<T> obj = *get<T>(fn);
  745|    226|              if constexpr (std::is_void_v<R>) {
  746|    226|                  obj(static_cast<decltype(args)>(args)...);
  747|    226|              }
  748|    226|              else {
  749|    226|                  return obj(static_cast<decltype(args)>(args)...);
  750|    226|              }
  751|    226|          }),
  752|    226|          m_storage(std::addressof(f))
  753|    226|    {
  754|    226|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    272|    {
  684|    272|        if constexpr (std::is_const_v<T>) {
  685|    272|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    272|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5994|    272|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    226|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    226|        {
  667|    226|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    226|{
 2075|    226|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    226|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    226|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    226|    else {
 2060|    226|        auto first = range.begin();
 2061|    306|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 272, False: 34]
  ------------------
 2062|    272|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 192, False: 80]
  ------------------
 2063|    192|                return first;
 2064|    192|            }
 2065|    272|        }
 2066|     34|        return first;
 2067|    226|    }
 2068|    226|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2920|  1.62k|    {
 2921|  1.62k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  1.62k|                                      m_count};
 2923|  1.62k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2825|  5.64k|    {
 2826|  5.64k|        return view;
 2827|  5.64k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  1.62k|        : m_current(x), m_end(s), m_count(n)
 2481|  1.62k|    {
 2482|  1.62k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  1.00k|        {
 2892|  1.00k|            return !(y == x);
 2893|  1.00k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  2.40k|        {
 2879|  2.40k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 34, False: 2.36k]
  |  Branch (2879:39): [True: 34, False: 0]
  ------------------
 2880|  2.40k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 0, False: 2.36k]
  ------------------
 2881|  2.40k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 260, False: 2.10k]
  |  Branch (2881:39): [True: 260, False: 0]
  ------------------
 2882|  2.36k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 260]
  ------------------
 2883|  2.40k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|    294|    {
 2521|    294|        return m_multibyte_left;
 2522|    294|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|    260|    {
 2526|    260|        assert(count() != 0 || multibyte_left() != 0);
 2527|    260|        return _get_width_at_current_cp_start(
 2528|    260|                   _get_cp_length_at_current()) == 2;
 2529|    260|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  1.03k|    {
 2754|  1.03k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  1.03k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 1.03k, False: 0]
  ------------------
 2759|  1.03k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  1.03k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  1.03k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  1.03k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  1.03k|    {
 2748|  1.03k|        return static_cast<difference_type>(
 2749|  1.03k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  1.03k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2926|  2.40k|    {
 2927|  2.40k|        return sentinel<true>{m_base.get().end()};
 2928|  2.40k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  2.40k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  2.40k|    static_cast<    \
  |  |  935|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  1.66k|    {
 2533|  1.66k|        return *m_current;
 2534|  1.66k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|    778|    {
 2542|    778|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    778|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    778|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|    778|        _increment_current();
 2544|    778|        return *this;
 2545|    778|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|    778|    {
 2777|    778|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 778, False: 0]
  ------------------
 2778|    778|            auto cplen = _get_cp_length_at_current();
 2779|    778|            m_multibyte_left = cplen - 1;
 2780|    778|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|    778|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|    778|        ++m_current;
 2787|    778|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|    924|    {
 2943|    924|        return take_width_view{r, n};
 2944|    924|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2910|    924|        : m_base(base), m_count(count)
 2911|    924|    {
 2912|    924|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2822|    924|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|    698|{
 3066|    698|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 698, False: 0]
  ------------------
 3067|    698|        auto it = read_while_classic_space(range);
 3068|    698|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|    698|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 698]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|    698|        return it;
 3074|    698|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|    698|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|    698|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    698|    else {
 2225|    698|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    698|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    698|            return detail::is_cp_space(cp);
 2238|    698|        });
 2239|    698|    }
 2240|    698|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|    698|{
 2181|    698|    return read_until_code_point(range, std::not_fn(pred));
 2182|    698|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|    698|{
 2160|    698|    auto it = range.begin();
 2161|    698|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 698, False: 0]
  ------------------
 2162|    698|        const auto val =
 2163|    698|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|    698|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    698|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 698, False: 0]
  |  |  ------------------
  ------------------
 2165|    698|            const auto cp = detail::decode_code_point_exhaustive(
 2166|    698|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|    698|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 698, False: 0]
  ------------------
 2168|    698|                return it;
 2169|    698|            }
 2170|    698|        }
 2171|      0|        it = val.iterator;
 2172|      0|    }
 2173|       |
 2174|      0|    return it;
 2175|    698|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|    698|{
 1998|    698|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|    698|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    698|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|    698|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|    698|    auto it = range.begin();
 2002|    698|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|    698|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 698]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|    698|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 698, False: 0]
  ------------------
 2011|    698|        ++it;
 2012|    698|        return {it, string_type(1, *range.begin())};
 2013|    698|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|    698|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  1.39k|{
  945|  1.39k|    return is_range_eof(r.begin(), r.end());
  946|  1.39k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  1.39k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.39k|    {
  938|  1.39k|        return begin == end;
  939|  1.39k|    }
  940|  1.39k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|    698|    {
 1989|    698|        return !codepoint.empty();
 1990|    698|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|    698|        : m_fptr([](storage fn,
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|    698|              if constexpr (std::is_void_v<R>) {
  746|    698|                  obj(static_cast<decltype(args)>(args)...);
  747|    698|              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
  752|    698|          m_storage(std::addressof(f))
  753|    698|    {
  754|    698|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|    698|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    698|            return detail::is_cp_space(cp);
 2238|    698|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    698|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    698|        {
  662|    698|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    698|{
  951|    698|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 698]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    698|    return eof_error::good;
  955|    698|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  3.29k|    {
 2513|  3.29k|        return m_current;
 2514|  3.29k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  5.95k|    {
 2517|  5.95k|        return m_count;
 2518|  5.95k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|  8.12k|    {
 6074|  8.12k|        const bool need_skipped_width =
 6075|  8.12k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 3.40k, False: 4.71k]
  |  Branch (6075:33): [True: 0, False: 4.71k]
  ------------------
 6076|  8.12k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  8.12k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 54, False: 8.06k]
  ------------------
 6080|  8.12k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 258, False: 7.81k]
  ------------------
 6081|    312|            return skip_fill(rng, specs.precision, specs.fill,
 6082|    312|                             need_skipped_width);
 6083|    312|        }
 6084|  7.81k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 7.55k, False: 254]
  |  Branch (6084:56): [True: 2.27k, False: 5.28k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  2.27k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 2.27k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  4.54k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  2.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  4.54k|                            make_eof_scan_error));
 6095|       |
 6096|  4.54k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 1.81k, False: 458]
  ------------------
 6097|  1.81k|                return result_type{
 6098|  1.81k|                    it,
 6099|  1.81k|                    calculate_text_width(make_contiguous_buffer(
 6100|  1.81k|                                             ranges::subrange{rng.begin(), it})
 6101|  1.81k|                                             .view())};
 6102|  1.81k|            }
 6103|    458|            return result_type{it, 0};
 6104|  4.54k|        }
 6105|       |
 6106|  5.53k|        return result_type{rng.begin(), 0};
 6107|  7.81k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|  1.93k|    {
 6116|  1.93k|        const bool need_skipped_width =
 6117|  1.93k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 598, False: 1.33k]
  |  Branch (6117:33): [True: 450, False: 888]
  ------------------
 6118|  1.93k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  1.93k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 74, False: 1.86k]
  ------------------
 6121|  1.93k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 154, False: 1.70k]
  ------------------
 6122|    228|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 78, False: 150]
  ------------------
 6123|    228|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 44, False: 34]
  ------------------
 6124|     44|                return result_type{rng.begin(), 0};
 6125|     44|            }
 6126|    184|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|    184|                             specs.fill, need_skipped_width);
 6128|    228|        }
 6129|  1.70k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 1.69k, False: 18]
  ------------------
 6130|  1.70k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 1.46k, False: 222]
  ------------------
 6131|  1.70k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 442, False: 1.02k]
  |  Branch (6131:35): [True: 414, False: 28]
  ------------------
 6132|  1.46k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 318, False: 736]
  ------------------
 6133|  1.05k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 202, False: 116]
  ------------------
 6134|    616|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 202, False: 414]
  ------------------
 6135|    202|                const auto initial_width =
 6136|    202|                    specs.precision - prefix_width - value_width;
 6137|    202|                auto max_width_view = take_width(rng, initial_width);
 6138|    202|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    202|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    202|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    202|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    202|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    202|                                  .transform_error(make_eof_scan_error));
 6140|    202|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|    202|            }
 6142|    828|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    414|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    414|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    414|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    414|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 414]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    414|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    828|                            make_eof_scan_error));
 6144|       |
 6145|    828|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 414, False: 0]
  ------------------
 6146|    414|                return result_type{
 6147|    414|                    it,
 6148|    414|                    calculate_text_width(make_contiguous_buffer(
 6149|    414|                                             ranges::subrange{rng.begin(), it})
 6150|    414|                                             .view())};
 6151|    414|            }
 6152|      0|            return result_type{it, 0};
 6153|    828|        }
 6154|  1.09k|        return result_type{rng.begin(), 0};
 6155|  1.70k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6225|  2.38k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.38k|            auto rd = make_reader<T, char_type>();
 6231|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.93k, False: 456]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.93k|    }
  ------------------
 6232|    456|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    456|    {
 6161|    456|        const bool need_skipped_width =
 6162|    456|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 236, False: 220]
  |  Branch (6162:33): [True: 124, False: 96]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    456|        auto it = rng.begin();
 6166|    456|        std::ptrdiff_t prefix_width = 0;
 6167|    456|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 126, False: 330]
  ------------------
 6168|    126|            auto max_width_view = take_width(rng, specs.precision);
 6169|    126|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    126|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    126|            it = prefix_result.first.base();
 6172|    126|            prefix_width = prefix_result.second;
 6173|    126|        }
 6174|    330|        else {
 6175|    330|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    330|            std::tie(it, prefix_width) = prefix_result;
 6177|    330|        }
 6178|    456|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    456|        std::ptrdiff_t value_width = 0;
 6182|    456|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 126, False: 330]
  ------------------
 6183|    126|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 124]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    124|            const auto initial_width = specs.precision - prefix_width;
 6191|    124|            auto max_width_view =
 6192|    124|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    124|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 124, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    124|    }                                                  \
  |  |  |  | 3939|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    330|        else {
 6198|    330|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 330, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    330|    }                                                  \
  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6225|  2.38k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.38k|            auto rd = make_reader<T, char_type>();
 6231|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.93k, False: 456]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.93k|    }
  ------------------
 6232|    456|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    456|    {
 6161|    456|        const bool need_skipped_width =
 6162|    456|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 236, False: 220]
  |  Branch (6162:33): [True: 124, False: 96]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    456|        auto it = rng.begin();
 6166|    456|        std::ptrdiff_t prefix_width = 0;
 6167|    456|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 126, False: 330]
  ------------------
 6168|    126|            auto max_width_view = take_width(rng, specs.precision);
 6169|    126|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    126|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    126|            it = prefix_result.first.base();
 6172|    126|            prefix_width = prefix_result.second;
 6173|    126|        }
 6174|    330|        else {
 6175|    330|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    330|            std::tie(it, prefix_width) = prefix_result;
 6177|    330|        }
 6178|    456|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    456|        std::ptrdiff_t value_width = 0;
 6182|    456|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 126, False: 330]
  ------------------
 6183|    126|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 124]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    124|            const auto initial_width = specs.precision - prefix_width;
 6191|    124|            auto max_width_view =
 6192|    124|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    124|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 124, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    124|    }                                                  \
  |  |  |  | 3939|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    330|        else {
 6198|    330|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 330, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    330|    }                                                  \
  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6225|  2.34k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.34k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.34k|            auto rd = make_reader<T, char_type>();
 6231|  2.34k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.34k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.95k, False: 388]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.95k|    }
  ------------------
 6232|    388|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.34k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5791|  2.34k|    {
 5792|  2.34k|        reader_error_handler eh{};
 5793|  2.34k|        detail::check_pointer_type_specs(specs, eh);
 5794|  2.34k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.95k, False: 388]
  |  |  ------------------
  ------------------
 5795|  1.95k|            return detail::unexpected_scan_error(
 5796|  1.95k|                scan_error::invalid_format_string, eh.m_msg);
 5797|  1.95k|        }
 5798|    388|        return {};
 5799|  2.34k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6160|    388|    {
 6161|    388|        const bool need_skipped_width =
 6162|    388|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 232, False: 156]
  |  Branch (6162:33): [True: 88, False: 68]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    388|        auto it = rng.begin();
 6166|    388|        std::ptrdiff_t prefix_width = 0;
 6167|    388|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 90, False: 298]
  ------------------
 6168|     90|            auto max_width_view = take_width(rng, specs.precision);
 6169|     90|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|     90|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|     90|            it = prefix_result.first.base();
 6172|     90|            prefix_width = prefix_result.second;
 6173|     90|        }
 6174|    298|        else {
 6175|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    298|            std::tie(it, prefix_width) = prefix_result;
 6177|    298|        }
 6178|    388|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    388|        std::ptrdiff_t value_width = 0;
 6182|    388|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 90, False: 298]
  ------------------
 6183|     90|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 88]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|     88|            const auto initial_width = specs.precision - prefix_width;
 6191|     88|            auto max_width_view =
 6192|     88|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|     88|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     88|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     88|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     88|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 88, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     88|    }                                                  \
  |  |  |  | 3939|     88|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    298|        else {
 6198|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    298|    }                                                  \
  |  | 3939|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|     88|    {
 5822|     88|        SCN_UNUSED(specs);
  ------------------
  |  |  915|     88|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|     88|        return read_default(range, value, loc);
 5824|     88|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|     88|    {
 5805|     88|        detail::format_specs specs{};
 5806|     88|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|     88|        std::uintptr_t intvalue{};
 5809|     88|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     88|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     88|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     88|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 88, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     88|    }                                                  \
  |  |  |  | 3939|     88|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|     88|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    298|    {
 5822|    298|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    298|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    298|        return read_default(range, value, loc);
 5824|    298|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6225|  2.38k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.38k|            auto rd = make_reader<T, char_type>();
 6231|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.85k, False: 530]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.85k|    }
  ------------------
 6232|    530|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.38k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.38k|    {
 3156|  2.38k|        reader_error_handler eh{};
 3157|  2.38k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.85k, False: 530]
  |  |  ------------------
  ------------------
 3159|  1.85k|            return detail::unexpected_scan_error(
 3160|  1.85k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.85k|        }
 3162|    530|        return {};
 3163|  2.38k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3167|  2.38k|    {
 3168|  2.38k|        return static_cast<Derived&>(*this);
 3169|  2.38k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|  2.38k|    {
 5535|  2.38k|        detail::check_bool_type_specs(specs, eh);
 5536|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    530|    {
 6161|    530|        const bool need_skipped_width =
 6162|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 250, False: 280]
  |  Branch (6162:33): [True: 146, False: 134]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    530|        auto it = rng.begin();
 6166|    530|        std::ptrdiff_t prefix_width = 0;
 6167|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 150, False: 380]
  ------------------
 6168|    150|            auto max_width_view = take_width(rng, specs.precision);
 6169|    150|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    150|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    150|            it = prefix_result.first.base();
 6172|    150|            prefix_width = prefix_result.second;
 6173|    150|        }
 6174|    380|        else {
 6175|    380|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    380|            std::tie(it, prefix_width) = prefix_result;
 6177|    380|        }
 6178|    530|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    530|        std::ptrdiff_t value_width = 0;
 6182|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 150, False: 380]
  ------------------
 6183|    150|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 146]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    146|            const auto initial_width = specs.precision - prefix_width;
 6191|    146|            auto max_width_view =
 6192|    146|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    146|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 146, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    146|    }                                                  \
  |  |  |  | 3939|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    380|        else {
 6198|    380|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 380, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    380|    }                                                  \
  |  | 3939|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    146|    {
 5554|    146|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    146|#if !SCN_DISABLE_LOCALE
 5557|    146|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 20, False: 126]
  ------------------
 5558|     20|            return rd.read_localized(range, loc, value);
 5559|     20|        }
 5560|    126|#endif
 5561|       |
 5562|    126|        return rd.read_classic(range, value);
 5563|    146|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5566|    526|    {
 5567|    526|        SCN_GCC_COMPAT_PUSH
 5568|    526|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    526|        switch (specs.type) {
 5571|     70|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 70, False: 456]
  ------------------
 5572|     70|                return bool_reader_base::allow_text;
 5573|       |
 5574|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 14, False: 512]
  ------------------
 5575|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 8, False: 518]
  ------------------
 5576|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 8, False: 518]
  ------------------
 5577|     40|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 10, False: 516]
  ------------------
 5578|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 12, False: 514]
  ------------------
 5579|     62|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 10, False: 516]
  ------------------
 5580|     62|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    394|            default:
  ------------------
  |  Branch (5582:13): [True: 394, False: 132]
  ------------------
 5583|    394|                return bool_reader_base::allow_text |
 5584|    394|                       bool_reader_base::allow_numeric;
 5585|    526|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    526|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     20|    {
 5465|     20|        scan_error err{scan_error::invalid_scanned_value,
 5466|     20|                       "Failed to read boolean"};
 5467|       |
 5468|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 18, False: 2]
  ------------------
 5469|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 18]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     18|            else {
 5473|     18|                err = r.error();
 5474|     18|            }
 5475|     18|        }
 5476|       |
 5477|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 10, False: 10]
  ------------------
 5478|     10|            auto stdloc = loc.get<std::locale>();
 5479|     10|            const auto& numpunct =
 5480|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     10|            const auto truename = numpunct.truename();
 5482|     10|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     10|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 10]
  ------------------
 5485|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     10|            else {
 5489|     10|                err = r.error();
 5490|     10|            }
 5491|     10|        }
 5492|       |
 5493|     20|        return unexpected(err);
 5494|     20|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    124|    {
 5421|    124|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 124]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    124|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 124]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    124|        return detail::unexpected_scan_error(
 5431|    124|            scan_error::invalid_scanned_value,
 5432|    124|            "Failed to read numeric boolean value: No match");
 5433|    124|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    248|{
 2246|    248|    auto it = read_code_unit(range);
 2247|    248|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 248]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    248|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 248, False: 0]
  |  |  ------------------
  ------------------
 2252|    248|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    248|        return unexpected(parse_error::error);
 2254|    248|    }
 2255|       |
 2256|      0|    return *it;
 2257|    248|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5504|     10|    {
 5505|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     10|        const auto shorter = std::pair{
 5507|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 10, False: 0]
  ------------------
 5508|     10|        const auto longer = std::pair{
 5509|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 10]
  ------------------
 5510|       |
 5511|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 10]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 10]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     10|        return detail::unexpected_scan_error(
 5521|     10|            scan_error::invalid_scanned_value,
 5522|     10|            "Failed to read textual boolean: No match");
 5523|     10|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     20|{
 2279|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|      6|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2285|      6|        return unexpected(parse_error::error);
 2286|      6|    }
 2287|      0|    return it;
 2288|      6|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    232|{
 1956|    232|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    232|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    232|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    232|    else {
 1967|    232|        auto it = range.begin();
 1968|    232|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 232]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.10k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 940, False: 162]
  ------------------
 1973|    940|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 70, False: 870]
  ------------------
 1974|     70|                return unexpected(eof_error::eof);
 1975|     70|            }
 1976|    940|        }
 1977|       |
 1978|    162|        return it;
 1979|    232|    }
 1980|    232|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|    232|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    232|    else {
 1116|    232|        return 0;
 1117|    232|    }
 1118|    232|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    126|    {
 5392|    126|        scan_error err{scan_error::invalid_scanned_value,
 5393|    126|                       "Failed to read boolean"};
 5394|       |
 5395|    126|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 106, False: 20]
  ------------------
 5396|    106|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 106]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    106|            else {
 5400|    106|                err = r.error();
 5401|    106|            }
 5402|    106|        }
 5403|       |
 5404|    126|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 106, False: 20]
  ------------------
 5405|    106|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 106]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    106|            else {
 5409|    106|                err = r.error();
 5410|    106|            }
 5411|    106|        }
 5412|       |
 5413|    126|        return unexpected(err);
 5414|    126|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    106|    {
 5439|    106|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 106]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    106|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 106]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    106|        return detail::unexpected_scan_error(
 5449|    106|            scan_error::invalid_scanned_value,
 5450|    106|            "Failed to read textual boolean value: No match");
 5451|    106|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    212|{
 2294|    212|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 56, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     56|    }                                                  \
  |  |  |  | 3939|    212|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    156|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    156|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|    156|    else {
 2306|    156|        auto range_it = range.begin();
 2307|    156|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 156, False: 0]
  ------------------
 2308|    156|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156, False: 0]
  |  |  ------------------
  ------------------
 2309|    156|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|    156|                return unexpected(parse_error::error);
 2311|    156|            }
 2312|    156|        }
 2313|      0|        return it;
 2314|    156|    }
 2315|    156|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    380|    {
 5554|    380|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    380|#if !SCN_DISABLE_LOCALE
 5557|    380|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 18, False: 362]
  ------------------
 5558|     18|            return rd.read_localized(range, loc, value);
 5559|     18|        }
 5560|    362|#endif
 5561|       |
 5562|    362|        return rd.read_classic(range, value);
 5563|    380|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     18|    {
 5465|     18|        scan_error err{scan_error::invalid_scanned_value,
 5466|     18|                       "Failed to read boolean"};
 5467|       |
 5468|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 16, False: 2]
  ------------------
 5469|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 16]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     16|            else {
 5473|     16|                err = r.error();
 5474|     16|            }
 5475|     16|        }
 5476|       |
 5477|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 6, False: 12]
  ------------------
 5478|      6|            auto stdloc = loc.get<std::locale>();
 5479|      6|            const auto& numpunct =
 5480|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|      6|            const auto truename = numpunct.truename();
 5482|      6|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|      6|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 6]
  ------------------
 5485|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|      6|            else {
 5489|      6|                err = r.error();
 5490|      6|            }
 5491|      6|        }
 5492|       |
 5493|     18|        return unexpected(err);
 5494|     18|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5504|      6|    {
 5505|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|      6|        const auto shorter = std::pair{
 5507|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 6, False: 0]
  ------------------
 5508|      6|        const auto longer = std::pair{
 5509|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 6]
  ------------------
 5510|       |
 5511|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 6]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 6]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|      6|        return detail::unexpected_scan_error(
 5521|      6|            scan_error::invalid_scanned_value,
 5522|      6|            "Failed to read textual boolean: No match");
 5523|      6|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     12|{
 2279|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     10|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2285|     10|        return unexpected(parse_error::error);
 2286|     10|    }
 2287|      0|    return it;
 2288|     10|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6225|  2.34k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.34k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.34k|            auto rd = make_reader<T, char_type>();
 6231|  2.34k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.34k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.92k, False: 424]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.92k|    }
  ------------------
 6232|    424|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.34k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    424|    {
 6161|    424|        const bool need_skipped_width =
 6162|    424|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 234, False: 190]
  |  Branch (6162:33): [True: 106, False: 84]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    424|        auto it = rng.begin();
 6166|    424|        std::ptrdiff_t prefix_width = 0;
 6167|    424|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 108, False: 316]
  ------------------
 6168|    108|            auto max_width_view = take_width(rng, specs.precision);
 6169|    108|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    108|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    108|            it = prefix_result.first.base();
 6172|    108|            prefix_width = prefix_result.second;
 6173|    108|        }
 6174|    316|        else {
 6175|    316|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    316|            std::tie(it, prefix_width) = prefix_result;
 6177|    316|        }
 6178|    424|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    424|        std::ptrdiff_t value_width = 0;
 6182|    424|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 108, False: 316]
  ------------------
 6183|    108|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 106]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    106|            const auto initial_width = specs.precision - prefix_width;
 6191|    106|            auto max_width_view =
 6192|    106|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    106|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 86]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|     86|            it = w_it.base();
 6195|     86|            value_width = initial_width - w_it.count();
 6196|     86|        }
 6197|    316|        else {
 6198|    316|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 20, False: 296]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     20|    }                                                  \
  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    296|                                             specs, value, loc));
 6200|       |
 6201|    296|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 230, False: 66]
  ------------------
 6202|    230|                value_width = calculate_text_width(
 6203|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    230|                        .view());
 6205|    230|            }
 6206|    296|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    382|        std::ptrdiff_t postfix_width = 0;
 6210|    382|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 382, False: 0]
  ------------------
 6211|    382|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    382|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 382]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    382|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    382|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    382|                                 value_width));
 6215|    382|            std::tie(it, postfix_width) = postfix_result;
 6216|    382|        }
 6217|       |
 6218|    382|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    382|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 228, False: 154]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    228|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    228|    }
  ------------------
 6219|    382|            specs, prefix_width, value_width, postfix_width));
 6220|    154|        return it;
 6221|    382|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6225|  2.38k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.38k|            auto rd = make_reader<T, char_type>();
 6231|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.95k, False: 430]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.95k|    }
  ------------------
 6232|    430|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    430|    {
 6161|    430|        const bool need_skipped_width =
 6162|    430|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 240, False: 190]
  |  Branch (6162:33): [True: 108, False: 82]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    430|        auto it = rng.begin();
 6166|    430|        std::ptrdiff_t prefix_width = 0;
 6167|    430|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 112, False: 318]
  ------------------
 6168|    112|            auto max_width_view = take_width(rng, specs.precision);
 6169|    112|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 112]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    112|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    112|            it = prefix_result.first.base();
 6172|    112|            prefix_width = prefix_result.second;
 6173|    112|        }
 6174|    318|        else {
 6175|    318|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    318|            std::tie(it, prefix_width) = prefix_result;
 6177|    318|        }
 6178|    430|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    430|        std::ptrdiff_t value_width = 0;
 6182|    430|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 112, False: 318]
  ------------------
 6183|    112|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 108]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    108|            const auto initial_width = specs.precision - prefix_width;
 6191|    108|            auto max_width_view =
 6192|    108|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    108|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 108, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    108|    }                                                  \
  |  |  |  | 3939|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    318|        else {
 6198|    318|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 318, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    318|    }                                                  \
  |  | 3939|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  2.34k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.34k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.34k|            auto rd = make_reader<T, char_type>();
 6231|  2.34k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.34k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6232|  2.26k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.34k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|  2.26k|    {
 6161|  2.26k|        const bool need_skipped_width =
 6162|  2.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 670, False: 1.59k]
  |  Branch (6162:33): [True: 212, False: 1.38k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  2.26k|        auto it = rng.begin();
 6166|  2.26k|        std::ptrdiff_t prefix_width = 0;
 6167|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 218, False: 2.05k]
  ------------------
 6168|    218|            auto max_width_view = take_width(rng, specs.precision);
 6169|    218|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    218|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    218|            it = prefix_result.first.base();
 6172|    218|            prefix_width = prefix_result.second;
 6173|    218|        }
 6174|  2.05k|        else {
 6175|  2.05k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  2.05k|            std::tie(it, prefix_width) = prefix_result;
 6177|  2.05k|        }
 6178|  2.26k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  2.26k|        std::ptrdiff_t value_width = 0;
 6182|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 218, False: 2.05k]
  ------------------
 6183|    218|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 212]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    212|            const auto initial_width = specs.precision - prefix_width;
 6191|    212|            auto max_width_view =
 6192|    212|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    212|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 64, False: 148]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     64|    }                                                  \
  |  |  |  | 3939|    212|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    148|            it = w_it.base();
 6195|    148|            value_width = initial_width - w_it.count();
 6196|    148|        }
 6197|  2.05k|        else {
 6198|  2.05k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.40k, False: 642]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.40k|    }                                                  \
  |  | 3939|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    642|                                             specs, value, loc));
 6200|       |
 6201|    642|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 306, False: 336]
  ------------------
 6202|    306|                value_width = calculate_text_width(
 6203|    306|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    306|                        .view());
 6205|    306|            }
 6206|    642|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    790|        std::ptrdiff_t postfix_width = 0;
 6210|    790|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 518, False: 272]
  ------------------
 6211|    518|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 518]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    518|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    518|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    518|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    518|                                 value_width));
 6215|    518|            std::tie(it, postfix_width) = postfix_result;
 6216|    518|        }
 6217|       |
 6218|    790|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    790|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 84, False: 706]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     84|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     84|    }
  ------------------
 6219|    790|            specs, prefix_width, value_width, postfix_width));
 6220|    706|        return it;
 6221|    790|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  2.34k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.34k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.34k|            auto rd = make_reader<T, char_type>();
 6231|  2.34k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.34k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6232|  2.26k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.34k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6160|  2.26k|    {
 6161|  2.26k|        const bool need_skipped_width =
 6162|  2.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 670, False: 1.59k]
  |  Branch (6162:33): [True: 212, False: 1.38k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  2.26k|        auto it = rng.begin();
 6166|  2.26k|        std::ptrdiff_t prefix_width = 0;
 6167|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 218, False: 2.05k]
  ------------------
 6168|    218|            auto max_width_view = take_width(rng, specs.precision);
 6169|    218|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    218|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    218|            it = prefix_result.first.base();
 6172|    218|            prefix_width = prefix_result.second;
 6173|    218|        }
 6174|  2.05k|        else {
 6175|  2.05k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  2.05k|            std::tie(it, prefix_width) = prefix_result;
 6177|  2.05k|        }
 6178|  2.26k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  2.26k|        std::ptrdiff_t value_width = 0;
 6182|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 218, False: 2.05k]
  ------------------
 6183|    218|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 212]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    212|            const auto initial_width = specs.precision - prefix_width;
 6191|    212|            auto max_width_view =
 6192|    212|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    212|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 64, False: 148]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     64|    }                                                  \
  |  |  |  | 3939|    212|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    148|            it = w_it.base();
 6195|    148|            value_width = initial_width - w_it.count();
 6196|    148|        }
 6197|  2.05k|        else {
 6198|  2.05k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.40k, False: 642]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.40k|    }                                                  \
  |  | 3939|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    642|                                             specs, value, loc));
 6200|       |
 6201|    642|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 306, False: 336]
  ------------------
 6202|    306|                value_width = calculate_text_width(
 6203|    306|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    306|                        .view());
 6205|    306|            }
 6206|    642|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    790|        std::ptrdiff_t postfix_width = 0;
 6210|    790|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 518, False: 272]
  ------------------
 6211|    518|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 518]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    518|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    518|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    518|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    518|                                 value_width));
 6215|    518|            std::tie(it, postfix_width) = postfix_result;
 6216|    518|        }
 6217|       |
 6218|    790|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    790|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 84, False: 706]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     84|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     84|    }
  ------------------
 6219|    790|            specs, prefix_width, value_width, postfix_width));
 6220|    706|        return it;
 6221|    790|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  2.34k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.34k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.34k|            auto rd = make_reader<T, char_type>();
 6231|  2.34k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.34k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6232|  2.26k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.34k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|  2.26k|    {
 6161|  2.26k|        const bool need_skipped_width =
 6162|  2.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 670, False: 1.59k]
  |  Branch (6162:33): [True: 212, False: 1.38k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  2.26k|        auto it = rng.begin();
 6166|  2.26k|        std::ptrdiff_t prefix_width = 0;
 6167|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 218, False: 2.05k]
  ------------------
 6168|    218|            auto max_width_view = take_width(rng, specs.precision);
 6169|    218|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    218|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    218|            it = prefix_result.first.base();
 6172|    218|            prefix_width = prefix_result.second;
 6173|    218|        }
 6174|  2.05k|        else {
 6175|  2.05k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  2.05k|            std::tie(it, prefix_width) = prefix_result;
 6177|  2.05k|        }
 6178|  2.26k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  2.26k|        std::ptrdiff_t value_width = 0;
 6182|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 218, False: 2.05k]
  ------------------
 6183|    218|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 212]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    212|            const auto initial_width = specs.precision - prefix_width;
 6191|    212|            auto max_width_view =
 6192|    212|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    212|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 64, False: 148]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     64|    }                                                  \
  |  |  |  | 3939|    212|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    148|            it = w_it.base();
 6195|    148|            value_width = initial_width - w_it.count();
 6196|    148|        }
 6197|  2.05k|        else {
 6198|  2.05k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.40k, False: 642]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.40k|    }                                                  \
  |  | 3939|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    642|                                             specs, value, loc));
 6200|       |
 6201|    642|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 306, False: 336]
  ------------------
 6202|    306|                value_width = calculate_text_width(
 6203|    306|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    306|                        .view());
 6205|    306|            }
 6206|    642|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    790|        std::ptrdiff_t postfix_width = 0;
 6210|    790|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 518, False: 272]
  ------------------
 6211|    518|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 518]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    518|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    518|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    518|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    518|                                 value_width));
 6215|    518|            std::tie(it, postfix_width) = postfix_result;
 6216|    518|        }
 6217|       |
 6218|    790|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    790|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 84, False: 706]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     84|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     84|    }
  ------------------
 6219|    790|            specs, prefix_width, value_width, postfix_width));
 6220|    706|        return it;
 6221|    790|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    630|    {
 3543|    630|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    630|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|    630|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 630]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.26k|                parse_integer_digits_without_thsep(
 3562|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.26k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.26k|        auto buf = make_contiguous_buffer(
 3566|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 630, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    630|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    630|    {
 3543|    630|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    630|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|    630|        if constexpr (!std::is_signed_v<T>) {
 3547|    630|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 630]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|    630|        }
 3554|       |
 3555|    630|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 630]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.26k|                parse_integer_digits_without_thsep(
 3562|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.26k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.26k|        auto buf = make_contiguous_buffer(
 3566|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 630, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    630|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  4.35k|{
   69|  4.35k|    scn::fuzz::run(data, size);
   70|  4.35k|    return 0;
   71|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.35k|{
   52|  4.35k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.35k]
  |  Branch (52:35): [True: 0, False: 4.35k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.35k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.35k|    run_for_source(sv);
   59|  4.35k|    run_for_source(wsv_reinterpret);
   60|  4.35k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.35k, False: 0]
  ------------------
   61|  4.35k|        run_for_source(wsv_transcode);
   62|  4.35k|    }
   63|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.35k|{
   37|  4.35k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.35k|    run_for_type<char_type>(source);
   40|  4.35k|    run_for_type<int>(source);
   41|  4.35k|    run_for_type<unsigned>(source);
   42|  4.35k|    run_for_type<double>(source);
   43|  4.35k|    run_for_type<bool>(source);
   44|  4.35k|    run_for_type<void*>(source);
   45|  4.35k|    run_for_type<std::string>(source);
   46|  4.35k|    run_for_type<std::wstring>(source);
   47|  4.35k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.35k|{
   25|  4.35k|    {
   26|  4.35k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.35k|    }
   28|  4.35k|    {
   29|  4.35k|        auto _ =
   30|  4.35k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.35k|    }
   32|  4.35k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.70k|{
   37|  8.70k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.70k|    run_for_type<char_type>(source);
   40|  8.70k|    run_for_type<int>(source);
   41|  8.70k|    run_for_type<unsigned>(source);
   42|  8.70k|    run_for_type<double>(source);
   43|  8.70k|    run_for_type<bool>(source);
   44|  8.70k|    run_for_type<void*>(source);
   45|  8.70k|    run_for_type<std::string>(source);
   46|  8.70k|    run_for_type<std::wstring>(source);
   47|  8.70k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.70k|{
   25|  8.70k|    {
   26|  8.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.70k|    }
   28|  8.70k|    {
   29|  8.70k|        auto _ =
   30|  8.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.70k|    }
   32|  8.70k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.35k|{
   52|  4.35k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.35k|    string_buffer.resize(size);
   56|  4.35k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.35k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.35k|    const auto wsv_reinterpret_size =
   61|  4.35k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 91, False: 4.26k]
  ------------------
   62|  4.35k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.35k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.35k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.35k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.35k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.35k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.35k|}

