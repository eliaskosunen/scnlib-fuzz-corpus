_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  7.12M|{
 3807|  7.12M|    if constexpr (sizeof(U) == 1) {
 3808|  7.12M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|       |    else {
 3814|       |        // utf-32
 3815|       |        static_assert(sizeof(U) == 4);
 3816|       |        SCN_UNUSED(ch);
 3817|       |        return 1;
 3818|       |    }
 3819|  7.12M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  7.12M|{
 3771|  7.12M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  7.12M|    SCN_GCC_COMPAT_PUSH
 3774|  7.12M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  7.12M|    constexpr char lengths[] =
 3776|  7.12M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  7.12M|        "\1\1\1\1\1\1\1\1"
 3778|  7.12M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  7.12M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  7.12M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  7.12M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  7.12M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  7.12M|    SCN_GCC_COMPAT_POP
 3785|  7.12M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  6.58M|{
 4013|  6.58M|    if constexpr (sizeof(CharT) == 1) {
 4014|  6.58M|        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|       |    else {
 4020|       |        SCN_EXPECT(input.size() == 1);
 4021|       |        auto cp = static_cast<char32_t>(input.front());
 4022|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|       |            return invalid_code_point;
 4024|       |        }
 4025|       |        return cp;
 4026|       |    }
 4027|  6.58M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  6.58M|{
 3826|  6.58M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  6.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  6.58M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  6.58M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  6.58M|    };
 3831|       |
 3832|  6.58M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 5.89M, False: 695k]
  ------------------
 3833|  5.89M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 108, False: 5.89M]
  ------------------
 3834|    108|            SCN_UNLIKELY_ATTR
 3835|    108|            return invalid_code_point;
 3836|    108|        }
 3837|  5.89M|        return static_cast<char32_t>(input[0]);
 3838|  5.89M|    }
 3839|       |
 3840|   695k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 635k, False: 60.0k]
  ------------------
 3841|   635k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 24, False: 635k]
  ------------------
 3842|     24|            SCN_UNLIKELY_ATTR
 3843|     24|            return invalid_code_point;
 3844|     24|        }
 3845|   635k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 16.4k, False: 618k]
  ------------------
 3846|  16.4k|            SCN_UNLIKELY_ATTR
 3847|  16.4k|            return invalid_code_point;
 3848|  16.4k|        }
 3849|       |
 3850|   618k|        char32_t cp{};
 3851|   618k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   618k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   618k|        return cp;
 3854|   635k|    }
 3855|       |
 3856|  60.0k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 47.4k, False: 12.5k]
  ------------------
 3857|  47.4k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 18, False: 47.4k]
  ------------------
 3858|     18|            SCN_UNLIKELY_ATTR
 3859|     18|            return invalid_code_point;
 3860|     18|        }
 3861|  47.4k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 7.41k, False: 40.0k]
  ------------------
 3862|  47.4k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 418, False: 39.6k]
  ------------------
 3863|  7.82k|            SCN_UNLIKELY_ATTR
 3864|  7.82k|            return invalid_code_point;
 3865|  7.82k|        }
 3866|       |
 3867|  39.6k|        char32_t cp{};
 3868|  39.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  39.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  39.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  39.6k|        return cp;
 3872|  47.4k|    }
 3873|       |
 3874|  12.5k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 12.5k, False: 0]
  ------------------
 3875|  12.5k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 12.5k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  12.5k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 991, False: 11.5k]
  ------------------
 3880|    991|            SCN_UNLIKELY_ATTR
 3881|    991|            return invalid_code_point;
 3882|    991|        }
 3883|  11.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 5.73k, False: 5.84k]
  ------------------
 3884|  11.5k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 435, False: 5.40k]
  ------------------
 3885|  11.5k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 366, False: 5.04k]
  ------------------
 3886|  6.53k|            SCN_UNLIKELY_ATTR
 3887|  6.53k|            return invalid_code_point;
 3888|  6.53k|        }
 3889|       |
 3890|  5.04k|        char32_t cp{};
 3891|  5.04k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  5.04k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  5.04k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  5.04k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  5.04k|        return cp;
 3896|  11.5k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   745k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   745k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   745k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  3.31M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  3.31M|    else {
 3705|  3.31M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  3.31M|                                       to_address(first), to_address(last)))};
 3707|  3.31M|    }
 3708|  3.31M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  10.0M|{
  326|  10.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  10.0M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  10.0M|{
  304|  10.0M|    return p;
  305|  10.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  2.44M|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  2.44M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  2.44M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.44M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  2.44M|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  2.44M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  16.9k|{
 5135|  16.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  16.9k|                  "Scan argument types must be default constructible");
 5137|  16.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  16.9k|                  "Scan argument types must be Destructible");
 5139|  16.9k|    static_assert(
 5140|  16.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  16.9k|        "Scan argument types must not be references");
 5142|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  16.9k|    {
 4988|       |        if constexpr (std::is_same_v<char_type, char> &&
 4989|  16.9k|                      !is_type_disabled<char_type>) {
 4990|  16.9k|            return val;
 4991|       |        }
 4992|       |        else if constexpr (is_type_disabled<char_type>) {
 4993|       |            return unscannable_disabled{val};
 4994|       |        }
 4995|       |        else {
 4996|       |            SCN_UNUSED(val);
 4997|       |            return unscannable_char{};
 4998|       |        }
 4999|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  16.9k|{
 5089|  16.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  16.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  16.9k|    constexpr bool scannable_char =
 5093|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  16.9k|    static_assert(scannable_char,
 5095|  16.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  16.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  16.9k|    constexpr bool scannable_const =
 5099|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  16.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  16.9k|    constexpr bool scannable_disabled =
 5103|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  16.9k|    static_assert(scannable_disabled,
 5105|  16.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  16.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  16.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  16.9k|    static_assert(
 5110|  16.9k|        scannable,
 5111|  16.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  16.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  16.9k|    return arg_value{arg};
 5115|  16.9k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4900|  16.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  16.9k|    {
 4902|  16.9k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  76.3k|{
 8654|  76.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  76.3k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  76.3k|{
 8591|  76.3k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  76.3k|    auto result = vscan_impl(buffer, format, args);
 8594|  76.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.4k, False: 1.92k]
  |  |  ------------------
  ------------------
 8595|  74.4k|        return unexpected(result.error());
 8596|  74.4k|    }
 8597|  1.92k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  76.3k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   152k|{
 4720|   152k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   152k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   152k|                  "\n"
 4724|   152k|                  "Unsupported range type given as input to a scanning "
 4725|   152k|                  "function.\n"
 4726|   152k|                  "A range needs to have a character type (value type) "
 4727|   152k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   152k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   152k|                  "to be included.\n"
 4730|   152k|                  "See the scnlib documentation for more details.");
 4731|   152k|    static_assert(
 4732|   152k|        !std::is_same_v<T, custom_char_traits>,
 4733|   152k|        "\n"
 4734|   152k|        "Unsupported range type given as input to a scanning "
 4735|   152k|        "function.\n"
 4736|   152k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   152k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   152k|        "not supported.");
 4739|   152k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   152k|                  "\n"
 4741|   152k|                  "Unsupported range type given as input to a scanning "
 4742|   152k|                  "function.\n"
 4743|   152k|                  "file_marker_found cannot be used as an "
 4744|   152k|                  "source range type to scn::scan.\n"
 4745|   152k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   152k|                  "and do not provide an explicit source range, "
 4747|   152k|                  "or use scn::scan with a FILE* directly.");
 4748|   152k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   152k|                  "\n"
 4750|   152k|                  "Unsupported range type given as input to a scanning "
 4751|   152k|                  "function.\n"
 4752|   152k|                  "In order to be scannable, a range needs to satisfy "
 4753|   152k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   152k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   152k|                  "\n"
 4756|   152k|                  "Unsupported range type given as input to a scanning "
 4757|   152k|                  "function.\n"
 4758|   152k|                  "A range needs to model forward_range and have a valid "
 4759|   152k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   152k|                  "Examples of scannable ranges are std::string, "
 4761|   152k|                  "std::string_view, "
 4762|   152k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   152k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   152k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   152k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   152k|{
 4612|   152k|    if constexpr (is_valid_char_type<CharT>) {
 4613|   152k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|       |    }
 4616|       |    else {
 4617|       |        return invalid_char_type{};
 4618|       |    }
 4619|   152k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   461k|    {
 1598|   461k|        return has_value();
 1599|   461k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   923k|    {
  485|   923k|        return m_has_value;
  486|   923k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   456k|    {
 1604|   456k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   456k|        return this->get_unexpected().error();
 1606|   456k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   456k|    {
  468|   456k|        return m_unexpected;
  469|   456k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  2.75M|    {
  361|  2.75M|        return m_unexpected;
  362|  2.75M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  1.55M|        : m_unexpected(std::forward<Err>(e))
  346|  1.55M|    {
  347|  1.55M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.55M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.55M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   148k|        : base(unexpect, std::move(e.error())),
 1474|   148k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   148k|    {
 1476|   148k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   148k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   148k|          m_has_value(false)
  446|   148k|    {
  447|   148k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  1.60M|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.60M|    {
  356|  1.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.60M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   152k|    {
 1177|   152k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  3.84k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  3.84k|                      ranges::iterator_t<SourceRange>>) {
 5925|  3.84k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  3.84k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.84k|    {
 2724|  3.84k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.84k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.84k|    {
 2705|  3.84k|        return decay_copy(t.begin());
 2706|  3.84k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  65.3k|{
 1949|  65.3k|    return SCN_FWD(t);
  ------------------
  |  |  930|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  65.3k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  3.84k|{
 5910|  3.84k|    return ranges::end(source);
 5911|  3.84k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.84k|    {
 2781|  3.84k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.84k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.84k|    {
 2763|  3.84k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.84k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|   910k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   910k|    static_cast<    \
  |  |  929|   910k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   910k|    static_cast<    \
  |  |  929|   910k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   910k|    {
 3316|   910k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  5.52k|    {
 1653|  5.52k|        return value();
 1654|  5.52k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  5.52k|    {
 1627|  5.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.52k|        return this->get_value();
 1629|  5.52k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.52k|    {
  451|  5.52k|        return m_value;
  452|  5.52k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  3.84k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.84k|    {
 1430|  3.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  3.84k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.84k|    {
  437|  3.84k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5476|   152k|        : m_desc(desc), m_builtin_values(data)
 5477|   152k|    {
 5478|   152k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 214]
  |  |  ------------------
  ------------------
 8821|  16.7k|        return unexpected(result.error());
 8822|  16.7k|    }
 8823|    214|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   152k|    {
 1598|   152k|        return has_value();
 1599|   152k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   305k|    {
  485|   305k|        return m_has_value;
  486|   305k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   148k|    {
 1604|   148k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   148k|        return this->get_unexpected().error();
 1606|   148k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   148k|    {
  468|   148k|        return m_unexpected;
  469|   148k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.7k|        : base(unexpect, std::move(e.error())),
 1474|  16.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.7k|    {
 1476|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.7k|          m_has_value(false)
  446|  16.7k|    {
  447|  16.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.84k|    {
 1653|  3.84k|        return value();
 1654|  3.84k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  3.84k|    {
 1627|  3.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.84k|        return this->get_value();
 1629|  3.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.84k|    {
  451|  3.84k|        return m_value;
  452|  3.84k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5828|    214|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    214|    {
 5830|    214|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5679|  3.84k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.84k|    static_cast<    \
  |  |  929|  3.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  3.84k|    {
 5681|  3.84k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5614|    214|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|    214|    {
 5616|    214|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    214|        : base(std::in_place, std::forward<U>(val)),
 1428|    214|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    214|    {
 1430|    214|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    214|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    214|    {
  437|    214|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   152k|{
 7691|   152k|    return s;
 7692|   152k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   152k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  76.3k|{
 8672|  76.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  76.3k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  76.3k|{
 8607|  76.3k|#if !SCN_DISABLE_LOCALE
 8608|  76.3k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  76.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  76.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  76.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  76.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.4k, False: 1.92k]
  |  |  ------------------
  ------------------
 8615|  74.4k|        return unexpected(result.error());
 8616|  74.4k|    }
 8617|  1.92k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  76.3k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  50.8k|{
 5135|  50.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  50.8k|                  "Scan argument types must be default constructible");
 5137|  50.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  50.8k|                  "Scan argument types must be Destructible");
 5139|  50.8k|    static_assert(
 5140|  50.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  50.8k|        "Scan argument types must not be references");
 5142|  50.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  50.8k|{
 5089|  50.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  50.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  50.8k|    constexpr bool scannable_char =
 5093|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  50.8k|    static_assert(scannable_char,
 5095|  50.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  50.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  50.8k|    constexpr bool scannable_const =
 5099|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  50.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  50.8k|    constexpr bool scannable_disabled =
 5103|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  50.8k|    static_assert(scannable_disabled,
 5105|  50.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  50.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  50.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  50.8k|    static_assert(
 5110|  50.8k|        scannable,
 5111|  50.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  50.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  50.8k|    return arg_value{arg};
 5115|  50.8k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4900|  50.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  50.8k|    {
 4902|  50.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  16.9k|        return unexpected(result.error());
 8822|  16.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  50.8k|{
 5135|  50.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  50.8k|                  "Scan argument types must be default constructible");
 5137|  50.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  50.8k|                  "Scan argument types must be Destructible");
 5139|  50.8k|    static_assert(
 5140|  50.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  50.8k|        "Scan argument types must not be references");
 5142|  50.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  50.8k|{
 5089|  50.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  50.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  50.8k|    constexpr bool scannable_char =
 5093|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  50.8k|    static_assert(scannable_char,
 5095|  50.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  50.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  50.8k|    constexpr bool scannable_const =
 5099|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  50.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  50.8k|    constexpr bool scannable_disabled =
 5103|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  50.8k|    static_assert(scannable_disabled,
 5105|  50.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  50.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  50.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  50.8k|    static_assert(
 5110|  50.8k|        scannable,
 5111|  50.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  50.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  50.8k|    return arg_value{arg};
 5115|  50.8k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4900|  50.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  50.8k|    {
 4902|  50.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  16.9k|        return unexpected(result.error());
 8822|  16.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  50.8k|{
 5135|  50.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  50.8k|                  "Scan argument types must be default constructible");
 5137|  50.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  50.8k|                  "Scan argument types must be Destructible");
 5139|  50.8k|    static_assert(
 5140|  50.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  50.8k|        "Scan argument types must not be references");
 5142|  50.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  50.8k|{
 5089|  50.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  50.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  50.8k|    constexpr bool scannable_char =
 5093|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  50.8k|    static_assert(scannable_char,
 5095|  50.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  50.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  50.8k|    constexpr bool scannable_const =
 5099|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  50.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  50.8k|    constexpr bool scannable_disabled =
 5103|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  50.8k|    static_assert(scannable_disabled,
 5105|  50.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  50.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  50.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  50.8k|    static_assert(
 5110|  50.8k|        scannable,
 5111|  50.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  50.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  50.8k|    return arg_value{arg};
 5115|  50.8k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4900|  50.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  50.8k|    {
 4902|  50.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  16.9k|        return unexpected(result.error());
 8822|  16.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  50.8k|{
 5135|  50.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  50.8k|                  "Scan argument types must be default constructible");
 5137|  50.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  50.8k|                  "Scan argument types must be Destructible");
 5139|  50.8k|    static_assert(
 5140|  50.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  50.8k|        "Scan argument types must not be references");
 5142|  50.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  50.8k|{
 5089|  50.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  50.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  50.8k|    constexpr bool scannable_char =
 5093|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  50.8k|    static_assert(scannable_char,
 5095|  50.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  50.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  50.8k|    constexpr bool scannable_const =
 5099|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  50.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  50.8k|    constexpr bool scannable_disabled =
 5103|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  50.8k|    static_assert(scannable_disabled,
 5105|  50.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  50.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  50.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  50.8k|    static_assert(
 5110|  50.8k|        scannable,
 5111|  50.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  50.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  50.8k|    return arg_value{arg};
 5115|  50.8k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4900|  50.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  50.8k|    {
 4902|  50.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  16.9k|        return unexpected(result.error());
 8822|  16.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  50.8k|{
 5135|  50.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  50.8k|                  "Scan argument types must be default constructible");
 5137|  50.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  50.8k|                  "Scan argument types must be Destructible");
 5139|  50.8k|    static_assert(
 5140|  50.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  50.8k|        "Scan argument types must not be references");
 5142|  50.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  50.8k|{
 5089|  50.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  50.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  50.8k|    constexpr bool scannable_char =
 5093|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  50.8k|    static_assert(scannable_char,
 5095|  50.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  50.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  50.8k|    constexpr bool scannable_const =
 5099|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  50.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  50.8k|    constexpr bool scannable_disabled =
 5103|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  50.8k|    static_assert(scannable_disabled,
 5105|  50.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  50.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  50.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  50.8k|    static_assert(
 5110|  50.8k|        scannable,
 5111|  50.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  50.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  50.8k|    return arg_value{arg};
 5115|  50.8k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4900|  50.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  50.8k|    {
 4902|  50.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  16.9k|        return unexpected(result.error());
 8822|  16.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  50.8k|{
 5135|  50.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  50.8k|                  "Scan argument types must be default constructible");
 5137|  50.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  50.8k|                  "Scan argument types must be Destructible");
 5139|  50.8k|    static_assert(
 5140|  50.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  50.8k|        "Scan argument types must not be references");
 5142|  50.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  50.8k|{
 5089|  50.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  50.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  50.8k|    constexpr bool scannable_char =
 5093|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  50.8k|    static_assert(scannable_char,
 5095|  50.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  50.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  50.8k|    constexpr bool scannable_const =
 5099|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  50.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  50.8k|    constexpr bool scannable_disabled =
 5103|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  50.8k|    static_assert(scannable_disabled,
 5105|  50.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  50.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  50.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  50.8k|    static_assert(
 5110|  50.8k|        scannable,
 5111|  50.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  50.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  50.8k|    return arg_value{arg};
 5115|  50.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4900|  50.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  50.8k|    {
 4902|  50.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 1.21k]
  |  |  ------------------
  ------------------
 8821|  15.7k|        return unexpected(result.error());
 8822|  15.7k|    }
 8823|  1.21k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  15.7k|        : base(unexpect, std::move(e.error())),
 1474|  15.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.7k|    {
 1476|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  15.7k|        : m_has_value(false)
  625|  15.7k|    {
  626|  15.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  15.7k|    {
  689|  15.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  15.7k|                                  std::forward<Args>(args)...);
  691|  15.7k|        m_has_value = false;
  692|  15.7k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  98.4k|{
  392|  98.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  98.4k|        T(std::forward<Args>(args)...);
  394|  98.4k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  31.5k|    {
  718|  31.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  31.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  31.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  31.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5828|  1.21k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|  1.21k|    {
 5830|  1.21k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5614|  1.74k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.74k|    static_cast<    \
  |  |  929|  1.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.74k|    {
 5616|  1.74k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.21k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.21k|    {
 1430|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.21k|        : m_has_value(true)
  615|  1.21k|    {
  616|  1.21k|        construct(std::forward<Args>(args)...);
  617|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.21k|    {
  682|  1.21k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.21k|        m_has_value = true;
  684|  1.21k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.21k|{
  392|  1.21k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.21k|        T(std::forward<Args>(args)...);
  394|  1.21k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  1.21k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.42k|    {
  706|  2.42k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.42k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.42k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  2.42k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  16.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  16.9k|    {
  631|  16.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.21k, False: 15.7k]
  ------------------
  632|  1.21k|            destroy_value();
  633|  1.21k|        }
  634|  15.7k|        else {
  635|  15.7k|            destroy_unexpected();
  636|  15.7k|        }
  637|  16.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  16.9k|    {
  675|  16.9k|        return m_has_value;
  676|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.21k|    {
  696|  1.21k|        scn::detail::destroy_at(value_ptr());
  697|  1.21k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.21k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.21k|    else {
  404|  1.21k|        p->~T();
  405|  1.21k|    }
  406|  1.21k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  15.7k|    {
  700|  15.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  15.7k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  98.4k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  98.4k|    else {
  404|  98.4k|        p->~T();
  405|  98.4k|    }
  406|  98.4k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  50.8k|{
 5135|  50.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  50.8k|                  "Scan argument types must be default constructible");
 5137|  50.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  50.8k|                  "Scan argument types must be Destructible");
 5139|  50.8k|    static_assert(
 5140|  50.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  50.8k|        "Scan argument types must not be references");
 5142|  50.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  50.8k|{
 5089|  50.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  50.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  50.8k|    constexpr bool scannable_char =
 5093|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  50.8k|    static_assert(scannable_char,
 5095|  50.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  50.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  50.8k|    constexpr bool scannable_const =
 5099|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  50.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  50.8k|    constexpr bool scannable_disabled =
 5103|  50.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  50.8k|    static_assert(scannable_disabled,
 5105|  50.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  50.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  50.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  50.8k|    static_assert(
 5110|  50.8k|        scannable,
 5111|  50.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  50.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  50.8k|    return arg_value{arg};
 5115|  50.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4900|  50.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  50.8k|    {
 4902|  50.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 1.21k]
  |  |  ------------------
  ------------------
 8821|  15.7k|        return unexpected(result.error());
 8822|  15.7k|    }
 8823|  1.21k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  15.7k|        : base(unexpect, std::move(e.error())),
 1474|  15.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.7k|    {
 1476|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  15.7k|        : m_has_value(false)
  625|  15.7k|    {
  626|  15.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  15.7k|    {
  689|  15.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  15.7k|                                  std::forward<Args>(args)...);
  691|  15.7k|        m_has_value = false;
  692|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  31.5k|    {
  718|  31.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  31.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  31.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  31.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5828|  1.21k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|  1.21k|    {
 5830|  1.21k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5614|  1.74k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.74k|    static_cast<    \
  |  |  929|  1.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.74k|    {
 5616|  1.74k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.21k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.21k|    {
 1430|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.21k|        : m_has_value(true)
  615|  1.21k|    {
  616|  1.21k|        construct(std::forward<Args>(args)...);
  617|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.21k|    {
  682|  1.21k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.21k|        m_has_value = true;
  684|  1.21k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.21k|{
  392|  1.21k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.21k|        T(std::forward<Args>(args)...);
  394|  1.21k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  1.21k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.42k|    {
  706|  2.42k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.42k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.42k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  2.42k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  16.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  16.9k|    {
  631|  16.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.21k, False: 15.7k]
  ------------------
  632|  1.21k|            destroy_value();
  633|  1.21k|        }
  634|  15.7k|        else {
  635|  15.7k|            destroy_unexpected();
  636|  15.7k|        }
  637|  16.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  16.9k|    {
  675|  16.9k|        return m_has_value;
  676|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.21k|    {
  696|  1.21k|        scn::detail::destroy_at(value_ptr());
  697|  1.21k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.21k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.21k|    else {
  404|  1.21k|        p->~T();
  405|  1.21k|    }
  406|  1.21k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  15.7k|    {
  700|  15.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  15.7k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  8.48k|{
 8867|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  8.48k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  16.9k|{
 5396|  16.9k|    detail::check_scan_arg_types<Args...>();
 5397|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  16.9k|{
 5135|  16.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  16.9k|                  "Scan argument types must be default constructible");
 5137|  16.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  16.9k|                  "Scan argument types must be Destructible");
 5139|  16.9k|    static_assert(
 5140|  16.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  16.9k|        "Scan argument types must not be references");
 5142|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5347|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  16.9k|    {
 5349|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  16.9k|    {
 5360|  16.9k|        return {detail::make_arg<
 5361|  16.9k|            kind, Context,
 5362|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  16.9k|{
 5170|  16.9k|    return make_value<Context>(value).ref_value;
 5171|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  16.9k|{
 5120|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  16.9k|                                  needs_context_tag>) {
 5124|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  16.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  16.9k|    {                                                                        \
 4959|  16.9k|        return val;                                                          \
 4960|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  16.9k|{
 5089|  16.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  16.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  16.9k|    constexpr bool scannable_char =
 5093|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  16.9k|    static_assert(scannable_char,
 5095|  16.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  16.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  16.9k|    constexpr bool scannable_const =
 5099|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  16.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  16.9k|    constexpr bool scannable_disabled =
 5103|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  16.9k|    static_assert(scannable_disabled,
 5105|  16.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  16.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  16.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  16.9k|    static_assert(
 5110|  16.9k|        scannable,
 5111|  16.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  16.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  16.9k|    return arg_value{arg};
 5115|  16.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4900|  16.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  16.9k|    {
 4902|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  16.9k|    {
 7975|  16.9k|        return m_str;
 7976|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  16.9k|    {
 5426|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  16.9k|    {
 5379|  16.9k|        return m_argptrs;
 5380|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  16.9k|{
 8820|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 1.21k]
  |  |  ------------------
  ------------------
 8821|  15.7k|        return unexpected(result.error());
 8822|  15.7k|    }
 8823|  1.21k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  15.7k|        : base(unexpect, std::move(e.error())),
 1474|  15.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.7k|    {
 1476|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  15.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.7k|          m_has_value(false)
  446|  15.7k|    {
  447|  15.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5828|  1.21k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|  1.21k|    {
 5830|  1.21k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5614|  1.21k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.21k|    {
 5616|  1.21k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  1.21k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.21k|    {
 1430|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  1.21k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.21k|    {
  437|  1.21k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  16.9k|    {
 5374|  16.9k|        return m_args;
 5375|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|  16.9k|        : m_str(r.str)
 7970|  16.9k|    {
 7971|  16.9k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  8.48k|{
 8934|  8.48k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  8.48k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  8.48k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.48k|    static_cast<    \
  |  |  929|  8.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  33.9k|{
 5135|  33.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  33.9k|                  "Scan argument types must be default constructible");
 5137|  33.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  33.9k|                  "Scan argument types must be Destructible");
 5139|  33.9k|    static_assert(
 5140|  33.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  33.9k|        "Scan argument types must not be references");
 5142|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  33.9k|{
 5089|  33.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  33.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  33.9k|    constexpr bool scannable_char =
 5093|  33.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  33.9k|    static_assert(scannable_char,
 5095|  33.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  33.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  33.9k|    constexpr bool scannable_const =
 5099|  33.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  33.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  33.9k|    constexpr bool scannable_disabled =
 5103|  33.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  33.9k|    static_assert(scannable_disabled,
 5105|  33.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  33.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  33.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  33.9k|    static_assert(
 5110|  33.9k|        scannable,
 5111|  33.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  33.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  33.9k|    return arg_value{arg};
 5115|  33.9k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4900|  33.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  33.9k|    {
 4902|  33.9k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   152k|{
 8591|   152k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   152k|    auto result = vscan_impl(buffer, format, args);
 8594|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151k, False: 842]
  |  |  ------------------
  ------------------
 8595|   151k|        return unexpected(result.error());
 8596|   151k|    }
 8597|    842|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    842|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   152k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   305k|{
 4720|   305k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   305k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   305k|                  "\n"
 4724|   305k|                  "Unsupported range type given as input to a scanning "
 4725|   305k|                  "function.\n"
 4726|   305k|                  "A range needs to have a character type (value type) "
 4727|   305k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   305k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   305k|                  "to be included.\n"
 4730|   305k|                  "See the scnlib documentation for more details.");
 4731|   305k|    static_assert(
 4732|   305k|        !std::is_same_v<T, custom_char_traits>,
 4733|   305k|        "\n"
 4734|   305k|        "Unsupported range type given as input to a scanning "
 4735|   305k|        "function.\n"
 4736|   305k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   305k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   305k|        "not supported.");
 4739|   305k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   305k|                  "\n"
 4741|   305k|                  "Unsupported range type given as input to a scanning "
 4742|   305k|                  "function.\n"
 4743|   305k|                  "file_marker_found cannot be used as an "
 4744|   305k|                  "source range type to scn::scan.\n"
 4745|   305k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   305k|                  "and do not provide an explicit source range, "
 4747|   305k|                  "or use scn::scan with a FILE* directly.");
 4748|   305k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   305k|                  "\n"
 4750|   305k|                  "Unsupported range type given as input to a scanning "
 4751|   305k|                  "function.\n"
 4752|   305k|                  "In order to be scannable, a range needs to satisfy "
 4753|   305k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   305k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   305k|                  "\n"
 4756|   305k|                  "Unsupported range type given as input to a scanning "
 4757|   305k|                  "function.\n"
 4758|   305k|                  "A range needs to model forward_range and have a valid "
 4759|   305k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   305k|                  "Examples of scannable ranges are std::string, "
 4761|   305k|                  "std::string_view, "
 4762|   305k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   305k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   305k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   305k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   305k|{
 4612|   305k|    if constexpr (is_valid_char_type<CharT>) {
 4613|   305k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|       |    }
 4616|       |    else {
 4617|       |        return invalid_char_type{};
 4618|       |    }
 4619|   305k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   303k|        : base(unexpect, std::move(e.error())),
 1474|   303k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   303k|    {
 1476|   303k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   303k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   303k|          m_has_value(false)
  446|   303k|    {
  447|   303k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   305k|    {
 1177|   305k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  1.68k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.68k|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.68k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.68k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.68k|    {
 2724|  1.68k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.68k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.68k|    {
 2705|  1.68k|        return decay_copy(t.begin());
 2706|  1.68k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  28.3k|{
 1949|  28.3k|    return SCN_FWD(t);
  ------------------
  |  |  930|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  28.3k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|  1.68k|{
 5910|  1.68k|    return ranges::end(source);
 5911|  1.68k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.68k|    {
 2781|  1.68k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.68k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.68k|    {
 2763|  1.68k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.68k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|   487k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   487k|    static_cast<    \
  |  |  929|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   487k|    static_cast<    \
  |  |  929|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   487k|    {
 3316|   487k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.68k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.68k|    {
 1430|  1.68k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.68k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.68k|    {
  437|  1.68k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5476|   305k|        : m_desc(desc), m_builtin_values(data)
 5477|   305k|    {
 5478|   305k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.8k, False: 94]
  |  |  ------------------
  ------------------
 8821|  33.8k|        return unexpected(result.error());
 8822|  33.8k|    }
 8823|     94|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   305k|    {
 1598|   305k|        return has_value();
 1599|   305k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   610k|    {
  485|   610k|        return m_has_value;
  486|   610k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   303k|    {
 1604|   303k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   303k|        return this->get_unexpected().error();
 1606|   303k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   303k|    {
  468|   303k|        return m_unexpected;
  469|   303k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.8k|        : base(unexpect, std::move(e.error())),
 1474|  33.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.8k|    {
 1476|  33.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.8k|          m_has_value(false)
  446|  33.8k|    {
  447|  33.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.68k|    {
 1653|  1.68k|        return value();
 1654|  1.68k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.68k|    {
 1627|  1.68k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.68k|        return this->get_value();
 1629|  1.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.68k|    {
  451|  1.68k|        return m_value;
  452|  1.68k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5828|     94|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|     94|    {
 5830|     94|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5679|  1.68k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.68k|    static_cast<    \
  |  |  929|  1.68k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.68k|    {
 5681|  1.68k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5614|     94|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|     94|    {
 5616|     94|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|     94|        : base(std::in_place, std::forward<U>(val)),
 1428|     94|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|     94|    {
 1430|     94|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|     94|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|     94|    {
  437|     94|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   305k|{
 7696|   305k|    return s;
 7697|   305k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   305k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   152k|{
 8607|   152k|#if !SCN_DISABLE_LOCALE
 8608|   152k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   152k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   152k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   152k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151k, False: 842]
  |  |  ------------------
  ------------------
 8615|   151k|        return unexpected(result.error());
 8616|   151k|    }
 8617|    842|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    842|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   152k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  33.9k|        return unexpected(result.error());
 8822|  33.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.9k|        : base(unexpect, std::move(e.error())),
 1474|  33.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.9k|    {
 1476|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.9k|          m_has_value(false)
  446|  33.9k|    {
  447|  33.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  33.9k|        return unexpected(result.error());
 8822|  33.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.9k|        : base(unexpect, std::move(e.error())),
 1474|  33.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.9k|    {
 1476|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.9k|          m_has_value(false)
  446|  33.9k|    {
  447|  33.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  33.9k|        return unexpected(result.error());
 8822|  33.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.9k|        : base(unexpect, std::move(e.error())),
 1474|  33.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.9k|    {
 1476|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.9k|          m_has_value(false)
  446|  33.9k|    {
  447|  33.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  33.9k|        return unexpected(result.error());
 8822|  33.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.9k|        : base(unexpect, std::move(e.error())),
 1474|  33.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.9k|    {
 1476|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.9k|          m_has_value(false)
  446|  33.9k|    {
  447|  33.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  33.9k|        return unexpected(result.error());
 8822|  33.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  33.9k|        : base(unexpect, std::move(e.error())),
 1474|  33.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.9k|    {
 1476|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  33.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.9k|          m_has_value(false)
  446|  33.9k|    {
  447|  33.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.3k, False: 530]
  |  |  ------------------
  ------------------
 8821|  33.3k|        return unexpected(result.error());
 8822|  33.3k|    }
 8823|    530|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  33.3k|        : base(unexpect, std::move(e.error())),
 1474|  33.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.3k|    {
 1476|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  33.3k|        : m_has_value(false)
  625|  33.3k|    {
  626|  33.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  33.3k|    {
  689|  33.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  33.3k|                                  std::forward<Args>(args)...);
  691|  33.3k|        m_has_value = false;
  692|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  66.7k|    {
  718|  66.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  66.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  66.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  66.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5828|    530|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    530|    {
 5830|    530|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    530|        : base(std::in_place, std::forward<U>(val)),
 1428|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    530|    {
 1430|    530|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    530|        : m_has_value(true)
  615|    530|    {
  616|    530|        construct(std::forward<Args>(args)...);
  617|    530|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    530|    {
  682|    530|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    530|        m_has_value = true;
  684|    530|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    530|{
  392|    530|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    530|        T(std::forward<Args>(args)...);
  394|    530|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    530|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.06k|    {
  706|  1.06k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.06k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.06k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  1.06k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  33.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  33.9k|    {
  631|  33.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 530, False: 33.3k]
  ------------------
  632|    530|            destroy_value();
  633|    530|        }
  634|  33.3k|        else {
  635|  33.3k|            destroy_unexpected();
  636|  33.3k|        }
  637|  33.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  33.9k|    {
  675|  33.9k|        return m_has_value;
  676|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    530|    {
  696|    530|        scn::detail::destroy_at(value_ptr());
  697|    530|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    530|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    530|    else {
  404|    530|        p->~T();
  405|    530|    }
  406|    530|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  33.3k|    {
  700|  33.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  33.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.3k, False: 530]
  |  |  ------------------
  ------------------
 8821|  33.3k|        return unexpected(result.error());
 8822|  33.3k|    }
 8823|    530|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  33.3k|        : base(unexpect, std::move(e.error())),
 1474|  33.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.3k|    {
 1476|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  33.3k|        : m_has_value(false)
  625|  33.3k|    {
  626|  33.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  33.3k|    {
  689|  33.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  33.3k|                                  std::forward<Args>(args)...);
  691|  33.3k|        m_has_value = false;
  692|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  66.7k|    {
  718|  66.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  66.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  66.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  66.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5828|    530|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    530|    {
 5830|    530|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    530|        : base(std::in_place, std::forward<U>(val)),
 1428|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    530|    {
 1430|    530|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    530|        : m_has_value(true)
  615|    530|    {
  616|    530|        construct(std::forward<Args>(args)...);
  617|    530|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    530|    {
  682|    530|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    530|        m_has_value = true;
  684|    530|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    530|{
  392|    530|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    530|        T(std::forward<Args>(args)...);
  394|    530|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    530|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.06k|    {
  706|  1.06k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.06k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.06k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.06k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  33.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  33.9k|    {
  631|  33.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 530, False: 33.3k]
  ------------------
  632|    530|            destroy_value();
  633|    530|        }
  634|  33.3k|        else {
  635|  33.3k|            destroy_unexpected();
  636|  33.3k|        }
  637|  33.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  33.9k|    {
  675|  33.9k|        return m_has_value;
  676|  33.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    530|    {
  696|    530|        scn::detail::destroy_at(value_ptr());
  697|    530|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    530|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    530|    else {
  404|    530|        p->~T();
  405|    530|    }
  406|    530|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  33.3k|    {
  700|  33.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  33.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  33.9k|{
 5396|  33.9k|    detail::check_scan_arg_types<Args...>();
 5397|  33.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  33.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  33.9k|{
 5135|  33.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  33.9k|                  "Scan argument types must be default constructible");
 5137|  33.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  33.9k|                  "Scan argument types must be Destructible");
 5139|  33.9k|    static_assert(
 5140|  33.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  33.9k|        "Scan argument types must not be references");
 5142|  33.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5347|  33.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  33.9k|    {
 5349|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  33.9k|    {
 5360|  33.9k|        return {detail::make_arg<
 5361|  33.9k|            kind, Context,
 5362|  33.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  33.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  33.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  33.9k|{
 5170|  33.9k|    return make_value<Context>(value).ref_value;
 5171|  33.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  33.9k|{
 5120|  33.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  33.9k|                                  needs_context_tag>) {
 5124|  33.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  33.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  33.9k|    {                                                                        \
 4959|  33.9k|        return val;                                                          \
 4960|  33.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  33.9k|{
 5089|  33.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  33.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  33.9k|    constexpr bool scannable_char =
 5093|  33.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  33.9k|    static_assert(scannable_char,
 5095|  33.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  33.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  33.9k|    constexpr bool scannable_const =
 5099|  33.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  33.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  33.9k|    constexpr bool scannable_disabled =
 5103|  33.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  33.9k|    static_assert(scannable_disabled,
 5105|  33.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  33.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  33.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  33.9k|    static_assert(
 5110|  33.9k|        scannable,
 5111|  33.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  33.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  33.9k|    return arg_value{arg};
 5115|  33.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4900|  33.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  33.9k|    {
 4902|  33.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  33.9k|    {
 7975|  33.9k|        return m_str;
 7976|  33.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  33.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  33.9k|    {
 5426|  33.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  33.9k|    {
 5379|  33.9k|        return m_argptrs;
 5380|  33.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  33.9k|{
 8820|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.3k, False: 530]
  |  |  ------------------
  ------------------
 8821|  33.3k|        return unexpected(result.error());
 8822|  33.3k|    }
 8823|    530|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  33.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  33.3k|        : base(unexpect, std::move(e.error())),
 1474|  33.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.3k|    {
 1476|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  33.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.3k|          m_has_value(false)
  446|  33.3k|    {
  447|  33.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5828|    530|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    530|    {
 5830|    530|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5614|    530|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    530|    static_cast<    \
  |  |  929|    530|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|    530|    {
 5616|    530|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    530|        : base(std::in_place, std::forward<U>(val)),
 1428|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    530|    {
 1430|    530|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|    530|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    530|    {
  437|    530|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  33.9k|    {
 5374|  33.9k|        return m_args;
 5375|  33.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  33.9k|        : m_str(r.str)
 7970|  33.9k|    {
 7971|  33.9k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3566|   843k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3567|   843k|    {
 3568|   843k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   843k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   843k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  4.04M|    {
 3574|  4.04M|        return m_code == good;
 3575|  4.04M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   130k|    {
 3585|   130k|        return m_code;
 3586|   130k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  6.13k|    {
 6181|  6.13k|        return m_size;
 6182|  6.13k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  4.57k|    {
 6222|  4.57k|        SCN_GCC_COMPAT_PUSH
 6223|  4.57k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  4.57k|        switch (type) {
 6225|  2.00k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 2.00k, False: 2.56k]
  ------------------
 6226|  2.00k|                return 10;
 6227|     74|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 74, False: 4.50k]
  ------------------
 6228|     74|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 4.57k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 4.53k]
  ------------------
 6233|     38|                return 2;
 6234|    106|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 106, False: 4.46k]
  ------------------
 6235|    106|                return 8;
 6236|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 40, False: 4.53k]
  ------------------
 6237|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 44, False: 4.53k]
  ------------------
 6238|     84|                return 10;
 6239|  2.26k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.26k, False: 2.31k]
  ------------------
 6240|  2.26k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 4.57k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  4.57k|        }
 6246|  4.57k|        SCN_GCC_COMPAT_POP
 6247|  4.57k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|   139k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  15.3k|    {
 6263|  15.3k|        m_specs.align = align;
 6264|  15.3k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    536|    {
 6272|    536|        if constexpr (!SCN_DISABLE_LOCALE) {
 6273|    536|            m_specs.localized = true;
 6274|       |        }
 6275|       |        else {
 6276|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|       |        }
 6278|    536|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  22.0k|    {
 6282|  22.0k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 22.0k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  22.0k|        m_specs.width = width;
 6289|  22.0k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  14.1k|    {
 6292|  14.1k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 68, False: 14.0k]
  ------------------
 6293|       |            // clang-format off
 6294|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     68|        }
 6297|       |
 6298|  14.0k|        m_specs.precision = prec;
 6299|  14.0k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   200k|    {
 6303|   200k|        m_specs.type = type;
 6304|   200k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  2.18M|    {
 6308|  2.18M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  2.18M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.86M, False: 315k]
  |  |  ------------------
  ------------------
 6310|  1.86M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  1.86M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  1.86M|        }
 6313|   315k|        else {
 6314|   315k|            m_specs.charset_has_nonascii = true;
 6315|   315k|        }
 6316|  2.18M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  13.4k|    {
 6320|  13.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  13.4k|        const auto end_value = static_cast<unsigned>(end);
 6322|  13.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  13.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  13.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.37k, False: 6.04k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  7.37k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  7.37k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   459k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 452k, False: 7.37k]
  ------------------
 6329|   452k|                m_specs.charset_literals[v / 8] |=
 6330|   452k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   452k|            }
 6332|  7.37k|        }
 6333|  6.04k|        else {
 6334|  6.04k|            m_specs.charset_has_nonascii = true;
 6335|  6.04k|        }
 6336|  13.4k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  3.11k|    {
 6340|  3.11k|        m_specs.charset_is_inverted = true;
 6341|  3.11k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|   103k|    {
 6359|   103k|        m_specs.regexp_flags = flags;
 6360|   103k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  11.6k|    {
 6365|  11.6k|        SCN_UNLIKELY_ATTR
 6366|  11.6k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  11.6k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.34M|    {
 6376|  2.34M|        return static_cast<bool>(m_error);
 6377|  2.34M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   130k|{
 3609|   130k|    return a.code() == b;
 3610|   130k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   130k|{
 3613|   130k|    return !(a == b);
 3614|   130k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   209k|{
 3908|   209k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   209k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   209k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   209k|    };
 3913|       |
 3914|   209k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 182k, False: 26.8k]
  ------------------
 3915|   182k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   182k|        return static_cast<char32_t>(input[0]);
 3917|   182k|    }
 3918|       |
 3919|  26.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 24.8k, False: 1.98k]
  ------------------
 3920|  24.8k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  24.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  24.8k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  24.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  24.8k|        char32_t cp{};
 3924|  24.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  24.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  24.8k|        return cp;
 3927|  24.8k|    }
 3928|       |
 3929|  1.98k|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 1.76k, False: 220]
  ------------------
 3930|  1.76k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|  1.76k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|  1.76k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|  1.76k|        char32_t cp{};
 3935|  1.76k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|  1.76k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|  1.76k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|  1.76k|        return cp;
 3939|  1.76k|    }
 3940|       |
 3941|    220|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 220, False: 0]
  ------------------
 3942|    220|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    220|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    220|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    220|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    220|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    220|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    220|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    220|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    220|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    220|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    220|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    220|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    220|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    220|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    220|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    220|        char32_t cp{};
 3949|    220|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    220|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    220|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    220|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    220|        return cp;
 3954|    220|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|   149k|{
 6111|   149k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|   149k|                                    static_cast<unsigned>(b));
 6113|   149k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  17.5k|{
 6116|  17.5k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  17.5k|                                    static_cast<unsigned>(b));
 6118|  17.5k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  17.5k|{
 6131|  17.5k|    return a = a | b;
 6132|  17.5k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.32k|{
 7063|  1.32k|    switch (type) {
 7064|    118|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 118, False: 1.20k]
  ------------------
 7065|    118|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.32k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.32k]
  ------------------
 7069|    134|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 134, False: 1.19k]
  ------------------
 7070|    134|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.32k]
  ------------------
 7071|    134|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.32k]
  ------------------
 7072|    134|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.32k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.32k]
  ------------------
 7076|    134|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 134, False: 1.19k]
  ------------------
 7077|    134|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.32k]
  ------------------
 7078|    134|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.32k]
  ------------------
 7079|    134|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|    134|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 134, False: 1.19k]
  ------------------
 7082|    134|            return arg_type_category::pointer;
 7083|    134|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 134, False: 1.19k]
  ------------------
 7084|    134|            return arg_type_category::boolean;
 7085|     74|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 74, False: 1.25k]
  ------------------
 7086|    134|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 60, False: 1.26k]
  ------------------
 7087|    134|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.32k]
  ------------------
 7088|    134|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 1.32k]
  ------------------
 7091|    134|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 134, False: 1.19k]
  ------------------
 7092|    134|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.32k]
  ------------------
 7093|    134|            return arg_type_category::floating;
 7094|       |
 7095|     74|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 74, False: 1.25k]
  ------------------
 7096|    208|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 134, False: 1.19k]
  ------------------
 7097|    268|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 60, False: 1.26k]
  ------------------
 7098|    402|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 134, False: 1.19k]
  ------------------
 7099|    402|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.32k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.32k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.32k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.32k|            SCN_CLANG_POP
 7110|  1.32k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.32k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.38k|{
 3654|  1.38k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.38k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  29.4k|{
 7149|  29.4k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.1k, False: 2.35k]
  |  |  ------------------
  ------------------
 7150|  27.1k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  27.1k|    }
 7152|  2.35k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 176, False: 2.17k]
  ------------------
 7153|    176|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 168]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|      8|            return;
 7158|      8|        }
 7159|    168|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    168|    }
 7165|  2.35k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.86k|{
 3654|  2.86k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.86k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  14.7k|{
 7193|  14.7k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 13.7k, False: 1.02k]
  ------------------
 7194|  14.7k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 150, False: 13.5k]
  ------------------
 7195|  13.7k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 13.4k, False: 100]
  ------------------
 7196|  13.6k|        SCN_UNLIKELY_ATTR
 7197|  13.6k|        return handler.on_error("Invalid type specifier for float type");
 7198|  13.6k|    }
 7199|  14.7k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  65.8k|    {
  485|  65.8k|        return m_has_value;
  486|  65.8k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  32.9k|    {
 1598|  32.9k|        return has_value();
 1599|  32.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  32.9k|    {
  451|  32.9k|        return m_value;
  452|  32.9k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  32.9k|    {
 1627|  32.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  32.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  32.9k|        return this->get_value();
 1629|  32.9k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  32.9k|    {
 1663|  32.9k|        return std::move(value());
 1664|  32.9k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  17.0k|{
 3654|  17.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  17.0k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  10.1k|{
 3654|  10.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  10.1k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    456|{
 3654|    456|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    456|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|  1.38k|{
 3654|  1.38k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.38k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.43k|{
 3654|  1.43k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.43k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  43.8k|{
 7205|  43.8k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 2.97k, False: 40.8k]
  ------------------
 7206|  43.8k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 822, False: 40.0k]
  ------------------
 7207|  43.8k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 5.01k, False: 35.0k]
  ------------------
 7208|  43.8k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 30.3k, False: 4.69k]
  ------------------
 7209|  43.8k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 3.93k, False: 756]
  ------------------
 7210|  43.1k|        return;
 7211|  43.1k|    }
 7212|    756|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 156, False: 600]
  ------------------
 7213|    156|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 144]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    144|        return;
 7219|    156|    }
 7220|    600|    SCN_UNLIKELY_ATTR
 7221|    600|    handler.on_error("Invalid type specifier for string");
 7222|    600|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  4.82k|{
 3654|  4.82k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.82k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     60|{
 3654|     60|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     60|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     60|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  14.7k|{
 7239|  14.7k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 13.7k, False: 1.02k]
  ------------------
 7240|  14.7k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 13.4k, False: 300]
  ------------------
 7241|  14.7k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 13.3k, False: 30]
  ------------------
 7242|  14.7k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 13.3k, False: 24]
  ------------------
 7243|  14.7k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 13.3k, False: 18]
  ------------------
 7244|  14.7k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 13.3k, False: 16]
  ------------------
 7245|  14.7k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 13.2k, False: 46]
  ------------------
 7246|  14.7k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 13.2k, False: 16]
  ------------------
 7247|  13.2k|        SCN_UNLIKELY_ATTR
 7248|  13.2k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  13.2k|    }
 7250|  14.7k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  14.6k|{
 7171|  14.6k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 13.5k, False: 1.08k]
  ------------------
 7172|  14.6k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.08k]
  ------------------
 7173|  13.5k|        SCN_UNLIKELY_ATTR
 7174|  13.5k|        return handler.on_error("Invalid type specifier for character type");
 7175|  13.5k|    }
 7176|  14.6k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  14.6k|{
 7228|  14.6k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 13.6k, False: 992]
  ------------------
 7229|  14.6k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 13.6k, False: 10]
  ------------------
 7230|  13.6k|        SCN_UNLIKELY_ATTR
 7231|  13.6k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  13.6k|    }
 7233|  14.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|     88|{
 3654|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   150k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|   150k|    else {
 3720|   150k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   150k|    }
 3722|   150k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   476k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|   476k|    else {
 3720|   476k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   476k|    }
 3722|   476k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  2.05M|    {
 3330|  2.05M|        return m_iterator;
 3331|  2.05M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  2.17M|    {
 3334|  2.17M|        return m_sentinel;
 3335|  2.17M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   710k|    {
 3330|   710k|        return m_iterator;
 3331|   710k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  1.15M|    {
 3334|  1.15M|        return m_sentinel;
 3335|  1.15M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   236k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.19k|    {
  361|  2.19k|        return m_unexpected;
  362|  2.19k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  5.53k|{
 3654|  5.53k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.53k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  47.0k|        : m_unexpected(std::forward<Err>(e))
  346|  47.0k|    {
  347|  47.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  47.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  47.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   160k|        : base(unexpect, std::move(e.error())),
 1474|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   160k|    {
 1476|   160k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   161k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   161k|          m_has_value(false)
  446|   161k|    {
  447|   161k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   197k|    {
 1177|   197k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  33.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  33.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  33.5k|    {
 1430|  33.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  33.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  33.5k|    {
  437|  33.5k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   198k|    {
 1598|   198k|        return has_value();
 1599|   198k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   394k|    {
  485|   394k|        return m_has_value;
  486|   394k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   160k|    {
 1604|   160k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   160k|        return this->get_unexpected().error();
 1606|   160k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   160k|    {
  468|   160k|        return m_unexpected;
  469|   160k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  24.1k|    {
 1663|  24.1k|        return std::move(value());
 1664|  24.1k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  35.2k|    {
 1627|  35.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  35.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  35.2k|        return this->get_value();
 1629|  35.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  35.2k|    {
  451|  35.2k|        return m_value;
  452|  35.2k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  71.6k|        : base(unexpect, std::move(e.error())),
 1474|  71.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.6k|    {
 1476|  71.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  72.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  72.5k|          m_has_value(false)
  446|  72.5k|    {
  447|  72.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  99.4k|    {
 1177|  99.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  26.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  26.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  26.4k|    {
 1430|  26.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  26.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  26.4k|    {
  437|  26.4k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   100k|    {
 1598|   100k|        return has_value();
 1599|   100k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   197k|    {
  485|   197k|        return m_has_value;
  486|   197k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  71.6k|    {
 1604|  71.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  71.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  71.6k|        return this->get_unexpected().error();
 1606|  71.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  71.6k|    {
  468|  71.6k|        return m_unexpected;
  469|  71.6k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  21.4k|    {
 1663|  21.4k|        return std::move(value());
 1664|  21.4k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  25.8k|    {
 1627|  25.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  25.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  25.8k|        return this->get_value();
 1629|  25.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  25.8k|    {
  451|  25.8k|        return m_value;
  452|  25.8k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.58k|    {
 1837|  8.58k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.58k|                                            std::forward<F>(f));
 1839|  8.58k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  8.58k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  8.58k|    else {
 1333|  8.58k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.58k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.58k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.58k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.58k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.58k|    }
 1340|  8.58k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  74.2k|    {
  485|  74.2k|        return m_has_value;
  486|  74.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  10.5k|    {
 1663|  10.5k|        return std::move(value());
 1664|  10.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  34.0k|    {
 1627|  34.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  34.0k|        return this->get_value();
 1629|  34.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  34.0k|    {
  451|  34.0k|        return m_value;
  452|  34.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    956|        : base(unexpect, std::forward<Args>(args)...),
 1484|    956|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    956|    {
 1486|    956|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   675k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  4.39k|    {
 6187|  4.39k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  4.39k|        CharT r{};
 6189|  4.39k|        std::memcpy(&r, m_data, m_size);
 6190|  4.39k|        return r;
 6191|  4.39k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  1.13k|        : m_unexpected(std::forward<Err>(e))
  346|  1.13k|    {
  347|  1.13k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.13k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.13k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  1.30k|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.30k|    {
  356|  1.30k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.30k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    832|    {
 6196|    832|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    832|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|    174|        : m_unexpected(std::forward<Err>(e))
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|      8|        : m_unexpected(std::forward<Err>(e))
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  19.4k|    {
  361|  19.4k|        return m_unexpected;
  362|  19.4k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.75k|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.75k|    {
  356|  3.75k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.75k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.75k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  30.0k|        : m_unexpected(std::forward<Err>(e))
  346|  30.0k|    {
  347|  30.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  30.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  30.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  30.0k|    {
  361|  30.0k|        return m_unexpected;
  362|  30.0k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  30.0k|        : m_unexpected(std::forward<Args>(args)...)
  355|  30.0k|    {
  356|  30.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  30.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  30.0k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    716|{
 1211|    716|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    716|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  3.02k|        : m_unexpected(std::forward<Err>(e))
  346|  3.02k|    {
  347|  3.02k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.02k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.02k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.30k|{
 1211|  1.30k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.30k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  11.2k|{
  326|  11.2k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  11.2k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  73.5k|    {
 3346|  73.5k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  73.5k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    440|        : base(unexpect, std::move(e.error())),
 1474|    440|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    440|    {
 1476|    440|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    440|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    440|          m_has_value(false)
  446|    440|    {
  447|    440|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  40.0k|    {
 1177|  40.0k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  39.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  39.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  39.6k|    {
 1430|  39.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  39.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  39.6k|    {
  437|  39.6k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  29.4k|    {
 1598|  29.4k|        return has_value();
 1599|  29.4k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  23.5k|    {
 1653|  23.5k|        return value();
 1654|  23.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  6.62k|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.62k|    {
 1430|  6.62k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  6.62k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.62k|    {
  437|  6.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.97k|    {
 1177|  6.97k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    348|        : base(unexpect, std::move(e.error())),
 1474|    348|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    348|    {
 1476|    348|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    348|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    348|          m_has_value(false)
  446|    348|    {
  447|    348|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.35k|    {
 1598|  4.35k|        return has_value();
 1599|  4.35k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  12.3k|    {
  485|  12.3k|        return m_has_value;
  486|  12.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|  2.74k|    {
 1653|  2.74k|        return value();
 1654|  2.74k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  5.04k|    {
 1627|  5.04k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.04k|        return this->get_value();
 1629|  5.04k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  5.04k|    {
  451|  5.04k|        return m_value;
  452|  5.04k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    174|        : base(unexpect, std::move(e.error())),
 1474|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.13k|    {
 1177|  5.13k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  4.96k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.96k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.96k|    {
 1430|  4.96k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  4.96k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.96k|    {
  437|  4.96k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    764|    {
 1837|    764|        return detail::transform_error_impl(std::move(*this),
 1838|    764|                                            std::forward<F>(f));
 1839|    764|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    764|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    764|    else {
 1333|    764|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    764|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    764|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 764, False: 0]
  |  |  ------------------
  ------------------
 1335|    764|                   ? result(*std::forward<Exp>(exp))
 1336|    764|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    764|    }
 1340|    764|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.30k|    {
 1663|  2.30k|        return std::move(value());
 1664|  2.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  2.21k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.21k|    {
 1430|  2.21k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.21k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.21k|    {
  437|  2.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.3k|    {
 1177|  10.3k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    320|    {
 1614|    320|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    320|        return std::move(this->get_unexpected().error());
 1616|    320|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    320|    {
  468|    320|        return m_unexpected;
  469|    320|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.39k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.39k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.39k|    {
 1486|  1.39k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  7.40k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  7.40k|          m_has_value(false)
  446|  7.40k|    {
  447|  7.40k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.70k|    {
 2724|  1.70k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.70k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.70k|    {
 2705|  1.70k|        return decay_copy(t.begin());
 2706|  1.70k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.68k|{
 1949|  3.68k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.68k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  1.70k|    {
 3330|  1.70k|        return m_iterator;
 3331|  1.70k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.70k|    {
 2781|  1.70k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.70k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.70k|    {
 2763|  1.70k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.70k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  1.70k|    {
 3334|  1.70k|        return m_sentinel;
 3335|  1.70k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3314|  1.70k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.70k|    static_cast<    \
  |  |  929|  1.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.70k|    static_cast<    \
  |  |  929|  1.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.70k|    {
 3316|  1.70k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  5.13k|    {
 1598|  5.13k|        return has_value();
 1599|  5.13k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  10.2k|    {
  485|  10.2k|        return m_has_value;
  486|  10.2k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  4.96k|    {
 1663|  4.96k|        return std::move(value());
 1664|  4.96k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  4.96k|    {
 1627|  4.96k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.96k|        return this->get_value();
 1629|  4.96k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.96k|    {
  451|  4.96k|        return m_value;
  452|  4.96k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  35.3k|    {
 1177|  35.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  35.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  35.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  35.3k|    {
 1430|  35.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  35.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  35.3k|    {
  437|  35.3k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  35.3k|    {
 1598|  35.3k|        return has_value();
 1599|  35.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  70.6k|    {
  485|  70.6k|        return m_has_value;
  486|  70.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  35.3k|    {
 1663|  35.3k|        return std::move(value());
 1664|  35.3k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  35.3k|    {
 1627|  35.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  35.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  35.3k|        return this->get_value();
 1629|  35.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  35.3k|    {
  451|  35.3k|        return m_value;
  452|  35.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  6.01k|        : base(unexpect, std::move(e.error())),
 1474|  6.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.01k|    {
 1476|  6.01k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    600|        : base(unexpect, std::move(e.error())),
 1474|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    600|    {
 1476|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    920|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    920|          m_has_value(false)
  446|    920|    {
  447|    920|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.87k|    {
 1177|  6.87k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  4.41k|        : base(unexpect, std::move(e.error())),
 1474|  4.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.41k|    {
 1476|  4.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  4.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.41k|          m_has_value(false)
  446|  4.41k|    {
  447|  4.41k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  6.32k|    {
 1598|  6.32k|        return has_value();
 1599|  6.32k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  12.3k|    {
  485|  12.3k|        return m_has_value;
  486|  12.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.29k|    {
 1604|  2.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.29k|        return this->get_unexpected().error();
 1606|  2.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.12k|    {
  468|  3.12k|        return m_unexpected;
  469|  3.12k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|  1.13k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.13k|    {
 1430|  1.13k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|  1.13k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.13k|    {
  437|  1.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13k|    {
 1177|  1.13k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.53k|    {
 1627|  1.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.53k|        return this->get_value();
 1629|  1.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.53k|    {
  451|  1.53k|        return m_value;
  452|  1.53k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    852|    {
 1598|    852|        return has_value();
 1599|    852|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.26k|    {
  485|  2.26k|        return m_has_value;
  486|  2.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    852|    {
 1177|    852|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|  1.13k|    {
 1663|  1.13k|        return std::move(value());
 1664|  1.13k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  1.13k|    {
 1627|  1.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13k|        return this->get_value();
 1629|  1.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.13k|    {
  451|  1.13k|        return m_value;
  452|  1.13k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  92.2k|    {
 3334|  92.2k|        return m_sentinel;
 3335|  92.2k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.85k|    {
 1837|  1.85k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.85k|                                            std::forward<F>(f));
 1839|  1.85k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.85k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.85k|    else {
 1333|  1.85k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.85k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.85k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.53k, False: 320]
  |  |  ------------------
  ------------------
 1335|  1.85k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.85k|                   : result(unexpect,
 1337|    320|                            trivial_invoke(std::forward<F>(f),
 1338|    320|                                           std::forward<Exp>(exp).error()));
 1339|  1.85k|    }
 1340|  1.85k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|  1.53k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.53k|    {
 1430|  1.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.53k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.53k|    {
  437|  1.53k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    320|        : base(unexpect, std::forward<Args>(args)...),
 1484|    320|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    320|    {
 1486|    320|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.53k|    {
 1663|  1.53k|        return std::move(value());
 1664|  1.53k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   128k|    {
 3330|   128k|        return m_iterator;
 3331|   128k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    852|        : base(std::in_place, std::forward<U>(val)),
 1428|    852|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    852|    {
 1430|    852|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    852|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    852|    {
  437|    852|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    852|    {
 1837|    852|        return detail::transform_error_impl(std::move(*this),
 1838|    852|                                            std::forward<F>(f));
 1839|    852|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    852|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    852|    else {
 1333|    852|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    852|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    852|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 852, False: 0]
  |  |  ------------------
  ------------------
 1335|    852|                   ? result(*std::forward<Exp>(exp))
 1336|    852|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    852|    }
 1340|    852|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.70k|    {
  485|  1.70k|        return m_has_value;
  486|  1.70k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    852|    {
 1663|    852|        return std::move(value());
 1664|    852|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    852|    {
 1627|    852|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    852|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    852|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    852|        return this->get_value();
 1629|    852|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    852|    {
  451|    852|        return m_value;
  452|    852|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    852|        : base(std::in_place, std::forward<U>(val)),
 1428|    852|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    852|    {
 1430|    852|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    852|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    852|    {
  437|    852|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    852|    {
 1177|    852|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    852|    {
 1598|    852|        return has_value();
 1599|    852|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.70k|    {
  485|  1.70k|        return m_has_value;
  486|  1.70k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    852|    {
 1663|    852|        return std::move(value());
 1664|    852|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    852|    {
 1627|    852|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    852|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    852|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    852|        return this->get_value();
 1629|    852|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    852|    {
  451|    852|        return m_value;
  452|    852|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    832|    {
 1837|    832|        return detail::transform_error_impl(std::move(*this),
 1838|    832|                                            std::forward<F>(f));
 1839|    832|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    832|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    832|    else {
 1333|    832|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    832|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    832|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 832]
  |  |  ------------------
  ------------------
 1335|    832|                   ? result(*std::forward<Exp>(exp))
 1336|    832|                   : result(unexpect,
 1337|    832|                            trivial_invoke(std::forward<F>(f),
 1338|    832|                                           std::forward<Exp>(exp).error()));
 1339|    832|    }
 1340|    832|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    832|    {
 1614|    832|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    832|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    832|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    832|        return std::move(this->get_unexpected().error());
 1616|    832|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3646|  1.39k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.39k|    static_cast<    \
  |  |  929|  1.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.39k|    {
 3648|  1.39k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3314|  50.7k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  50.7k|    static_cast<    \
  |  |  929|  50.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  50.7k|    static_cast<    \
  |  |  929|  50.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  50.7k|    {
 3316|  50.7k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|     20|        : base(unexpect, std::move(e.error())),
 1474|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     20|    {
 1476|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|     20|        : m_has_value(false)
  625|     20|    {
  626|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     20|    {
  689|     20|        scn::detail::construct_at(unexpected_ptr(),
  690|     20|                                  std::forward<Args>(args)...);
  691|     20|        m_has_value = false;
  692|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     60|    {
  718|     60|        return reinterpret_cast<unexpected<E>*>(
  719|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     20|    {
 1177|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     20|    {
 1598|     20|        return has_value();
 1599|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     60|    {
  675|     60|        return m_has_value;
  676|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     20|    {
 1604|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     20|        return this->get_unexpected().error();
 1606|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     20|    {
  658|     20|        return *unexpected_ptr();
  659|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     20|    {
  631|     20|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 20]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     20|        else {
  635|     20|            destroy_unexpected();
  636|     20|        }
  637|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     20|    {
  700|     20|        scn::detail::destroy_at(unexpected_ptr());
  701|     20|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  10.5k|    {
 1598|  10.5k|        return has_value();
 1599|  10.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  20.6k|    {
  485|  20.6k|        return m_has_value;
  486|  20.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  7.12k|    {
 1604|  7.12k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.12k|        return this->get_unexpected().error();
 1606|  7.12k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  7.12k|    {
  468|  7.12k|        return m_unexpected;
  469|  7.12k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.21k|    {
 1663|  2.21k|        return std::move(value());
 1664|  2.21k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.89k|    {
 1627|  2.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.89k|        return this->get_value();
 1629|  2.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.89k|    {
  451|  2.89k|        return m_value;
  452|  2.89k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.04k|        : base(unexpect, std::move(e.error())),
 1474|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.04k|    {
 1476|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.14k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.14k|          m_has_value(false)
  446|  1.14k|    {
  447|  1.14k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.6k|    {
 1177|  14.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.5k|        : base(unexpect, std::move(e.error())),
 1474|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.5k|    {
 1476|  11.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.5k|          m_has_value(false)
  446|  11.5k|    {
  447|  11.5k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  15.5k|    {
 1598|  15.5k|        return has_value();
 1599|  15.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  24.2k|    {
  485|  24.2k|        return m_has_value;
  486|  24.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.72k|    {
 1604|  5.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.72k|        return this->get_unexpected().error();
 1606|  5.72k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.72k|    {
  468|  5.72k|        return m_unexpected;
  469|  5.72k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.73k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.73k|    {
 1430|  3.73k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.73k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.73k|    {
  437|  3.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.73k|    {
 1177|  3.73k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.95k|    {
 1627|  1.95k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.95k|        return this->get_value();
 1629|  1.95k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.95k|    {
  451|  1.95k|        return m_value;
  452|  1.95k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.80k|    {
 1598|  2.80k|        return has_value();
 1599|  2.80k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.46k|    {
  485|  7.46k|        return m_has_value;
  486|  7.46k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.80k|    {
 1177|  2.80k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.73k|    {
 1663|  3.73k|        return std::move(value());
 1664|  3.73k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.73k|    {
 1627|  3.73k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.73k|        return this->get_value();
 1629|  3.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.73k|    {
  451|  3.73k|        return m_value;
  452|  3.73k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  60.0k|    {
 3221|  60.0k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.33k, False: 57.6k]
  ------------------
 3222|  60.0k|                   ? nullptr
 3223|  60.0k|                   : std::addressof(*ranges::begin(derived()));
 3224|  60.0k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  60.0k|    {
 3005|  60.0k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  60.0k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  60.0k|    {
 2978|  60.0k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  60.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  60.0k|    {
 3339|  60.0k|        return m_iterator == m_sentinel;
 3340|  60.0k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   117k|    {
 3180|   117k|        return static_cast<D&>(*this);
 3181|   117k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  57.6k|    {
 2724|  57.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  57.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  57.6k|    {
 2705|  57.6k|        return decay_copy(t.begin());
 2706|  57.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.95k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.95k|    {
 1430|  1.95k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.95k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.95k|    {
  437|  1.95k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.80k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.80k|    {
 1430|  2.80k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.80k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.80k|    {
  437|  2.80k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.80k|    {
 1837|  2.80k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.80k|                                            std::forward<F>(f));
 1839|  2.80k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.80k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.80k|    else {
 1333|  2.80k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.80k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.80k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.80k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.80k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.80k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.80k|    }
 1340|  2.80k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.60k|    {
  485|  5.60k|        return m_has_value;
  486|  5.60k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.80k|    {
 1663|  2.80k|        return std::move(value());
 1664|  2.80k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.80k|    {
 1627|  2.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.80k|        return this->get_value();
 1629|  2.80k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.80k|    {
  451|  2.80k|        return m_value;
  452|  2.80k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.80k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.80k|    {
 1430|  2.80k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.80k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.80k|    {
  437|  2.80k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.80k|    {
 1177|  2.80k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.80k|    {
 1598|  2.80k|        return has_value();
 1599|  2.80k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.60k|    {
  485|  5.60k|        return m_has_value;
  486|  5.60k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.80k|    {
 1663|  2.80k|        return std::move(value());
 1664|  2.80k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.80k|    {
 1627|  2.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.80k|        return this->get_value();
 1629|  2.80k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.80k|    {
  451|  2.80k|        return m_value;
  452|  2.80k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|     64|        : base(unexpect, std::move(e.error())),
 1474|     64|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     64|    {
 1476|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|     64|        : m_has_value(false)
  625|     64|    {
  626|     64|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     64|    {
  689|     64|        scn::detail::construct_at(unexpected_ptr(),
  690|     64|                                  std::forward<Args>(args)...);
  691|     64|        m_has_value = false;
  692|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    192|    {
  718|    192|        return reinterpret_cast<unexpected<E>*>(
  719|    192|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    192|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    192|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     64|    {
 1177|     64|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     64|    {
 1598|     64|        return has_value();
 1599|     64|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    192|    {
  675|    192|        return m_has_value;
  676|    192|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     64|    {
 1604|     64|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     64|        return this->get_unexpected().error();
 1606|     64|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     64|    {
  658|     64|        return *unexpected_ptr();
  659|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     64|    {
  631|     64|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 64]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     64|        else {
  635|     64|            destroy_unexpected();
  636|     64|        }
  637|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     64|    {
  700|     64|        scn::detail::destroy_at(unexpected_ptr());
  701|     64|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  34.6k|    {
 2855|  34.6k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  34.6k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  34.6k|    {
 2836|  34.6k|        return t.data();
 2837|  34.6k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   456k|        : base(unexpect, std::move(e.error())),
 1474|   456k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   456k|    {
 1476|   456k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   456k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   456k|          m_has_value(false)
  446|   456k|    {
  447|   456k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   461k|    {
 1177|   461k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  5.52k|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.52k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.52k|    {
 1430|  5.52k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  5.52k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.52k|    {
  437|  5.52k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.78k|{
 1211|  2.78k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.78k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    280|    {
 1837|    280|        return detail::transform_error_impl(std::move(*this),
 1838|    280|                                            std::forward<F>(f));
 1839|    280|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    280|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    280|    else {
 1333|    280|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    280|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    280|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 280, False: 0]
  |  |  ------------------
  ------------------
 1335|    280|                   ? result(*std::forward<Exp>(exp))
 1336|    280|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    280|    }
 1340|    280|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    280|        : base(std::in_place, std::forward<U>(val)),
 1428|    280|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    280|    {
 1430|    280|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    280|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    280|    {
  437|    280|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    280|    {
 1177|    280|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    280|    {
 1598|    280|        return has_value();
 1599|    280|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    560|    {
  485|    560|        return m_has_value;
  486|    560|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    280|    {
 1663|    280|        return std::move(value());
 1664|    280|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    280|    {
 1627|    280|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    280|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    280|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    280|        return this->get_value();
 1629|    280|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    280|    {
  451|    280|        return m_value;
  452|    280|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    560|    {
 1823|    560|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    560|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1322|    560|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    560|    else {
 1333|    560|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    560|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    560|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 560]
  |  |  ------------------
  ------------------
 1335|    560|                   ? result(*std::forward<Exp>(exp))
 1336|    560|                   : result(unexpect,
 1337|    560|                            trivial_invoke(std::forward<F>(f),
 1338|    560|                                           std::forward<Exp>(exp).error()));
 1339|    560|    }
 1340|    560|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    684|    {
 1653|    684|        return value();
 1654|    684|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    276|    {
 2724|    276|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    276|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    276|    {
 2705|    276|        return decay_copy(t.begin());
 2706|    276|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    258|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    930|    {
 1837|    930|        return detail::transform_error_impl(std::move(*this),
 1838|    930|                                            std::forward<F>(f));
 1839|    930|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    930|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    930|    else {
 1333|    930|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    930|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    930|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 930, False: 0]
  |  |  ------------------
  ------------------
 1335|    930|                   ? result(*std::forward<Exp>(exp))
 1336|    930|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    930|    }
 1340|    930|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    930|        : base(std::in_place, std::forward<U>(val)),
 1428|    930|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    930|    {
 1430|    930|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    930|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    930|    {
  437|    930|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    930|    {
 1177|    930|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    930|    {
 1598|    930|        return has_value();
 1599|    930|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.86k|    {
  485|  1.86k|        return m_has_value;
  486|  1.86k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    930|    {
 1663|    930|        return std::move(value());
 1664|    930|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    930|    {
 1627|    930|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    930|        return this->get_value();
 1629|    930|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    930|    {
  451|    930|        return m_value;
  452|    930|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    956|    {
 1823|    956|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    956|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|    956|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    956|    else {
 1333|    956|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    956|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    956|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 956]
  |  |  ------------------
  ------------------
 1335|    956|                   ? result(*std::forward<Exp>(exp))
 1336|    956|                   : result(unexpect,
 1337|    956|                            trivial_invoke(std::forward<F>(f),
 1338|    956|                                           std::forward<Exp>(exp).error()));
 1339|    956|    }
 1340|    956|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|    956|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    956|    static_cast<    \
  |  |  929|    956|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|    956|    {
 3648|    956|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  11.1k|    {
 1653|  11.1k|        return value();
 1654|  11.1k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  3.75k|{
 6697|  3.75k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  3.75k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  3.75k|    auto start = begin;
 6701|  3.75k|    ++begin;
 6702|       |
 6703|  3.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.75k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  3.75k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 354, False: 3.40k]
  ------------------
 6710|    354|        handler.on_charset_inverted();
 6711|    354|        ++begin;
 6712|    354|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    354|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 348]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    354|    }
 6723|  3.40k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 3.40k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|   729k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 729k, False: 0]
  ------------------
 6728|   729k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 729k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|   729k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.75k, False: 725k]
  ------------------
 6733|  3.75k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.75k|        }
 6735|       |
 6736|   725k|        parse_presentation_set_literal(begin, end, handler);
 6737|   725k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  3.75k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|   725k|{
 6661|   725k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   725k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   725k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|   725k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|   725k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   725k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 725k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|   725k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 725k, False: 0]
  |  Branch (6668:25): [True: 3.86k, False: 721k]
  |  Branch (6668:49): [True: 3.86k, False: 0]
  ------------------
 6669|   725k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 3.75k, False: 108]
  ------------------
 6670|  3.75k|        ++begin;
 6671|       |
 6672|  3.75k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  3.75k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.75k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  3.75k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.75k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  3.75k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  3.75k|        return;
 6686|  3.75k|    }
 6687|       |
 6688|   721k|    handler.on_charset_single(cp_first);
 6689|   721k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|   729k|{
 6637|   729k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   729k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   729k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|   729k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|   729k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 729k]
  |  |  |  Branch (859:45): [True: 0, False: 729k]
  |  |  |  Branch (859:45): [True: 0, False: 729k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|   729k|    const auto cp =
 6646|   729k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|   729k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 729k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|   729k|    begin += len;
 6653|   729k|    return cp;
 6654|   729k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  32.9k|    {
 1177|  32.9k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1427|  32.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  32.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  32.9k|    {
 1430|  32.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  435|  32.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  32.9k|    {
  437|  32.9k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  27.9k|    {
 6252|  27.9k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  27.9k|                charset_string_size};
 6254|  27.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    684|        : base(std::in_place, std::forward<U>(val)),
 1428|    684|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    684|    {
 1430|    684|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    684|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    684|    {
  437|    684|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  2.53k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.53k|    {
 1430|  2.53k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.53k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.53k|    {
  437|  2.53k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   209k|{
 4033|   209k|    if constexpr (sizeof(CharT) == 1) {
 4034|   209k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|       |    }
 4036|       |    else if constexpr (sizeof(CharT) == 2) {
 4037|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4038|       |    }
 4039|       |    else {
 4040|       |        SCN_EXPECT(input.size() == 1);
 4041|       |        return static_cast<char32_t>(input.front());
 4042|       |    }
 4043|   209k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  29.0k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  29.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  29.0k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|    908|    {
 6187|    908|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|    908|        CharT r{};
 6189|    908|        std::memcpy(&r, m_data, m_size);
 6190|    908|        return r;
 6191|    908|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   658k|{
 3807|       |    if constexpr (sizeof(U) == 1) {
 3808|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|   658k|    else {
 3814|       |        // utf-32
 3815|   658k|        static_assert(sizeof(U) == 4);
 3816|   658k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   658k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   658k|        return 1;
 3818|   658k|    }
 3819|   658k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   625k|{
 4013|       |    if constexpr (sizeof(CharT) == 1) {
 4014|       |        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|   625k|    else {
 4020|   625k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   625k|        auto cp = static_cast<char32_t>(input.front());
 4022|   625k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130k, False: 495k]
  |  |  ------------------
  ------------------
 4023|   130k|            return invalid_code_point;
 4024|   130k|        }
 4025|   495k|        return cp;
 4026|   625k|    }
 4027|   625k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  67.4k|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  67.4k|    else {
 3705|  67.4k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  67.4k|                                       to_address(first), to_address(last)))};
 3707|  67.4k|    }
 3708|  67.4k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   213k|{
  326|   213k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   213k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   214k|{
  304|   214k|    return p;
  305|   214k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.65k|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  7.65k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  7.65k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.65k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.65k|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  7.65k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.42k|{
  326|  1.42k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.42k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  26.8k|    {
 3346|  26.8k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  26.8k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    132|        : base(unexpect, std::move(e.error())),
 1474|    132|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    132|    {
 1476|    132|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    132|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    132|          m_has_value(false)
  446|    132|    {
  447|    132|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  21.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  21.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  21.2k|    {
 1430|  21.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  21.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  21.2k|    {
  437|  21.2k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  5.72k|    {
 1598|  5.72k|        return has_value();
 1599|  5.72k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  36.9k|    {
  485|  36.9k|        return m_has_value;
  486|  36.9k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  15.4k|    {
 1627|  15.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  15.4k|        return this->get_value();
 1629|  15.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  15.4k|    {
  451|  15.4k|        return m_value;
  452|  15.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  2.38k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.38k|    {
 1430|  2.38k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.38k|    {
  437|  2.38k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54k|    {
 1177|  2.54k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    162|        : base(unexpect, std::move(e.error())),
 1474|    162|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    162|    {
 1476|    162|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    162|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    162|          m_has_value(false)
  446|    162|    {
  447|    162|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.07k|    {
 1598|  1.07k|        return has_value();
 1599|  1.07k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.01k|    {
  485|  4.01k|        return m_has_value;
  486|  4.01k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.30k|    {
 1627|  1.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.30k|        return this->get_value();
 1629|  1.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.30k|    {
  451|  1.30k|        return m_value;
  452|  1.30k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.86k|    {
 1177|  1.86k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.86k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.86k|    {
 1430|  1.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  1.86k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.86k|    {
  437|  1.86k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    398|    {
 1837|    398|        return detail::transform_error_impl(std::move(*this),
 1838|    398|                                            std::forward<F>(f));
 1839|    398|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    398|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    398|    else {
 1333|    398|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    398|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    398|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 398, False: 0]
  |  |  ------------------
  ------------------
 1335|    398|                   ? result(*std::forward<Exp>(exp))
 1336|    398|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    398|    }
 1340|    398|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.30k|    {
 1663|  1.30k|        return std::move(value());
 1664|  1.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  1.00k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.00k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.00k|    {
 1430|  1.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.00k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.00k|    {
  437|  1.00k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.95k|    {
 1177|  3.95k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    162|    {
 1614|    162|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    162|        return std::move(this->get_unexpected().error());
 1616|    162|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    162|    {
  468|    162|        return m_unexpected;
  469|    162|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    800|        : base(unexpect, std::forward<Args>(args)...),
 1484|    800|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    800|    {
 1486|    800|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.73k|          m_has_value(false)
  446|  2.73k|    {
  447|  2.73k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    510|    {
 2724|    510|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    510|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    510|    {
 2705|    510|        return decay_copy(t.begin());
 2706|    510|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.17k|{
 1949|  1.17k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.17k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    510|    {
 3330|    510|        return m_iterator;
 3331|    510|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    510|    {
 2781|    510|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    510|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    510|    {
 2763|    510|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    510|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    510|    {
 3334|    510|        return m_sentinel;
 3335|    510|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3314|    510|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    510|    static_cast<    \
  |  |  929|    510|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    510|    static_cast<    \
  |  |  929|    510|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|    510|    {
 3316|    510|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.86k|    {
 1598|  1.86k|        return has_value();
 1599|  1.86k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.72k|    {
  485|  3.72k|        return m_has_value;
  486|  3.72k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.86k|    {
 1663|  1.86k|        return std::move(value());
 1664|  1.86k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.86k|    {
 1627|  1.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.86k|        return this->get_value();
 1629|  1.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.86k|    {
  451|  1.86k|        return m_value;
  452|  1.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.8k|    {
 1177|  16.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  16.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  16.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  16.8k|    {
 1430|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  16.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  16.8k|    {
  437|  16.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  9.84k|    {
 1837|  9.84k|        return detail::transform_error_impl(std::move(*this),
 1838|  9.84k|                                            std::forward<F>(f));
 1839|  9.84k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  9.84k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  9.84k|    else {
 1333|  9.84k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  9.84k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.84k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.84k, False: 0]
  |  |  ------------------
  ------------------
 1335|  9.84k|                   ? result(*std::forward<Exp>(exp))
 1336|  9.84k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  9.84k|    }
 1340|  9.84k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  15.4k|    {
 1663|  15.4k|        return std::move(value());
 1664|  15.4k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    132|    {
 1614|    132|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    132|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    132|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    132|        return std::move(this->get_unexpected().error());
 1616|    132|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    132|    {
  468|    132|        return m_unexpected;
  469|    132|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    946|        : base(unexpect, std::forward<Args>(args)...),
 1484|    946|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    946|    {
 1486|    946|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  16.8k|    {
 1598|  16.8k|        return has_value();
 1599|  16.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  33.7k|    {
  485|  33.7k|        return m_has_value;
  486|  33.7k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  16.8k|    {
 1663|  16.8k|        return std::move(value());
 1664|  16.8k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  16.8k|    {
 1627|  16.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.8k|        return this->get_value();
 1629|  16.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  16.8k|    {
  451|  16.8k|        return m_value;
  452|  16.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.93k|        : base(unexpect, std::move(e.error())),
 1474|  1.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.93k|    {
 1476|  1.93k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    324|        : base(unexpect, std::move(e.error())),
 1474|    324|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    324|    {
 1476|    324|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    486|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    486|          m_has_value(false)
  446|    486|    {
  447|    486|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.05k|    {
 1177|  4.05k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  2.65k|        : base(unexpect, std::move(e.error())),
 1474|  2.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.65k|    {
 1476|  2.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.65k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.65k|          m_has_value(false)
  446|  2.65k|    {
  447|  2.65k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  3.74k|    {
 1598|  3.74k|        return has_value();
 1599|  3.74k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  7.25k|    {
  485|  7.25k|        return m_has_value;
  486|  7.25k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.32k|    {
 1604|  1.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.32k|        return this->get_unexpected().error();
 1606|  1.32k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.80k|    {
  468|  1.80k|        return m_unexpected;
  469|  1.80k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|    678|        : base(std::in_place, std::forward<U>(val)),
 1428|    678|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    678|    {
 1430|    678|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    678|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    678|    {
  437|    678|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    678|    {
 1177|    678|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    910|    {
 1627|    910|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    910|        return this->get_value();
 1629|    910|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    910|    {
  451|    910|        return m_value;
  452|    910|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    516|    {
 1598|    516|        return has_value();
 1599|    516|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.35k|    {
  485|  1.35k|        return m_has_value;
  486|  1.35k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    516|    {
 1177|    516|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    678|    {
 1663|    678|        return std::move(value());
 1664|    678|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    678|    {
 1627|    678|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    678|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    678|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    678|        return this->get_value();
 1629|    678|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    678|    {
  451|    678|        return m_value;
  452|    678|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  41.4k|    {
 3334|  41.4k|        return m_sentinel;
 3335|  41.4k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.07k|    {
 1837|  1.07k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.07k|                                            std::forward<F>(f));
 1839|  1.07k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.07k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.07k|    else {
 1333|  1.07k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.07k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 910, False: 162]
  |  |  ------------------
  ------------------
 1335|  1.07k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.07k|                   : result(unexpect,
 1337|    162|                            trivial_invoke(std::forward<F>(f),
 1338|    162|                                           std::forward<Exp>(exp).error()));
 1339|  1.07k|    }
 1340|  1.07k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|    910|        : base(std::in_place, std::forward<U>(val)),
 1428|    910|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    910|    {
 1430|    910|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|    910|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    910|    {
  437|    910|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    162|        : base(unexpect, std::forward<Args>(args)...),
 1484|    162|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    162|    {
 1486|    162|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    910|    {
 1663|    910|        return std::move(value());
 1664|    910|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  45.0k|    {
 3330|  45.0k|        return m_iterator;
 3331|  45.0k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    516|        : base(std::in_place, std::forward<U>(val)),
 1428|    516|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    516|    {
 1430|    516|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    516|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    516|    {
  437|    516|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    516|    {
 1837|    516|        return detail::transform_error_impl(std::move(*this),
 1838|    516|                                            std::forward<F>(f));
 1839|    516|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    516|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    516|    else {
 1333|    516|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    516|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    516|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 516, False: 0]
  |  |  ------------------
  ------------------
 1335|    516|                   ? result(*std::forward<Exp>(exp))
 1336|    516|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    516|    }
 1340|    516|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.03k|    {
  485|  1.03k|        return m_has_value;
  486|  1.03k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    516|    {
 1663|    516|        return std::move(value());
 1664|    516|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    516|    {
 1627|    516|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    516|        return this->get_value();
 1629|    516|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    516|    {
  451|    516|        return m_value;
  452|    516|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    516|        : base(std::in_place, std::forward<U>(val)),
 1428|    516|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    516|    {
 1430|    516|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    516|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    516|    {
  437|    516|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    516|    {
 1177|    516|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    516|    {
 1598|    516|        return has_value();
 1599|    516|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.03k|    {
  485|  1.03k|        return m_has_value;
  486|  1.03k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    516|    {
 1663|    516|        return std::move(value());
 1664|    516|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    516|    {
 1627|    516|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    516|        return this->get_value();
 1629|    516|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    516|    {
  451|    516|        return m_value;
  452|    516|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    476|    {
 1837|    476|        return detail::transform_error_impl(std::move(*this),
 1838|    476|                                            std::forward<F>(f));
 1839|    476|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1322|    476|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    476|    else {
 1333|    476|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    476|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    476|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 476]
  |  |  ------------------
  ------------------
 1335|    476|                   ? result(*std::forward<Exp>(exp))
 1336|    476|                   : result(unexpect,
 1337|    476|                            trivial_invoke(std::forward<F>(f),
 1338|    476|                                           std::forward<Exp>(exp).error()));
 1339|    476|    }
 1340|    476|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    476|    {
 1614|    476|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    476|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    476|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    476|        return std::move(this->get_unexpected().error());
 1616|    476|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3646|    800|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    800|    static_cast<    \
  |  |  929|    800|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|    800|    {
 3648|    800|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3314|  15.4k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  15.4k|    static_cast<    \
  |  |  929|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  15.4k|    static_cast<    \
  |  |  929|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  15.4k|    {
 3316|  15.4k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1473|     40|        : base(unexpect, std::move(e.error())),
 1474|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     40|    {
 1476|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  624|     40|        : m_has_value(false)
  625|     40|    {
  626|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     40|    {
  689|     40|        scn::detail::construct_at(unexpected_ptr(),
  690|     40|                                  std::forward<Args>(args)...);
  691|     40|        m_has_value = false;
  692|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    120|    {
  718|    120|        return reinterpret_cast<unexpected<E>*>(
  719|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     40|    {
 1177|     40|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     40|    {
 1598|     40|        return has_value();
 1599|     40|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    120|    {
  675|    120|        return m_has_value;
  676|    120|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     40|    {
 1604|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     40|        return this->get_unexpected().error();
 1606|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     40|    {
  658|     40|        return *unexpected_ptr();
  659|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     40|    {
  631|     40|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 40]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     40|        else {
  635|     40|            destroy_unexpected();
  636|     40|        }
  637|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     40|    {
  700|     40|        scn::detail::destroy_at(unexpected_ptr());
  701|     40|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  4.11k|    {
 1598|  4.11k|        return has_value();
 1599|  4.11k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.90k|    {
  485|  7.90k|        return m_has_value;
  486|  7.90k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  2.57k|    {
 1604|  2.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.57k|        return this->get_unexpected().error();
 1606|  2.57k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.57k|    {
  468|  2.57k|        return m_unexpected;
  469|  2.57k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.00k|    {
 1663|  1.00k|        return std::move(value());
 1664|  1.00k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.22k|    {
 1627|  1.22k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22k|        return this->get_value();
 1629|  1.22k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.22k|    {
  451|  1.22k|        return m_value;
  452|  1.22k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.07k|        : base(unexpect, std::move(e.error())),
 1474|  1.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.07k|    {
 1476|  1.07k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.20k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.20k|          m_has_value(false)
  446|  1.20k|    {
  447|  1.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.2k|    {
 1177|  18.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.3k|        : base(unexpect, std::move(e.error())),
 1474|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.3k|    {
 1476|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  11.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.3k|          m_has_value(false)
  446|  11.3k|    {
  447|  11.3k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  19.1k|    {
 1598|  19.1k|        return has_value();
 1599|  19.1k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  31.5k|    {
  485|  31.5k|        return m_has_value;
  486|  31.5k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  5.80k|    {
 1604|  5.80k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.80k|        return this->get_unexpected().error();
 1606|  5.80k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.80k|    {
  468|  5.80k|        return m_unexpected;
  469|  5.80k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.78k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.78k|    {
 1430|  3.78k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.78k|    {
  437|  3.78k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.78k|    {
 1177|  3.78k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  5.63k|    {
 1627|  5.63k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.63k|        return this->get_value();
 1629|  5.63k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  5.63k|    {
  451|  5.63k|        return m_value;
  452|  5.63k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.84k|    {
 1598|  2.84k|        return has_value();
 1599|  2.84k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.56k|    {
  485|  7.56k|        return m_has_value;
  486|  7.56k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.84k|    {
 1177|  2.84k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.78k|    {
 1663|  3.78k|        return std::move(value());
 1664|  3.78k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.78k|    {
 1627|  3.78k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.78k|        return this->get_value();
 1629|  3.78k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.78k|    {
  451|  3.78k|        return m_value;
  452|  3.78k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.77k|    {
 1837|  5.77k|        return detail::transform_error_impl(std::move(*this),
 1838|  5.77k|                                            std::forward<F>(f));
 1839|  5.77k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  5.77k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  5.77k|    else {
 1333|  5.77k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.77k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.77k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.63k, False: 132]
  |  |  ------------------
  ------------------
 1335|  5.77k|                   ? result(*std::forward<Exp>(exp))
 1336|  5.77k|                   : result(unexpect,
 1337|    132|                            trivial_invoke(std::forward<F>(f),
 1338|    132|                                           std::forward<Exp>(exp).error()));
 1339|  5.77k|    }
 1340|  5.77k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  5.63k|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.63k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.63k|    {
 1430|  5.63k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.63k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.63k|    {
  437|  5.63k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    132|        : base(unexpect, std::forward<Args>(args)...),
 1484|    132|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    132|    {
 1486|    132|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  5.63k|    {
 1663|  5.63k|        return std::move(value());
 1664|  5.63k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.84k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.84k|    {
 1430|  2.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.84k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.84k|    {
  437|  2.84k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.84k|    {
 1837|  2.84k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.84k|                                            std::forward<F>(f));
 1839|  2.84k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.84k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.84k|    else {
 1333|  2.84k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.84k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.84k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.84k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.84k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.84k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.84k|    }
 1340|  2.84k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.68k|    {
  485|  5.68k|        return m_has_value;
  486|  5.68k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.84k|    {
 1663|  2.84k|        return std::move(value());
 1664|  2.84k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.84k|    {
 1627|  2.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.84k|        return this->get_value();
 1629|  2.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.84k|    {
  451|  2.84k|        return m_value;
  452|  2.84k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.84k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.84k|    {
 1430|  2.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.84k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.84k|    {
  437|  2.84k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.84k|    {
 1177|  2.84k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.84k|    {
 1598|  2.84k|        return has_value();
 1599|  2.84k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.68k|    {
  485|  5.68k|        return m_has_value;
  486|  5.68k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.84k|    {
 1663|  2.84k|        return std::move(value());
 1664|  2.84k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.84k|    {
 1627|  2.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.84k|        return this->get_value();
 1629|  2.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.84k|    {
  451|  2.84k|        return m_value;
  452|  2.84k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|     44|        : base(unexpect, std::move(e.error())),
 1474|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     44|    {
 1476|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|     44|        : m_has_value(false)
  625|     44|    {
  626|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     44|    {
  689|     44|        scn::detail::construct_at(unexpected_ptr(),
  690|     44|                                  std::forward<Args>(args)...);
  691|     44|        m_has_value = false;
  692|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    132|    {
  718|    132|        return reinterpret_cast<unexpected<E>*>(
  719|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    132|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     44|    {
 1177|     44|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     44|    {
 1598|     44|        return has_value();
 1599|     44|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    132|    {
  675|    132|        return m_has_value;
  676|    132|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     44|    {
 1604|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     44|        return this->get_unexpected().error();
 1606|     44|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     44|    {
  658|     44|        return *unexpected_ptr();
  659|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     44|    {
  631|     44|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 44]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     44|        else {
  635|     44|            destroy_unexpected();
  636|     44|        }
  637|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     44|    {
  700|     44|        scn::detail::destroy_at(unexpected_ptr());
  701|     44|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  14.4k|    {
 2855|  14.4k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  14.4k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  14.4k|    {
 2836|  14.4k|        return t.data();
 2837|  14.4k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  29.9k|    {
 3221|  29.9k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 4.95k, False: 24.9k]
  ------------------
 3222|  29.9k|                   ? nullptr
 3223|  29.9k|                   : std::addressof(*ranges::begin(derived()));
 3224|  29.9k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  29.9k|    {
 3005|  29.9k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  29.9k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  29.9k|    {
 2978|  29.9k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  29.9k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  29.9k|    {
 3339|  29.9k|        return m_iterator == m_sentinel;
 3340|  29.9k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  54.9k|    {
 3180|  54.9k|        return static_cast<D&>(*this);
 3181|  54.9k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  24.9k|    {
 2724|  24.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  24.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  24.9k|    {
 2705|  24.9k|        return decay_copy(t.begin());
 2706|  24.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    162|    {
 1837|    162|        return detail::transform_error_impl(std::move(*this),
 1838|    162|                                            std::forward<F>(f));
 1839|    162|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    162|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    162|    else {
 1333|    162|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    162|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    162|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 162, False: 0]
  |  |  ------------------
  ------------------
 1335|    162|                   ? result(*std::forward<Exp>(exp))
 1336|    162|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    162|    }
 1340|    162|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    162|        : base(std::in_place, std::forward<U>(val)),
 1428|    162|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    162|    {
 1430|    162|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    162|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    162|    {
  437|    162|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    162|    {
 1177|    162|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    162|    {
 1598|    162|        return has_value();
 1599|    162|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    324|    {
  485|    324|        return m_has_value;
  486|    324|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    162|    {
 1663|    162|        return std::move(value());
 1664|    162|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    162|    {
 1627|    162|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    162|        return this->get_value();
 1629|    162|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    162|    {
  451|    162|        return m_value;
  452|    162|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    324|    {
 1823|    324|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    324|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1322|    324|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    324|    else {
 1333|    324|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    324|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    324|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 324]
  |  |  ------------------
  ------------------
 1335|    324|                   ? result(*std::forward<Exp>(exp))
 1336|    324|                   : result(unexpect,
 1337|    324|                            trivial_invoke(std::forward<F>(f),
 1338|    324|                                           std::forward<Exp>(exp).error()));
 1339|    324|    }
 1340|    324|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    216|    {
 1653|    216|        return value();
 1654|    216|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    156|    {
 2724|    156|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    156|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    156|    {
 2705|    156|        return decay_copy(t.begin());
 2706|    156|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    148|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    940|    {
 1837|    940|        return detail::transform_error_impl(std::move(*this),
 1838|    940|                                            std::forward<F>(f));
 1839|    940|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    940|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    940|    else {
 1333|    940|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    940|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    940|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 940, False: 0]
  |  |  ------------------
  ------------------
 1335|    940|                   ? result(*std::forward<Exp>(exp))
 1336|    940|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    940|    }
 1340|    940|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    940|        : base(std::in_place, std::forward<U>(val)),
 1428|    940|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    940|    {
 1430|    940|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    940|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    940|    {
  437|    940|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    940|    {
 1177|    940|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    940|    {
 1598|    940|        return has_value();
 1599|    940|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.88k|    {
  485|  1.88k|        return m_has_value;
  486|  1.88k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    940|    {
 1663|    940|        return std::move(value());
 1664|    940|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    940|    {
 1627|    940|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    940|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    940|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    940|        return this->get_value();
 1629|    940|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    940|    {
  451|    940|        return m_value;
  452|    940|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    946|    {
 1823|    946|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    946|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|    946|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    946|    else {
 1333|    946|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    946|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    946|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 946]
  |  |  ------------------
  ------------------
 1335|    946|                   ? result(*std::forward<Exp>(exp))
 1336|    946|                   : result(unexpect,
 1337|    946|                            trivial_invoke(std::forward<F>(f),
 1338|    946|                                           std::forward<Exp>(exp).error()));
 1339|    946|    }
 1340|    946|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|    946|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    946|    static_cast<    \
  |  |  929|    946|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|    946|    {
 3648|    946|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  4.45k|    {
 1653|  4.45k|        return value();
 1654|  4.45k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    474|{
 6697|    474|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    474|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    474|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    474|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    474|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    474|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    474|    auto start = begin;
 6701|    474|    ++begin;
 6702|       |
 6703|    474|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    474|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 246, False: 228]
  ------------------
 6710|    246|        handler.on_charset_inverted();
 6711|    246|        ++begin;
 6712|    246|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    246|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 240]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    246|    }
 6723|    228|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 228]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  4.91k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 4.91k, False: 0]
  ------------------
 6728|  4.91k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.91k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  4.91k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 474, False: 4.44k]
  ------------------
 6733|    474|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    474|        }
 6735|       |
 6736|  4.44k|        parse_presentation_set_literal(begin, end, handler);
 6737|  4.44k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    474|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  4.44k|{
 6661|  4.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  4.44k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  4.44k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.44k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  4.44k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 4.44k, False: 0]
  |  Branch (6668:25): [True: 252, False: 4.18k]
  |  Branch (6668:49): [True: 252, False: 0]
  ------------------
 6669|  4.44k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 246, False: 6]
  ------------------
 6670|    246|        ++begin;
 6671|       |
 6672|    246|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    246|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|    246|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|    246|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    246|        return;
 6686|    246|    }
 6687|       |
 6688|  4.19k|    handler.on_charset_single(cp_first);
 6689|  4.19k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  4.68k|{
 6637|  4.68k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  4.68k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  4.68k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.68k]
  |  |  |  Branch (859:45): [True: 0, False: 4.68k]
  |  |  |  Branch (859:45): [True: 0, False: 4.68k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  4.68k|    const auto cp =
 6646|  4.68k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  4.68k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.68k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  4.68k|    begin += len;
 6653|  4.68k|    return cp;
 6654|  4.68k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  10.6k|    {
 6252|  10.6k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  10.6k|                charset_string_size};
 6254|  10.6k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    216|        : base(std::in_place, std::forward<U>(val)),
 1428|    216|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    216|    {
 1430|    216|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    216|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    216|    {
  437|    216|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    354|        : base(std::in_place, std::forward<U>(val)),
 1428|    354|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    354|    {
 1430|    354|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    354|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    354|    {
  437|    354|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  1.83k|{
 3654|  1.83k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.83k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  7.75k|    {
 2855|  7.75k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  7.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  7.75k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  7.75k|    {
 2836|  7.75k|        return t.data();
 2837|  7.75k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   152k|    {
 5466|   152k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   152k|        return static_cast<std::size_t>(m_desc &
 5471|   152k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   152k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   256k|    {
 5491|   256k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   256k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   103k|    {
 5434|   103k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   103k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 212, False: 103k]
  |  |  ------------------
  ------------------
 5442|    212|            return {};
 5443|    212|        }
 5444|       |
 5445|   103k|        const auto t = type(id);
 5446|   103k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 102k]
  |  |  ------------------
  ------------------
 5447|  1.38k|            return {};
 5448|  1.38k|        }
 5449|       |
 5450|   102k|        basic_scan_arg<Context> arg;
 5451|   102k|        arg.m_type = t;
 5452|   102k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 102k, False: 0]
  ------------------
 5453|   102k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   102k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   102k|        return arg;
 5459|   103k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   103k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   150k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   103k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   103k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   103k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   103k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   103k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   102k|    {
 5495|   102k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   102k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   203k|    {
 5247|   203k|        return m_type != detail::arg_type::none_type;
 5248|   203k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.77k|{
 8417|  5.77k|#define SCN_VISIT(Type)                                         \
 8418|  5.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.77k|    }                                                           \
 8421|  5.77k|    else {                                                      \
 8422|  5.77k|        return vis(monostate_val);                              \
 8423|  5.77k|    }
 8424|       |
 8425|  5.77k|    monostate monostate_val{};
 8426|       |
 8427|  5.77k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.77k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.77k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    642|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 642, False: 5.13k]
  ------------------
 8433|    642|            SCN_VISIT(int);
  ------------------
  |  | 8418|    642|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    642|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    642|    }                                                           \
  |  | 8421|    642|    else {                                                      \
  |  | 8422|    642|        return vis(monostate_val);                              \
  |  | 8423|    642|    }
  ------------------
 8434|    642|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.77k]
  ------------------
 8435|    642|            SCN_VISIT(long);
  ------------------
  |  | 8418|    642|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    642|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    642|    }                                                           \
  |  | 8421|    642|    else {                                                      \
  |  | 8422|    642|        return vis(monostate_val);                              \
  |  | 8423|    642|    }
  ------------------
 8436|    642|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.77k]
  ------------------
 8437|    642|            SCN_VISIT(long long);
  ------------------
  |  | 8418|    642|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    642|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    642|    }                                                           \
  |  | 8421|    642|    else {                                                      \
  |  | 8422|    642|        return vis(monostate_val);                              \
  |  | 8423|    642|    }
  ------------------
 8438|    642|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.77k]
  ------------------
 8439|    642|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|    642|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    642|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    642|    }                                                           \
  |  | 8421|    642|    else {                                                      \
  |  | 8422|    642|        return vis(monostate_val);                              \
  |  | 8423|    642|    }
  ------------------
 8440|    642|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.77k]
  ------------------
 8441|    642|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|    642|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    642|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    642|    }                                                           \
  |  | 8421|    642|    else {                                                      \
  |  | 8422|    642|        return vis(monostate_val);                              \
  |  | 8423|    642|    }
  ------------------
 8442|  1.28k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 642, False: 5.13k]
  ------------------
 8443|  1.28k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  1.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.28k|    }                                                           \
  |  | 8421|  1.28k|    else {                                                      \
  |  | 8422|  1.28k|        return vis(monostate_val);                              \
  |  | 8423|  1.28k|    }
  ------------------
 8444|  1.28k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.77k]
  ------------------
 8445|  1.28k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  1.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.28k|    }                                                           \
  |  | 8421|  1.28k|    else {                                                      \
  |  | 8422|  1.28k|        return vis(monostate_val);                              \
  |  | 8423|  1.28k|    }
  ------------------
 8446|  1.28k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.77k]
  ------------------
 8447|  1.28k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  1.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.28k|    }                                                           \
  |  | 8421|  1.28k|    else {                                                      \
  |  | 8422|  1.28k|        return vis(monostate_val);                              \
  |  | 8423|  1.28k|    }
  ------------------
 8448|  1.92k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 642, False: 5.13k]
  ------------------
 8449|  1.92k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  1.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.92k|    }                                                           \
  |  | 8421|  1.92k|    else {                                                      \
  |  | 8422|  1.92k|        return vis(monostate_val);                              \
  |  | 8423|  1.92k|    }
  ------------------
 8450|  2.56k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 642, False: 5.13k]
  ------------------
 8451|  2.56k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  2.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  2.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.56k|    }                                                           \
  |  | 8421|  2.56k|    else {                                                      \
  |  | 8422|  2.56k|        return vis(monostate_val);                              \
  |  | 8423|  2.56k|    }
  ------------------
 8452|  3.21k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 642, False: 5.13k]
  ------------------
 8453|  3.21k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  3.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.21k|    }                                                           \
  |  | 8421|  3.21k|    else {                                                      \
  |  | 8422|  3.21k|        return vis(monostate_val);                              \
  |  | 8423|  3.21k|    }
  ------------------
 8454|  3.21k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.77k]
  ------------------
 8455|  3.21k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  3.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.21k|    }                                                           \
  |  | 8421|  3.21k|    else {                                                      \
  |  | 8422|  3.21k|        return vis(monostate_val);                              \
  |  | 8423|  3.21k|    }
  ------------------
 8456|  3.21k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.77k]
  ------------------
 8457|  3.21k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  3.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.21k|    }                                                           \
  |  | 8421|  3.21k|    else {                                                      \
  |  | 8422|  3.21k|        return vis(monostate_val);                              \
  |  | 8423|  3.21k|    }
  ------------------
 8458|  3.21k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.77k]
  ------------------
 8459|  3.21k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  3.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.21k|    }                                                           \
  |  | 8421|  3.21k|    else {                                                      \
  |  | 8422|  3.21k|        return vis(monostate_val);                              \
  |  | 8423|  3.21k|    }
  ------------------
 8460|  3.85k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 642, False: 5.13k]
  ------------------
 8461|  3.85k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  3.85k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.85k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.85k|    }                                                           \
  |  | 8421|  3.85k|    else {                                                      \
  |  | 8422|  3.85k|        return vis(monostate_val);                              \
  |  | 8423|  3.85k|    }
  ------------------
 8462|  3.85k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.77k]
  ------------------
 8463|  3.85k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  3.85k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.85k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.85k|    }                                                           \
  |  | 8421|  3.85k|    else {                                                      \
  |  | 8422|  3.85k|        return vis(monostate_val);                              \
  |  | 8423|  3.85k|    }
  ------------------
 8464|  4.49k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 642, False: 5.13k]
  ------------------
 8465|  4.49k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  4.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.49k|    }                                                           \
  |  | 8421|  4.49k|    else {                                                      \
  |  | 8422|  4.49k|        return vis(monostate_val);                              \
  |  | 8423|  4.49k|    }
  ------------------
 8466|  5.13k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 642, False: 5.13k]
  ------------------
 8467|  5.13k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  5.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.13k|    }                                                           \
  |  | 8421|  5.13k|    else {                                                      \
  |  | 8422|  5.13k|        return vis(monostate_val);                              \
  |  | 8423|  5.13k|    }
  ------------------
 8468|  5.13k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.77k]
  ------------------
 8469|  5.13k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  5.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.13k|    }                                                           \
  |  | 8421|  5.13k|    else {                                                      \
  |  | 8422|  5.13k|        return vis(monostate_val);                              \
  |  | 8423|  5.13k|    }
  ------------------
 8470|  5.77k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 642, False: 5.13k]
  ------------------
 8471|  5.77k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  5.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.77k|    }                                                           \
  |  | 8421|  5.77k|    else {                                                      \
  |  | 8422|  5.77k|        return vis(monostate_val);                              \
  |  | 8423|  5.77k|    }
  ------------------
 8472|  5.77k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.77k]
  ------------------
 8473|  5.77k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  5.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.77k|    }                                                           \
  |  | 8421|  5.77k|    else {                                                      \
  |  | 8422|  5.77k|        return vis(monostate_val);                              \
  |  | 8423|  5.77k|    }
  ------------------
 8474|  5.77k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.77k]
  ------------------
 8475|  5.77k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  5.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.77k|    }                                                           \
  |  | 8421|  5.77k|    else {                                                      \
  |  | 8422|  5.77k|        return vis(monostate_val);                              \
  |  | 8423|  5.77k|    }
  ------------------
 8476|       |
 8477|  5.77k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.77k]
  ------------------
 8478|  5.77k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  5.77k|            return vis(
 8480|  5.77k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.77k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.77k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.77k|            SCN_CLANG_POP
 8495|  5.77k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.05k|    {
 1837|  2.05k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.05k|                                            std::forward<F>(f));
 1839|  2.05k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.05k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.05k|    else {
 1333|  2.05k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.05k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.05k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.95k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.05k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.05k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.05k|    }
 1340|  2.05k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    102|        : base(unexpect, std::forward<Args>(args)...),
 1484|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.95k|    {
 1663|  1.95k|        return std::move(value());
 1664|  1.95k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5543|   152k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|   152k|    {
 5545|   152k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8054|   152k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|   152k|    {
 8056|   152k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   152k|{
 7044|   152k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   152k|    handler.check_args_exhausted();
 7046|   152k|    return handler.get_error();
 7047|   152k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   152k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   152k|    auto begin = format.data();
 7013|   152k|    auto it = begin;
 7014|   152k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   344k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 336k, False: 8.59k]
  ------------------
 7017|   336k|        const auto ch = *it++;
 7018|   336k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 156k, False: 179k]
  ------------------
 7019|   156k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   156k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   156k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 142k, False: 14.0k]
  ------------------
 7023|   142k|                return;
 7024|   142k|            }
 7025|   156k|        }
 7026|   179k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 3.02k, False: 176k]
  ------------------
 7027|  3.02k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  5.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.50k, False: 1.51k]
  |  |  |  Branch (859:45): [True: 336, False: 2.68k]
  |  |  |  Branch (859:45): [True: 1.16k, False: 1.51k]
  |  |  ------------------
  ------------------
 7028|  1.50k|                handler.on_error("Unmatched '}' in format string");
 7029|  1.50k|                return;
 7030|  1.50k|            }
 7031|       |
 7032|  1.51k|            handler.on_literal_text(begin, it);
 7033|  1.51k|            begin = ++it;
 7034|  1.51k|        }
 7035|   336k|    }
 7036|       |
 7037|  8.59k|    handler.on_literal_text(begin, end);
 7038|  8.59k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   156k|{
 6942|   156k|    struct id_adapter {
 6943|   156k|        constexpr void operator()()
 6944|   156k|        {
 6945|   156k|            arg_id = handler.on_arg_id();
 6946|   156k|        }
 6947|   156k|        constexpr void operator()(std::size_t id)
 6948|   156k|        {
 6949|   156k|            arg_id = handler.on_arg_id(id);
 6950|   156k|        }
 6951|       |
 6952|   156k|        constexpr void on_error(const char* msg)
 6953|   156k|        {
 6954|   156k|            SCN_UNLIKELY_ATTR
 6955|   156k|            handler.on_error(msg);
 6956|   156k|        }
 6957|       |
 6958|   156k|        Handler& handler;
 6959|   156k|        std::size_t arg_id;
 6960|   156k|    };
 6961|       |
 6962|   156k|    ++begin;
 6963|   156k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 156k]
  |  |  ------------------
  ------------------
 6964|    128|        handler.on_error("Unexpected end of replacement field");
 6965|    128|        return begin;
 6966|    128|    }
 6967|       |
 6968|   156k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.76k, False: 150k]
  ------------------
 6969|  5.76k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.76k|    }
 6971|   150k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 5.69k, False: 145k]
  ------------------
 6972|  5.69k|        handler.on_literal_text(begin, begin + 1);
 6973|  5.69k|    }
 6974|   145k|    else {
 6975|   145k|        auto adapter = id_adapter{handler, 0};
 6976|   145k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   145k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 144k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|   144k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 284, False: 144k]
  ------------------
 6984|    284|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    284|        }
 6986|   144k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 97.6k, False: 46.9k]
  ------------------
 6987|  97.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 97.6k]
  |  |  ------------------
  ------------------
 6988|     74|                handler.on_error("Unexpected end of replacement field");
 6989|     74|                return begin;
 6990|     74|            }
 6991|  97.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  97.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.59k, False: 94.0k]
  |  |  |  Branch (859:45): [True: 0, False: 97.6k]
  |  |  |  Branch (859:45): [True: 3.59k, False: 94.0k]
  |  |  ------------------
  ------------------
 6993|  3.59k|                handler.on_error("Unknown format specifier");
 6994|  3.59k|                return begin;
 6995|  3.59k|            }
 6996|  97.6k|        }
 6997|  46.9k|        else {
 6998|  46.9k|            SCN_UNLIKELY_ATTR
 6999|  46.9k|            handler.on_error("Missing '}' in format string");
 7000|  46.9k|            return begin;
 7001|  46.9k|        }
 7002|   144k|    }
 7003|   105k|    return begin + 1;
 7004|   156k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   103k|    {
 8039|   103k|        return m_args.get(id);
 8040|   103k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.04k|    {
 8044|  6.04k|        return m_args;
 8045|  6.04k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  99.7k|    {
 8049|  99.7k|        return m_locale;
 8050|  99.7k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  97.8k|    {
 5566|  97.8k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 97.8k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|  97.8k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  97.8k|        do_check_arg_id(id);
 5574|  97.8k|        return id;
 5575|  97.8k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    112|    {
 5590|    112|        return detail::handle_error(
 5591|    112|            scan_error{scan_error::invalid_format_string, msg});
 5592|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   103k|{
 6054|   103k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   103k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   103k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   145k|{
 6443|   145k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   145k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 145k, False: 0]
  |  Branch (6444:26): [True: 52.9k, False: 92.0k]
  ------------------
 6445|  52.9k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  52.9k|    }
 6447|       |
 6448|  92.0k|    handler();
 6449|  92.0k|    return begin;
 6450|   145k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  52.9k|{
 6413|  52.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  52.9k|    CharT c = *begin;
 6416|  52.9k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 46.6k, False: 6.30k]
  |  Branch (6416:27): [True: 88, False: 6.21k]
  ------------------
 6417|  46.7k|        handler.on_error("Invalid argument ID");
 6418|  46.7k|        return begin;
 6419|  46.7k|    }
 6420|       |
 6421|  6.21k|    int idx = 0;
 6422|  6.21k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 492, False: 5.72k]
  ------------------
 6423|    492|        idx = parse_simple_int(begin, end);
 6424|    492|    }
 6425|  5.72k|    else {
 6426|  5.72k|        ++begin;
 6427|  5.72k|    }
 6428|       |
 6429|  6.21k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 6.10k]
  |  Branch (6429:26): [True: 5.82k, False: 284]
  |  Branch (6429:50): [True: 240, False: 5.58k]
  ------------------
 6430|    350|        handler.on_error("Invalid argument ID");
 6431|    350|        return begin;
 6432|    350|    }
 6433|  5.86k|    handler(idx);
 6434|       |
 6435|  5.86k|    return begin;
 6436|  6.21k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  47.0k|        {
 6954|  47.0k|            SCN_UNLIKELY_ATTR
 6955|  47.0k|            handler.on_error(msg);
 6956|  47.0k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  15.7k|{
 6392|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  15.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  15.7k|    unsigned long long value = 0;
 6396|  36.7k|    do {
 6397|  36.7k|        value *= 10;
 6398|  36.7k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  36.7k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 36.5k]
  ------------------
 6400|  36.7k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  36.5k|        ++begin;
 6404|  36.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 36.2k, False: 294]
  |  Branch (6404:30): [True: 30.5k, False: 5.78k]
  |  Branch (6404:47): [True: 20.9k, False: 9.58k]
  ------------------
 6405|  15.6k|    return static_cast<int>(value);
 6406|  15.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  5.86k|        {
 6949|  5.86k|            arg_id = handler.on_arg_id(id);
 6950|  5.86k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  5.86k|    {
 5579|  5.86k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 5.79k]
  |  |  ------------------
  ------------------
 5580|     70|            on_error(
 5581|     70|                "Cannot switch from manual to automatic argument indexing");
 5582|     70|            return;
 5583|     70|        }
 5584|  5.79k|        m_next_arg_id = -1;
 5585|  5.79k|        do_check_arg_id(id);
 5586|  5.79k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  92.0k|        {
 6945|  92.0k|            arg_id = handler.on_arg_id();
 6946|  92.0k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   195k|    {
 5252|   195k|        return m_type;
 5253|   195k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  93.7k|    {
 5561|  93.7k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  93.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   191k|    {
 5550|   191k|        return m_format.data();
 5551|   191k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|  97.6k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  97.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  97.6k|    {
 7122|  97.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  97.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  97.6k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  97.6k|{
 6858|  97.6k|    auto do_presentation = [&]() -> const CharT* {
 6859|  97.6k|        if (*begin == CharT{'['}) {
 6860|  97.6k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  97.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  97.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  97.6k|                return begin;
 6866|  97.6k|            }
 6867|  97.6k|            handler.on_character_set_string(set);
 6868|  97.6k|            return begin;
 6869|  97.6k|        }
 6870|  97.6k|        if (*begin == CharT{'/'}) {
 6871|  97.6k|            return parse_presentation_regex(begin, end, handler);
 6872|  97.6k|        }
 6873|  97.6k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  97.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  97.6k|            handler.on_error("Invalid type specifier in format string");
 6876|  97.6k|            return begin;
 6877|  97.6k|        }
 6878|  97.6k|        handler.on_type(type);
 6879|  97.6k|        return begin;
 6880|  97.6k|    };
 6881|       |
 6882|  97.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 96.5k, False: 1.07k]
  |  Branch (6882:28): [True: 2.41k, False: 94.1k]
  ------------------
 6883|  97.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 878, False: 1.54k]
  |  Branch (6883:36): [True: 826, False: 52]
  ------------------
 6884|    826|        return do_presentation();
 6885|    826|    }
 6886|       |
 6887|  96.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.7k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  96.7k|    begin = parse_align(begin, end, handler);
 6893|  96.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 96.6k]
  |  |  ------------------
  ------------------
 6894|    126|        handler.on_error("Unexpected end of format string");
 6895|    126|        return begin;
 6896|    126|    }
 6897|       |
 6898|  96.6k|    begin = parse_width(begin, end, handler);
 6899|  96.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 96.5k]
  |  |  ------------------
  ------------------
 6900|    102|        handler.on_error("Unexpected end of format string");
 6901|    102|        return begin;
 6902|    102|    }
 6903|       |
 6904|  96.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 10.9k, False: 85.6k]
  ------------------
 6905|  10.9k|        ++begin;
 6906|  10.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 10.9k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  10.9k|        begin = parse_precision(begin, end, handler);
 6911|  10.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 10.7k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  10.9k|    }
 6916|       |
 6917|  96.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 716, False: 95.6k]
  ------------------
 6918|    716|        handler.on_localized();
 6919|    716|        ++begin;
 6920|    716|    }
 6921|  96.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 96.3k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  96.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 96.3k, False: 0]
  |  Branch (6926:25): [True: 91.4k, False: 4.85k]
  ------------------
 6927|  91.4k|        do_presentation();
 6928|  91.4k|    }
 6929|  96.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.08k, False: 94.2k]
  |  |  ------------------
  ------------------
 6930|  2.08k|        handler.on_error("Unexpected end of format string");
 6931|  2.08k|        return begin;
 6932|  2.08k|    }
 6933|       |
 6934|  94.2k|    return begin;
 6935|  96.3k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.41k|{
 6507|  2.41k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 824, False: 1.59k]
  |  Branch (6507:33): [True: 772, False: 52]
  ------------------
 6508|  2.41k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 340, False: 1.30k]
  |  Branch (6508:33): [True: 106, False: 234]
  ------------------
 6509|  2.41k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  92.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  92.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 13.9k, False: 78.4k]
  ------------------
 6860|  13.9k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  13.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 816, False: 13.0k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    816|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    816|                return begin;
 6866|    816|            }
 6867|  13.0k|            handler.on_character_set_string(set);
 6868|  13.0k|            return begin;
 6869|  13.9k|        }
 6870|  78.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 73.0k, False: 5.37k]
  ------------------
 6871|  73.0k|            return parse_presentation_regex(begin, end, handler);
 6872|  73.0k|        }
 6873|  5.37k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  5.37k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 974, False: 4.40k]
  |  |  ------------------
  ------------------
 6875|    974|            handler.on_error("Invalid type specifier in format string");
 6876|    974|            return begin;
 6877|    974|        }
 6878|  4.40k|        handler.on_type(type);
 6879|  4.40k|        return begin;
 6880|  5.37k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  13.9k|{
 6697|  13.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  13.9k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  13.9k|    auto start = begin;
 6701|  13.9k|    ++begin;
 6702|       |
 6703|  13.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 13.8k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  13.8k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.97k, False: 11.8k]
  ------------------
 6710|  1.97k|        handler.on_charset_inverted();
 6711|  1.97k|        ++begin;
 6712|  1.97k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.94k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  1.94k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 1.88k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  1.94k|    }
 6723|  11.8k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 11.8k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  2.19M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 2.19M, False: 484]
  ------------------
 6728|  2.19M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 222, False: 2.19M]
  |  |  ------------------
  ------------------
 6729|    222|            break;
 6730|    222|        }
 6731|       |
 6732|  2.19M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 13.0k, False: 2.18M]
  ------------------
 6733|  13.0k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  13.0k|        }
 6735|       |
 6736|  2.18M|        parse_presentation_set_literal(begin, end, handler);
 6737|  2.18M|    }
 6738|       |
 6739|    706|    SCN_UNLIKELY_ATTR
 6740|    706|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    706|    return {};
 6742|  13.8k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  2.18M|{
 6661|  2.18M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  2.18M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  2.18M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 2.18M]
  |  |  ------------------
  ------------------
 6665|    100|        return;
 6666|    100|    }
 6667|       |
 6668|  2.18M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 2.18M, False: 188]
  |  Branch (6668:25): [True: 12.7k, False: 2.16M]
  |  Branch (6668:49): [True: 12.7k, False: 34]
  ------------------
 6669|  2.18M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 12.4k, False: 358]
  ------------------
 6670|  12.4k|        ++begin;
 6671|       |
 6672|  12.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  12.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 12.3k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  12.3k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 12.3k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  12.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  12.3k|        return;
 6686|  12.3k|    }
 6687|       |
 6688|  2.16M|    handler.on_charset_single(cp_first);
 6689|  2.16M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  2.19M|{
 6637|  2.19M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  2.19M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  2.19M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 2.19M]
  |  |  |  Branch (859:45): [True: 70, False: 2.19M]
  |  |  |  Branch (859:45): [True: 26, False: 2.19M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  2.19M|    const auto cp =
 6646|  2.19M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  2.19M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 2.19M]
  |  |  ------------------
  ------------------
 6648|     74|        handler.on_error("Invalid encoding in format string");
 6649|     74|        return invalid_code_point;
 6650|     74|    }
 6651|       |
 6652|  2.19M|    begin += len;
 6653|  2.19M|    return cp;
 6654|  2.19M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  13.0k|    {
 6346|  13.0k|        m_specs.charset_string_data = fmt.data();
 6347|  13.0k|        m_specs.charset_string_size = fmt.size();
 6348|  13.0k|        on_type(presentation_type::string_set);
 6349|  13.0k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  73.0k|{
 6749|  73.0k|#if !SCN_DISABLE_REGEX
 6750|  73.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  73.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  73.0k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  73.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6754|       |                  std::is_same_v<CharT, wchar_t>) {
 6755|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|       |        return begin;
 6757|       |    }
 6758|       |
 6759|  73.0k|    auto start = begin;
 6760|  73.0k|    ++begin;
 6761|       |
 6762|  73.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  73.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 72.9k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  72.9k|    handler.on_type(presentation_type::regex);
 6768|  22.5M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 22.5M, False: 236]
  ------------------
 6769|  22.5M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 140k, False: 22.4M]
  ------------------
 6770|   140k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 72.7k, False: 67.5k]
  ------------------
 6771|  72.7k|                break;
 6772|  72.7k|            }
 6773|  67.5k|            else {
 6774|  67.5k|                handler.on_type(presentation_type::regex_escaped);
 6775|  67.5k|            }
 6776|   140k|        }
 6777|  22.5M|    }
 6778|  72.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  72.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 236, False: 72.7k]
  |  |  ------------------
  ------------------
 6779|    236|        handler.on_error("Unexpected end of regex in format string");
 6780|    236|        return begin;
 6781|    236|    }
 6782|       |
 6783|  72.7k|    auto regex_end = begin;
 6784|  72.7k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  72.7k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 72.7k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  72.7k|    handler.on_regex_pattern(regex_pattern);
 6790|  72.7k|    ++begin;
 6791|       |
 6792|  72.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 72.6k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  72.6k|    regex_flags flags{regex_flags::none};
 6798|  72.6k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  72.6k|        {{'m', regex_flags::multiline},
 6800|  72.6k|         {'s', regex_flags::singleline},
 6801|  72.6k|         {'i', regex_flags::nocase},
 6802|  72.6k|         {'n', regex_flags::nocapture}}};
 6803|  85.4k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 85.3k, False: 58]
  ------------------
 6804|  85.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 72.4k, False: 12.9k]
  ------------------
 6805|  72.4k|            break;
 6806|  72.4k|        }
 6807|  12.9k|        bool found_flag = false;
 6808|  35.0k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 35.0k, False: 138]
  ------------------
 6809|  35.0k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 22.2k, False: 12.7k]
  ------------------
 6810|  22.2k|                continue;
 6811|  22.2k|            }
 6812|  12.7k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 12.7k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  12.7k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  12.7k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 12.7k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  12.7k|#endif
 6830|  12.7k|            flags |= flag.second;
 6831|  12.7k|            found_flag = true;
 6832|  12.7k|            break;
 6833|  12.7k|        }
 6834|  12.8k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 138, False: 12.7k]
  ------------------
 6835|    138|            handler.on_error("Invalid flag in regex");
 6836|    138|            return begin;
 6837|    138|        }
 6838|  12.8k|    }
 6839|  72.5k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  72.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 72.4k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  72.4k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  72.5k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  72.7k|    {
 6354|  72.7k|        m_specs.charset_string_data = pattern.data();
 6355|  72.7k|        m_specs.charset_string_size = pattern.size();
 6356|  72.7k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  5.37k|{
 6455|  5.37k|    switch (type) {
 6456|    106|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 106, False: 5.26k]
  ------------------
 6457|    158|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 5.32k]
  ------------------
 6458|    158|            return presentation_type::int_binary;
 6459|    108|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 108, False: 5.26k]
  ------------------
 6460|    108|            return presentation_type::int_decimal;
 6461|    178|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 178, False: 5.19k]
  ------------------
 6462|    178|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 5.30k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    358|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 358, False: 5.01k]
  ------------------
 6466|    358|            return presentation_type::int_octal;
 6467|    116|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 116, False: 5.25k]
  ------------------
 6468|    168|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 5.32k]
  ------------------
 6469|    168|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 5.34k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 5.34k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 5.26k]
  ------------------
 6474|    194|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 88, False: 5.28k]
  ------------------
 6475|    194|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 5.30k]
  ------------------
 6477|    140|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 5.30k]
  ------------------
 6478|    140|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 5.14k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 5.26k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    150|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 150, False: 5.22k]
  ------------------
 6483|    208|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 5.31k]
  ------------------
 6484|    208|            return presentation_type::float_general;
 6485|  1.96k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.96k, False: 3.41k]
  ------------------
 6486|  1.96k|            return presentation_type::string;
 6487|    340|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 340, False: 5.03k]
  ------------------
 6488|    340|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 5.34k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 5.29k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 5.37k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 5.37k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    974|        default:
  ------------------
  |  Branch (6499:9): [True: 974, False: 4.40k]
  ------------------
 6500|    974|            return presentation_type::none;
 6501|  5.37k|    }
 6502|  5.37k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  96.7k|{
 6532|  96.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  96.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  96.7k|    auto check_align = [](wchar_t ch) {
 6535|  96.7k|        switch (ch) {
 6536|  96.7k|            case L'<':
 6537|  96.7k|                return align_type::left;
 6538|  96.7k|            case L'>':
 6539|  96.7k|                return align_type::right;
 6540|  96.7k|            case L'^':
 6541|  96.7k|                return align_type::center;
 6542|  96.7k|            default:
 6543|  96.7k|                return align_type::none;
 6544|  96.7k|        }
 6545|  96.7k|    };
 6546|       |
 6547|  96.7k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  96.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 96.7k]
  |  |  |  Branch (859:45): [True: 38, False: 96.7k]
  |  |  |  Branch (859:45): [True: 4, False: 96.7k]
  |  |  ------------------
  ------------------
 6549|  96.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|  96.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  96.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  96.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  96.7k|    const auto begin_before_fill = begin;
 6559|  96.7k|    begin += potential_fill_len;
 6560|       |
 6561|  96.7k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.03k, False: 95.6k]
  ------------------
 6562|  1.03k|        return begin_before_fill;
 6563|  1.03k|    }
 6564|       |
 6565|  95.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  95.6k|    const auto begin_after_fill = begin;
 6567|  95.6k|    ++begin;
 6568|       |
 6569|  95.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 94.3k, False: 1.38k]
  ------------------
 6570|  94.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  94.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 94.2k]
  |  |  ------------------
  ------------------
 6571|     60|            handler.on_error("Invalid fill character '{' in format string");
 6572|     60|            return begin;
 6573|     60|        }
 6574|  94.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 10.6k, False: 83.5k]
  ------------------
 6575|  10.6k|            return begin_before_fill;
 6576|  10.6k|        }
 6577|  94.2k|    }
 6578|       |
 6579|  84.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 77.2k, False: 7.73k]
  ------------------
 6580|  77.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 5.48k, False: 71.7k]
  ------------------
 6581|  5.48k|            handler.on_align(potential_align_on_fill);
 6582|  5.48k|            return begin_after_fill;
 6583|  5.48k|        }
 6584|  71.7k|        return begin_before_fill;
 6585|  77.2k|    }
 6586|       |
 6587|  7.73k|    handler.on_fill(potential_fill);
 6588|  7.73k|    handler.on_align(potential_align_after_fill);
 6589|  7.73k|    return begin;
 6590|  84.9k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  96.7k|{
 6514|  96.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  96.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|       |    if constexpr (sizeof(CharT) != 1) {
 6516|       |        return 1;
 6517|       |    }
 6518|  96.7k|    else {
 6519|  96.7k|        const auto lengths =
 6520|  96.7k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  96.7k|            "\3\4";
 6522|  96.7k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  96.7k|        return len;
 6524|  96.7k|    }
 6525|  96.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   192k|    auto check_align = [](wchar_t ch) {
 6535|   192k|        switch (ch) {
 6536|  1.50k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.50k, False: 190k]
  ------------------
 6537|  1.50k|                return align_type::left;
 6538|  1.25k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 1.25k, False: 191k]
  ------------------
 6539|  1.25k|                return align_type::right;
 6540|  11.5k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 11.5k, False: 180k]
  ------------------
 6541|  11.5k|                return align_type::center;
 6542|   178k|            default:
  ------------------
  |  Branch (6542:13): [True: 178k, False: 14.2k]
  ------------------
 6543|   178k|                return align_type::none;
 6544|   192k|        }
 6545|   192k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  7.73k|    {
 6268|  7.73k|        m_specs.fill = fill;
 6269|  7.73k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  7.73k|    {
 6149|  7.73k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  7.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  7.73k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  7.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  7.73k|        if constexpr (sizeof(CharT) == 1) {
 6152|  17.6k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 9.92k, False: 7.73k]
  ------------------
 6153|  9.92k|                SCN_GCC_PUSH
 6154|  9.92k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  9.92k|                m_data[i] = s[i];
 6156|  9.92k|                SCN_GCC_POP
 6157|  9.92k|            }
 6158|  7.73k|            m_size = static_cast<unsigned char>(s.size());
 6159|       |        }
 6160|       |        else if constexpr (sizeof(CharT) == 2) {
 6161|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|       |            m_data[1] =
 6163|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|       |            if (s.size() == 1) {
 6165|       |                return;
 6166|       |            }
 6167|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|       |        }
 6170|       |        else {
 6171|       |            const auto front = static_cast<unsigned>(s.front());
 6172|       |            m_data[0] = static_cast<char>(front);
 6173|       |            m_data[1] = static_cast<char>(front >> 8);
 6174|       |            m_data[2] = static_cast<char>(front >> 16);
 6175|       |            m_data[3] = static_cast<char>(front >> 24);
 6176|       |        }
 6177|  7.73k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  96.6k|{
 6597|  96.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  96.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  96.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 17.7k, False: 78.9k]
  |  Branch (6599:33): [True: 4.47k, False: 13.2k]
  ------------------
 6600|  4.47k|        int width = parse_simple_int(begin, end);
 6601|  4.47k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.43k, False: 34]
  |  |  ------------------
  ------------------
 6602|  4.43k|            handler.on_width(width);
 6603|  4.43k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  4.47k|    }
 6609|  96.6k|    return begin;
 6610|  96.6k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  10.9k|{
 6617|  10.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  10.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 10.8k, False: 52]
  |  Branch (6619:33): [True: 10.8k, False: 34]
  ------------------
 6620|  10.8k|        int prec = parse_simple_int(begin, end);
 6621|  10.8k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  10.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.7k, False: 48]
  |  |  ------------------
  ------------------
 6622|  10.7k|            handler.on_precision(prec);
 6623|  10.7k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  10.8k|    }
 6629|  10.8k|    return begin;
 6630|  10.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    716|    {
 7127|    716|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    716|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 642, False: 74]
  ------------------
 7129|    716|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 568, False: 74]
  ------------------
 7130|    716|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 494, False: 74]
  ------------------
 7131|    716|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 420, False: 74]
  ------------------
 7132|    420|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    420|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    420|        }
 7137|       |
 7138|    296|        Handler::on_localized();
 7139|    296|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  93.6k|{
 8417|  93.6k|#define SCN_VISIT(Type)                                         \
 8418|  93.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  93.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  93.6k|    }                                                           \
 8421|  93.6k|    else {                                                      \
 8422|  93.6k|        return vis(monostate_val);                              \
 8423|  93.6k|    }
 8424|       |
 8425|  93.6k|    monostate monostate_val{};
 8426|       |
 8427|  93.6k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 93.6k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 93.6k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  10.4k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 10.4k, False: 83.1k]
  ------------------
 8433|  10.4k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8434|  10.4k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 93.6k]
  ------------------
 8435|  10.4k|            SCN_VISIT(long);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8436|  10.4k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 93.6k]
  ------------------
 8437|  10.4k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8438|  10.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 93.6k]
  ------------------
 8439|  10.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8440|  10.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 93.6k]
  ------------------
 8441|  10.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8442|  20.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 10.4k, False: 83.1k]
  ------------------
 8443|  20.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  20.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  20.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  20.8k|    }                                                           \
  |  | 8421|  20.8k|    else {                                                      \
  |  | 8422|  20.8k|        return vis(monostate_val);                              \
  |  | 8423|  20.8k|    }
  ------------------
 8444|  20.8k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 93.6k]
  ------------------
 8445|  20.8k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  20.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  20.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  20.8k|    }                                                           \
  |  | 8421|  20.8k|    else {                                                      \
  |  | 8422|  20.8k|        return vis(monostate_val);                              \
  |  | 8423|  20.8k|    }
  ------------------
 8446|  20.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 93.6k]
  ------------------
 8447|  20.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  20.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  20.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  20.8k|    }                                                           \
  |  | 8421|  20.8k|    else {                                                      \
  |  | 8422|  20.8k|        return vis(monostate_val);                              \
  |  | 8423|  20.8k|    }
  ------------------
 8448|  31.2k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 10.3k, False: 83.2k]
  ------------------
 8449|  31.2k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  31.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  31.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  31.2k|    }                                                           \
  |  | 8421|  31.2k|    else {                                                      \
  |  | 8422|  31.2k|        return vis(monostate_val);                              \
  |  | 8423|  31.2k|    }
  ------------------
 8450|  41.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 10.4k, False: 83.1k]
  ------------------
 8451|  41.6k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  41.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  41.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.6k|    }                                                           \
  |  | 8421|  41.6k|    else {                                                      \
  |  | 8422|  41.6k|        return vis(monostate_val);                              \
  |  | 8423|  41.6k|    }
  ------------------
 8452|  52.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 10.3k, False: 83.2k]
  ------------------
 8453|  52.0k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  52.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  52.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  52.0k|    }                                                           \
  |  | 8421|  52.0k|    else {                                                      \
  |  | 8422|  52.0k|        return vis(monostate_val);                              \
  |  | 8423|  52.0k|    }
  ------------------
 8454|  52.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 93.6k]
  ------------------
 8455|  52.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  52.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  52.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  52.0k|    }                                                           \
  |  | 8421|  52.0k|    else {                                                      \
  |  | 8422|  52.0k|        return vis(monostate_val);                              \
  |  | 8423|  52.0k|    }
  ------------------
 8456|  52.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 93.6k]
  ------------------
 8457|  52.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  52.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  52.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  52.0k|    }                                                           \
  |  | 8421|  52.0k|    else {                                                      \
  |  | 8422|  52.0k|        return vis(monostate_val);                              \
  |  | 8423|  52.0k|    }
  ------------------
 8458|  52.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 93.6k]
  ------------------
 8459|  52.0k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  52.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  52.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  52.0k|    }                                                           \
  |  | 8421|  52.0k|    else {                                                      \
  |  | 8422|  52.0k|        return vis(monostate_val);                              \
  |  | 8423|  52.0k|    }
  ------------------
 8460|  62.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 10.4k, False: 83.1k]
  ------------------
 8461|  62.4k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  62.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  62.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  62.4k|    }                                                           \
  |  | 8421|  62.4k|    else {                                                      \
  |  | 8422|  62.4k|        return vis(monostate_val);                              \
  |  | 8423|  62.4k|    }
  ------------------
 8462|  62.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 93.6k]
  ------------------
 8463|  62.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  62.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  62.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  62.4k|    }                                                           \
  |  | 8421|  62.4k|    else {                                                      \
  |  | 8422|  62.4k|        return vis(monostate_val);                              \
  |  | 8423|  62.4k|    }
  ------------------
 8464|  72.8k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 10.3k, False: 83.2k]
  ------------------
 8465|  72.8k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  72.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  72.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  72.8k|    }                                                           \
  |  | 8421|  72.8k|    else {                                                      \
  |  | 8422|  72.8k|        return vis(monostate_val);                              \
  |  | 8423|  72.8k|    }
  ------------------
 8466|  83.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 10.3k, False: 83.2k]
  ------------------
 8467|  83.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  83.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  83.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  83.2k|    }                                                           \
  |  | 8421|  83.2k|    else {                                                      \
  |  | 8422|  83.2k|        return vis(monostate_val);                              \
  |  | 8423|  83.2k|    }
  ------------------
 8468|  83.2k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 93.6k]
  ------------------
 8469|  83.2k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  83.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  83.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  83.2k|    }                                                           \
  |  | 8421|  83.2k|    else {                                                      \
  |  | 8422|  83.2k|        return vis(monostate_val);                              \
  |  | 8423|  83.2k|    }
  ------------------
 8470|  93.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 10.3k, False: 83.2k]
  ------------------
 8471|  93.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  93.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  93.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.6k|    }                                                           \
  |  | 8421|  93.6k|    else {                                                      \
  |  | 8422|  93.6k|        return vis(monostate_val);                              \
  |  | 8423|  93.6k|    }
  ------------------
 8472|  93.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 93.6k]
  ------------------
 8473|  93.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  93.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  93.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.6k|    }                                                           \
  |  | 8421|  93.6k|    else {                                                      \
  |  | 8422|  93.6k|        return vis(monostate_val);                              \
  |  | 8423|  93.6k|    }
  ------------------
 8474|  93.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 93.6k]
  ------------------
 8475|  93.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  93.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  93.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.6k|    }                                                           \
  |  | 8421|  93.6k|    else {                                                      \
  |  | 8422|  93.6k|        return vis(monostate_val);                              \
  |  | 8423|  93.6k|    }
  ------------------
 8476|       |
 8477|  93.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 93.6k]
  ------------------
 8478|  93.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  93.6k|            return vis(
 8480|  93.6k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 93.6k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 93.6k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  93.6k|            SCN_CLANG_POP
 8495|  93.6k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  11.6k|    {
 3330|  11.6k|        return m_iterator;
 3331|  11.6k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  2.07k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.07k|    {
 1430|  2.07k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  2.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.07k|    {
  437|  2.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.30k|    {
 1177|  2.30k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  6.74k|    {
 3334|  6.74k|        return m_sentinel;
 3335|  6.74k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1473|    226|        : base(unexpect, std::move(e.error())),
 1474|    226|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    226|    {
 1476|    226|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    226|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    226|          m_has_value(false)
  446|    226|    {
  447|    226|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3314|  5.41k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.41k|    static_cast<    \
  |  |  929|  5.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.41k|    static_cast<    \
  |  |  929|  5.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  5.41k|    {
 3316|  5.41k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    262|    {
 1598|    262|        return has_value();
 1599|    262|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.54k|    {
  485|  4.54k|        return m_has_value;
  486|  4.54k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1652|    210|    {
 1653|    210|        return value();
 1654|    210|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  2.07k|    {
 1627|  2.07k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.07k|        return this->get_value();
 1629|  2.07k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.07k|    {
  451|  2.07k|        return m_value;
  452|  2.07k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  2.03k|    {
 1837|  2.03k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.03k|                                            std::forward<F>(f));
 1839|  2.03k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  2.03k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.03k|    else {
 1333|  2.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.86k, False: 174]
  |  |  ------------------
  ------------------
 1335|  2.03k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.03k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  2.03k|    }
 1340|  2.03k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.86k|    {
 1663|  1.86k|        return std::move(value());
 1664|  1.86k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.86k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.86k|    {
 1430|  1.86k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.86k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.86k|    {
  437|  1.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.03k|    {
 1177|  2.03k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1483|    174|        : base(unexpect, std::forward<Args>(args)...),
 1484|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  2.03k|    {
 1598|  2.03k|        return has_value();
 1599|  2.03k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.07k|    {
  485|  4.07k|        return m_has_value;
  486|  4.07k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.86k|    {
 1663|  1.86k|        return std::move(value());
 1664|  1.86k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.86k|    {
 1627|  1.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.86k|        return this->get_value();
 1629|  1.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.86k|    {
  451|  1.86k|        return m_value;
  452|  1.86k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   305k|    {
 5466|   305k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 305k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   305k|        return static_cast<std::size_t>(m_desc &
 5471|   305k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   305k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   352k|    {
 5491|   352k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   352k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  47.1k|    {
 5434|  47.1k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.1k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  47.1k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 47.1k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  47.1k|        const auto t = type(id);
 5446|  47.1k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 45.7k]
  |  |  ------------------
  ------------------
 5447|  1.36k|            return {};
 5448|  1.36k|        }
 5449|       |
 5450|  45.7k|        basic_scan_arg<Context> arg;
 5451|  45.7k|        arg.m_type = t;
 5452|  45.7k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 45.7k, False: 0]
  ------------------
 5453|  45.7k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  45.7k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  45.7k|        return arg;
 5459|  47.1k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  47.1k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  47.1k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  47.1k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  47.1k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  47.1k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  47.1k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  45.7k|    {
 5495|  45.7k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  45.7k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  90.8k|    {
 5247|  90.8k|        return m_type != detail::arg_type::none_type;
 5248|  90.8k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.20k|{
 8417|  5.20k|#define SCN_VISIT(Type)                                         \
 8418|  5.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.20k|    }                                                           \
 8421|  5.20k|    else {                                                      \
 8422|  5.20k|        return vis(monostate_val);                              \
 8423|  5.20k|    }
 8424|       |
 8425|  5.20k|    monostate monostate_val{};
 8426|       |
 8427|  5.20k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.20k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.20k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    578|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 578, False: 4.62k]
  ------------------
 8433|    578|            SCN_VISIT(int);
  ------------------
  |  | 8418|    578|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    578|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    578|    }                                                           \
  |  | 8421|    578|    else {                                                      \
  |  | 8422|    578|        return vis(monostate_val);                              \
  |  | 8423|    578|    }
  ------------------
 8434|    578|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.20k]
  ------------------
 8435|    578|            SCN_VISIT(long);
  ------------------
  |  | 8418|    578|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    578|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    578|    }                                                           \
  |  | 8421|    578|    else {                                                      \
  |  | 8422|    578|        return vis(monostate_val);                              \
  |  | 8423|    578|    }
  ------------------
 8436|    578|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.20k]
  ------------------
 8437|    578|            SCN_VISIT(long long);
  ------------------
  |  | 8418|    578|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    578|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    578|    }                                                           \
  |  | 8421|    578|    else {                                                      \
  |  | 8422|    578|        return vis(monostate_val);                              \
  |  | 8423|    578|    }
  ------------------
 8438|    578|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.20k]
  ------------------
 8439|    578|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|    578|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    578|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    578|    }                                                           \
  |  | 8421|    578|    else {                                                      \
  |  | 8422|    578|        return vis(monostate_val);                              \
  |  | 8423|    578|    }
  ------------------
 8440|    578|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.20k]
  ------------------
 8441|    578|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|    578|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|    578|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    578|    }                                                           \
  |  | 8421|    578|    else {                                                      \
  |  | 8422|    578|        return vis(monostate_val);                              \
  |  | 8423|    578|    }
  ------------------
 8442|  1.15k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 578, False: 4.62k]
  ------------------
 8443|  1.15k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  1.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.15k|    }                                                           \
  |  | 8421|  1.15k|    else {                                                      \
  |  | 8422|  1.15k|        return vis(monostate_val);                              \
  |  | 8423|  1.15k|    }
  ------------------
 8444|  1.15k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.20k]
  ------------------
 8445|  1.15k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  1.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.15k|    }                                                           \
  |  | 8421|  1.15k|    else {                                                      \
  |  | 8422|  1.15k|        return vis(monostate_val);                              \
  |  | 8423|  1.15k|    }
  ------------------
 8446|  1.15k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.20k]
  ------------------
 8447|  1.15k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  1.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.15k|    }                                                           \
  |  | 8421|  1.15k|    else {                                                      \
  |  | 8422|  1.15k|        return vis(monostate_val);                              \
  |  | 8423|  1.15k|    }
  ------------------
 8448|  1.73k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 578, False: 4.62k]
  ------------------
 8449|  1.73k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  1.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.73k|    }                                                           \
  |  | 8421|  1.73k|    else {                                                      \
  |  | 8422|  1.73k|        return vis(monostate_val);                              \
  |  | 8423|  1.73k|    }
  ------------------
 8450|  2.31k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 578, False: 4.62k]
  ------------------
 8451|  2.31k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  2.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  2.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.31k|    }                                                           \
  |  | 8421|  2.31k|    else {                                                      \
  |  | 8422|  2.31k|        return vis(monostate_val);                              \
  |  | 8423|  2.31k|    }
  ------------------
 8452|  2.31k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.20k]
  ------------------
 8453|  2.31k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  2.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  2.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.31k|    }                                                           \
  |  | 8421|  2.31k|    else {                                                      \
  |  | 8422|  2.31k|        return vis(monostate_val);                              \
  |  | 8423|  2.31k|    }
  ------------------
 8454|  2.89k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 578, False: 4.62k]
  ------------------
 8455|  2.89k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  2.89k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  2.89k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.89k|    }                                                           \
  |  | 8421|  2.89k|    else {                                                      \
  |  | 8422|  2.89k|        return vis(monostate_val);                              \
  |  | 8423|  2.89k|    }
  ------------------
 8456|  2.89k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.20k]
  ------------------
 8457|  2.89k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  2.89k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  2.89k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.89k|    }                                                           \
  |  | 8421|  2.89k|    else {                                                      \
  |  | 8422|  2.89k|        return vis(monostate_val);                              \
  |  | 8423|  2.89k|    }
  ------------------
 8458|  2.89k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.20k]
  ------------------
 8459|  2.89k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  2.89k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  2.89k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.89k|    }                                                           \
  |  | 8421|  2.89k|    else {                                                      \
  |  | 8422|  2.89k|        return vis(monostate_val);                              \
  |  | 8423|  2.89k|    }
  ------------------
 8460|  3.46k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 578, False: 4.62k]
  ------------------
 8461|  3.46k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  3.46k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.46k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.46k|    }                                                           \
  |  | 8421|  3.46k|    else {                                                      \
  |  | 8422|  3.46k|        return vis(monostate_val);                              \
  |  | 8423|  3.46k|    }
  ------------------
 8462|  3.46k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.20k]
  ------------------
 8463|  3.46k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  3.46k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.46k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.46k|    }                                                           \
  |  | 8421|  3.46k|    else {                                                      \
  |  | 8422|  3.46k|        return vis(monostate_val);                              \
  |  | 8423|  3.46k|    }
  ------------------
 8464|  3.46k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.20k]
  ------------------
 8465|  3.46k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  3.46k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  3.46k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.46k|    }                                                           \
  |  | 8421|  3.46k|    else {                                                      \
  |  | 8422|  3.46k|        return vis(monostate_val);                              \
  |  | 8423|  3.46k|    }
  ------------------
 8466|  4.04k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 578, False: 4.62k]
  ------------------
 8467|  4.04k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  4.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.04k|    }                                                           \
  |  | 8421|  4.04k|    else {                                                      \
  |  | 8422|  4.04k|        return vis(monostate_val);                              \
  |  | 8423|  4.04k|    }
  ------------------
 8468|  4.62k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 578, False: 4.62k]
  ------------------
 8469|  4.62k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.62k|    }                                                           \
  |  | 8421|  4.62k|    else {                                                      \
  |  | 8422|  4.62k|        return vis(monostate_val);                              \
  |  | 8423|  4.62k|    }
  ------------------
 8470|  5.20k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 578, False: 4.62k]
  ------------------
 8471|  5.20k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  5.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.20k|    }                                                           \
  |  | 8421|  5.20k|    else {                                                      \
  |  | 8422|  5.20k|        return vis(monostate_val);                              \
  |  | 8423|  5.20k|    }
  ------------------
 8472|  5.20k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.20k]
  ------------------
 8473|  5.20k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  5.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.20k|    }                                                           \
  |  | 8421|  5.20k|    else {                                                      \
  |  | 8422|  5.20k|        return vis(monostate_val);                              \
  |  | 8423|  5.20k|    }
  ------------------
 8474|  5.20k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.20k]
  ------------------
 8475|  5.20k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  5.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  5.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.20k|    }                                                           \
  |  | 8421|  5.20k|    else {                                                      \
  |  | 8422|  5.20k|        return vis(monostate_val);                              \
  |  | 8423|  5.20k|    }
  ------------------
 8476|       |
 8477|  5.20k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.20k]
  ------------------
 8478|  5.20k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  5.20k|            return vis(
 8480|  5.20k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.20k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.20k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.20k|            SCN_CLANG_POP
 8495|  5.20k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5543|   305k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|   305k|    {
 5545|   305k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8054|   305k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|   305k|    {
 8056|   305k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   305k|{
 7044|   305k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   305k|    handler.check_args_exhausted();
 7046|   305k|    return handler.get_error();
 7047|   305k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   305k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   305k|    auto begin = format.data();
 7013|   305k|    auto it = begin;
 7014|   305k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   632M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 632M, False: 107k]
  ------------------
 7017|   632M|        const auto ch = *it++;
 7018|   632M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 48.3k, False: 632M]
  ------------------
 7019|  48.3k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  48.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  48.3k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 44.0k, False: 4.24k]
  ------------------
 7023|  44.0k|                return;
 7024|  44.0k|            }
 7025|  48.3k|        }
 7026|   632M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 156k, False: 632M]
  ------------------
 7027|   156k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 153k, False: 3.09k]
  |  |  |  Branch (859:45): [True: 466, False: 156k]
  |  |  |  Branch (859:45): [True: 153k, False: 3.09k]
  |  |  ------------------
  ------------------
 7028|   153k|                handler.on_error("Unmatched '}' in format string");
 7029|   153k|                return;
 7030|   153k|            }
 7031|       |
 7032|  3.09k|            handler.on_literal_text(begin, it);
 7033|  3.09k|            begin = ++it;
 7034|  3.09k|        }
 7035|   632M|    }
 7036|       |
 7037|   107k|    handler.on_literal_text(begin, end);
 7038|   107k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  48.3k|{
 6942|  48.3k|    struct id_adapter {
 6943|  48.3k|        constexpr void operator()()
 6944|  48.3k|        {
 6945|  48.3k|            arg_id = handler.on_arg_id();
 6946|  48.3k|        }
 6947|  48.3k|        constexpr void operator()(std::size_t id)
 6948|  48.3k|        {
 6949|  48.3k|            arg_id = handler.on_arg_id(id);
 6950|  48.3k|        }
 6951|       |
 6952|  48.3k|        constexpr void on_error(const char* msg)
 6953|  48.3k|        {
 6954|  48.3k|            SCN_UNLIKELY_ATTR
 6955|  48.3k|            handler.on_error(msg);
 6956|  48.3k|        }
 6957|       |
 6958|  48.3k|        Handler& handler;
 6959|  48.3k|        std::size_t arg_id;
 6960|  48.3k|    };
 6961|       |
 6962|  48.3k|    ++begin;
 6963|  48.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 48.2k]
  |  |  ------------------
  ------------------
 6964|     70|        handler.on_error("Unexpected end of replacement field");
 6965|     70|        return begin;
 6966|     70|    }
 6967|       |
 6968|  48.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.20k, False: 43.0k]
  ------------------
 6969|  5.20k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.20k|    }
 6971|  43.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 204, False: 42.8k]
  ------------------
 6972|    204|        handler.on_literal_text(begin, begin + 1);
 6973|    204|    }
 6974|  42.8k|    else {
 6975|  42.8k|        auto adapter = id_adapter{handler, 0};
 6976|  42.8k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  42.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 42.7k]
  |  |  ------------------
  ------------------
 6979|    120|            handler.on_error("Missing '}' in format string");
 6980|    120|            return begin;
 6981|    120|        }
 6982|       |
 6983|  42.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 276, False: 42.4k]
  ------------------
 6984|    276|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    276|        }
 6986|  42.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 41.7k, False: 680]
  ------------------
 6987|  41.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 41.6k]
  |  |  ------------------
  ------------------
 6988|     50|                handler.on_error("Unexpected end of replacement field");
 6989|     50|                return begin;
 6990|     50|            }
 6991|  41.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  41.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  83.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.66k, False: 39.0k]
  |  |  |  Branch (859:45): [True: 0, False: 41.6k]
  |  |  |  Branch (859:45): [True: 2.66k, False: 39.0k]
  |  |  ------------------
  ------------------
 6993|  2.66k|                handler.on_error("Unknown format specifier");
 6994|  2.66k|                return begin;
 6995|  2.66k|            }
 6996|  41.6k|        }
 6997|    680|        else {
 6998|    680|            SCN_UNLIKELY_ATTR
 6999|    680|            handler.on_error("Missing '}' in format string");
 7000|    680|            return begin;
 7001|    680|        }
 7002|  42.7k|    }
 7003|  44.7k|    return begin + 1;
 7004|  48.2k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  47.1k|    {
 8039|  47.1k|        return m_args.get(id);
 8040|  47.1k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  5.48k|    {
 8044|  5.48k|        return m_args;
 8045|  5.48k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  44.1k|    {
 8049|  44.1k|        return m_locale;
 8050|  44.1k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  46.6k|    {
 5566|  46.6k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 46.6k]
  |  |  ------------------
  ------------------
 5567|     40|            on_error(
 5568|     40|                "Cannot switch from manual to automatic argument indexing");
 5569|     40|            return 0;
 5570|     40|        }
 5571|       |
 5572|  46.6k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  46.6k|        do_check_arg_id(id);
 5574|  46.6k|        return id;
 5575|  46.6k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    128|    {
 5590|    128|        return detail::handle_error(
 5591|    128|            scan_error{scan_error::invalid_format_string, msg});
 5592|    128|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  47.1k|{
 6054|  47.1k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  47.1k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  47.1k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  42.8k|{
 6443|  42.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  42.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 42.8k, False: 0]
  |  Branch (6444:26): [True: 1.35k, False: 41.4k]
  ------------------
 6445|  1.35k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  1.35k|    }
 6447|       |
 6448|  41.4k|    handler();
 6449|  41.4k|    return begin;
 6450|  42.8k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  1.35k|{
 6413|  1.35k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  1.35k|    CharT c = *begin;
 6416|  1.35k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 144, False: 1.21k]
  |  Branch (6416:27): [True: 468, False: 744]
  ------------------
 6417|    612|        handler.on_error("Invalid argument ID");
 6418|    612|        return begin;
 6419|    612|    }
 6420|       |
 6421|    744|    int idx = 0;
 6422|    744|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 424, False: 320]
  ------------------
 6423|    424|        idx = parse_simple_int(begin, end);
 6424|    424|    }
 6425|    320|    else {
 6426|    320|        ++begin;
 6427|    320|    }
 6428|       |
 6429|    744|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 120, False: 624]
  |  Branch (6429:26): [True: 348, False: 276]
  |  Branch (6429:50): [True: 68, False: 280]
  ------------------
 6430|    188|        handler.on_error("Invalid argument ID");
 6431|    188|        return begin;
 6432|    188|    }
 6433|    556|    handler(idx);
 6434|       |
 6435|    556|    return begin;
 6436|    744|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    800|        {
 6954|    800|            SCN_UNLIKELY_ATTR
 6955|    800|            handler.on_error(msg);
 6956|    800|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  21.4k|{
 6392|  21.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  21.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  21.4k|    unsigned long long value = 0;
 6396|  24.4k|    do {
 6397|  24.4k|        value *= 10;
 6398|  24.4k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  24.4k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 82, False: 24.3k]
  ------------------
 6400|  24.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|     82|            return -1;
 6402|     82|        }
 6403|  24.3k|        ++begin;
 6404|  24.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 24.0k, False: 310]
  |  Branch (6404:30): [True: 8.78k, False: 15.2k]
  |  Branch (6404:47): [True: 2.98k, False: 5.80k]
  ------------------
 6405|  21.3k|    return static_cast<int>(value);
 6406|  21.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    556|        {
 6949|    556|            arg_id = handler.on_arg_id(id);
 6950|    556|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    556|    {
 5579|    556|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    556|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 468]
  |  |  ------------------
  ------------------
 5580|     88|            on_error(
 5581|     88|                "Cannot switch from manual to automatic argument indexing");
 5582|     88|            return;
 5583|     88|        }
 5584|    468|        m_next_arg_id = -1;
 5585|    468|        do_check_arg_id(id);
 5586|    468|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  41.4k|        {
 6945|  41.4k|            arg_id = handler.on_arg_id();
 6946|  41.4k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  83.3k|    {
 5252|  83.3k|        return m_type;
 5253|  83.3k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  38.6k|    {
 5561|  38.6k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  38.6k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  80.3k|    {
 5550|  80.3k|        return m_format.data();
 5551|  80.3k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|  41.6k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  41.6k|    {
 7122|  41.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  41.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  41.6k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  41.6k|{
 6858|  41.6k|    auto do_presentation = [&]() -> const CharT* {
 6859|  41.6k|        if (*begin == CharT{'['}) {
 6860|  41.6k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  41.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  41.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  41.6k|                return begin;
 6866|  41.6k|            }
 6867|  41.6k|            handler.on_character_set_string(set);
 6868|  41.6k|            return begin;
 6869|  41.6k|        }
 6870|  41.6k|        if (*begin == CharT{'/'}) {
 6871|  41.6k|            return parse_presentation_regex(begin, end, handler);
 6872|  41.6k|        }
 6873|  41.6k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  41.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  41.6k|            handler.on_error("Invalid type specifier in format string");
 6876|  41.6k|            return begin;
 6877|  41.6k|        }
 6878|  41.6k|        handler.on_type(type);
 6879|  41.6k|        return begin;
 6880|  41.6k|    };
 6881|       |
 6882|  41.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 40.7k, False: 976]
  |  Branch (6882:28): [True: 2.78k, False: 37.9k]
  ------------------
 6883|  41.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 302, False: 2.48k]
  |  Branch (6883:36): [True: 232, False: 70]
  ------------------
 6884|    232|        return do_presentation();
 6885|    232|    }
 6886|       |
 6887|  41.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.4k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  41.4k|    begin = parse_align(begin, end, handler);
 6893|  41.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 41.3k]
  |  |  ------------------
  ------------------
 6894|    102|        handler.on_error("Unexpected end of format string");
 6895|    102|        return begin;
 6896|    102|    }
 6897|       |
 6898|  41.3k|    begin = parse_width(begin, end, handler);
 6899|  41.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 41.2k]
  |  |  ------------------
  ------------------
 6900|     98|        handler.on_error("Unexpected end of format string");
 6901|     98|        return begin;
 6902|     98|    }
 6903|       |
 6904|  41.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 3.64k, False: 37.6k]
  ------------------
 6905|  3.64k|        ++begin;
 6906|  3.64k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 3.61k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  3.61k|        begin = parse_precision(begin, end, handler);
 6911|  3.61k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 3.49k]
  |  |  ------------------
  ------------------
 6912|    118|            handler.on_error("Unexpected end of format string");
 6913|    118|            return begin;
 6914|    118|        }
 6915|  3.61k|    }
 6916|       |
 6917|  41.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 608, False: 40.5k]
  ------------------
 6918|    608|        handler.on_localized();
 6919|    608|        ++begin;
 6920|    608|    }
 6921|  41.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 41.0k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  41.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 41.0k, False: 0]
  |  Branch (6926:25): [True: 36.5k, False: 4.55k]
  ------------------
 6927|  36.5k|        do_presentation();
 6928|  36.5k|    }
 6929|  41.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.71k, False: 39.3k]
  |  |  ------------------
  ------------------
 6930|  1.71k|        handler.on_error("Unexpected end of format string");
 6931|  1.71k|        return begin;
 6932|  1.71k|    }
 6933|       |
 6934|  39.3k|    return begin;
 6935|  41.0k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  2.78k|{
 6507|  2.78k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 230, False: 2.55k]
  |  Branch (6507:33): [True: 196, False: 34]
  ------------------
 6508|  2.78k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 176, False: 2.41k]
  |  Branch (6508:33): [True: 106, False: 70]
  ------------------
 6509|  2.78k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  36.7k|    auto do_presentation = [&]() -> const CharT* {
 6859|  36.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 2.64k, False: 34.0k]
  ------------------
 6860|  2.64k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.64k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 608, False: 2.04k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    608|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    608|                return begin;
 6866|    608|            }
 6867|  2.04k|            handler.on_character_set_string(set);
 6868|  2.04k|            return begin;
 6869|  2.64k|        }
 6870|  34.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 30.9k, False: 3.18k]
  ------------------
 6871|  30.9k|            return parse_presentation_regex(begin, end, handler);
 6872|  30.9k|        }
 6873|  3.18k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.18k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 654, False: 2.53k]
  |  |  ------------------
  ------------------
 6875|    654|            handler.on_error("Invalid type specifier in format string");
 6876|    654|            return begin;
 6877|    654|        }
 6878|  2.53k|        handler.on_type(type);
 6879|  2.53k|        return begin;
 6880|  3.18k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  2.64k|{
 6697|  2.64k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.64k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.64k|    auto start = begin;
 6701|  2.64k|    ++begin;
 6702|       |
 6703|  2.64k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.61k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     34|        return {};
 6708|     34|    }
 6709|  2.61k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.13k, False: 1.47k]
  ------------------
 6710|  1.13k|        handler.on_charset_inverted();
 6711|  1.13k|        ++begin;
 6712|  1.13k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.10k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  1.10k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 1.05k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  1.10k|    }
 6723|  1.47k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 36, False: 1.44k]
  ------------------
 6724|     36|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     36|    }
 6726|       |
 6727|  20.1k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 19.8k, False: 322]
  ------------------
 6728|  19.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 182, False: 19.6k]
  |  |  ------------------
  ------------------
 6729|    182|            break;
 6730|    182|        }
 6731|       |
 6732|  19.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.04k, False: 17.6k]
  ------------------
 6733|  2.04k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.04k|        }
 6735|       |
 6736|  17.6k|        parse_presentation_set_literal(begin, end, handler);
 6737|  17.6k|    }
 6738|       |
 6739|    504|    SCN_UNLIKELY_ATTR
 6740|    504|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    504|    return {};
 6742|  2.54k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  17.6k|{
 6661|  17.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  17.6k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  17.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 146, False: 17.4k]
  |  |  ------------------
  ------------------
 6665|    146|        return;
 6666|    146|    }
 6667|       |
 6668|  17.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 17.3k, False: 96]
  |  Branch (6668:25): [True: 1.26k, False: 16.1k]
  |  Branch (6668:49): [True: 1.23k, False: 34]
  ------------------
 6669|  17.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 1.17k, False: 52]
  ------------------
 6670|  1.17k|        ++begin;
 6671|       |
 6672|  1.17k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  1.17k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.14k]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|  1.14k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.11k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  1.11k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  1.11k|        return;
 6686|  1.14k|    }
 6687|       |
 6688|  16.2k|    handler.on_charset_single(cp_first);
 6689|  16.2k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  18.7k|{
 6637|  18.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  18.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  18.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.7k]
  |  |  |  Branch (859:45): [True: 0, False: 18.7k]
  |  |  |  Branch (859:45): [True: 0, False: 18.7k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  18.7k|    const auto cp =
 6646|  18.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  18.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 18.6k]
  |  |  ------------------
  ------------------
 6648|    180|        handler.on_error("Invalid encoding in format string");
 6649|    180|        return invalid_code_point;
 6650|    180|    }
 6651|       |
 6652|  18.6k|    begin += len;
 6653|  18.6k|    return cp;
 6654|  18.7k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  2.04k|    {
 6346|  2.04k|        m_specs.charset_string_data = fmt.data();
 6347|  2.04k|        m_specs.charset_string_size = fmt.size();
 6348|  2.04k|        on_type(presentation_type::string_set);
 6349|  2.04k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  30.9k|{
 6749|  30.9k|#if !SCN_DISABLE_REGEX
 6750|  30.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  30.9k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6754|       |                  std::is_same_v<CharT, wchar_t>) {
 6755|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|       |        return begin;
 6757|       |    }
 6758|       |
 6759|  30.9k|    auto start = begin;
 6760|  30.9k|    ++begin;
 6761|       |
 6762|  30.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.8k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  30.8k|    handler.on_type(presentation_type::regex);
 6768|  2.88M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 2.88M, False: 136]
  ------------------
 6769|  2.88M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 37.9k, False: 2.84M]
  ------------------
 6770|  37.9k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 30.7k, False: 7.17k]
  ------------------
 6771|  30.7k|                break;
 6772|  30.7k|            }
 6773|  7.17k|            else {
 6774|  7.17k|                handler.on_type(presentation_type::regex_escaped);
 6775|  7.17k|            }
 6776|  37.9k|        }
 6777|  2.88M|    }
 6778|  30.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136, False: 30.7k]
  |  |  ------------------
  ------------------
 6779|    136|        handler.on_error("Unexpected end of regex in format string");
 6780|    136|        return begin;
 6781|    136|    }
 6782|       |
 6783|  30.7k|    auto regex_end = begin;
 6784|  30.7k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  30.7k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.7k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  30.7k|    handler.on_regex_pattern(regex_pattern);
 6790|  30.7k|    ++begin;
 6791|       |
 6792|  30.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.6k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  30.6k|    regex_flags flags{regex_flags::none};
 6798|  30.6k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  30.6k|        {{'m', regex_flags::multiline},
 6800|  30.6k|         {'s', regex_flags::singleline},
 6801|  30.6k|         {'i', regex_flags::nocase},
 6802|  30.6k|         {'n', regex_flags::nocapture}}};
 6803|  35.4k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 35.3k, False: 44]
  ------------------
 6804|  35.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 30.5k, False: 4.87k]
  ------------------
 6805|  30.5k|            break;
 6806|  30.5k|        }
 6807|  4.87k|        bool found_flag = false;
 6808|  13.5k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 13.5k, False: 60]
  ------------------
 6809|  13.5k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 8.70k, False: 4.81k]
  ------------------
 6810|  8.70k|                continue;
 6811|  8.70k|            }
 6812|  4.81k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 40, False: 4.77k]
  ------------------
 6813|     40|                handler.on_error("Flag set multiple times in regex");
 6814|     40|                return begin;
 6815|     40|            }
 6816|  4.77k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  4.77k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 46, False: 4.72k]
  ------------------
 6818|       |                // clang-format off
 6819|     46|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     46|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  4.77k|#endif
 6830|  4.77k|            flags |= flag.second;
 6831|  4.77k|            found_flag = true;
 6832|  4.77k|            break;
 6833|  4.81k|        }
 6834|  4.83k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 60, False: 4.77k]
  ------------------
 6835|     60|            handler.on_error("Invalid flag in regex");
 6836|     60|            return begin;
 6837|     60|        }
 6838|  4.83k|    }
 6839|  30.5k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  30.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 30.5k]
  |  |  ------------------
  ------------------
 6842|     44|        handler.on_error("Unexpected end of regex in format string");
 6843|     44|        return begin;
 6844|     44|    }
 6845|       |
 6846|  30.5k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  30.5k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  30.7k|    {
 6354|  30.7k|        m_specs.charset_string_data = pattern.data();
 6355|  30.7k|        m_specs.charset_string_size = pattern.size();
 6356|  30.7k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  3.18k|{
 6455|  3.18k|    switch (type) {
 6456|     88|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 88, False: 3.10k]
  ------------------
 6457|    122|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 3.15k]
  ------------------
 6458|    122|            return presentation_type::int_binary;
 6459|    106|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 106, False: 3.08k]
  ------------------
 6460|    106|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 3.02k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|    124|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 124, False: 3.06k]
  ------------------
 6464|    124|            return presentation_type::int_unsigned_decimal;
 6465|    124|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 124, False: 3.06k]
  ------------------
 6466|    124|            return presentation_type::int_octal;
 6467|    106|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 106, False: 3.08k]
  ------------------
 6468|    166|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 60, False: 3.12k]
  ------------------
 6469|    166|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 3.15k]
  ------------------
 6471|     74|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 40, False: 3.14k]
  ------------------
 6472|     74|            return presentation_type::int_arbitrary_base;
 6473|    150|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 150, False: 3.03k]
  ------------------
 6474|    238|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 88, False: 3.10k]
  ------------------
 6475|    238|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 3.11k]
  ------------------
 6477|    104|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 3.15k]
  ------------------
 6478|    104|            return presentation_type::float_scientific;
 6479|     52|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 52, False: 3.13k]
  ------------------
 6480|    140|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 88, False: 3.10k]
  ------------------
 6481|    140|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 3.15k]
  ------------------
 6483|     86|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 52, False: 3.13k]
  ------------------
 6484|     86|            return presentation_type::float_general;
 6485|    790|        case 's':
  ------------------
  |  Branch (6485:9): [True: 790, False: 2.39k]
  ------------------
 6486|    790|            return presentation_type::string;
 6487|    196|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 196, False: 2.99k]
  ------------------
 6488|    196|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 3.15k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     70|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 70, False: 3.11k]
  ------------------
 6492|     70|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.18k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 3.18k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    654|        default:
  ------------------
  |  Branch (6499:9): [True: 654, False: 2.53k]
  ------------------
 6500|    654|            return presentation_type::none;
 6501|  3.18k|    }
 6502|  3.18k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  41.4k|{
 6532|  41.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  41.4k|    auto check_align = [](wchar_t ch) {
 6535|  41.4k|        switch (ch) {
 6536|  41.4k|            case L'<':
 6537|  41.4k|                return align_type::left;
 6538|  41.4k|            case L'>':
 6539|  41.4k|                return align_type::right;
 6540|  41.4k|            case L'^':
 6541|  41.4k|                return align_type::center;
 6542|  41.4k|            default:
 6543|  41.4k|                return align_type::none;
 6544|  41.4k|        }
 6545|  41.4k|    };
 6546|       |
 6547|  41.4k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  41.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.4k]
  |  |  |  Branch (859:45): [True: 0, False: 41.4k]
  |  |  |  Branch (859:45): [True: 0, False: 41.4k]
  |  |  ------------------
  ------------------
 6549|  41.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  41.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  41.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  41.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  41.4k|    const auto begin_before_fill = begin;
 6559|  41.4k|    begin += potential_fill_len;
 6560|       |
 6561|  41.4k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 976, False: 40.4k]
  ------------------
 6562|    976|        return begin_before_fill;
 6563|    976|    }
 6564|       |
 6565|  40.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  40.4k|    const auto begin_after_fill = begin;
 6567|  40.4k|    ++begin;
 6568|       |
 6569|  40.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 40.4k, False: 0]
  ------------------
 6570|  40.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 40.4k]
  |  |  ------------------
  ------------------
 6571|     42|            handler.on_error("Invalid fill character '{' in format string");
 6572|     42|            return begin;
 6573|     42|        }
 6574|  40.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 1.60k, False: 38.8k]
  ------------------
 6575|  1.60k|            return begin_before_fill;
 6576|  1.60k|        }
 6577|  40.4k|    }
 6578|       |
 6579|  38.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 37.8k, False: 942]
  ------------------
 6580|  37.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.16k, False: 36.7k]
  ------------------
 6581|  1.16k|            handler.on_align(potential_align_on_fill);
 6582|  1.16k|            return begin_after_fill;
 6583|  1.16k|        }
 6584|  36.7k|        return begin_before_fill;
 6585|  37.8k|    }
 6586|       |
 6587|    942|    handler.on_fill(potential_fill);
 6588|    942|    handler.on_align(potential_align_after_fill);
 6589|    942|    return begin;
 6590|  38.8k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  41.4k|{
 6514|  41.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  41.4k|    if constexpr (sizeof(CharT) != 1) {
 6516|  41.4k|        return 1;
 6517|       |    }
 6518|       |    else {
 6519|       |        const auto lengths =
 6520|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|       |            "\3\4";
 6522|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|       |        return len;
 6524|       |    }
 6525|  41.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  81.9k|    auto check_align = [](wchar_t ch) {
 6535|  81.9k|        switch (ch) {
 6536|    986|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 986, False: 80.9k]
  ------------------
 6537|    986|                return align_type::left;
 6538|    230|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 230, False: 81.7k]
  ------------------
 6539|    230|                return align_type::right;
 6540|  1.32k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 1.32k, False: 80.6k]
  ------------------
 6541|  1.32k|                return align_type::center;
 6542|  79.4k|            default:
  ------------------
  |  Branch (6542:13): [True: 79.4k, False: 2.53k]
  ------------------
 6543|  79.4k|                return align_type::none;
 6544|  81.9k|        }
 6545|  81.9k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|    942|    {
 6268|    942|        m_specs.fill = fill;
 6269|    942|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|    942|    {
 6149|    942|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    942|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    942|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|    942|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    942|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    942|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|       |        if constexpr (sizeof(CharT) == 1) {
 6152|       |            for (size_t i = 0; i < s.size(); ++i) {
 6153|       |                SCN_GCC_PUSH
 6154|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|       |                m_data[i] = s[i];
 6156|       |                SCN_GCC_POP
 6157|       |            }
 6158|       |            m_size = static_cast<unsigned char>(s.size());
 6159|       |        }
 6160|       |        else if constexpr (sizeof(CharT) == 2) {
 6161|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|       |            m_data[1] =
 6163|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|       |            if (s.size() == 1) {
 6165|       |                return;
 6166|       |            }
 6167|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|       |        }
 6170|    942|        else {
 6171|    942|            const auto front = static_cast<unsigned>(s.front());
 6172|    942|            m_data[0] = static_cast<char>(front);
 6173|    942|            m_data[1] = static_cast<char>(front >> 8);
 6174|    942|            m_data[2] = static_cast<char>(front >> 16);
 6175|    942|            m_data[3] = static_cast<char>(front >> 24);
 6176|    942|        }
 6177|    942|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  41.3k|{
 6597|  41.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  41.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 21.6k, False: 19.7k]
  |  Branch (6599:33): [True: 17.6k, False: 4.00k]
  ------------------
 6600|  17.6k|        int width = parse_simple_int(begin, end);
 6601|  17.6k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  17.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.5k, False: 54]
  |  |  ------------------
  ------------------
 6602|  17.5k|            handler.on_width(width);
 6603|  17.5k|        }
 6604|     54|        else {
 6605|     54|            handler.on_error("Invalid field width");
 6606|     54|            return begin;
 6607|     54|        }
 6608|  17.6k|    }
 6609|  41.3k|    return begin;
 6610|  41.3k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  3.61k|{
 6617|  3.61k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  3.61k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 3.57k, False: 34]
  |  Branch (6619:33): [True: 3.38k, False: 196]
  ------------------
 6620|  3.38k|        int prec = parse_simple_int(begin, end);
 6621|  3.38k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  3.38k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.38k, False: 0]
  |  |  ------------------
  ------------------
 6622|  3.38k|            handler.on_precision(prec);
 6623|  3.38k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  3.38k|    }
 6629|  3.61k|    return begin;
 6630|  3.61k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    608|    {
 7127|    608|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    608|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 548, False: 60]
  ------------------
 7129|    608|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 488, False: 60]
  ------------------
 7130|    608|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 428, False: 60]
  ------------------
 7131|    608|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 368, False: 60]
  ------------------
 7132|    368|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    368|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    368|        }
 7137|       |
 7138|    240|        Handler::on_localized();
 7139|    240|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  38.4k|{
 8417|  38.4k|#define SCN_VISIT(Type)                                         \
 8418|  38.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  38.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  38.4k|    }                                                           \
 8421|  38.4k|    else {                                                      \
 8422|  38.4k|        return vis(monostate_val);                              \
 8423|  38.4k|    }
 8424|       |
 8425|  38.4k|    monostate monostate_val{};
 8426|       |
 8427|  38.4k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 38.4k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 38.4k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  4.30k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 4.30k, False: 34.1k]
  ------------------
 8433|  4.30k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.30k|    }                                                           \
  |  | 8421|  4.30k|    else {                                                      \
  |  | 8422|  4.30k|        return vis(monostate_val);                              \
  |  | 8423|  4.30k|    }
  ------------------
 8434|  4.30k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 38.4k]
  ------------------
 8435|  4.30k|            SCN_VISIT(long);
  ------------------
  |  | 8418|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.30k|    }                                                           \
  |  | 8421|  4.30k|    else {                                                      \
  |  | 8422|  4.30k|        return vis(monostate_val);                              \
  |  | 8423|  4.30k|    }
  ------------------
 8436|  4.30k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 38.4k]
  ------------------
 8437|  4.30k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.30k|    }                                                           \
  |  | 8421|  4.30k|    else {                                                      \
  |  | 8422|  4.30k|        return vis(monostate_val);                              \
  |  | 8423|  4.30k|    }
  ------------------
 8438|  4.30k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 38.4k]
  ------------------
 8439|  4.30k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.30k|    }                                                           \
  |  | 8421|  4.30k|    else {                                                      \
  |  | 8422|  4.30k|        return vis(monostate_val);                              \
  |  | 8423|  4.30k|    }
  ------------------
 8440|  4.30k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 38.4k]
  ------------------
 8441|  4.30k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  4.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.30k|    }                                                           \
  |  | 8421|  4.30k|    else {                                                      \
  |  | 8422|  4.30k|        return vis(monostate_val);                              \
  |  | 8423|  4.30k|    }
  ------------------
 8442|  8.61k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 4.30k, False: 34.1k]
  ------------------
 8443|  8.61k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  8.61k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  8.61k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  8.61k|    }                                                           \
  |  | 8421|  8.61k|    else {                                                      \
  |  | 8422|  8.61k|        return vis(monostate_val);                              \
  |  | 8423|  8.61k|    }
  ------------------
 8444|  8.61k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 38.4k]
  ------------------
 8445|  8.61k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  8.61k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  8.61k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  8.61k|    }                                                           \
  |  | 8421|  8.61k|    else {                                                      \
  |  | 8422|  8.61k|        return vis(monostate_val);                              \
  |  | 8423|  8.61k|    }
  ------------------
 8446|  8.61k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 38.4k]
  ------------------
 8447|  8.61k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  8.61k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  8.61k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  8.61k|    }                                                           \
  |  | 8421|  8.61k|    else {                                                      \
  |  | 8422|  8.61k|        return vis(monostate_val);                              \
  |  | 8423|  8.61k|    }
  ------------------
 8448|  12.8k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 4.25k, False: 34.2k]
  ------------------
 8449|  12.8k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  12.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  12.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.8k|    }                                                           \
  |  | 8421|  12.8k|    else {                                                      \
  |  | 8422|  12.8k|        return vis(monostate_val);                              \
  |  | 8423|  12.8k|    }
  ------------------
 8450|  17.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 4.30k, False: 34.1k]
  ------------------
 8451|  17.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  17.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  17.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  17.1k|    }                                                           \
  |  | 8421|  17.1k|    else {                                                      \
  |  | 8422|  17.1k|        return vis(monostate_val);                              \
  |  | 8423|  17.1k|    }
  ------------------
 8452|  17.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 38.4k]
  ------------------
 8453|  17.1k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  17.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  17.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  17.1k|    }                                                           \
  |  | 8421|  17.1k|    else {                                                      \
  |  | 8422|  17.1k|        return vis(monostate_val);                              \
  |  | 8423|  17.1k|    }
  ------------------
 8454|  21.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 4.25k, False: 34.2k]
  ------------------
 8455|  21.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  21.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  21.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.4k|    }                                                           \
  |  | 8421|  21.4k|    else {                                                      \
  |  | 8422|  21.4k|        return vis(monostate_val);                              \
  |  | 8423|  21.4k|    }
  ------------------
 8456|  21.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 38.4k]
  ------------------
 8457|  21.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  21.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  21.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.4k|    }                                                           \
  |  | 8421|  21.4k|    else {                                                      \
  |  | 8422|  21.4k|        return vis(monostate_val);                              \
  |  | 8423|  21.4k|    }
  ------------------
 8458|  21.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 38.4k]
  ------------------
 8459|  21.4k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  21.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  21.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.4k|    }                                                           \
  |  | 8421|  21.4k|    else {                                                      \
  |  | 8422|  21.4k|        return vis(monostate_val);                              \
  |  | 8423|  21.4k|    }
  ------------------
 8460|  25.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 4.30k, False: 34.1k]
  ------------------
 8461|  25.7k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  25.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  25.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  25.7k|    }                                                           \
  |  | 8421|  25.7k|    else {                                                      \
  |  | 8422|  25.7k|        return vis(monostate_val);                              \
  |  | 8423|  25.7k|    }
  ------------------
 8462|  25.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 38.4k]
  ------------------
 8463|  25.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  25.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  25.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  25.7k|    }                                                           \
  |  | 8421|  25.7k|    else {                                                      \
  |  | 8422|  25.7k|        return vis(monostate_val);                              \
  |  | 8423|  25.7k|    }
  ------------------
 8464|  25.7k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 38.4k]
  ------------------
 8465|  25.7k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  25.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  25.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  25.7k|    }                                                           \
  |  | 8421|  25.7k|    else {                                                      \
  |  | 8422|  25.7k|        return vis(monostate_val);                              \
  |  | 8423|  25.7k|    }
  ------------------
 8466|  29.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 4.25k, False: 34.2k]
  ------------------
 8467|  29.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  29.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  29.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  29.9k|    }                                                           \
  |  | 8421|  29.9k|    else {                                                      \
  |  | 8422|  29.9k|        return vis(monostate_val);                              \
  |  | 8423|  29.9k|    }
  ------------------
 8468|  34.2k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 4.25k, False: 34.2k]
  ------------------
 8469|  34.2k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  34.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  34.2k|    }                                                           \
  |  | 8421|  34.2k|    else {                                                      \
  |  | 8422|  34.2k|        return vis(monostate_val);                              \
  |  | 8423|  34.2k|    }
  ------------------
 8470|  38.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 4.25k, False: 34.2k]
  ------------------
 8471|  38.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  38.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  38.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.4k|    }                                                           \
  |  | 8421|  38.4k|    else {                                                      \
  |  | 8422|  38.4k|        return vis(monostate_val);                              \
  |  | 8423|  38.4k|    }
  ------------------
 8472|  38.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 38.4k]
  ------------------
 8473|  38.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  38.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  38.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.4k|    }                                                           \
  |  | 8421|  38.4k|    else {                                                      \
  |  | 8422|  38.4k|        return vis(monostate_val);                              \
  |  | 8423|  38.4k|    }
  ------------------
 8474|  38.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 38.4k]
  ------------------
 8475|  38.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  38.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  38.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.4k|    }                                                           \
  |  | 8421|  38.4k|    else {                                                      \
  |  | 8422|  38.4k|        return vis(monostate_val);                              \
  |  | 8423|  38.4k|    }
  ------------------
 8476|       |
 8477|  38.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 38.4k]
  ------------------
 8478|  38.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  38.4k|            return vis(
 8480|  38.4k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 38.4k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 38.4k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  38.4k|            SCN_CLANG_POP
 8495|  38.4k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  4.50k|    {
 3330|  4.50k|        return m_iterator;
 3331|  4.50k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  1.12k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.12k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.12k|    {
 1430|  1.12k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.12k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.12k|    {
  437|  1.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.12k|    {
 1177|  1.12k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  2.25k|    {
 3334|  2.25k|        return m_sentinel;
 3335|  2.25k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3314|  2.25k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.25k|    static_cast<    \
  |  |  929|  2.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.25k|    static_cast<    \
  |  |  929|  2.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  2.25k|    {
 3316|  2.25k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.25k|    {
  485|  2.25k|        return m_has_value;
  486|  2.25k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.12k|    {
 1627|  1.12k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.12k|        return this->get_value();
 1629|  1.12k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.12k|    {
  451|  1.12k|        return m_value;
  452|  1.12k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.12k|    {
 1837|  1.12k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.12k|                                            std::forward<F>(f));
 1839|  1.12k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  1.12k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.12k|    else {
 1333|  1.12k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.12k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.12k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.12k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.12k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.12k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.12k|    }
 1340|  1.12k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.12k|    {
 1663|  1.12k|        return std::move(value());
 1664|  1.12k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.12k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.12k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.12k|    {
 1430|  1.12k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.12k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.12k|    {
  437|  1.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.12k|    {
 1177|  1.12k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.12k|    {
 1598|  1.12k|        return has_value();
 1599|  1.12k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.25k|    {
  485|  2.25k|        return m_has_value;
  486|  2.25k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.12k|    {
 1663|  1.12k|        return std::move(value());
 1664|  1.12k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.12k|    {
 1627|  1.12k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.12k|        return this->get_value();
 1629|  1.12k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.12k|    {
  451|  1.12k|        return m_value;
  452|  1.12k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   152k|{
   44|   152k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   152k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   152k|{
   60|   152k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   152k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  16.9k|{
   89|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.9k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  16.9k|{
  127|  16.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.9k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|   229k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|   229k|{
  653|   229k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   229k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    268|{
  659|    268|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    268|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 134, False: 134]
  ------------------
  661|    268|                    : std::locale{};
  662|    268|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    904|{
 1221|    904|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    904|                                  m_nan_payload_buffer, value);
 1223|    904|    value = this->setsign(value);
 1224|    904|    return n;
 1225|    904|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    934|{
 1221|    934|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    934|                                  m_nan_payload_buffer, value);
 1223|    934|    value = this->setsign(value);
 1224|    934|    return n;
 1225|    934|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    912|{
 1461|    912|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    912|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    912|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    912|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    912|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 912, False: 0]
  ------------------
 1467|    912|        SCN_UNLIKELY_ATTR
 1468|    912|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    912|                                     "Invalid integer value");
 1470|    912|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    952|{
 1461|    952|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    952|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    952|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    952|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    952|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    952|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    952|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    952|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    952|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    952|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    952|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    952|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    952|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 952, False: 0]
  ------------------
 1467|    952|        SCN_UNLIKELY_ATTR
 1468|    952|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    952|                                     "Invalid integer value");
 1470|    952|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    912|{
 1461|    912|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    912|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    912|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    912|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    912|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 912, False: 0]
  ------------------
 1467|    912|        SCN_UNLIKELY_ATTR
 1468|    912|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    912|                                     "Invalid integer value");
 1470|    912|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    932|{
 1461|    932|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    932|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    932|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    932|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    932|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 932, False: 0]
  ------------------
 1467|    932|        SCN_UNLIKELY_ATTR
 1468|    932|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    932|                                     "Invalid integer value");
 1470|    932|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    894|{
 1461|    894|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    894|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    894|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    894|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    894|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 894, False: 0]
  ------------------
 1467|    894|        SCN_UNLIKELY_ATTR
 1468|    894|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    894|                                     "Invalid integer value");
 1470|    894|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    914|{
 1461|    914|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    914|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    914|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    914|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    914|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 914, False: 0]
  ------------------
 1467|    914|        SCN_UNLIKELY_ATTR
 1468|    914|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    914|                                     "Invalid integer value");
 1470|    914|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  76.3k|{
 2184|  76.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  76.3k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   152k|{
 2208|   152k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   152k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.63k|{
  194|  3.63k|    return find_classic_impl(
  195|  3.63k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.63k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.63k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  25.0k|{
  202|  25.0k|    return find_classic_impl(
  203|  25.0k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  25.0k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  25.0k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    240|{
  673|    240|    return e;
  674|    240|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  76.3k|{
 2141|  76.3k|    return vscan_internal(source, format, args);
 2142|  76.3k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   152k|{
 2161|   152k|    return vscan_internal(source, format, args);
 2162|   152k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.63k|{
  118|  3.63k|    auto it = source.begin();
  119|       |
  120|  17.4k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 14.5k, False: 2.88k]
  ------------------
  121|  14.5k|        auto sv =
  122|  14.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  14.5k|                .substr(0, 8);
  124|       |
  125|  14.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.75k, False: 10.7k]
  ------------------
  126|  3.75k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.75k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.75k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 444, False: 3.30k]
  ------------------
  129|    444|                break;
  130|    444|            }
  131|  3.30k|            continue;
  132|  3.75k|        }
  133|       |
  134|  45.3k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 34.8k, False: 10.4k]
  ------------------
  135|  34.8k|            auto tmp =
  136|  34.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  34.8k|            auto res = get_next_code_point(tmp);
  138|  34.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 300, False: 34.5k]
  ------------------
  139|    300|                return it;
  140|    300|            }
  141|  34.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  34.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  34.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  34.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  34.5k|        }
  145|  10.7k|    }
  146|       |
  147|  3.33k|    return detail::make_string_view_iterator(source, it);
  148|  3.63k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  40.6k|{
  105|  40.6k|    static_assert(sizeof(*source.data()) == 1);
  106|  40.6k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  40.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  40.6k|    uint64_t word{};
  108|  40.6k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  40.6k|    return has_byte_greater(word, 127) != 0;
  111|  40.6k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  23.6k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  34.8k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  25.0k|{
  118|  25.0k|    auto it = source.begin();
  119|       |
  120|  33.0k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 26.1k, False: 6.93k]
  ------------------
  121|  26.1k|        auto sv =
  122|  26.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  26.1k|                .substr(0, 8);
  124|       |
  125|  26.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 12.9k, False: 13.1k]
  ------------------
  126|  12.9k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  12.9k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  12.9k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 10.8k, False: 2.08k]
  ------------------
  129|  10.8k|                break;
  130|  10.8k|            }
  131|  2.08k|            continue;
  132|  12.9k|        }
  133|       |
  134|  31.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 25.1k, False: 5.86k]
  ------------------
  135|  25.1k|            auto tmp =
  136|  25.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  25.1k|            auto res = get_next_code_point(tmp);
  138|  25.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 7.27k, False: 17.8k]
  ------------------
  139|  7.27k|                return it;
  140|  7.27k|            }
  141|  17.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  17.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  17.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  17.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  17.8k|        }
  145|  13.1k|    }
  146|       |
  147|  17.8k|    return detail::make_string_view_iterator(source, it);
  148|  25.0k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  25.5k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  25.1k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    904|{
 1138|    904|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 904]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    904|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 904]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    904|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 904]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    904|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 904]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    904|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    904|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 8, False: 896]
  ------------------
 1185|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1186|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      8|                                         "Invalid floating-point digit");
 1188|      8|        }
 1189|      8|    }
 1190|    896|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 896, False: 0]
  |  |  ------------------
  ------------------
 1191|    896|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    896|                                     "Invalid floating-point digit");
 1193|    896|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    934|{
 1138|    934|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 934]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    934|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 934]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    934|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 934]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    934|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 934]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    934|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    934|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 922]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    922|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 922, False: 0]
  |  |  ------------------
  ------------------
 1191|    922|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    922|                                     "Invalid floating-point digit");
 1193|    922|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   152k|{
 1625|   152k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 152k, False: 378]
  ------------------
 1626|   152k|        return false;
 1627|   152k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   152k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   152k|        : format_handler_base{argcount},
 1900|   152k|          parse_ctx{format},
 1901|   152k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   152k|    {
 1903|   152k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|   457k|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|   457k|    {
 1722|   457k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   457k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   152k|        : contiguous_ctx(source, args, loc)
 1852|   152k|    {
 1853|   152k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   152k|{
 2038|   152k|    const auto beg = handler.get_ctx().begin();
 2039|   152k|    detail::parse_format_string<false>(format, handler);
 2040|   152k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 148k, False: 3.83k]
  |  |  ------------------
  ------------------
 2041|   148k|        return unexpected(handler.error);
 2042|   148k|    }
 2043|  3.83k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   152k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   787k|    {
 2022|   787k|        return ctx.get();
 2023|   787k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   787k|    {
 1857|   787k|        return contiguous_ctx;
 1858|   787k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   172k|    {
 1907|   237k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 71.3k, False: 166k]
  ------------------
 1908|  71.3k|            auto it = get_ctx().begin();
 1909|  71.3k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.33k, False: 70.0k]
  ------------------
 1910|  1.33k|                SCN_UNLIKELY_ATTR
 1911|  1.33k|                return on_error("Unexpected end of source");
 1912|  1.33k|            }
 1913|       |
 1914|  70.0k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  70.0k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  70.0k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.91k, False: 67.1k]
  ------------------
 1917|  2.91k|                SCN_UNLIKELY_ATTR
 1918|  2.91k|                return on_error("Invalid encoding in format string");
 1919|  2.91k|            }
 1920|  67.1k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 7.75k, False: 59.3k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  7.75k|                get_ctx().advance_to(
 1923|  7.75k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  7.75k|                auto begin_it = impl::read_while_classic_space(
 1926|  7.75k|                    detail::make_string_view_from_pointers(
 1927|  7.75k|                        detail::to_address(after_space_it),
 1928|  7.75k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  7.75k|                begin = detail::to_address(begin_it) - 1;
 1931|  7.75k|                continue;
 1932|  7.75k|            }
 1933|       |
 1934|  59.3k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.59k, False: 57.7k]
  ------------------
 1935|  1.59k|                SCN_UNLIKELY_ATTR
 1936|  1.59k|                return on_error("Unexpected literal character in source");
 1937|  1.59k|            }
 1938|  57.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  57.7k|        }
 1940|   172k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.04k|    {
 1972|  6.04k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.04k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.04k|        on_visit_scan_arg(
 1976|  6.04k|            impl::default_arg_reader<context_type>{
 1977|  6.04k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.04k|            arg);
 1979|  6.04k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   103k|{
 1681|   103k|    auto arg = ctx.arg(id);
 1682|   103k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.59k, False: 102k]
  |  |  ------------------
  ------------------
 1683|  1.59k|        handler.on_error("Failed to find argument with ID");
 1684|  1.59k|    }
 1685|   103k|    return arg;
 1686|   103k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   150k|    {
 1797|   150k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 147k]
  |  |  ------------------
  ------------------
 1798|  3.02k|            on_error("Invalid out-of-range argument ID");
 1799|  3.02k|            return;
 1800|  3.02k|        }
 1801|       |
 1802|   147k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 147k]
  |  |  ------------------
  ------------------
 1803|    114|            return on_error("Argument with this ID has already been scanned");
 1804|    114|        }
 1805|       |
 1806|   147k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 147k, False: 0]
  |  |  ------------------
  ------------------
 1807|   147k|            visited_args_lower64 |= (1ull << id);
 1808|   147k|            return;
 1809|   147k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   147k|    {
 1782|   147k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   147k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 147k, False: 0]
  |  |  ------------------
  ------------------
 1788|   147k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   147k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.04k|    {
 1956|  6.04k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 288, False: 5.76k]
  |  Branch (1956:23): [True: 0, False: 5.76k]
  ------------------
 1957|    288|            SCN_UNLIKELY_ATTR
 1958|    288|            return;
 1959|    288|        }
 1960|       |
 1961|  5.76k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.76k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.97k, False: 1.78k]
  |  |  ------------------
  ------------------
 1963|  3.97k|            on_error(r.error());
 1964|  3.97k|        }
 1965|  1.78k|        else {
 1966|  1.78k|            get_ctx().advance_to(*r);
 1967|  1.78k|        }
 1968|  5.76k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   130k|    {
 1766|   130k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 1767|   130k|            error = err;
 1768|   130k|        }
 1769|   130k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  97.8k|    {
 1944|  97.8k|        return parse_ctx.next_arg_id();
 1945|  97.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  5.86k|    {
 1948|  5.86k|        parse_ctx.check_arg_id(id);
 1949|  5.86k|        return id;
 1950|  5.86k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  97.6k|    {
 1985|  97.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  97.6k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  97.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 97.6k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  97.6k|        auto specs = detail::format_specs{};
 1998|  97.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  97.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  97.6k|            arg.type()};
 2001|       |
 2002|  97.6k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  97.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.51k, False: 95.0k]
  |  Branch (2003:29): [True: 1.00k, False: 94.0k]
  ------------------
 2004|  3.51k|            SCN_UNLIKELY_ATTR
 2005|  3.51k|            on_error("Missing '}' in format string");
 2006|  3.51k|            return parse_ctx.begin();
 2007|  3.51k|        }
 2008|  94.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 370, False: 93.7k]
  |  |  ------------------
  ------------------
 2009|    370|            return parse_ctx.begin();
 2010|    370|        }
 2011|  93.7k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  93.7k|        on_visit_scan_arg(
 2014|  93.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  93.7k|                                           get_ctx().locale()},
 2016|  93.7k|            arg);
 2017|  93.7k|        return parse_ctx.begin();
 2018|  94.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  97.6k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  97.6k|    {
 1701|  97.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  93.7k|    {
 1956|  93.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 102, False: 93.6k]
  |  Branch (1956:23): [True: 0, False: 93.6k]
  ------------------
 1957|    102|            SCN_UNLIKELY_ATTR
 1958|    102|            return;
 1959|    102|        }
 1960|       |
 1961|  93.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  93.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  93.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.8k, False: 6.78k]
  |  |  ------------------
  ------------------
 1963|  86.8k|            on_error(r.error());
 1964|  86.8k|        }
 1965|  6.78k|        else {
 1966|  6.78k|            get_ctx().advance_to(*r);
 1967|  6.78k|        }
 1968|  93.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   694k|    {
 1761|   694k|        SCN_UNLIKELY_ATTR
 1762|   694k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   694k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   457k|    {
 1729|   457k|        {
 1730|   457k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 457k]
  ------------------
 1731|   457k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 457k]
  ------------------
 1732|   457k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   457k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   457k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 310k, False: 147k]
  ------------------
 1736|   310k|                return on_error("Argument list not exhausted");
 1737|   310k|            }
 1738|   457k|        }
 1739|       |
 1740|   147k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 147k, False: 0]
  ------------------
 1741|   147k|            return;
 1742|   147k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   457k|    {
 1777|   457k|        return error;
 1778|   457k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   806k|    {
 1773|   806k|        return static_cast<bool>(error);
 1774|   806k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   152k|{
 2053|   152k|    const auto argcount = args.size();
 2054|   152k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 152k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   152k|    auto handler = format_handler<true, CharT>{
 2060|   152k|        ranges::subrange<const CharT*>{source.data(),
 2061|   152k|                                       source.data() + source.size()},
 2062|   152k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   152k|    return vscan_parse_format_string(format, handler);
 2064|   152k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   305k|{
 2053|   305k|    const auto argcount = args.size();
 2054|   305k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 305k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   305k|    auto handler = format_handler<true, CharT>{
 2060|   305k|        ranges::subrange<const CharT*>{source.data(),
 2061|   305k|                                       source.data() + source.size()},
 2062|   305k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   305k|    return vscan_parse_format_string(format, handler);
 2064|   305k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   305k|{
 1625|   305k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 293k, False: 11.9k]
  ------------------
 1626|   293k|        return false;
 1627|   293k|    }
 1628|  11.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 11.7k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   305k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   305k|        : format_handler_base{argcount},
 1900|   305k|          parse_ctx{format},
 1901|   305k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   305k|    {
 1903|   305k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   305k|        : contiguous_ctx(source, args, loc)
 1852|   305k|    {
 1853|   305k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   305k|{
 2038|   305k|    const auto beg = handler.get_ctx().begin();
 2039|   305k|    detail::parse_format_string<false>(format, handler);
 2040|   305k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 303k, False: 1.67k]
  |  |  ------------------
  ------------------
 2041|   303k|        return unexpected(handler.error);
 2042|   303k|    }
 2043|  1.67k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   305k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.71M|    {
 2022|  1.71M|        return ctx.get();
 2023|  1.71M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.71M|    {
 1857|  1.71M|        return contiguous_ctx;
 1858|  1.71M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   159k|    {
 1907|   493k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 442k, False: 50.8k]
  ------------------
 1908|   442k|            auto it = get_ctx().begin();
 1909|   442k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 462, False: 441k]
  ------------------
 1910|    462|                SCN_UNLIKELY_ATTR
 1911|    462|                return on_error("Unexpected end of source");
 1912|    462|            }
 1913|       |
 1914|   441k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   441k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   441k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 106k, False: 335k]
  ------------------
 1917|   106k|                SCN_UNLIKELY_ATTR
 1918|   106k|                return on_error("Invalid encoding in format string");
 1919|   106k|            }
 1920|   335k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 3.57k, False: 331k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  3.57k|                get_ctx().advance_to(
 1923|  3.57k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  3.57k|                auto begin_it = impl::read_while_classic_space(
 1926|  3.57k|                    detail::make_string_view_from_pointers(
 1927|  3.57k|                        detail::to_address(after_space_it),
 1928|  3.57k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  3.57k|                begin = detail::to_address(begin_it) - 1;
 1931|  3.57k|                continue;
 1932|  3.57k|            }
 1933|       |
 1934|   331k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.47k, False: 330k]
  ------------------
 1935|  1.47k|                SCN_UNLIKELY_ATTR
 1936|  1.47k|                return on_error("Unexpected literal character in source");
 1937|  1.47k|            }
 1938|   330k|            get_ctx().advance_to(ranges::next(it));
 1939|   330k|        }
 1940|   159k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  5.48k|    {
 1972|  5.48k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.48k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.48k|        on_visit_scan_arg(
 1976|  5.48k|            impl::default_arg_reader<context_type>{
 1977|  5.48k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.48k|            arg);
 1979|  5.48k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  47.1k|{
 1681|  47.1k|    auto arg = ctx.arg(id);
 1682|  47.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.43k, False: 45.7k]
  |  |  ------------------
  ------------------
 1683|  1.43k|        handler.on_error("Failed to find argument with ID");
 1684|  1.43k|    }
 1685|  47.1k|    return arg;
 1686|  47.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  5.48k|    {
 1956|  5.48k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 300, False: 5.18k]
  |  Branch (1956:23): [True: 0, False: 5.18k]
  ------------------
 1957|    300|            SCN_UNLIKELY_ATTR
 1958|    300|            return;
 1959|    300|        }
 1960|       |
 1961|  5.18k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.18k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.74k, False: 1.44k]
  |  |  ------------------
  ------------------
 1963|  3.74k|            on_error(r.error());
 1964|  3.74k|        }
 1965|  1.44k|        else {
 1966|  1.44k|            get_ctx().advance_to(*r);
 1967|  1.44k|        }
 1968|  5.18k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  46.6k|    {
 1944|  46.6k|        return parse_ctx.next_arg_id();
 1945|  46.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    556|    {
 1948|    556|        parse_ctx.check_arg_id(id);
 1949|    556|        return id;
 1950|    556|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  41.6k|    {
 1985|  41.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  41.6k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  41.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 41.6k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  41.6k|        auto specs = detail::format_specs{};
 1998|  41.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  41.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  41.6k|            arg.type()};
 2001|       |
 2002|  41.6k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  41.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.12k, False: 39.5k]
  |  Branch (2003:29): [True: 622, False: 38.9k]
  ------------------
 2004|  2.74k|            SCN_UNLIKELY_ATTR
 2005|  2.74k|            on_error("Missing '}' in format string");
 2006|  2.74k|            return parse_ctx.begin();
 2007|  2.74k|        }
 2008|  38.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 334, False: 38.6k]
  |  |  ------------------
  ------------------
 2009|    334|            return parse_ctx.begin();
 2010|    334|        }
 2011|  38.6k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  38.6k|        on_visit_scan_arg(
 2014|  38.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  38.6k|                                           get_ctx().locale()},
 2016|  38.6k|            arg);
 2017|  38.6k|        return parse_ctx.begin();
 2018|  38.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|  41.6k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  41.6k|    {
 1701|  41.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  38.6k|    {
 1956|  38.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 136, False: 38.4k]
  |  Branch (1956:23): [True: 0, False: 38.4k]
  ------------------
 1957|    136|            SCN_UNLIKELY_ATTR
 1958|    136|            return;
 1959|    136|        }
 1960|       |
 1961|  38.4k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  38.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.8k, False: 2.66k]
  |  |  ------------------
  ------------------
 1963|  35.8k|            on_error(r.error());
 1964|  35.8k|        }
 1965|  2.66k|        else {
 1966|  2.66k|            get_ctx().advance_to(*r);
 1967|  2.66k|        }
 1968|  38.4k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  8.48k|{
 1363|  8.48k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  8.48k|    if constexpr (sizeof(SourceCharT) == 1) {
 1366|       |        if constexpr (sizeof(DestCharT) == 2) {
 1367|       |            std::u32string tmp;
 1368|       |            transcode_to_string_impl_to32(src, tmp);
 1369|       |            return transcode_to_string_impl_32to16<false>(
 1370|       |                std::u32string_view{tmp}, dest);
 1371|       |        }
 1372|  8.48k|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|  8.48k|            return transcode_to_string_impl_to32(src, dest);
 1374|  8.48k|        }
 1375|       |    }
 1376|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|       |        if constexpr (sizeof(DestCharT) == 1) {
 1378|       |            std::u32string tmp;
 1379|       |            transcode_to_string_impl_to32(src, tmp);
 1380|       |            return transcode_to_string_impl_32to8<false>(
 1381|       |                std::u32string_view{tmp}, dest);
 1382|       |        }
 1383|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1384|       |            return trasncode_to_string_impl_to32(src, dest);
 1385|       |        }
 1386|       |    }
 1387|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|       |        if constexpr (sizeof(DestCharT) == 1) {
 1389|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|       |        }
 1391|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1392|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|       |        }
 1394|       |    }
 1395|       |
 1396|  8.48k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  8.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|  8.48k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  8.48k|{
 1256|  8.48k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  8.48k|    auto it = src.begin();
 1259|  2.09M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 2.08M, False: 8.48k]
  ------------------
 1260|  2.08M|        auto res = get_next_code_point(
 1261|  2.08M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  2.08M|                                                                 src.end()));
 1263|  2.08M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.3k, False: 2.01M]
  |  |  ------------------
  ------------------
 1264|  67.3k|            dest.push_back(DestCharT{0xfffd});
 1265|  67.3k|        }
 1266|  2.01M|        else {
 1267|  2.01M|            dest.push_back(res.value);
 1268|  2.01M|        }
 1269|  2.08M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  2.08M|    }
 1271|  8.48k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.27M|{
 1169|  2.27M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.27M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.27M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.2k, False: 2.22M]
  |  |  ------------------
  ------------------
 1173|  46.2k|        return {get_start_for_next_code_point(input),
 1174|  46.2k|                detail::invalid_code_point};
 1175|  46.2k|    }
 1176|  2.22M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 998, False: 2.22M]
  |  |  ------------------
  ------------------
 1177|    998|        return {input.end(), detail::invalid_code_point};
 1178|    998|    }
 1179|       |
 1180|  2.22M|    return {input.begin() + len,
 1181|  2.22M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.22M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  46.2k|{
 1155|  46.2k|    auto it = input.begin();
 1156|   187k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 186k, False: 1.52k]
  ------------------
 1157|   186k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 44.7k, False: 141k]
  ------------------
 1158|  44.7k|            break;
 1159|  44.7k|        }
 1160|   186k|    }
 1161|  46.2k|    return it;
 1162|  46.2k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  48.2k|    constexpr parse_error(code c) : m_code(c)
  808|  48.2k|    {
  809|  48.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  48.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  48.2k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  17.5k|    {
  823|  17.5k|        return a.m_code == b.m_code;
  824|  17.5k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  81.8k|    {
 2931|  81.8k|        SCN_UNLIKELY_ATTR
 2932|  81.8k|        m_msg = msg;
 2933|  81.8k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   132k|    {
 2936|   132k|        return m_msg == nullptr;
 2937|   132k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.09k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   725k|    {
 4990|   725k|        on_charset_range(cp, cp + 1);
 4991|   725k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   729k|    {
 4995|   729k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 401k, False: 328k]
  ------------------
 4996|   401k|            return;
 4997|   401k|        }
 4998|       |
 4999|  63.9M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 63.9M, False: 324k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  63.9M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 960, False: 63.9M]
  ------------------
 5002|    960|                elem.first = begin;
 5003|    960|                return;
 5004|    960|            }
 5005|       |
 5006|  63.9M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 3.37k, False: 63.9M]
  ------------------
 5007|  3.37k|                elem.second = end;
 5008|  3.37k|                return;
 5009|  3.37k|            }
 5010|  63.9M|        }
 5011|       |
 5012|   324k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   324k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    600|    {
 5017|       |        // no-op
 5018|    600|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   738k|    {
 5032|   738k|        return static_cast<bool>(err);
 5033|   738k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.43k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  49.1k|{
  458|  49.1k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  49.1k|        static_cast<unsigned char>(ch))];
  460|  49.1k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   513k|{
  469|   513k|    return static_cast<unsigned char>(ch) <= 127;
  470|   513k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.59k|{
  474|  1.59k|#if WCHAR_MIN < 0
  475|  1.59k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.58k, False: 12]
  |  Branch (475:23): [True: 1.58k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.59k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   571k|{
  483|   571k|    return cp <= 127;
  484|   571k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  40.6k|{
  539|  40.6k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  40.6k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  50.1k|{
  784|  50.1k|    return e != eof_error::good;
  785|  50.1k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    724|{
  845|    724|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    724|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    724|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    724|    return parse_error::eof;
  847|    724|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.09k|{
  854|  4.09k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.09k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.09k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76, False: 4.01k]
  ------------------
  859|     76|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     76|    }
  861|       |
  862|  4.01k|    return scan_error{code, msg};
  863|  4.09k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.09k|{
  868|  4.09k|    return [code, msg](parse_error err) {
  869|  4.09k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.09k|    };
  871|  4.09k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   673k|{
 1200|       |    // Pattern_White_Space property
 1201|   673k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 282k, False: 390k]
  |  Branch (1201:27): [True: 15.7k, False: 266k]
  ------------------
 1202|   673k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 6.40k, False: 650k]
  ------------------
 1203|   673k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 11.5k, False: 639k]
  ------------------
 1204|   673k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 2.62k, False: 636k]
  ------------------
 1205|   673k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 4.86k, False: 631k]
  ------------------
 1206|   673k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.35k, False: 630k]
  ------------------
 1207|   673k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 132, False: 630k]
  ------------------
 1208|   673k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.78k|{
 2220|  3.78k|    unsigned char running_diff{0};
 2221|  13.1k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.41k, False: 3.78k]
  ------------------
 2222|  9.41k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.41k|    }
 2224|  3.78k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.78k]
  |  Branch (2224:33): [True: 0, False: 3.78k]
  ------------------
 2225|  3.78k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   152k|{
 2303|   152k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 29.4k, False: 122k]
  ------------------
 2304|   152k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 222, False: 29.2k]
  ------------------
 2305|  29.4k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 108, False: 29.1k]
  ------------------
 2306|  29.4k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 29.0k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  29.4k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 17.5k, False: 11.5k]
  |  Branch (2308:27): [True: 1.59k, False: 15.9k]
  |  Branch (2308:43): [True: 758, False: 834]
  ------------------
 2309|  29.4k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 15.9k, False: 12.3k]
  |  Branch (2309:27): [True: 304, False: 15.6k]
  ------------------
 2310|  29.4k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 15.5k, False: 12.4k]
  |  Branch (2310:27): [True: 118, False: 15.4k]
  ------------------
 2311|  29.4k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 15.4k, False: 12.4k]
  |  Branch (2311:27): [True: 1.23k, False: 14.2k]
  ------------------
 2312|  29.4k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 14.2k, False: 12.4k]
  |  Branch (2312:27): [True: 214, False: 14.0k]
  ------------------
 2313|  29.4k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 14.0k, False: 12.4k]
  |  Branch (2313:27): [True: 206, False: 13.8k]
  ------------------
 2314|  29.4k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 13.8k, False: 12.4k]
  |  Branch (2314:27): [True: 80, False: 13.7k]
  ------------------
 2315|  29.4k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 13.5k, False: 12.6k]
  |  Branch (2315:28): [True: 222, False: 13.2k]
  ------------------
 2316|  29.4k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 13.2k, False: 12.6k]
  |  Branch (2316:28): [True: 446, False: 12.8k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  29.4k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 12.9k, False: 12.5k]
  |  Branch (2318:28): [True: 78, False: 12.9k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  29.4k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 12.9k, False: 12.5k]
  |  Branch (2320:28): [True: 72, False: 12.8k]
  ------------------
 2321|  4.13k|        return 2;
 2322|  4.13k|    }
 2323|   148k|    return 1;
 2324|   152k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|  85.3k|{
 2328|  85.3k|    return calculate_text_width_for_fmt_v10(cp);
 2329|  85.3k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    274|{
 2343|    274|    return calculate_text_width_for_fmt_v10(cp);
 2344|    274|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  16.3k|{
 3123|  16.3k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  16.3k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  7.81k|{
 3127|  7.81k|#if WCHAR_MIN < 0
 3128|  7.81k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 7.81k, False: 0]
  |  Branch (3128:20): [True: 7.81k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  7.81k|        return char_to_int(static_cast<char>(ch));
 3133|  7.81k|    }
 3134|      0|    return 255;
 3135|  7.81k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  32.9k|{
 4271|  32.9k|    std::regex_constants::syntax_option_type result{};
 4272|  32.9k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 804, False: 32.1k]
  ------------------
 4273|    804|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    804|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    804|    }
 4281|  32.9k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 32.9k]
  ------------------
 4282|  32.9k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  32.9k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 4.89k, False: 28.0k]
  ------------------
 4288|  4.89k|        result |= std::regex_constants::icase;
 4289|  4.89k|    }
 4290|  32.9k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 12, False: 32.9k]
  ------------------
 4291|     12|        result |= std::regex_constants::nosubs;
 4292|     12|    }
 4293|  32.9k|    return result;
 4294|  32.9k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  3.63k|{
 4638|  3.63k|    std::string result{pattern};
 4639|  26.0k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 22.4k, False: 3.63k]
  ------------------
 4640|  22.4k|        result.replace(n, 2, "/");
 4641|  22.4k|        ++n;
 4642|  22.4k|    }
 4643|  3.63k|    return result;
 4644|  3.63k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    306|{
 4647|    306|    std::wstring result{pattern};
 4648|  2.58k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 2.27k, False: 306]
  ------------------
 4649|  2.27k|        result.replace(n, 2, L"/");
 4650|  2.27k|        ++n;
 4651|  2.27k|    }
 4652|    306|    return result;
 4653|    306|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  11.2k|{
 6008|  11.2k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 2.86k, False: 8.38k]
  ------------------
 6009|  2.86k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 1.69k, False: 1.17k]
  ------------------
 6010|  1.69k|            return {scan_error::invalid_scanned_value,
 6011|  1.69k|                    "Scanned value too narrow, width did not exceed what "
 6012|  1.69k|                    "was specified in the format string"};
 6013|  1.69k|        }
 6014|  2.86k|    }
 6015|  9.56k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 2.05k, False: 7.51k]
  ------------------
 6016|  2.05k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 114, False: 1.93k]
  ------------------
 6017|    114|            return {scan_error::invalid_scanned_value,
 6018|    114|                    "Scanned value too wide, width exceeded the specified "
 6019|    114|                    "precision"};
 6020|    114|        }
 6021|  2.05k|    }
 6022|  9.44k|    return {};
 6023|  9.56k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  53.7k|    {
  304|  53.7k|        ranges::advance(x, n);
  305|  53.7k|        return x;
  306|  53.7k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  53.7k|    {
  268|  53.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  53.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   126k|    {
  151|   126k|        i += n;
  152|   126k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  87.9k|    {
  108|  87.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  87.9k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  87.9k|    {
   87|  87.9k|        return s - i;
   88|  87.9k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.93k|    {
  304|  7.93k|        ranges::advance(x, n);
  305|  7.93k|        return x;
  306|  7.93k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.93k|    {
  268|  7.93k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.93k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.93k|    {
  151|  7.93k|        i += n;
  152|  7.93k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  6.34k|    {
  108|  6.34k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  6.34k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  6.34k|    {
   87|  6.34k|        return s - i;
   88|  6.34k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  10.3k|    {
 5624|  10.3k|        reader_error_handler eh{};
 5625|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5626|       |            detail::check_code_point_type_specs(specs, eh);
 5627|       |        }
 5628|  10.3k|        else {
 5629|  10.3k|            detail::check_char_type_specs(specs, eh);
 5630|  10.3k|        }
 5631|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.80k, False: 574]
  |  |  ------------------
  ------------------
 5632|  9.80k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  9.80k|        }
 5634|    574|        return {};
 5635|  10.3k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  28.9k|    {
  763|  28.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.9k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  5.65k|        : m_fptr([](storage fn,
  743|  5.65k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.65k|              cvref<T> obj = *get<T>(fn);
  745|  5.65k|              if constexpr (std::is_void_v<R>) {
  746|  5.65k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.65k|              }
  748|  5.65k|              else {
  749|  5.65k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.65k|              }
  751|  5.65k|          }),
  752|  5.65k|          m_storage(std::addressof(f))
  753|  5.65k|    {
  754|  5.65k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  9.57k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.57k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.57k|              else {
  749|  9.57k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.57k|              }
  751|  9.57k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  9.57k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.57k|        else if constexpr (std::is_object_v<T>) {
  688|  9.57k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.57k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  5.65k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.65k|        {
  662|  5.65k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.26M|    {
  763|  1.26M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.26M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  23.0k|        : m_fptr([](storage fn,
  743|  23.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.0k|              cvref<T> obj = *get<T>(fn);
  745|  23.0k|              if constexpr (std::is_void_v<R>) {
  746|  23.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.0k|              }
  748|  23.0k|              else {
  749|  23.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.0k|              }
  751|  23.0k|          }),
  752|  23.0k|          m_storage(std::addressof(f))
  753|  23.0k|    {
  754|  23.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   591k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   591k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   591k|              else {
  749|   591k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   591k|              }
  751|   591k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   591k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   591k|        else if constexpr (std::is_object_v<T>) {
  688|   591k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   591k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  23.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  23.0k|        {
  662|  23.0k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.73k|    {
 5619|  1.73k|        return false;
 5620|  1.73k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.09k|    return [code, msg](parse_error err) {
  869|  4.09k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.09k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|    102|    {
 1780|    102|        auto stdloc = loc.get<std::locale>();
 1781|    102|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    102|        grouping = numpunct.grouping();
 1783|    102|        thousands_sep =
 1784|    102|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 102]
  ------------------
 1785|    102|        decimal_point = numpunct.decimal_point();
 1786|    102|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    130|{
 1717|    130|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 130, False: 0]
  ------------------
 1718|    130|        return std::use_facet<Facet>(stdloc);
 1719|    130|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    130|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  27.6k|{
 2349|  27.6k|    size_t count{0};
 2350|  27.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  27.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  27.6k|    });
 2353|  27.6k|    return count;
 2354|  27.6k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  27.6k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  27.6k|    auto it = input.begin();
 1448|  86.7k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 59.1k, False: 27.6k]
  ------------------
 1449|  59.1k|        auto res = get_next_code_point(
 1450|  59.1k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  59.1k|        cb(res.value);
 1452|  59.1k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  59.1k|    }
 1454|  27.6k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  66.8k|    {
  763|  66.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  66.8k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  27.6k|        : m_fptr([](storage fn,
  743|  27.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.6k|              cvref<T> obj = *get<T>(fn);
  745|  27.6k|              if constexpr (std::is_void_v<R>) {
  746|  27.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.6k|              }
  748|  27.6k|              else {
  749|  27.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.6k|              }
  751|  27.6k|          }),
  752|  27.6k|          m_storage(std::addressof(f))
  753|  27.6k|    {
  754|  27.6k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  59.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.1k|              cvref<T> obj = *get<T>(fn);
  745|  59.1k|              if constexpr (std::is_void_v<R>) {
  746|  59.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  59.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  59.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.1k|        else if constexpr (std::is_object_v<T>) {
  688|  59.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.1k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  59.1k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  59.1k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  59.1k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  27.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  27.6k|        {
  662|  27.6k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.90k|    {
 1582|  3.90k|        return m_view;
 1583|  3.90k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.12k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.57k|    {
 2421|  3.57k|        return m_multibyte_left;
 2422|  3.57k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   155k|    {
 2426|   155k|        return *m_current;
 2427|   155k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   152k|    {
 2435|   152k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   152k|        _increment_current();
 2437|   152k|        return *this;
 2438|   152k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   152k|    {
 2668|   152k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 73.7k, False: 79.2k]
  ------------------
 2669|  73.7k|            auto cplen = _get_cp_length_at_current();
 2670|  73.7k|            m_multibyte_left = cplen - 1;
 2671|  73.7k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  73.7k|        }
 2673|  79.2k|        else {
 2674|  79.2k|            --m_multibyte_left;
 2675|  79.2k|        }
 2676|       |
 2677|   152k|        ++m_current;
 2678|   152k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|  73.7k|    {
 2639|  73.7k|        return static_cast<difference_type>(
 2640|  73.7k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  73.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|  73.7k|    {
 2645|  73.7k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 694, False: 73.0k]
  |  |  ------------------
  ------------------
 2646|    694|            return 0;
 2647|    694|        }
 2648|       |
 2649|  73.0k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 49.7k, False: 23.3k]
  ------------------
 2650|  49.7k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  49.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  49.7k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  49.7k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  49.7k|        }
 2654|       |
 2655|  23.3k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  23.3k|                                           cplen);
 2657|  23.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 23.0k]
  |  |  ------------------
  ------------------
 2658|    332|            return 0;
 2659|    332|        }
 2660|       |
 2661|  23.0k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  23.0k|        return static_cast<difference_type>(
 2663|  23.0k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  23.3k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  25.7k|{
 1857|  25.7k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  25.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  25.7k|    if constexpr (ranges::sized_range<Range>) {
 1860|  25.7k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  25.7k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 440, False: 25.3k]
  ------------------
 1862|    440|            return unexpected(eof_error::eof);
 1863|    440|        }
 1864|       |
 1865|  25.3k|        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|       |    else {
 1868|       |        auto it = range.begin();
 1869|       |        if (guaranteed_minimum_size(range) >= count) {
 1870|       |            return ranges::next(it, count);
 1871|       |        }
 1872|       |
 1873|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|       |            if (it == range.end()) {
 1875|       |                return unexpected(eof_error::eof);
 1876|       |            }
 1877|       |        }
 1878|       |
 1879|       |        return it;
 1880|       |    }
 1881|  25.7k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  86.6k|    {
 2531|  86.6k|        return !(a == b);
 2532|  86.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  94.3k|    {
 2523|  94.3k|        return a.m_current == b.m_current;
 2524|  94.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  8.51k|    {
 2430|  8.51k|        return *m_current;
 2431|  8.51k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.26k|    {
  268|  1.26k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.26k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.26k|    {
  161|  1.26k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.26k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.26k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.26k|        else {
  169|  1.26k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.26k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.26k|        }
  173|  1.26k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|  39.4k|    {
 1890|  39.4k|        return !codepoint.empty();
 1891|  39.4k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.70k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|       |                  ranges::sized_range<Range>) {
 1686|       |        return string_view_wrapper{SCN_FWD(range)};
 1687|       |    }
 1688|  1.70k|    else {
 1689|  1.70k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.70k|    }
 1691|  1.70k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1536|  1.70k|    {
 1537|  1.70k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.70k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.70k|    {
 1621|  1.70k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|  1.70k|        else {
 1654|  1.70k|            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|  1.70k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.70k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.70k|                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|  1.70k|            m_view = string_view_type{str};
 1669|  1.70k|        }
 1670|  1.70k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2380|  22.0k|        : m_current(x), m_end(s), m_count(n)
 2381|  22.0k|    {
 2382|  22.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   158k|    {
 2413|   158k|        return m_current;
 2414|   158k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  10.8k|    {
 2832|  10.8k|        return take_width_view{r, n};
 2833|  10.8k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2799|  10.8k|        : m_base(base), m_count(count)
 2800|  10.8k|    {
 2801|  10.8k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  10.8k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    298|    {
 5663|    298|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 266, False: 32]
  ------------------
 5664|    298|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    266|            return read_default(range, value, loc);
 5666|    266|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    298|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    266|    {
 5645|    266|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    266|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    266|        if constexpr (std::is_same_v<CharT, char>) {
 5647|    266|            return code_unit_reader<char>{}.read(range, value);
 5648|       |        }
 5649|       |        else {
 5650|       |            SCN_UNUSED(range);
 5651|       |            SCN_EXPECT(false);
 5652|       |            SCN_UNREACHABLE;
 5653|       |        }
 5654|    266|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    266|    {
 5564|    266|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 266]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    266|        ch = *range.begin();
 5566|    266|        return it;
 5567|    266|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.96k|{
 1846|  1.96k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.96k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.96k|    return ranges::next(range.begin());
 1851|  1.96k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.96k|{
  950|  1.96k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.96k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.96k|    return eof_error::good;
  954|  1.96k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.96k|{
  944|  1.96k|    return is_range_eof(r.begin(), r.end());
  945|  1.96k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  41.4k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  41.4k|    {
  937|  41.4k|        return begin == end;
  938|  41.4k|    }
  939|  41.4k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   150k|        {
 2770|   150k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.57k, False: 146k]
  |  Branch (2770:39): [True: 860, False: 2.71k]
  ------------------
 2771|   150k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.10k, False: 148k]
  ------------------
 2772|   150k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|  89.2k|    {
 2816|  89.2k|        return sentinel<true>{m_base.get().end()};
 2817|  89.2k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   133k|    {
 2717|   133k|        return view;
 2718|   133k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|  89.2k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  89.2k|    static_cast<    \
  |  |  929|  89.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.00k|    {
  296|  2.00k|        ++x;
  297|  2.00k|        return x;
  298|  2.00k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  22.0k|    {
 2810|  22.0k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  22.0k|                                      m_count};
 2812|  22.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    852|{
 3326|    852|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 852]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    852|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    852|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    852|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    852|        parse_integer_base_prefix(
 3331|    852|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    852|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 852]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    852|    else {
 3343|    852|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 852]
  |  Branch (3343:13): [True: 852, False: 0]
  ------------------
 3344|    852|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 852, False: 0]
  ------------------
 3345|    852|            digits_begin_it = base_prefix_begin_it;
 3346|    852|        }
 3347|    852|    }
 3348|       |
 3349|    852|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 852, False: 0]
  ------------------
 3350|    852|        sign = sign_type::plus_sign;
 3351|    852|    }
 3352|    852|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    852|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    852|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.13k|{
 3141|  1.13k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.13k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.13k, False: 0]
  ------------------
 3143|  1.13k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.13k, False: 0]
  ------------------
 3144|  1.13k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.13k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.13k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.13k|{
 2272|  1.13k|    auto it = read_code_unit(range);
 2273|  1.13k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.26k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.26k, False: 1.13k]
  ------------------
 2278|  2.26k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.26k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.26k|    }
 2282|       |
 2283|  1.13k|    return unexpected(parse_error::error);
 2284|  1.13k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    852|{
 3293|    852|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 838]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 838]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    274|        case 16:
  ------------------
  |  Branch (3307:9): [True: 274, False: 578]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    274|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    274|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 832]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    530|        default:
  ------------------
  |  Branch (3316:9): [True: 530, False: 322]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    530|            return {range.begin(), base, false};
 3319|    852|    }
 3320|    852|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    302|{
 2291|    302|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 302, False: 0]
  ------------------
 2292|    302|        return range.begin();
 2293|    302|    }
 2294|      0|    return *result;
 2295|    302|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.18k|{
 2231|  1.18k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  1.18k|    else {
 2244|  1.18k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.18k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.18k|                return ch;
 2247|  1.18k|            }
 2248|  1.18k|            return static_cast<char_type>(ch +
 2249|  1.18k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.18k|        };
 2251|       |
 2252|  1.18k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    182|    }                                                  \
  |  |  |  | 3671|  1.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.00k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.00k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.00k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.00k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.00k|                    return ascii_tolower(a) ==
 2259|  1.00k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.00k|                }))) {
 2261|  1.00k|            return unexpected(parse_error::error);
 2262|  1.00k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.00k|    }
 2266|  1.18k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.80k|{
 1857|  3.80k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  3.80k|    else {
 1868|  3.80k|        auto it = range.begin();
 1869|  3.80k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.80k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  13.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 10.3k, False: 3.59k]
  ------------------
 1874|  10.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 210, False: 10.1k]
  ------------------
 1875|    210|                return unexpected(eof_error::eof);
 1876|    210|            }
 1877|  10.3k|        }
 1878|       |
 1879|  3.59k|        return it;
 1880|  3.80k|    }
 1881|  3.80k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.80k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|  3.80k|    else {
 1115|  3.80k|        return 0;
 1116|  3.80k|    }
 1117|  3.80k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.00k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.00k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 42, False: 960]
  |  Branch (2245:29): [True: 960, False: 0]
  ------------------
 2246|  1.00k|                return ch;
 2247|  1.00k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.00k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  39.5k|{
  944|  39.5k|    return is_range_eof(r.begin(), r.end());
  945|  39.5k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    294|{
 3251|    294|    return read_matching_string_classic_nocase(range, "0x");
 3252|    294|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    832|{
 3360|    832|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|       |    if constexpr (ranges::contiguous_range<Range>) {
 3363|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|       |            return unexpected_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found");
 3367|       |        }
 3368|       |        return range.end();
 3369|       |    }
 3370|    832|    else {
 3371|    832|        return read_while1_code_unit(range,
 3372|    832|                                     [&](char_type ch) noexcept {
 3373|    832|                                         return char_to_int(ch) < base;
 3374|    832|                                     })
 3375|    832|            .transform_error(map_parse_error_to_scan_error(
 3376|    832|                scan_error::invalid_scanned_value,
 3377|    832|                "Failed to parse integer: No digits found"));
 3378|    832|    }
 3379|    832|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.11k|{
 1996|  1.11k|    auto it = read_while_code_unit(range, pred);
 1997|  1.11k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.11k, False: 0]
  ------------------
 1998|  1.11k|        return unexpected(parse_error::error);
 1999|  1.11k|    }
 2000|      0|    return it;
 2001|  1.11k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.11k|{
 1976|  1.11k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.11k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.11k|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  1.11k|    else {
 1961|  1.11k|        auto first = range.begin();
 1962|  1.11k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.11k, False: 0]
  ------------------
 1963|  1.11k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.11k, False: 0]
  ------------------
 1964|  1.11k|                return first;
 1965|  1.11k|            }
 1966|  1.11k|        }
 1967|      0|        return first;
 1968|  1.11k|    }
 1969|  1.11k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  82.1k|        {
 2781|  82.1k|            return !(y == x);
 2782|  82.1k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    832|        : m_fptr([](storage fn,
  743|    832|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    832|              cvref<T> obj = *get<T>(fn);
  745|    832|              if constexpr (std::is_void_v<R>) {
  746|    832|                  obj(static_cast<decltype(args)>(args)...);
  747|    832|              }
  748|    832|              else {
  749|    832|                  return obj(static_cast<decltype(args)>(args)...);
  750|    832|              }
  751|    832|          }),
  752|    832|          m_storage(std::addressof(f))
  753|    832|    {
  754|    832|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    832|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    832|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    832|              else {
  749|    832|                  return obj(static_cast<decltype(args)>(args)...);
  750|    832|              }
  751|    832|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    832|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    832|        else if constexpr (std::is_object_v<T>) {
  688|    832|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    832|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    832|                                     [&](char_type ch) noexcept {
 3373|    832|                                         return char_to_int(ch) < base;
 3374|    832|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    832|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    832|        {
  662|    832|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     20|{
 3390|     20|    std::basic_string<CharT> output;
 3391|     20|    std::string thsep_indices;
 3392|     20|    auto it = range.begin();
 3393|     20|    bool digit_matched = false;
 3394|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 20, False: 0]
  ------------------
 3395|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 20]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 20, False: 0]
  ------------------
 3400|     20|            break;
 3401|     20|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     20|    }
 3407|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3408|     20|        return unexpected_scan_error(
 3409|     20|            scan_error::invalid_scanned_value,
 3410|     20|            "Failed to parse integer: No digits found");
 3411|     20|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     20|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   152k|    {
 2417|   152k|        return m_count;
 2418|   152k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    270|    {
 5663|    270|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 248, False: 22]
  ------------------
 5664|    270|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 22]
  ------------------
 5665|    248|            return read_default(range, value, loc);
 5666|    248|        }
 5667|       |
 5668|     22|        reader_impl_for_int<CharT> reader{};
 5669|     22|        signed char tmp_value{};
 5670|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     22|        value = static_cast<signed char>(value);
 5672|     22|        return ret;
 5673|    270|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    890|    {
 5645|    890|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    890|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    890|        if constexpr (std::is_same_v<CharT, char>) {
 5647|    890|            return code_unit_reader<char>{}.read(range, value);
 5648|       |        }
 5649|       |        else {
 5650|       |            SCN_UNUSED(range);
 5651|       |            SCN_EXPECT(false);
 5652|       |            SCN_UNREACHABLE;
 5653|       |        }
 5654|    890|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    890|    {
 5564|    890|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    890|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    890|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    890|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    890|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 890]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    890|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    890|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    890|        ch = *range.begin();
 5566|    890|        return it;
 5567|    890|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.59k|{
 1846|  6.59k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.59k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.59k|    return ranges::next(range.begin());
 1851|  6.59k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.9k|{
  950|  21.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.9k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.9k|    return eof_error::good;
  954|  21.9k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   566k|{
  944|   566k|    return is_range_eof(r.begin(), r.end());
  945|   566k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   638k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   638k|    {
  937|   638k|        return begin == end;
  938|   638k|    }
  939|   638k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  64.3k|    {
  296|  64.3k|        ++x;
  297|  64.3k|        return x;
  298|  64.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     22|    {
 3539|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     22|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 22]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 22]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3565|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     22|                    parse_integer_digits_without_thsep(
 3567|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     22|                        prefix_result.parsed_base));
 3569|       |
 3570|     22|            auto buf = make_contiguous_buffer(
 3571|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     22|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.80k|{
 3326|  2.80k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.80k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.80k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.80k|        parse_integer_base_prefix(
 3331|  2.80k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.80k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.80k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.80k|    else {
 3343|  2.80k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.80k]
  ------------------
 3344|  2.80k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.80k, False: 0]
  ------------------
 3345|  2.80k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.80k|        }
 3347|  2.80k|    }
 3348|       |
 3349|  2.80k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.80k, False: 0]
  ------------------
 3350|  2.80k|        sign = sign_type::plus_sign;
 3351|  2.80k|    }
 3352|  2.80k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.80k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.80k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.73k|{
 3141|  3.73k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.73k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.73k, False: 0]
  ------------------
 3143|  3.73k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.73k, False: 0]
  ------------------
 3144|  3.73k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.73k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.73k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.73k|{
 2272|  3.73k|    auto it = read_code_unit(range);
 2273|  3.73k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.73k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.46k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.46k, False: 3.73k]
  ------------------
 2278|  7.46k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.46k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.46k|    }
 2282|       |
 2283|  3.73k|    return unexpected(parse_error::error);
 2284|  3.73k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.80k|{
 3293|  2.80k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.79k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     66|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 66, False: 2.73k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     66|            bool zero_parsed = false;
 3302|     66|            auto it = apply_opt(
 3303|     66|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     66|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    906|        case 16:
  ------------------
  |  Branch (3307:9): [True: 906, False: 1.89k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    906|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    906|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 2.78k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.81k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.81k, False: 994]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.81k|            return {range.begin(), base, false};
 3319|  2.80k|    }
 3320|  2.80k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    978|{
 2291|    978|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 978, False: 0]
  ------------------
 2292|    978|        return range.begin();
 2293|    978|    }
 2294|      0|    return *result;
 2295|    978|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     22|{
 3244|     22|    return read_matching_string_classic_nocase(range, "0b");
 3245|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.79k|{
 2231|  3.79k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|  3.79k|                  std::is_same_v<char_type, char>) {
 2235|  3.79k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.78k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.78k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.78k, False: 0]
  ------------------
 2239|  3.78k|            return unexpected(parse_error::error);
 2240|  3.78k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|       |    else {
 2244|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|       |            if (ch < 'A' || ch > 'Z') {
 2246|       |                return ch;
 2247|       |            }
 2248|       |            return static_cast<char_type>(ch +
 2249|       |                                          static_cast<char_type>('a' - 'A'));
 2250|       |        };
 2251|       |
 2252|       |        SCN_TRY(it, read_exactly_n_code_units(
 2253|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|       |                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|       |        if (SCN_UNLIKELY(!std::equal(
 2257|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|       |                    return ascii_tolower(a) ==
 2259|       |                           static_cast<detail::char_t<Range>>(b);
 2260|       |                }))) {
 2261|       |            return unexpected(parse_error::error);
 2262|       |        }
 2263|       |
 2264|       |        return it;
 2265|       |    }
 2266|  3.79k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     82|{
 3258|     82|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 82]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     82|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 82]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     82|    return unexpected(parse_error::error);
 3268|     82|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.97k|{
 2146|  1.97k|    auto it = read_code_unit(range);
 2147|  1.97k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.97k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.97k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.97k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.97k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.97k|        return unexpected(parse_error::error);
 2154|  1.97k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.97k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    922|{
 3251|    922|    return read_matching_string_classic_nocase(range, "0x");
 3252|    922|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.74k|{
 3360|  2.74k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.74k|    if constexpr (ranges::contiguous_range<Range>) {
 3363|  2.74k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.74k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.74k|        return range.end();
 3369|       |    }
 3370|       |    else {
 3371|       |        return read_while1_code_unit(range,
 3372|       |                                     [&](char_type ch) noexcept {
 3373|       |                                         return char_to_int(ch) < base;
 3374|       |                                     })
 3375|       |            .transform_error(map_parse_error_to_scan_error(
 3376|       |                scan_error::invalid_scanned_value,
 3377|       |                "Failed to parse integer: No digits found"));
 3378|       |    }
 3379|  2.74k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     64|{
 3390|     64|    std::basic_string<CharT> output;
 3391|     64|    std::string thsep_indices;
 3392|     64|    auto it = range.begin();
 3393|     64|    bool digit_matched = false;
 3394|     64|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 64, False: 0]
  ------------------
 3395|     64|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 64]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     64|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 64, False: 0]
  ------------------
 3400|     64|            break;
 3401|     64|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     64|    }
 3407|     64|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
 3408|     64|        return unexpected_scan_error(
 3409|     64|            scan_error::invalid_scanned_value,
 3410|     64|            "Failed to parse integer: No digits found");
 3411|     64|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     64|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  16.0k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  16.0k|                  ranges::sized_range<Range>) {
 1686|  16.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  16.0k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1488|  16.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  16.0k|    {
 1490|  16.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  71.4k|    {
 1503|  71.4k|        return sv;
 1504|  71.4k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  4.06k|{
 5951|  4.06k|    using char_type = detail::char_t<Range>;
 5952|  4.06k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  4.06k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 3.68k, False: 384]
  ------------------
 5955|  3.68k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  3.68k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  3.68k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 3.56k, False: 116]
  ------------------
 5959|  3.56k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  3.56k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 208, False: 3.35k]
  ------------------
 5962|    208|                auto prefix_width =
 5963|    208|                    static_cast<std::ptrdiff_t>(
 5964|    208|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    208|                    ranges::distance(range.begin(), it);
 5966|    208|                return result_type{it, prefix_width};
 5967|    208|            }
 5968|  3.35k|            return result_type{it, 0};
 5969|  3.56k|        }
 5970|       |
 5971|    116|        auto max_width_view = take_width(range, max_width);
 5972|    116|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    116|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 116, False: 0]
  ------------------
 5975|    116|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    116|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    116|    }
 5979|       |
 5980|    384|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    384|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 206, False: 178]
  ------------------
 5982|    206|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    206|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 154]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|    154|        return result_type{it, 0};
 5991|    206|    }
 5992|       |
 5993|    178|    auto max_width_view = take_width(range, max_width);
 5994|    178|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    178|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 178, False: 0]
  ------------------
 5997|    178|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    178|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    178|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  3.74k|{
 1976|  3.74k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.74k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  3.95k|{
 1957|  3.95k|    if constexpr (ranges::common_range<Range>) {
 1958|  3.95k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|  3.95k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  3.68k|        : m_fptr([](storage fn,
  743|  3.68k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.68k|              cvref<T> obj = *get<T>(fn);
  745|  3.68k|              if constexpr (std::is_void_v<R>) {
  746|  3.68k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.68k|              }
  748|  3.68k|              else {
  749|  3.68k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.68k|              }
  751|  3.68k|          }),
  752|  3.68k|          m_storage(std::addressof(f))
  753|  3.68k|    {
  754|  3.68k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  4.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.10k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.10k|              else {
  749|  4.10k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.10k|              }
  751|  4.10k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  4.10k|    {
  684|  4.10k|        if constexpr (std::is_const_v<T>) {
  685|  4.10k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.10k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  4.10k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  3.68k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.68k|        {
  667|  3.68k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    272|{
 1976|    272|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    272|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    530|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|    530|    else {
 1961|    530|        auto first = range.begin();
 1962|  9.20k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 8.92k, False: 280]
  ------------------
 1963|  8.92k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 250, False: 8.67k]
  ------------------
 1964|    250|                return first;
 1965|    250|            }
 1966|  8.92k|        }
 1967|    280|        return first;
 1968|    530|    }
 1969|    530|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    206|{
 2037|    206|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    206|    auto it = range.begin();
 2040|    364|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 364, False: 0]
  ------------------
 2041|    364|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    364|                                           needle.size());
 2043|    364|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 358]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    358|        static_assert(
 2047|    358|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    358|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 200, False: 158]
  ------------------
 2049|    200|            return it;
 2050|    200|        }
 2051|    158|        it = *r;
 2052|    158|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    178|{
 2037|    178|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    178|    auto it = range.begin();
 2040|    324|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 288, False: 36]
  ------------------
 2041|    288|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    288|                                           needle.size());
 2043|    288|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 28, False: 260]
  ------------------
 2044|     28|            return it;
 2045|     28|        }
 2046|    260|        static_assert(
 2047|    260|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    260|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 114, False: 146]
  ------------------
 2049|    114|            return it;
 2050|    114|        }
 2051|    146|        it = *r;
 2052|    146|    }
 2053|     36|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     36|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     36|    return it;
 2055|     36|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    498|{
 2951|    498|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 498]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    498|    return read_while_classic_space(range);
 2962|    498|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    498|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|    498|    else {
 2126|    498|        auto it = range.begin();
 2127|       |
 2128|    498|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|    498|            auto seg = get_contiguous_beginning(range);
 2130|    498|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    498|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 498]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    498|            ranges::advance(it, seg.size());
 2135|    498|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|    498|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    498|    }
 2140|    498|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.26k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  1.26k|    else {
 1058|  1.26k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.26k|    }
 1060|  1.26k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    768|{
 2082|    768|    return read_until_code_point(range, std::not_fn(pred));
 2083|    768|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    906|{
 2061|    906|    auto it = range.begin();
 2062|  27.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 27.6k, False: 262]
  ------------------
 2063|  27.6k|        const auto val =
 2064|  27.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  27.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  27.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 24.3k, False: 3.28k]
  |  |  ------------------
  ------------------
 2066|  24.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  24.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  24.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 644, False: 23.6k]
  ------------------
 2069|    644|                return it;
 2070|    644|            }
 2071|  24.3k|        }
 2072|  26.9k|        it = val.iterator;
 2073|  26.9k|    }
 2074|       |
 2075|    262|    return it;
 2076|    906|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  39.4k|{
 1899|  39.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  39.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  39.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  39.4k|    auto it = range.begin();
 1903|  39.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  39.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.65k, False: 33.8k]
  |  |  ------------------
  ------------------
 1906|  5.65k|        ++it;
 1907|  5.65k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  5.65k|        return {it, {}};
 1909|  5.65k|    }
 1910|       |
 1911|  33.8k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 29.7k, False: 4.02k]
  ------------------
 1912|  29.7k|        ++it;
 1913|  29.7k|        return {it, string_type(1, *range.begin())};
 1914|  29.7k|    }
 1915|       |
 1916|  4.02k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  4.02k|    return {it, string_type{range.begin(), it}};
 1918|  33.8k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  5.65k|{
 1155|  5.65k|    auto it = input.begin();
 1156|  7.03k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 6.87k, False: 162]
  ------------------
 1157|  6.87k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 5.49k, False: 1.37k]
  ------------------
 1158|  5.49k|            break;
 1159|  5.49k|        }
 1160|  6.87k|    }
 1161|  5.65k|    return it;
 1162|  5.65k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  4.02k|    {
  283|  4.02k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.02k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  4.02k|    {
  227|  4.02k|        constexpr iter_difference_t<I> zero{0};
  228|  4.02k|        iter_difference_t<I> counter{0};
  229|       |
  230|  4.02k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 4.02k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  4.02k|        else {
  237|  13.3k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 9.39k, False: 3.91k]
  |  Branch (237:34): [True: 9.27k, False: 114]
  ------------------
  238|  9.27k|                ++i;
  239|  9.27k|                ++counter;
  240|  9.27k|            }
  241|  4.02k|        }
  242|       |
  243|  4.02k|        return counter;
  244|  4.02k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    498|        : m_fptr([](storage fn,
  743|    498|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    498|              cvref<T> obj = *get<T>(fn);
  745|    498|              if constexpr (std::is_void_v<R>) {
  746|    498|                  obj(static_cast<decltype(args)>(args)...);
  747|    498|              }
  748|    498|              else {
  749|    498|                  return obj(static_cast<decltype(args)>(args)...);
  750|    498|              }
  751|    498|          }),
  752|    498|          m_storage(std::addressof(f))
  753|    498|    {
  754|    498|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.41k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.41k|              else {
  749|  1.41k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.41k|              }
  751|  1.41k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.41k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.41k|        else if constexpr (std::is_object_v<T>) {
  688|  1.41k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.41k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  1.41k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    498|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    498|        {
  662|    498|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.05k|{
 2951|  7.05k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.80k, False: 244]
  ------------------
 2952|  6.80k|        auto it = read_while_classic_space(range);
 2953|  6.80k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.80k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.80k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.80k|        return it;
 2959|  6.80k|    }
 2960|       |
 2961|    244|    return read_while_classic_space(range);
 2962|  7.05k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  14.8k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|  14.8k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|  14.8k|        auto buf = make_contiguous_buffer(range);
 2121|  14.8k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  14.8k|        return ranges::next(range.begin(),
 2123|  14.8k|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|  14.8k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  17.6k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  17.6k|                  ranges::sized_range<Range>) {
 1686|  17.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  17.6k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1488|  17.6k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  17.6k|    {
 1490|  17.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  20.8k|    {
 3040|  20.8k|        reader_error_handler eh{};
 3041|  20.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  20.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  20.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.6k, False: 1.23k]
  |  |  ------------------
  ------------------
 3043|  19.6k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  19.6k|        }
 3045|  1.23k|        return {};
 3046|  20.8k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  20.8k|    {
 3051|  20.8k|        return static_cast<Derived&>(*this);
 3052|  20.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  20.8k|    {
 3485|  20.8k|        detail::check_int_type_specs(specs, eh);
 3486|  20.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.51k|    {
 3035|  2.51k|        return true;
 3036|  2.51k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    284|    {
 3539|    284|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    284|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    284|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 284]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    284|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 284]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    284|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    284|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 274, False: 10]
  |  |  ------------------
  ------------------
 3565|    274|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    274|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    302|    {
 3539|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    302|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 302]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 302]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    302|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 270, False: 32]
  |  |  ------------------
  ------------------
 3565|    270|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    270|                    parse_integer_digits_without_thsep(
 3567|    270|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    270|                        prefix_result.parsed_base));
 3569|       |
 3570|    270|            auto buf = make_contiguous_buffer(
 3571|    270|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    270|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    270|    }                                                  \
  |  |  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    270|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    284|    {
 3539|    284|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    284|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    284|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 284]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    284|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 284]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    284|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    284|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 274, False: 10]
  |  |  ------------------
  ------------------
 3565|    274|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    274|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    302|    {
 3539|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    302|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 302]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 302]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    302|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 270, False: 32]
  |  |  ------------------
  ------------------
 3565|    270|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    270|                    parse_integer_digits_without_thsep(
 3567|    270|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    270|                        prefix_result.parsed_base));
 3569|       |
 3570|    270|            auto buf = make_contiguous_buffer(
 3571|    270|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    270|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    270|    }                                                  \
  |  |  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    270|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    252|    {
 3539|    252|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    252|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    252|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 252]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    252|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 252]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    252|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 252, False: 0]
  |  |  ------------------
  ------------------
 3565|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    894|    {
 3539|    894|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    894|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    894|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    894|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 894]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    894|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    894|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    894|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    894|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 894]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    894|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 894]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    894|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    894|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 894, False: 0]
  |  |  ------------------
  ------------------
 3565|    894|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    894|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    894|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    894|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 894]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    894|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    894|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    894|                    parse_integer_digits_without_thsep(
 3567|    894|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    894|                        prefix_result.parsed_base));
 3569|       |
 3570|    894|            auto buf = make_contiguous_buffer(
 3571|    894|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    894|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    894|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    894|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    894|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    894|    }                                                  \
  |  |  |  | 3671|    894|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    894|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.4k|    {
 3040|  10.4k|        reader_error_handler eh{};
 3041|  10.4k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.83k, False: 598]
  |  |  ------------------
  ------------------
 3043|  9.83k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.83k|        }
 3045|    598|        return {};
 3046|  10.4k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  10.4k|    {
 3051|  10.4k|        return static_cast<Derived&>(*this);
 3052|  10.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  10.4k|    {
 4145|  10.4k|        detail::check_float_type_specs(specs, eh);
 4146|  10.4k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.24k|    {
 3035|  1.24k|        return true;
 3036|  1.24k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    568|    {
 4217|    568|        unsigned options{};
 4218|    568|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 18, False: 550]
  ------------------
 4219|     18|            options |= float_reader_base::allow_thsep;
 4220|     18|        }
 4221|       |
 4222|    568|        SCN_GCC_COMPAT_PUSH
 4223|    568|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    568|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 538]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 564]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 12, False: 556]
  ------------------
 4233|     12|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|     10|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 10, False: 558]
  ------------------
 4236|     10|                return options | float_reader_base::allow_scientific |
 4237|     10|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    512|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 512, False: 56]
  ------------------
 4240|    512|                return options | float_reader_base::allow_scientific |
 4241|    512|                       float_reader_base::allow_fixed |
 4242|    512|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 568]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    568|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    568|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    568|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    568|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.21k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.42k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    904|    {
 4057|    904|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 904, False: 0]
  ------------------
 4058|    904|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 904, False: 0]
  ------------------
 4059|    904|            return;
 4060|    904|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    788|    {
 1587|    788|        return m_storage.has_value();
 1588|    788|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    394|    {
 1592|    394|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    394|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    394|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    394|        return *m_storage;
 1594|    394|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    280|    {
  763|    280|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    280|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    280|    {
 3705|    280|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    280|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    280|        auto it = sign_result.first;
 3708|    280|        m_sign = sign_result.second;
 3709|       |
 3710|    280|        auto digits_begin = it;
 3711|    280|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|    280|        else {
 3738|    280|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    280|    }                                                  \
  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|    280|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    280|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    280|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    280|    {
 4000|    280|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    280|        const bool allowed_nonhex =
 4002|    280|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    280|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    280|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 280, False: 0]
  |  Branch (4005:45): [True: 0, False: 280]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    280|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 280]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    280|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 280, False: 0]
  |  Branch (4014:45): [True: 0, False: 280]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    280|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 280]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    280|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 262, False: 18]
  |  Branch (4021:28): [True: 4, False: 258]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      4|            auto it = range.begin();
 4025|       |
 4026|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 4]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      4|            else {
 4031|      4|                m_kind = float_kind::hex_without_prefix;
 4032|      4|            }
 4033|       |
 4034|      4|            return read_hex(ranges::subrange{it, range.end()});
 4035|      4|        }
 4036|    276|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 258]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    258|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 258]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    258|        m_kind = float_kind::generic;
 4052|    258|        return read_regular(range);
 4053|    258|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    280|    {
 3811|    280|        auto it = range.begin();
 3812|    280|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 280, False: 0]
  ------------------
 3813|    280|            return unexpected(r.error());
 3814|    280|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    280|    {
 3834|    280|        auto it = range.begin();
 3835|    280|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 280, False: 0]
  ------------------
 3836|    280|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    280|                scan_error::invalid_scanned_value,
 3838|    280|                "Invalid floating-point NaN value"));
 3839|    280|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    262|    {
 3804|    262|        return read_matching_string_classic_nocase(range, "0x");
 3805|    262|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      4|    {
 3904|      4|        auto it = range.begin();
 3905|       |
 3906|      4|        std::ptrdiff_t digits_count = 0;
 3907|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3909|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      4|                scan_error::invalid_scanned_value,
 3911|      4|                "Invalid hexadecimal floating-point value"));
 3912|      4|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      4|    {
 3789|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      4|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      4|        return read_while1_code_unit(
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      4|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  688|      4|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    276|    {
 3944|    276|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    276|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 262, False: 14]
  |  Branch (3945:50): [True: 0, False: 262]
  ------------------
 3946|       |
 3947|    276|        auto it = ranges::begin(range);
 3948|    276|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    276|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    276|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 276, False: 0]
  |  |  ------------------
  ------------------
 3952|    276|            return r.transform_error(
 3953|    276|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    276|                                              "Invalid floating-point value"));
 3955|    276|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    276|    {
 3774|    276|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  Branch (859:45): [True: 0, False: 276]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    276|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    276|        return read_while1_code_unit(
 3783|    276|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    276|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    276|        : m_fptr([](storage fn,
  743|    276|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    276|              cvref<T> obj = *get<T>(fn);
  745|    276|              if constexpr (std::is_void_v<R>) {
  746|    276|                  obj(static_cast<decltype(args)>(args)...);
  747|    276|              }
  748|    276|              else {
  749|    276|                  return obj(static_cast<decltype(args)>(args)...);
  750|    276|              }
  751|    276|          }),
  752|    276|          m_storage(std::addressof(f))
  753|    276|    {
  754|    276|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    276|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    276|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    276|              else {
  749|    276|                  return obj(static_cast<decltype(args)>(args)...);
  750|    276|              }
  751|    276|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    276|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    276|        else if constexpr (std::is_object_v<T>) {
  688|    276|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    276|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    276|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    276|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    276|        {
  662|    276|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    272|    {
 3665|    272|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    272|        return read_source_impl(range);
 3671|    272|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    930|    {
  763|    930|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    930|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    930|    {
 3705|    930|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    930|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    930|        auto it = sign_result.first;
 3708|    930|        m_sign = sign_result.second;
 3709|       |
 3710|    930|        auto digits_begin = it;
 3711|    930|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|    930|                      ranges::sized_range<Range>) {
 3714|    930|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  |  Branch (859:45): [True: 0, False: 930]
  |  |  |  Branch (859:45): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 3715|    930|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    930|            else {
 3724|    930|                auto cb = [&](const auto& rr)
 3725|    930|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    930|                    auto res = read_all(rr);
 3727|    930|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    930|                        return unexpected_scan_error(
 3729|    930|                            scan_error::invalid_scanned_value,
 3730|    930|                            "Invalid float value");
 3731|    930|                    }
 3732|    930|                    return res;
 3733|    930|                };
 3734|    930|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 904]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    904|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|    930|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    904|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 904, False: 0]
  |  Branch (3747:48): [True: 904, False: 0]
  ------------------
 3748|    904|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 904, False: 0]
  ------------------
 3749|    904|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 904, False: 0]
  ------------------
 3750|    904|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    904|        }
 3752|       |
 3753|    904|        handle_separators();
 3754|       |
 3755|    904|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 904]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    904|        return it;
 3768|    904|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    930|    {
 3811|    930|        auto it = range.begin();
 3812|    930|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 930, False: 0]
  ------------------
 3813|    930|            return unexpected(r.error());
 3814|    930|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    930|    {
 3834|    930|        auto it = range.begin();
 3835|    930|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 930, False: 0]
  ------------------
 3836|    930|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    930|                scan_error::invalid_scanned_value,
 3838|    930|                "Invalid floating-point NaN value"));
 3839|    930|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    904|    {
 3804|    904|        return read_matching_string_classic_nocase(range, "0x");
 3805|    904|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 10, False: 16]
  |  Branch (3945:50): [True: 4, False: 6]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     26|        : m_fptr([](storage fn,
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
  752|     26|          m_storage(std::addressof(f))
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  688|     26|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     26|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    930|    {
 4000|    930|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    930|        const bool allowed_nonhex =
 4002|    930|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    930|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    930|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 930, False: 0]
  |  Branch (4005:45): [True: 0, False: 930]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    930|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 930]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    930|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 930, False: 0]
  |  Branch (4014:45): [True: 0, False: 930]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    930|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 930]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    930|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 904, False: 26]
  |  Branch (4021:28): [True: 8, False: 896]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      8|            auto it = range.begin();
 4025|       |
 4026|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 8]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      8|            else {
 4031|      8|                m_kind = float_kind::hex_without_prefix;
 4032|      8|            }
 4033|       |
 4034|      8|            return read_hex(ranges::subrange{it, range.end()});
 4035|      8|        }
 4036|    922|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 896]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    896|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 896]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    896|        m_kind = float_kind::generic;
 4052|    896|        return read_regular(range);
 4053|    896|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    904|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    904|                    auto res = read_all(rr);
 3727|    904|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 904]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    904|                    return res;
 3733|    904|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    904|{
 1839|    904|    return ranges::next(range.begin(), range.end());
 1840|    904|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    904|    {
  313|    904|        ranges::advance(x, bound);
  314|    904|        return x;
  315|    904|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    904|    {
  275|    904|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    904|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    970|    {
  190|    970|        i = std::move(bound);
  191|    970|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|    904|    {
 1577|    904|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    904|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    904|    {
 1621|    904|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|    904|                      ranges::sized_range<Range>) {
 1626|    904|            m_storage.reset();
 1627|    904|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|    904|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    920|    {
 3665|    920|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 920]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    920|        return read_source_impl(range);
 3671|    920|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    904|    {
 3691|    904|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    904|        const std::ptrdiff_t sign_len =
 3694|    904|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 904]
  ------------------
 3695|       |
 3696|    904|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 904, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    904|    }                                                  \
  |  |  |  | 3671|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    904|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    280|    {
 4170|    280|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    280|#if !SCN_DISABLE_LOCALE
 4173|    280|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 272]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    272|#endif
 4182|       |
 4183|    272|        return read_impl<Range>(
 4184|    272|            range, rd,
 4185|    272|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    272|                return r.read_source(SCN_FWD(args)...);
 4187|    272|            },
 4188|    272|            value);
 4189|    280|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    280|    {
 4206|    280|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    280|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  ------------------
  ------------------
 4208|    280|            return unexpected(r.error());
 4209|    280|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    272|        : m_fptr([](storage fn,
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|    272|              if constexpr (std::is_void_v<R>) {
  746|    272|                  obj(static_cast<decltype(args)>(args)...);
  747|    272|              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
  752|    272|          m_storage(std::addressof(f))
  753|    272|    {
  754|    272|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    272|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    272|        else if constexpr (std::is_object_v<T>) {
  688|    272|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    272|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    272|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    272|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    272|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    272|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    272|        {
  662|    272|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    288|    {
 4170|    288|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    288|#if !SCN_DISABLE_LOCALE
 4173|    288|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 278]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    278|#endif
 4182|       |
 4183|    278|        return read_impl<Range>(
 4184|    278|            range, rd,
 4185|    278|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    278|                return r.read_source(SCN_FWD(args)...);
 4187|    278|            },
 4188|    278|            value);
 4189|    288|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    930|    {
 4206|    930|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    930|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 904]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|    904|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 904, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    904|    }                                                  \
  |  |  |  | 3671|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    904|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    278|        : m_fptr([](storage fn,
  743|    278|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    278|              cvref<T> obj = *get<T>(fn);
  745|    278|              if constexpr (std::is_void_v<R>) {
  746|    278|                  obj(static_cast<decltype(args)>(args)...);
  747|    278|              }
  748|    278|              else {
  749|    278|                  return obj(static_cast<decltype(args)>(args)...);
  750|    278|              }
  751|    278|          }),
  752|    278|          m_storage(std::addressof(f))
  753|    278|    {
  754|    278|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    278|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    278|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    278|              else {
  749|    278|                  return obj(static_cast<decltype(args)>(args)...);
  750|    278|              }
  751|    278|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    278|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    278|        else if constexpr (std::is_object_v<T>) {
  688|    278|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    278|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    278|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    278|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    278|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    278|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    278|        {
  662|    278|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  11.0k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|       |                       std::is_same_v<T, std::wstring_view>) {
 5823|       |        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  11.0k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  33.0k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  31.1k|    {
 3040|  31.1k|        reader_error_handler eh{};
 3041|  31.1k|        get_derived().check_specs_impl(specs, eh);
 3042|  31.1k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 30.7k]
  |  |  ------------------
  ------------------
 3043|    378|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    378|        }
 3045|  30.7k|        return {};
 3046|  31.1k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  31.1k|    {
 3051|  31.1k|        return static_cast<Derived&>(*this);
 3052|  31.1k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  31.1k|    {
 5210|  31.1k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  31.1k|        SCN_GCC_PUSH
 5213|  31.1k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  31.1k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  31.1k|        SCN_CLANG_PUSH
 5217|  31.1k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  31.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  31.1k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 372, False: 30.7k]
  ------------------
 5221|  1.55k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.55k, False: 29.5k]
  ------------------
 5222|  1.55k|                m_type = reader_type::word;
 5223|  1.55k|                break;
 5224|       |
 5225|    600|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 600, False: 30.5k]
  ------------------
 5226|    600|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 132, False: 468]
  ------------------
 5227|    600|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 246, False: 222]
  ------------------
 5228|    378|                    m_type = reader_type::custom_word;
 5229|    378|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    600|                break;
 5234|      0|            }
 5235|       |
 5236|    102|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 102, False: 31.0k]
  ------------------
 5237|    102|                m_type = reader_type::character;
 5238|    102|                break;
 5239|       |
 5240|  4.35k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 4.35k, False: 26.7k]
  ------------------
 5241|  4.35k|                m_type = reader_type::character_set;
 5242|  4.35k|                break;
 5243|       |
 5244|  20.5k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 20.5k, False: 10.6k]
  ------------------
 5245|  20.5k|                m_type = reader_type::regex;
 5246|  20.5k|                break;
 5247|       |
 5248|  3.63k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 3.63k, False: 27.4k]
  ------------------
 5249|  3.63k|                m_type = reader_type::regex_escaped;
 5250|  3.63k|                break;
 5251|  31.1k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  31.1k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  38.1k|    {
 5259|  38.1k|        return m_type == reader_type::word;
 5260|  38.1k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  12.9k|{
 1132|  12.9k|    auto it = src.begin();
 1133|   872k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 861k, False: 10.6k]
  ------------------
 1134|   861k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   861k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.56k, False: 859k]
  ------------------
 1136|  1.56k|            return false;
 1137|  1.56k|        }
 1138|   859k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 228, False: 859k]
  ------------------
 1139|    228|            return false;
 1140|    228|        }
 1141|   859k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   859k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   859k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 486, False: 859k]
  ------------------
 1144|    486|            return false;
 1145|    486|        }
 1146|   859k|        it += len;
 1147|   859k|    }
 1148|  10.6k|    return true;
 1149|  12.9k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    394|{
 2993|    394|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2994|    394|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 394, False: 0]
  ------------------
 2995|    394|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    394|    static_cast<    \
  |  |  929|    394|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    394|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|       |    }
 3001|       |    else {
 3002|       |        return transcode_impl(source.view(), dest);
 3003|       |    }
 3004|       |
 3005|    394|    return {};
 3006|    394|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  4.34k|        {
 5103|  4.34k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 588, False: 3.75k]
  ------------------
 5104|    588|                return {};
 5105|    588|            }
 5106|       |
 5107|  3.75k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  3.75k|            auto it = detail::to_address(charset_string.begin());
 5109|  3.75k|            auto set = detail::parse_presentation_set(
 5110|  3.75k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  3.75k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  3.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.75k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  3.75k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  3.75k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  3.75k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  3.75k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  3.75k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  3.75k|                      nonascii.extra_ranges.end());
 5119|  3.75k|            return {};
 5120|  3.75k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   565k|        {
 5138|   565k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 74.8k, False: 491k]
  ------------------
 5139|  74.8k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  74.8k|            }
 5141|       |
 5142|   491k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   565k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  74.8k|        {
 5086|       |            // TODO: binary search?
 5087|  74.8k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 74.8k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  74.8k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  74.8k|            return std::find_if(
 5093|  74.8k|                       nonascii.extra_ranges.begin(),
 5094|  74.8k|                       nonascii.extra_ranges.end(),
 5095|  74.8k|                       [cp_val](const auto& pair) noexcept {
 5096|  74.8k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  74.8k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  74.8k|                       }) != nonascii.extra_ranges.end();
 5099|  74.8k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  15.2M|                       [cp_val](const auto& pair) noexcept {
 5096|  15.2M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 15.2M, False: 5.41k]
  ------------------
 5097|  15.2M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 73.4k, False: 15.1M]
  ------------------
 5098|  15.2M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   498k|        {
 5076|   498k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   498k|            const auto val =
 5078|   498k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   498k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   498k|                    (val % 8)) &
 5081|   498k|                   1u;
 5082|   498k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  9.75k|        {
 5129|  9.75k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 2.41k, False: 7.33k]
  ------------------
 5130|  2.41k|                return false;
 5131|  2.41k|            }
 5132|       |
 5133|  7.33k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  9.75k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  4.34k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.05k|    {
 5277|  1.05k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.05k|        return read_impl(range, specs, value);
 5279|  1.05k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.05k|    {
 5295|  1.05k|        SCN_CLANG_PUSH
 5296|  1.05k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.05k|        switch (m_type) {
 5299|    256|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 256, False: 794]
  ------------------
 5300|    256|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     68|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 68, False: 982]
  ------------------
 5303|     68|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     68|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 1.01k]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    240|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 240, False: 810]
  ------------------
 5310|    240|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    240|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.04k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    452|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 452, False: 598]
  ------------------
 5320|    452|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    452|                    range,
 5322|    452|                    get_unescaped_regex_pattern(
 5323|    452|                        specs.charset_string<SourceCharT>()),
 5324|    452|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.05k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.05k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.05k|        }
 5331|       |
 5332|  1.05k|        SCN_CLANG_POP
 5333|  1.05k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    256|    {
 4820|    256|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    256|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    356|{
 4752|    356|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    356|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    356|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 122, False: 234]
  ------------------
 4756|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    122|                                     "Invalid encoding in scanned string");
 4758|    122|    }
 4759|    234|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    234|    static_cast<    \
  |  |  929|    234|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    234|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    234|    return SCN_MOVE(result);
  ------------------
  |  |  928|    234|    static_cast<    \
  |  |  929|    234|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    234|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    768|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|    768|    else {
 2097|    768|        auto it = range.begin();
 2098|       |
 2099|    768|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|    768|            auto seg = get_contiguous_beginning(range);
 2101|    768|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    768|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 768]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    768|            ranges::advance(it, seg.size());
 2106|    768|        }
 2107|       |
 2108|      0|        return read_until_code_point(
 2109|    768|            ranges::subrange{it, range.end()},
 2110|    768|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    768|    }
 2112|    768|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    768|{
 2061|    768|    auto it = range.begin();
 2062|  12.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 11.8k, False: 582]
  ------------------
 2063|  11.8k|        const auto val =
 2064|  11.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  11.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  11.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.46k, False: 2.37k]
  |  |  ------------------
  ------------------
 2066|  9.46k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  9.46k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  9.46k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 186, False: 9.28k]
  ------------------
 2069|    186|                return it;
 2070|    186|            }
 2071|  9.46k|        }
 2072|  11.6k|        it = val.iterator;
 2073|  11.6k|    }
 2074|       |
 2075|    582|    return it;
 2076|    768|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    768|        : m_fptr([](storage fn,
  743|    768|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    768|              cvref<T> obj = *get<T>(fn);
  745|    768|              if constexpr (std::is_void_v<R>) {
  746|    768|                  obj(static_cast<decltype(args)>(args)...);
  747|    768|              }
  748|    768|              else {
  749|    768|                  return obj(static_cast<decltype(args)>(args)...);
  750|    768|              }
  751|    768|          }),
  752|    768|          m_storage(std::addressof(f))
  753|    768|    {
  754|    768|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  9.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.46k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.46k|              else {
  749|  9.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.46k|              }
  751|  9.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  9.46k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.46k|        else if constexpr (std::is_object_v<T>) {
  688|  9.46k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.46k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  9.46k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    768|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    768|        {
  662|    768|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     68|    {
 4841|     68|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 34]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     34|        return read_string_impl(
 4851|     34|            range,
 4852|     34|            read_until_code_units(
 4853|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     34|            value);
 4855|     68|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|    102|{
 2007|    102|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|       |    if constexpr (ranges::common_range<Range>) {
 2010|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2011|       |                           needle.end());
 2012|       |    }
 2013|    102|    else {
 2014|    102|        auto first = range.begin();
 2015|    732|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    732|            auto it = first;
 2017|    906|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    906|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 54, False: 852]
  ------------------
 2019|     54|                    return first;
 2020|     54|                }
 2021|    852|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 48, False: 804]
  ------------------
 2022|     48|                    return it;
 2023|     48|                }
 2024|    804|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 630, False: 174]
  ------------------
 2025|    630|                    break;
 2026|    630|                }
 2027|    804|            }
 2028|    630|            ++first;
 2029|    630|        }
 2030|    102|    }
 2031|    102|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     96|{
 1839|     96|    return ranges::next(range.begin(), range.end());
 1840|     96|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     96|    {
  313|     96|        ranges::advance(x, bound);
  314|     96|        return x;
  315|     96|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     96|    {
  275|     96|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     96|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     96|    {
  203|  1.96k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.86k, False: 96]
  ------------------
  204|  1.86k|            ++i;
  205|  1.86k|        }
  206|     96|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    240|    {
 5048|    240|        auto it = read_source_impl(range, {specs});
 5049|    240|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 228]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    228|        return read_string_impl(range, *it, value);
 5054|    240|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    720|    {
 5153|    720|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    720|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    720|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    720|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 720]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    720|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    720|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 408, False: 312]
  ------------------
 5163|    408|            const auto cb = [&](char32_t cp) {
 5164|    408|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    408|            };
 5166|       |
 5167|    408|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 138, False: 270]
  ------------------
 5168|    138|                auto it = read_until_code_point(range, cb);
 5169|    138|                return check_nonempty(it, range);
 5170|    138|            }
 5171|    270|            auto it = read_while_code_point(range, cb);
 5172|    270|            return check_nonempty(it, range);
 5173|    408|        }
 5174|       |
 5175|    312|        const auto cb = [&](SourceCharT ch) {
 5176|    312|            return cb_wrapper.on_ascii_only(ch);
 5177|    312|        };
 5178|       |
 5179|    312|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 156, False: 156]
  ------------------
 5180|    156|            auto it = read_until_code_unit(range, cb);
 5181|    156|            return check_nonempty(it, range);
 5182|    156|        }
 5183|    156|        auto it = read_while_code_unit(range, cb);
 5184|    156|        return check_nonempty(it, range);
 5185|    312|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    408|        : m_fptr([](storage fn,
  743|    408|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    408|              cvref<T> obj = *get<T>(fn);
  745|    408|              if constexpr (std::is_void_v<R>) {
  746|    408|                  obj(static_cast<decltype(args)>(args)...);
  747|    408|              }
  748|    408|              else {
  749|    408|                  return obj(static_cast<decltype(args)>(args)...);
  750|    408|              }
  751|    408|          }),
  752|    408|          m_storage(std::addressof(f))
  753|    408|    {
  754|    408|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  22.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  22.9k|              else {
  749|  22.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.9k|              }
  751|  22.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  22.9k|    {
  684|  22.9k|        if constexpr (std::is_const_v<T>) {
  685|  22.9k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  22.9k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  22.9k|            const auto cb = [&](char32_t cp) {
 5164|  22.9k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  22.9k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    408|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    408|        {
  667|    408|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    720|    {
 5191|    720|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 36, False: 684]
  ------------------
 5192|     36|            return unexpected_scan_error(
 5193|     36|                scan_error::invalid_scanned_value,
 5194|     36|                "No characters matched in [character set]");
 5195|     36|        }
 5196|       |
 5197|    684|        return it;
 5198|    720|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    312|        : m_fptr([](storage fn,
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|    312|              if constexpr (std::is_void_v<R>) {
  746|    312|                  obj(static_cast<decltype(args)>(args)...);
  747|    312|              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
  752|    312|          m_storage(std::addressof(f))
  753|    312|    {
  754|    312|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  6.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.27k|              else {
  749|  6.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.27k|              }
  751|  6.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.27k|    {
  684|  6.27k|        if constexpr (std::is_const_v<T>) {
  685|  6.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  6.27k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.27k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.27k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    312|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    312|        {
  667|    312|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    228|{
 4752|    228|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    228|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    228|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 68, False: 160]
  ------------------
 4756|     68|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     68|                                     "Invalid encoding in scanned string");
 4758|     68|    }
 4759|    160|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    160|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    160|    return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    160|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    454|    {
 4891|    454|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    454|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 454, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    454|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    454|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    454|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    454|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    454|    }                                                  \
  |  |  |  | 3671|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    454|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  1.36k|    {
 4913|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4914|       |                      !std::is_same_v<SourceCharT, char>) {
 4915|       |            return unexpected_scan_error(
 4916|       |                scan_error::invalid_scanned_value,
 4917|       |                "Regex backend doesn't support wide strings as input");
 4918|       |        }
 4919|  1.36k|        else {
 4920|  1.36k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 1.36k, False: 0]
  ------------------
 4921|  1.36k|                return unexpected_scan_error(
 4922|  1.36k|                    scan_error::invalid_scanned_value,
 4923|  1.36k|                    "Cannot use regex with a non-contiguous source "
 4924|  1.36k|                    "range");
 4925|  1.36k|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|  1.36k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  1.36k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|  1.36k|    else {
  974|  1.36k|        return false;
  975|  1.36k|    }
  976|  1.36k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  9.17k|    {
 5277|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.17k|        return read_impl(range, specs, value);
 5279|  9.17k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  9.17k|    {
 5295|  9.17k|        SCN_CLANG_PUSH
 5296|  9.17k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.17k|        switch (m_type) {
 5299|    312|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 312, False: 8.86k]
  ------------------
 5300|    312|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 9.11k]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.17k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.20k, False: 7.96k]
  ------------------
 5310|  1.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.20k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.83k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.83k, False: 2.33k]
  ------------------
 5315|  6.83k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.83k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.83k|                    specs.regexp_flags, value);
 5318|       |
 5319|    758|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 758, False: 8.41k]
  ------------------
 5320|    758|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    758|                    range,
 5322|    758|                    get_unescaped_regex_pattern(
 5323|    758|                        specs.charset_string<SourceCharT>()),
 5324|    758|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.17k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.17k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.17k|        }
 5331|       |
 5332|  9.17k|        SCN_CLANG_POP
 5333|  9.17k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    954|    {
 4820|    954|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    954|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.01k|{
 4752|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.01k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.01k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 324, False: 688]
  ------------------
 4756|    324|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    324|                                     "Invalid encoding in scanned string");
 4758|    324|    }
 4759|    688|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    688|    static_cast<    \
  |  |  929|    688|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    688|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 688]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    688|    return SCN_MOVE(result);
  ------------------
  |  |  928|    688|    static_cast<    \
  |  |  929|    688|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    688|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  2.28k|{
 3012|  2.28k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3013|  2.28k|        dest.assign(source.view());
 3014|       |    }
 3015|       |    else {
 3016|       |        return transcode_impl(source.view(), dest);
 3017|       |    }
 3018|       |
 3019|  2.28k|    return {};
 3020|  2.28k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.86k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|  2.86k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|  2.86k|        auto buf = make_contiguous_buffer(range);
 2092|  2.86k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.86k|        return ranges::next(range.begin(),
 2094|  2.86k|                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|       |    else {
 2097|       |        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|       |        return read_until_code_point(
 2109|       |            ranges::subrange{it, range.end()},
 2110|       |            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|       |    }
 2112|  2.86k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     58|    {
 4841|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 28]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     28|        return read_string_impl(
 4851|     28|            range,
 4852|     28|            read_until_code_units(
 4853|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     28|            value);
 4855|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     84|{
 2007|     84|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     84|    if constexpr (ranges::common_range<Range>) {
 2010|     84|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     84|                           needle.end());
 2012|       |    }
 2013|       |    else {
 2014|       |        auto first = range.begin();
 2015|       |        while (true) {
 2016|       |            auto it = first;
 2017|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|       |                if (needle_it == needle.end()) {
 2019|       |                    return first;
 2020|       |                }
 2021|       |                if (it == range.end()) {
 2022|       |                    return it;
 2023|       |                }
 2024|       |                if (*it != *needle_it) {
 2025|       |                    break;
 2026|       |                }
 2027|       |            }
 2028|       |            ++first;
 2029|       |        }
 2030|       |    }
 2031|     84|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.20k|    {
 5048|  1.20k|        auto it = read_source_impl(range, {specs});
 5049|  1.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362, False: 846]
  |  |  ------------------
  ------------------
 5050|    362|            return unexpected(it.error());
 5051|    362|        }
 5052|       |
 5053|    846|        return read_string_impl(range, *it, value);
 5054|  1.20k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  3.62k|    {
 5153|  3.62k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  3.62k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  3.62k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.62k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  3.62k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  3.62k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 3.34k, False: 276]
  ------------------
 5163|  3.34k|            const auto cb = [&](char32_t cp) {
 5164|  3.34k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  3.34k|            };
 5166|       |
 5167|  3.34k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 216, False: 3.13k]
  ------------------
 5168|    216|                auto it = read_until_code_point(range, cb);
 5169|    216|                return check_nonempty(it, range);
 5170|    216|            }
 5171|  3.13k|            auto it = read_while_code_point(range, cb);
 5172|  3.13k|            return check_nonempty(it, range);
 5173|  3.34k|        }
 5174|       |
 5175|    276|        const auto cb = [&](SourceCharT ch) {
 5176|    276|            return cb_wrapper.on_ascii_only(ch);
 5177|    276|        };
 5178|       |
 5179|    276|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 120, False: 156]
  ------------------
 5180|    120|            auto it = read_until_code_unit(range, cb);
 5181|    120|            return check_nonempty(it, range);
 5182|    120|        }
 5183|    156|        auto it = read_while_code_unit(range, cb);
 5184|    156|        return check_nonempty(it, range);
 5185|    276|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  3.34k|{
 2061|  3.34k|    auto it = range.begin();
 2062|   545k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 544k, False: 210]
  ------------------
 2063|   544k|        const auto val =
 2064|   544k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   544k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   544k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 543k, False: 1.86k]
  |  |  ------------------
  ------------------
 2066|   543k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   543k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   543k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.13k, False: 539k]
  ------------------
 2069|  3.13k|                return it;
 2070|  3.13k|            }
 2071|   543k|        }
 2072|   541k|        it = val.iterator;
 2073|   541k|    }
 2074|       |
 2075|    210|    return it;
 2076|  3.34k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   544k|{
 1899|   544k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   544k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   544k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   544k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   544k|    auto it = range.begin();
 1903|   544k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   544k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 543k]
  |  |  ------------------
  ------------------
 1906|  1.86k|        ++it;
 1907|  1.86k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  1.86k|        return {it, {}};
 1909|  1.86k|    }
 1910|       |
 1911|   543k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 470k, False: 72.7k]
  ------------------
 1912|   470k|        ++it;
 1913|   470k|        return {it, string_type(1, *range.begin())};
 1914|   470k|    }
 1915|       |
 1916|  72.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  72.7k|    return {it, string_type{range.begin(), it}};
 1918|   543k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.86k|{
 1155|  1.86k|    auto it = input.begin();
 1156|  2.49k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.43k, False: 66]
  ------------------
 1157|  2.43k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.79k, False: 636]
  ------------------
 1158|  1.79k|            break;
 1159|  1.79k|        }
 1160|  2.43k|    }
 1161|  1.86k|    return it;
 1162|  1.86k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  72.7k|    {
  283|  72.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  72.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  72.7k|    {
  212|  72.7k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 66, False: 72.6k]
  ------------------
  213|     66|            auto dist = bound - i;
  214|     66|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     66|            return dist;
  216|     66|        }
  217|  72.6k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  72.6k|        return n;
  219|  72.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   145k|    {
  132|   145k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 145k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   145k|        return t;
  136|   145k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   544k|    {
 1890|   544k|        return !codepoint.empty();
 1891|   544k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  3.34k|        : m_fptr([](storage fn,
  743|  3.34k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.34k|              cvref<T> obj = *get<T>(fn);
  745|  3.34k|              if constexpr (std::is_void_v<R>) {
  746|  3.34k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.34k|              }
  748|  3.34k|              else {
  749|  3.34k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.34k|              }
  751|  3.34k|          }),
  752|  3.34k|          m_storage(std::addressof(f))
  753|  3.34k|    {
  754|  3.34k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   543k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   543k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   543k|              else {
  749|   543k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   543k|              }
  751|   543k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   543k|    {
  684|   543k|        if constexpr (std::is_const_v<T>) {
  685|   543k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   543k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   543k|            const auto cb = [&](char32_t cp) {
 5164|   543k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   543k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  3.34k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.34k|        {
  667|  3.34k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  3.62k|    {
 5191|  3.62k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.08k, False: 2.53k]
  ------------------
 5192|  1.08k|            return unexpected_scan_error(
 5193|  1.08k|                scan_error::invalid_scanned_value,
 5194|  1.08k|                "No characters matched in [character set]");
 5195|  1.08k|        }
 5196|       |
 5197|  2.53k|        return it;
 5198|  3.62k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  3.13k|{
 2082|  3.13k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.13k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    276|        : m_fptr([](storage fn,
  743|    276|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    276|              cvref<T> obj = *get<T>(fn);
  745|    276|              if constexpr (std::is_void_v<R>) {
  746|    276|                  obj(static_cast<decltype(args)>(args)...);
  747|    276|              }
  748|    276|              else {
  749|    276|                  return obj(static_cast<decltype(args)>(args)...);
  750|    276|              }
  751|    276|          }),
  752|    276|          m_storage(std::addressof(f))
  753|    276|    {
  754|    276|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.48k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.48k|              else {
  749|  3.48k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.48k|              }
  751|  3.48k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.48k|    {
  684|  3.48k|        if constexpr (std::is_const_v<T>) {
  685|  3.48k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.48k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  3.48k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.48k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.48k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    276|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    276|        {
  667|    276|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.83k|{
 4752|  1.83k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.83k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.83k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 244, False: 1.59k]
  ------------------
 4756|    244|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    244|                                     "Invalid encoding in scanned string");
 4758|    244|    }
 4759|  1.59k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.59k|    static_cast<    \
  |  |  929|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.59k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.59k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.59k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.59k|    static_cast<    \
  |  |  929|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.59k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  7.59k|    {
 4891|  7.59k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  7.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.60k, False: 990]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.60k|    }                                                  \
  |  |  |  | 3671|  7.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    990|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    990|        return read_string_impl(range, it, value);
 4893|  7.59k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  22.7k|    {
 4913|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4914|       |                      !std::is_same_v<SourceCharT, char>) {
 4915|       |            return unexpected_scan_error(
 4916|       |                scan_error::invalid_scanned_value,
 4917|       |                "Regex backend doesn't support wide strings as input");
 4918|       |        }
 4919|  22.7k|        else {
 4920|  22.7k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 22.7k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  22.7k|            auto input = get_as_contiguous(range);
 4928|  22.7k|            SCN_TRY(it,
  ------------------
  |  | 3672|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 2.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.8k|    }                                                  \
  |  |  |  | 3671|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  2.97k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  2.97k|            return ranges::next(range.begin(),
 4931|  2.97k|                                ranges::distance(input.begin(), it));
 4932|  22.7k|        }
 4933|  22.7k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  22.7k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  22.7k|                  ranges::sized_range<Range>) {
  961|  22.7k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  22.7k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  22.7k|{
 1065|  22.7k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  22.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  22.7k|                  ranges::sized_range<Range>) {
 1069|  22.7k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  22.7k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  22.7k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  22.7k|                  ranges::sized_range<Range>) {
  983|  22.7k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  22.7k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  22.7k|{
 4346|  22.7k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  22.7k|                  ranges::borrowed_range<Input> &&
 4348|  22.7k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  22.7k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  22.7k|    std::basic_regex<CharT> re{};
 4352|  22.7k|    try {
 4353|  22.7k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  22.7k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  22.7k|                                     re_flags | std::regex_constants::nosubs};
 4356|  22.7k|    }
 4357|  22.7k|    catch (const std::regex_error& err) {
 4358|  13.4k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  13.4k|                                     "Invalid regex");
 4360|  13.4k|    }
 4361|       |
 4362|  9.31k|    std::match_results<const CharT*> matches{};
 4363|  9.31k|    try {
 4364|  9.31k|        bool found = std::regex_search(input.data(),
 4365|  9.31k|                                       input.data() + input.size(), matches, re,
 4366|  9.31k|                                       std::regex_constants::match_continuous);
 4367|  9.31k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 6.34k, False: 2.97k]
  |  Branch (4367:23): [True: 0, False: 2.97k]
  ------------------
 4368|  5.95k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  5.95k|                                         "Regular expression didn't match");
 4370|  5.95k|        }
 4371|  9.31k|    }
 4372|  9.31k|    catch (const std::regex_error& err) {
 4373|    396|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    396|                                     "Regex matching failed with an error");
 4375|    396|    }
 4376|       |
 4377|  2.97k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  9.31k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  11.0k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|       |                       std::is_same_v<T, std::wstring_view>) {
 5823|       |        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  11.0k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    394|{
 2993|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2994|       |        if (source.stores_allocated_string()) {
 2995|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|       |        }
 2997|       |        else {
 2998|       |            dest.assign(source.view());
 2999|       |        }
 3000|       |    }
 3001|    394|    else {
 3002|    394|        return transcode_impl(source.view(), dest);
 3003|    394|    }
 3004|       |
 3005|      0|    return {};
 3006|    394|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.67k|{
 2968|  2.67k|    dst.clear();
 2969|  2.67k|    transcode_valid_to_string(src, dst);
 2970|  2.67k|    return {};
 2971|  2.67k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.67k|{
 1403|  2.67k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.67k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.67k|    if constexpr (sizeof(SourceCharT) == 1) {
 1407|       |        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|       |            std::u32string tmp;
 1410|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1411|       |            return transcode_to_string_impl_32to16<true>(
 1412|       |                std::u32string_view{tmp}, dest);
 1413|       |        }
 1414|  2.67k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  2.67k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.67k|        }
 1417|       |    }
 1418|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|       |        if constexpr (sizeof(DestCharT) == 1) {
 1420|       |            std::u32string tmp;
 1421|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1422|       |            return transcode_to_string_impl_32to8<true>(
 1423|       |                std::u32string_view{tmp}, dest);
 1424|       |        }
 1425|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1426|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|       |        }
 1428|       |    }
 1429|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|       |        if constexpr (sizeof(DestCharT) == 1) {
 1431|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|       |        }
 1433|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1434|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|       |        }
 1436|       |    }
 1437|       |
 1438|  2.67k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|  2.67k|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.67k|{
 1277|  2.67k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.67k|    auto it = src.begin();
 1280|   211k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 209k, False: 2.67k]
  ------------------
 1281|   209k|        auto res = get_next_code_point_valid(
 1282|   209k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   209k|                                                                 src.end()));
 1284|   209k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   209k|        dest.push_back(res.value);
 1286|   209k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   209k|    }
 1288|  2.67k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   209k|{
 1189|   209k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   209k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   209k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   209k|    return {input.begin() + len,
 1195|   209k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   209k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.05k|    {
 5277|  1.05k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.05k|        return read_impl(range, specs, value);
 5279|  1.05k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.05k|    {
 5295|  1.05k|        SCN_CLANG_PUSH
 5296|  1.05k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.05k|        switch (m_type) {
 5299|    256|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 256, False: 794]
  ------------------
 5300|    256|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     68|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 68, False: 982]
  ------------------
 5303|     68|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     68|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 1.01k]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    240|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 240, False: 810]
  ------------------
 5310|    240|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    240|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.04k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    452|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 452, False: 598]
  ------------------
 5320|    452|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    452|                    range,
 5322|    452|                    get_unescaped_regex_pattern(
 5323|    452|                        specs.charset_string<SourceCharT>()),
 5324|    452|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.05k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.05k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.05k|        }
 5331|       |
 5332|  1.05k|        SCN_CLANG_POP
 5333|  1.05k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    256|    {
 4820|    256|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    256|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    356|{
 4752|    356|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    356|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    356|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 122, False: 234]
  ------------------
 4756|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    122|                                     "Invalid encoding in scanned string");
 4758|    122|    }
 4759|    234|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    234|    static_cast<    \
  |  |  929|    234|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    234|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    234|    return SCN_MOVE(result);
  ------------------
  |  |  928|    234|    static_cast<    \
  |  |  929|    234|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    234|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     68|    {
 4841|     68|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 34]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     34|        return read_string_impl(
 4851|     34|            range,
 4852|     34|            read_until_code_units(
 4853|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     34|            value);
 4855|     68|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    240|    {
 5048|    240|        auto it = read_source_impl(range, {specs});
 5049|    240|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 228]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    228|        return read_string_impl(range, *it, value);
 5054|    240|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    228|{
 4752|    228|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    228|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    228|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 68, False: 160]
  ------------------
 4756|     68|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     68|                                     "Invalid encoding in scanned string");
 4758|     68|    }
 4759|    160|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    160|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    160|    return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    160|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    454|    {
 4891|    454|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    454|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 454, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    454|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    454|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    454|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    454|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    454|    }                                                  \
  |  |  |  | 3671|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    454|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  9.17k|    {
 5277|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.17k|        return read_impl(range, specs, value);
 5279|  9.17k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  9.17k|    {
 5295|  9.17k|        SCN_CLANG_PUSH
 5296|  9.17k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.17k|        switch (m_type) {
 5299|    312|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 312, False: 8.86k]
  ------------------
 5300|    312|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 9.11k]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.17k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.20k, False: 7.96k]
  ------------------
 5310|  1.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.20k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.83k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.83k, False: 2.33k]
  ------------------
 5315|  6.83k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.83k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.83k|                    specs.regexp_flags, value);
 5318|       |
 5319|    758|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 758, False: 8.41k]
  ------------------
 5320|    758|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    758|                    range,
 5322|    758|                    get_unescaped_regex_pattern(
 5323|    758|                        specs.charset_string<SourceCharT>()),
 5324|    758|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.17k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.17k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.17k|        }
 5331|       |
 5332|  9.17k|        SCN_CLANG_POP
 5333|  9.17k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    954|    {
 4820|    954|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    954|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.01k|{
 4752|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.01k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.01k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 324, False: 688]
  ------------------
 4756|    324|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    324|                                     "Invalid encoding in scanned string");
 4758|    324|    }
 4759|    688|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    688|    static_cast<    \
  |  |  929|    688|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    688|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 688]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    688|    return SCN_MOVE(result);
  ------------------
  |  |  928|    688|    static_cast<    \
  |  |  929|    688|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    688|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  2.28k|{
 3012|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3013|       |        dest.assign(source.view());
 3014|       |    }
 3015|  2.28k|    else {
 3016|  2.28k|        return transcode_impl(source.view(), dest);
 3017|  2.28k|    }
 3018|       |
 3019|      0|    return {};
 3020|  2.28k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     58|    {
 4841|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 28]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     28|        return read_string_impl(
 4851|     28|            range,
 4852|     28|            read_until_code_units(
 4853|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     28|            value);
 4855|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.20k|    {
 5048|  1.20k|        auto it = read_source_impl(range, {specs});
 5049|  1.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362, False: 846]
  |  |  ------------------
  ------------------
 5050|    362|            return unexpected(it.error());
 5051|    362|        }
 5052|       |
 5053|    846|        return read_string_impl(range, *it, value);
 5054|  1.20k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.83k|{
 4752|  1.83k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.83k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.83k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 244, False: 1.59k]
  ------------------
 4756|    244|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    244|                                     "Invalid encoding in scanned string");
 4758|    244|    }
 4759|  1.59k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.59k|    static_cast<    \
  |  |  929|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.59k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.59k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.59k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.59k|    static_cast<    \
  |  |  929|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.59k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  7.59k|    {
 4891|  7.59k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  7.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.60k, False: 990]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.60k|    }                                                  \
  |  |  |  | 3671|  7.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    990|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    990|        return read_string_impl(range, it, value);
 4893|  7.59k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  11.0k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|  11.0k|                       std::is_same_v<T, std::wstring_view>) {
 5823|  11.0k|        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|       |                       std::is_same_v<T, std::wstring>) {
 5827|       |        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  11.0k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.05k|    {
 5277|  1.05k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.05k|        return read_impl(range, specs, value);
 5279|  1.05k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.05k|    {
 5295|  1.05k|        SCN_CLANG_PUSH
 5296|  1.05k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.05k|        switch (m_type) {
 5299|    256|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 256, False: 794]
  ------------------
 5300|    256|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     68|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 68, False: 982]
  ------------------
 5303|     68|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     68|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 1.01k]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    240|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 240, False: 810]
  ------------------
 5310|    240|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    240|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.04k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    452|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 452, False: 598]
  ------------------
 5320|    452|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    452|                    range,
 5322|    452|                    get_unescaped_regex_pattern(
 5323|    452|                        specs.charset_string<SourceCharT>()),
 5324|    452|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.05k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.05k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.05k|        }
 5331|       |
 5332|  1.05k|        SCN_CLANG_POP
 5333|  1.05k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    256|    {
 4827|    256|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    256|                                     value);
 4829|    256|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    356|{
 4773|    356|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    356|    auto src = [&]() {
 4776|    356|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    356|            return make_contiguous_buffer(
 4778|    356|                ranges::subrange{range.begin().base(), result.base()});
 4779|    356|        }
 4780|    356|        else {
 4781|    356|            return make_contiguous_buffer(
 4782|    356|                ranges::subrange{range.begin(), result});
 4783|    356|        }
 4784|    356|    }();
 4785|    356|    using src_type = decltype(src);
 4786|       |
 4787|    356|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|    356|    else {
 4800|    356|        const auto view = src.view();
 4801|    356|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    356|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 122, False: 234]
  ------------------
 4804|    122|            return unexpected_scan_error(
 4805|    122|                scan_error::invalid_scanned_value,
 4806|    122|                "Invalid encoding in scanned string_view");
 4807|    122|        }
 4808|       |
 4809|    234|        return SCN_MOVE(result);
  ------------------
  |  |  928|    234|    static_cast<    \
  |  |  929|    234|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    356|    }
 4811|    356|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    356|    auto src = [&]() {
 4776|    356|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    356|            return make_contiguous_buffer(
 4778|    356|                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|       |        else {
 4781|       |            return make_contiguous_buffer(
 4782|       |                ranges::subrange{range.begin(), result});
 4783|       |        }
 4784|    356|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     68|    {
 4863|     68|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 34]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     34|        return read_string_view_impl(
 4873|     34|            range,
 4874|     34|            read_until_code_units(
 4875|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     34|            value);
 4877|     68|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     32|    {
 4959|     32|        return read_impl(
 4960|     32|            range,
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
 4964|     32|            detail::priority_tag<1>{});
 4965|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    240|    {
 5062|    240|        auto it = read_source_impl(range, {specs});
 5063|    240|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 228]
  |  |  ------------------
  ------------------
 5064|     12|            return unexpected(it.error());
 5065|     12|        }
 5066|       |
 5067|    228|        return read_string_view_impl(range, *it, value);
 5068|    240|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    228|{
 4773|    228|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    228|    auto src = [&]() {
 4776|    228|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    228|            return make_contiguous_buffer(
 4778|    228|                ranges::subrange{range.begin().base(), result.base()});
 4779|    228|        }
 4780|    228|        else {
 4781|    228|            return make_contiguous_buffer(
 4782|    228|                ranges::subrange{range.begin(), result});
 4783|    228|        }
 4784|    228|    }();
 4785|    228|    using src_type = decltype(src);
 4786|       |
 4787|    228|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|    228|    else {
 4800|    228|        const auto view = src.view();
 4801|    228|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    228|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 68, False: 160]
  ------------------
 4804|     68|            return unexpected_scan_error(
 4805|     68|                scan_error::invalid_scanned_value,
 4806|     68|                "Invalid encoding in scanned string_view");
 4807|     68|        }
 4808|       |
 4809|    160|        return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    228|    }
 4811|    228|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    228|    auto src = [&]() {
 4776|    228|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    228|            return make_contiguous_buffer(
 4778|    228|                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|       |        else {
 4781|       |            return make_contiguous_buffer(
 4782|       |                ranges::subrange{range.begin(), result});
 4783|       |        }
 4784|    228|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    454|    {
 4902|    454|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    454|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 454, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    454|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    454|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    454|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    454|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    454|    }                                                  \
  |  |  |  | 3671|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    454|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  9.17k|    {
 5277|  9.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.17k|        return read_impl(range, specs, value);
 5279|  9.17k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  9.17k|    {
 5295|  9.17k|        SCN_CLANG_PUSH
 5296|  9.17k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.17k|        switch (m_type) {
 5299|    312|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 312, False: 8.86k]
  ------------------
 5300|    312|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 9.11k]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.17k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.20k, False: 7.96k]
  ------------------
 5310|  1.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.20k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.83k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.83k, False: 2.33k]
  ------------------
 5315|  6.83k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.83k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.83k|                    specs.regexp_flags, value);
 5318|       |
 5319|    758|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 758, False: 8.41k]
  ------------------
 5320|    758|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    758|                    range,
 5322|    758|                    get_unescaped_regex_pattern(
 5323|    758|                        specs.charset_string<SourceCharT>()),
 5324|    758|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.17k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.17k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.17k|        }
 5331|       |
 5332|  9.17k|        SCN_CLANG_POP
 5333|  9.17k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    954|    {
 4827|    954|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    954|                                     value);
 4829|    954|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.01k|{
 4773|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.01k|    auto src = [&]() {
 4776|  1.01k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.01k|            return make_contiguous_buffer(
 4778|  1.01k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.01k|        }
 4780|  1.01k|        else {
 4781|  1.01k|            return make_contiguous_buffer(
 4782|  1.01k|                ranges::subrange{range.begin(), result});
 4783|  1.01k|        }
 4784|  1.01k|    }();
 4785|  1.01k|    using src_type = decltype(src);
 4786|       |
 4787|  1.01k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|  1.01k|    else {
 4800|  1.01k|        const auto view = src.view();
 4801|  1.01k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.01k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 324, False: 688]
  ------------------
 4804|    324|            return unexpected_scan_error(
 4805|    324|                scan_error::invalid_scanned_value,
 4806|    324|                "Invalid encoding in scanned string_view");
 4807|    324|        }
 4808|       |
 4809|    688|        return SCN_MOVE(result);
  ------------------
  |  |  928|    688|    static_cast<    \
  |  |  929|    688|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.01k|    }
 4811|  1.01k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.01k|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|  1.01k|        else {
 4781|  1.01k|            return make_contiguous_buffer(
 4782|  1.01k|                ranges::subrange{range.begin(), result});
 4783|  1.01k|        }
 4784|  1.01k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     58|    {
 4863|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 28]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|     28|        return read_string_view_impl(
 4873|     28|            range,
 4874|     28|            read_until_code_units(
 4875|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     28|            value);
 4877|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  1.20k|    {
 5062|  1.20k|        auto it = read_source_impl(range, {specs});
 5063|  1.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362, False: 846]
  |  |  ------------------
  ------------------
 5064|    362|            return unexpected(it.error());
 5065|    362|        }
 5066|       |
 5067|    846|        return read_string_view_impl(range, *it, value);
 5068|  1.20k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.83k|{
 4773|  1.83k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.83k|    auto src = [&]() {
 4776|  1.83k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.83k|            return make_contiguous_buffer(
 4778|  1.83k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.83k|        }
 4780|  1.83k|        else {
 4781|  1.83k|            return make_contiguous_buffer(
 4782|  1.83k|                ranges::subrange{range.begin(), result});
 4783|  1.83k|        }
 4784|  1.83k|    }();
 4785|  1.83k|    using src_type = decltype(src);
 4786|       |
 4787|  1.83k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|  1.83k|    else {
 4800|  1.83k|        const auto view = src.view();
 4801|  1.83k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.83k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 244, False: 1.59k]
  ------------------
 4804|    244|            return unexpected_scan_error(
 4805|    244|                scan_error::invalid_scanned_value,
 4806|    244|                "Invalid encoding in scanned string_view");
 4807|    244|        }
 4808|       |
 4809|  1.59k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.59k|    static_cast<    \
  |  |  929|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.83k|    }
 4811|  1.83k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.83k|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|  1.83k|        else {
 4781|  1.83k|            return make_contiguous_buffer(
 4782|  1.83k|                ranges::subrange{range.begin(), result});
 4783|  1.83k|        }
 4784|  1.83k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  7.59k|    {
 4902|  7.59k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  7.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.60k, False: 990]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.60k|    }                                                  \
  |  |  |  | 3671|  7.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    990|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    990|        return read_string_view_impl(range, it, value);
 4904|  7.59k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  4.25k|    {
 5624|  4.25k|        reader_error_handler eh{};
 5625|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5626|       |            detail::check_code_point_type_specs(specs, eh);
 5627|       |        }
 5628|  4.25k|        else {
 5629|  4.25k|            detail::check_char_type_specs(specs, eh);
 5630|  4.25k|        }
 5631|  4.25k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.73k, False: 514]
  |  |  ------------------
  ------------------
 5632|  3.73k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  3.73k|        }
 5634|    514|        return {};
 5635|  4.25k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  9.00k|    {
  763|  9.00k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.00k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.47k|        : m_fptr([](storage fn,
  743|  1.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.47k|              cvref<T> obj = *get<T>(fn);
  745|  1.47k|              if constexpr (std::is_void_v<R>) {
  746|  1.47k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.47k|              }
  748|  1.47k|              else {
  749|  1.47k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.47k|              }
  751|  1.47k|          }),
  752|  1.47k|          m_storage(std::addressof(f))
  753|  1.47k|    {
  754|  1.47k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.02k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.02k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.02k|              else {
  749|  3.02k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.02k|              }
  751|  3.02k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.02k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.02k|        else if constexpr (std::is_object_v<T>) {
  688|  3.02k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.02k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.47k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.47k|        {
  662|  1.47k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.56k|    {
 5619|  1.56k|        return false;
 5620|  1.56k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|    106|    {
 1780|    106|        auto stdloc = loc.get<std::locale>();
 1781|    106|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    106|        grouping = numpunct.grouping();
 1783|    106|        thousands_sep =
 1784|    106|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 106]
  ------------------
 1785|    106|        decimal_point = numpunct.decimal_point();
 1786|    106|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|    138|{
 1717|    138|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 138, False: 0]
  ------------------
 1718|    138|        return std::use_facet<Facet>(stdloc);
 1719|    138|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    138|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  4.95k|{
 2349|  4.95k|    size_t count{0};
 2350|  4.95k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  4.95k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  4.95k|    });
 2353|  4.95k|    return count;
 2354|  4.95k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  4.95k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  4.95k|    auto it = input.begin();
 1448|  12.6k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 7.65k, False: 4.95k]
  ------------------
 1449|  7.65k|        auto res = get_next_code_point(
 1450|  7.65k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  7.65k|        cb(res.value);
 1452|  7.65k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  7.65k|    }
 1454|  4.95k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   449k|{
 1169|   449k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   449k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   449k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   449k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   449k|    return {input.begin() + len,
 1181|   449k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   449k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  4.95k|        : m_fptr([](storage fn,
  743|  4.95k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.95k|              cvref<T> obj = *get<T>(fn);
  745|  4.95k|              if constexpr (std::is_void_v<R>) {
  746|  4.95k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.95k|              }
  748|  4.95k|              else {
  749|  4.95k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.95k|              }
  751|  4.95k|          }),
  752|  4.95k|          m_storage(std::addressof(f))
  753|  4.95k|    {
  754|  4.95k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  7.65k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.65k|              cvref<T> obj = *get<T>(fn);
  745|  7.65k|              if constexpr (std::is_void_v<R>) {
  746|  7.65k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  7.65k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.65k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.65k|        else if constexpr (std::is_object_v<T>) {
  688|  7.65k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.65k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  7.65k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  7.65k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  7.65k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  4.95k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.95k|        {
  662|  4.95k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.53k|    {
 1582|  2.53k|        return m_view;
 1583|  2.53k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.71k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    404|    {
 2421|    404|        return m_multibyte_left;
 2422|    404|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  45.4k|    {
 2426|  45.4k|        return *m_current;
 2427|  45.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  31.3k|    {
 2435|  31.3k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  31.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  31.3k|        _increment_current();
 2437|  31.3k|        return *this;
 2438|  31.3k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  31.3k|    {
 2668|  31.3k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 31.3k, False: 0]
  ------------------
 2669|  31.3k|            auto cplen = _get_cp_length_at_current();
 2670|  31.3k|            m_multibyte_left = cplen - 1;
 2671|  31.3k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  31.3k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  31.3k|        ++m_current;
 2678|  31.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  31.3k|    {
 2639|  31.3k|        return static_cast<difference_type>(
 2640|  31.3k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  31.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  31.3k|    {
 2645|  31.3k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.3k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  31.3k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 31.3k, False: 0]
  ------------------
 2650|  31.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  31.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  31.3k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  31.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  31.3k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.77k|{
 1857|  5.77k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.77k|    if constexpr (ranges::sized_range<Range>) {
 1860|  5.77k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.77k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 132, False: 5.63k]
  ------------------
 1862|    132|            return unexpected(eof_error::eof);
 1863|    132|        }
 1864|       |
 1865|  5.63k|        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|       |    else {
 1868|       |        auto it = range.begin();
 1869|       |        if (guaranteed_minimum_size(range) >= count) {
 1870|       |            return ranges::next(it, count);
 1871|       |        }
 1872|       |
 1873|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|       |            if (it == range.end()) {
 1875|       |                return unexpected(eof_error::eof);
 1876|       |            }
 1877|       |        }
 1878|       |
 1879|       |        return it;
 1880|       |    }
 1881|  5.77k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  11.1k|    {
 2531|  11.1k|        return !(a == b);
 2532|  11.1k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  12.0k|    {
 2523|  12.0k|        return a.m_current == b.m_current;
 2524|  12.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  2.41k|    {
 2430|  2.41k|        return *m_current;
 2431|  2.41k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  13.6k|    {
 1890|  13.6k|        return !codepoint.empty();
 1891|  13.6k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    510|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|       |                  ranges::sized_range<Range>) {
 1686|       |        return string_view_wrapper{SCN_FWD(range)};
 1687|       |    }
 1688|    510|    else {
 1689|    510|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    510|    }
 1691|    510|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1536|    510|    {
 1537|    510|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    510|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    510|    {
 1621|    510|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|    510|        else {
 1654|    510|            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|    510|            if constexpr (ranges::common_range<Range>) {
 1659|    510|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    510|                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|    510|            m_view = string_view_type{str};
 1669|    510|        }
 1670|    510|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2380|  10.8k|        : m_current(x), m_end(s), m_count(n)
 2381|  10.8k|    {
 2382|  10.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  44.6k|    {
 2413|  44.6k|        return m_current;
 2414|  44.6k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  3.57k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  3.57k|    else {
 2126|  3.57k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|  3.57k|        return read_while_code_point(
 2138|  3.57k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.57k|    }
 2140|  3.57k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  3.57k|{
 2082|  3.57k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.57k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  3.57k|{
 2061|  3.57k|    auto it = range.begin();
 2062|  7.57k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 6.43k, False: 1.14k]
  ------------------
 2063|  6.43k|        const auto val =
 2064|  6.43k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  6.43k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  6.43k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.43k, False: 0]
  |  |  ------------------
  ------------------
 2066|  6.43k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  6.43k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  6.43k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.43k, False: 3.99k]
  ------------------
 2069|  2.43k|                return it;
 2070|  2.43k|            }
 2071|  6.43k|        }
 2072|  3.99k|        it = val.iterator;
 2073|  3.99k|    }
 2074|       |
 2075|  1.14k|    return it;
 2076|  3.57k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  77.9k|{
 1899|  77.9k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  77.9k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  77.9k|    auto it = range.begin();
 1903|  77.9k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  77.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  77.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.9k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  77.9k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 77.9k, False: 0]
  ------------------
 1912|  77.9k|        ++it;
 1913|  77.9k|        return {it, string_type(1, *range.begin())};
 1914|  77.9k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  77.9k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  99.8k|{
  944|  99.8k|    return is_range_eof(r.begin(), r.end());
  945|  99.8k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   542k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   542k|    {
  937|   542k|        return begin == end;
  938|   542k|    }
  939|   542k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    934|    {
  190|    934|        i = std::move(bound);
  191|    934|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  77.9k|    {
 1890|  77.9k|        return !codepoint.empty();
 1891|  77.9k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  3.57k|        : m_fptr([](storage fn,
  743|  3.57k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.57k|              cvref<T> obj = *get<T>(fn);
  745|  3.57k|              if constexpr (std::is_void_v<R>) {
  746|  3.57k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.57k|              }
  748|  3.57k|              else {
  749|  3.57k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.57k|              }
  751|  3.57k|          }),
  752|  3.57k|          m_storage(std::addressof(f))
  753|  3.57k|    {
  754|  3.57k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  6.43k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.43k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.43k|              else {
  749|  6.43k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.43k|              }
  751|  6.43k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  6.43k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.43k|        else if constexpr (std::is_object_v<T>) {
  688|  6.43k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.43k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  6.43k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  3.57k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.57k|        {
  662|  3.57k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  21.8k|{
  950|  21.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.8k|    return eof_error::good;
  954|  21.8k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  4.00k|    {
 2832|  4.00k|        return take_width_view{r, n};
 2833|  4.00k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2799|  4.00k|        : m_base(base), m_count(count)
 2800|  4.00k|    {
 2801|  4.00k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  4.00k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    158|    {
 5699|    158|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 138, False: 20]
  ------------------
 5700|    158|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|    138|            return read_default(range, value, loc);
 5702|    138|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    158|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    138|    {
 5683|    138|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    138|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|       |        if constexpr (std::is_same_v<CharT, char>) {
 5685|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5686|       |        }
 5687|    138|        else {
 5688|    138|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    138|        }
 5690|    138|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    138|    {
 5564|    138|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    138|        ch = *range.begin();
 5566|    138|        return it;
 5567|    138|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.17k|{
 1846|  1.17k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.17k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.17k|    return ranges::next(range.begin());
 1851|  1.17k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.17k|{
  950|  1.17k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.17k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.17k|    return eof_error::good;
  954|  1.17k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.17k|{
  944|  1.17k|    return is_range_eof(r.begin(), r.end());
  945|  1.17k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  14.8k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  14.8k|    {
  937|  14.8k|        return begin == end;
  938|  14.8k|    }
  939|  14.8k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  41.7k|        {
 2770|  41.7k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 404, False: 41.3k]
  |  Branch (2770:39): [True: 404, False: 0]
  ------------------
 2771|  41.7k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 312, False: 41.0k]
  ------------------
 2772|  41.7k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  15.2k|    {
 2816|  15.2k|        return sentinel<true>{m_base.get().end()};
 2817|  15.2k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  36.9k|    {
 2717|  36.9k|        return view;
 2718|  36.9k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  15.2k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  15.2k|    static_cast<    \
  |  |  929|  15.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.21k|    {
  296|  1.21k|        ++x;
  297|  1.21k|        return x;
  298|  1.21k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  10.8k|    {
 2810|  10.8k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  10.8k|                                      m_count};
 2812|  10.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    198|    {
 3539|    198|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    198|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    198|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 198]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    198|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 198]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    198|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    198|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 178, False: 20]
  |  |  ------------------
  ------------------
 3565|    178|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 178, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    178|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    178|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    178|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    178|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    178|    }                                                  \
  |  |  |  | 3671|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     20|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     20|            localized_number_formatting_options<CharT>{loc};
 3586|     20|#endif
 3587|       |
 3588|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    516|{
 3326|    516|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    516|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    516|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    516|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    516|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    516|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    516|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    516|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    516|        parse_integer_base_prefix(
 3331|    516|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    516|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 516]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    516|    else {
 3343|    516|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 516]
  |  Branch (3343:13): [True: 516, False: 0]
  ------------------
 3344|    516|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 516, False: 0]
  ------------------
 3345|    516|            digits_begin_it = base_prefix_begin_it;
 3346|    516|        }
 3347|    516|    }
 3348|       |
 3349|    516|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 516, False: 0]
  ------------------
 3350|    516|        sign = sign_type::plus_sign;
 3351|    516|    }
 3352|    516|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    516|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    516|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    678|{
 3141|    678|    auto r = read_one_of_code_unit(range, "+-");
 3142|    678|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 678, False: 0]
  ------------------
 3143|    678|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 678, False: 0]
  ------------------
 3144|    678|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    678|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    678|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    678|{
 2272|    678|    auto it = read_code_unit(range);
 2273|    678|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    678|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.35k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.35k, False: 678]
  ------------------
 2278|  1.35k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.35k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.35k|    }
 2282|       |
 2283|    678|    return unexpected(parse_error::error);
 2284|    678|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    516|{
 3293|    516|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 510]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     16|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 16, False: 500]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     16|            bool zero_parsed = false;
 3302|     16|            auto it = apply_opt(
 3303|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     16|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    150|        case 16:
  ------------------
  |  Branch (3307:9): [True: 150, False: 366]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    150|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    150|                    false};
 3311|       |
 3312|     22|        case 0:
  ------------------
  |  Branch (3312:9): [True: 22, False: 494]
  ------------------
 3313|       |            // detect base
 3314|     22|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    322|        default:
  ------------------
  |  Branch (3316:9): [True: 322, False: 194]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    322|            return {range.begin(), base, false};
 3319|    516|    }
 3320|    516|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    172|{
 2291|    172|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 172, False: 0]
  ------------------
 2292|    172|        return range.begin();
 2293|    172|    }
 2294|      0|    return *result;
 2295|    172|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    716|{
 2231|    716|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|    716|    else {
 2244|    716|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    716|            if (ch < 'A' || ch > 'Z') {
 2246|    716|                return ch;
 2247|    716|            }
 2248|    716|            return static_cast<char_type>(ch +
 2249|    716|                                          static_cast<char_type>('a' - 'A'));
 2250|    716|        };
 2251|       |
 2252|    716|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    716|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    716|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    716|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    716|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 92, False: 624]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     92|    }                                                  \
  |  |  |  | 3671|    716|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    624|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    624|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    624|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    624|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 624, False: 0]
  |  |  ------------------
  ------------------
 2257|    624|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    624|                    return ascii_tolower(a) ==
 2259|    624|                           static_cast<detail::char_t<Range>>(b);
 2260|    624|                }))) {
 2261|    624|            return unexpected(parse_error::error);
 2262|    624|        }
 2263|       |
 2264|      0|        return it;
 2265|    624|    }
 2266|    716|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    716|{
 1857|    716|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    716|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    716|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|    716|    else {
 1868|    716|        auto it = range.begin();
 1869|    716|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 716]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.36k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.73k, False: 624]
  ------------------
 1874|  1.73k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 92, False: 1.64k]
  ------------------
 1875|     92|                return unexpected(eof_error::eof);
 1876|     92|            }
 1877|  1.73k|        }
 1878|       |
 1879|    624|        return it;
 1880|    716|    }
 1881|    716|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    716|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    716|    else {
 1115|    716|        return 0;
 1116|    716|    }
 1117|    716|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    624|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    624|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 32, False: 592]
  |  Branch (2245:29): [True: 592, False: 0]
  ------------------
 2246|    624|                return ch;
 2247|    624|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    624|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     38|{
 3258|     38|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 38]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     38|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 38]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     38|    return unexpected(parse_error::error);
 3268|     38|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     38|{
 2146|     38|    auto it = read_code_unit(range);
 2147|     38|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     38|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2152|     38|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     38|        return unexpected(parse_error::error);
 2154|     38|    }
 2155|       |
 2156|      0|    return *it;
 2157|     38|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     38|{
 1846|     38|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     38|    return ranges::next(range.begin());
 1851|     38|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     38|{
  950|     38|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     38|    return eof_error::good;
  954|     38|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  13.6k|{
  944|  13.6k|    return is_range_eof(r.begin(), r.end());
  945|  13.6k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    172|{
 3251|    172|    return read_matching_string_classic_nocase(range, "0x");
 3252|    172|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     22|{
 3274|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 22]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 22]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     22|    {
 3281|     22|        bool zero_parsed{false};
 3282|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 22]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     22|    }
 3286|     22|    return {range.begin(), 10, false};
 3287|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    476|{
 3360|    476|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|       |    if constexpr (ranges::contiguous_range<Range>) {
 3363|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|       |            return unexpected_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found");
 3367|       |        }
 3368|       |        return range.end();
 3369|       |    }
 3370|    476|    else {
 3371|    476|        return read_while1_code_unit(range,
 3372|    476|                                     [&](char_type ch) noexcept {
 3373|    476|                                         return char_to_int(ch) < base;
 3374|    476|                                     })
 3375|    476|            .transform_error(map_parse_error_to_scan_error(
 3376|    476|                scan_error::invalid_scanned_value,
 3377|    476|                "Failed to parse integer: No digits found"));
 3378|    476|    }
 3379|    476|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    638|{
 1996|    638|    auto it = read_while_code_unit(range, pred);
 1997|    638|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 638, False: 0]
  ------------------
 1998|    638|        return unexpected(parse_error::error);
 1999|    638|    }
 2000|      0|    return it;
 2001|    638|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    638|{
 1976|    638|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    638|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    638|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|    638|    else {
 1961|    638|        auto first = range.begin();
 1962|    638|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 638, False: 0]
  ------------------
 1963|    638|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 638, False: 0]
  ------------------
 1964|    638|                return first;
 1965|    638|            }
 1966|    638|        }
 1967|      0|        return first;
 1968|    638|    }
 1969|    638|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  19.5k|        {
 2781|  19.5k|            return !(y == x);
 2782|  19.5k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    476|        : m_fptr([](storage fn,
  743|    476|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    476|              cvref<T> obj = *get<T>(fn);
  745|    476|              if constexpr (std::is_void_v<R>) {
  746|    476|                  obj(static_cast<decltype(args)>(args)...);
  747|    476|              }
  748|    476|              else {
  749|    476|                  return obj(static_cast<decltype(args)>(args)...);
  750|    476|              }
  751|    476|          }),
  752|    476|          m_storage(std::addressof(f))
  753|    476|    {
  754|    476|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    476|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    476|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    476|              else {
  749|    476|                  return obj(static_cast<decltype(args)>(args)...);
  750|    476|              }
  751|    476|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    476|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    476|        else if constexpr (std::is_object_v<T>) {
  688|    476|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    476|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    476|                                     [&](char_type ch) noexcept {
 3373|    476|                                         return char_to_int(ch) < base;
 3374|    476|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    476|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    476|        {
  662|    476|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     40|{
 3390|     40|    std::basic_string<CharT> output;
 3391|     40|    std::string thsep_indices;
 3392|     40|    auto it = range.begin();
 3393|     40|    bool digit_matched = false;
 3394|     40|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 40, False: 0]
  ------------------
 3395|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 40]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 40, False: 0]
  ------------------
 3400|     40|            break;
 3401|     40|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     40|    }
 3407|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3408|     40|        return unexpected_scan_error(
 3409|     40|            scan_error::invalid_scanned_value,
 3410|     40|            "Failed to parse integer: No digits found");
 3411|     40|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     40|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  42.6k|    {
 2417|  42.6k|        return m_count;
 2418|  42.6k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    354|    {
 5699|    354|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 334, False: 20]
  ------------------
 5700|    354|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|    334|            return read_default(range, value, loc);
 5702|    334|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    354|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    912|    {
 5683|    912|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    912|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|       |        if constexpr (std::is_same_v<CharT, char>) {
 5685|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5686|       |        }
 5687|    912|        else {
 5688|    912|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    912|        }
 5690|    912|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    912|    {
 5564|    912|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    912|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    912|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    912|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 912]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    912|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    912|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    912|        ch = *range.begin();
 5566|    912|        return it;
 5567|    912|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.63k|{
 1846|  6.63k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.63k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.63k|    return ranges::next(range.begin());
 1851|  6.63k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   336k|    {
  296|   336k|        ++x;
  297|   336k|        return x;
  298|   336k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    396|    {
 3539|    396|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    396|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    396|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    396|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 396]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    396|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    396|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    396|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    396|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 396]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    396|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 396]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    396|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    396|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 374, False: 22]
  |  |  ------------------
  ------------------
 3565|    374|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    374|                    parse_integer_digits_without_thsep(
 3567|    374|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    374|                        prefix_result.parsed_base));
 3569|       |
 3570|    374|            auto buf = make_contiguous_buffer(
 3571|    374|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    374|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 374, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    374|    }                                                  \
  |  |  |  | 3671|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    374|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.84k|{
 3326|  2.84k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.84k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.84k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.84k|        parse_integer_base_prefix(
 3331|  2.84k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.84k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.84k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.84k|    else {
 3343|  2.84k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.84k]
  ------------------
 3344|  2.84k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.84k, False: 0]
  ------------------
 3345|  2.84k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.84k|        }
 3347|  2.84k|    }
 3348|       |
 3349|  2.84k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.84k, False: 0]
  ------------------
 3350|  2.84k|        sign = sign_type::plus_sign;
 3351|  2.84k|    }
 3352|  2.84k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.84k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.84k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.78k|{
 3141|  3.78k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.78k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.78k, False: 0]
  ------------------
 3143|  3.78k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.78k, False: 0]
  ------------------
 3144|  3.78k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.78k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.78k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.78k|{
 2272|  3.78k|    auto it = read_code_unit(range);
 2273|  3.78k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.78k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.56k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.56k, False: 3.78k]
  ------------------
 2278|  7.56k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.56k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.56k|    }
 2282|       |
 2283|  3.78k|    return unexpected(parse_error::error);
 2284|  3.78k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.84k|{
 3293|  2.84k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.83k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 2.83k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    934|        case 16:
  ------------------
  |  Branch (3307:9): [True: 934, False: 1.90k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    934|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    934|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 2.82k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.87k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.87k, False: 972]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.87k|            return {range.begin(), base, false};
 3319|  2.84k|    }
 3320|  2.84k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    956|{
 2291|    956|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 956, False: 0]
  ------------------
 2292|    956|        return range.begin();
 2293|    956|    }
 2294|      0|    return *result;
 2295|    956|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.81k|{
 2231|  3.81k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  3.81k|    else {
 2244|  3.81k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.81k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.81k|                return ch;
 2247|  3.81k|            }
 2248|  3.81k|            return static_cast<char_type>(ch +
 2249|  3.81k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.81k|        };
 2251|       |
 2252|  3.81k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  3.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.81k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.81k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.81k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.81k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.81k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.81k|                    return ascii_tolower(a) ==
 2259|  3.81k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.81k|                }))) {
 2261|  3.81k|            return unexpected(parse_error::error);
 2262|  3.81k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.81k|    }
 2266|  3.81k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.81k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.81k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 44, False: 3.77k]
  |  Branch (2245:29): [True: 3.77k, False: 0]
  ------------------
 2246|  3.81k|                return ch;
 2247|  3.81k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.81k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     26|{
 3258|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 26]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 26]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     26|    return unexpected(parse_error::error);
 3268|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.93k|{
 2146|  1.93k|    auto it = read_code_unit(range);
 2147|  1.93k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.93k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.93k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.93k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.93k|        return unexpected(parse_error::error);
 2154|  1.93k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.93k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    950|{
 3251|    950|    return read_matching_string_classic_nocase(range, "0x");
 3252|    950|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.79k|{
 3360|  2.79k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.79k|    if constexpr (ranges::contiguous_range<Range>) {
 3363|  2.79k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.79k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.79k|        return range.end();
 3369|       |    }
 3370|       |    else {
 3371|       |        return read_while1_code_unit(range,
 3372|       |                                     [&](char_type ch) noexcept {
 3373|       |                                         return char_to_int(ch) < base;
 3374|       |                                     })
 3375|       |            .transform_error(map_parse_error_to_scan_error(
 3376|       |                scan_error::invalid_scanned_value,
 3377|       |                "Failed to parse integer: No digits found"));
 3378|       |    }
 3379|  2.79k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     44|{
 3390|     44|    std::basic_string<CharT> output;
 3391|     44|    std::string thsep_indices;
 3392|     44|    auto it = range.begin();
 3393|     44|    bool digit_matched = false;
 3394|     44|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 44, False: 0]
  ------------------
 3395|     44|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 44]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     44|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 44, False: 0]
  ------------------
 3400|     44|            break;
 3401|     44|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     44|    }
 3407|     44|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 3408|     44|        return unexpected_scan_error(
 3409|     44|            scan_error::invalid_scanned_value,
 3410|     44|            "Failed to parse integer: No digits found");
 3411|     44|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     44|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  13.5k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  13.5k|                  ranges::sized_range<Range>) {
 1686|  13.5k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  13.5k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1488|  13.5k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  13.5k|    {
 1490|  13.5k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  16.0k|    {
 1503|  16.0k|        return sv;
 1504|  16.0k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    506|{
 5951|    506|    using char_type = detail::char_t<Range>;
 5952|    506|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    506|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 506, False: 0]
  ------------------
 5955|    506|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    506|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    506|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 448, False: 58]
  ------------------
 5959|    448|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    448|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 66, False: 382]
  ------------------
 5962|     66|                auto prefix_width =
 5963|     66|                    static_cast<std::ptrdiff_t>(
 5964|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     66|                    ranges::distance(range.begin(), it);
 5966|     66|                return result_type{it, prefix_width};
 5967|     66|            }
 5968|    382|            return result_type{it, 0};
 5969|    448|        }
 5970|       |
 5971|     58|        auto max_width_view = take_width(range, max_width);
 5972|     58|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     58|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 58, False: 0]
  ------------------
 5975|     58|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     58|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     58|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    508|{
 1976|    508|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    508|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    658|{
 1957|    658|    if constexpr (ranges::common_range<Range>) {
 1958|    658|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|    658|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    506|        : m_fptr([](storage fn,
  743|    506|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    506|              cvref<T> obj = *get<T>(fn);
  745|    506|              if constexpr (std::is_void_v<R>) {
  746|    506|                  obj(static_cast<decltype(args)>(args)...);
  747|    506|              }
  748|    506|              else {
  749|    506|                  return obj(static_cast<decltype(args)>(args)...);
  750|    506|              }
  751|    506|          }),
  752|    506|          m_storage(std::addressof(f))
  753|    506|    {
  754|    506|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    948|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    948|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    948|              else {
  749|    948|                  return obj(static_cast<decltype(args)>(args)...);
  750|    948|              }
  751|    948|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    948|    {
  684|    948|        if constexpr (std::is_const_v<T>) {
  685|    948|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    948|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    948|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    506|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    506|        {
  667|    506|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     94|{
 1976|     94|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     94|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    208|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|    208|    else {
 1961|    208|        auto first = range.begin();
 1962|  1.73k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.62k, False: 110]
  ------------------
 1963|  1.62k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 98, False: 1.52k]
  ------------------
 1964|     98|                return first;
 1965|     98|            }
 1966|  1.62k|        }
 1967|    110|        return first;
 1968|    208|    }
 1969|    208|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    260|{
 2951|    260|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 260]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    260|    return read_while_classic_space(range);
 2962|    260|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    260|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|    260|    else {
 2126|    260|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|    260|        return read_while_code_point(
 2138|    260|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    260|    }
 2140|    260|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    296|{
 2082|    296|    return read_until_code_point(range, std::not_fn(pred));
 2083|    296|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    422|{
 2061|    422|    auto it = range.begin();
 2062|  1.25k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.20k, False: 48]
  ------------------
 2063|  1.20k|        const auto val =
 2064|  1.20k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.20k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.20k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.20k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.20k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.20k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 374, False: 828]
  ------------------
 2069|    374|                return it;
 2070|    374|            }
 2071|  1.20k|        }
 2072|    828|        it = val.iterator;
 2073|    828|    }
 2074|       |
 2075|     48|    return it;
 2076|    422|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  13.6k|{
 1899|  13.6k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  13.6k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  13.6k|    auto it = range.begin();
 1903|  13.6k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  13.6k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.6k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  13.6k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 13.6k, False: 0]
  ------------------
 1912|  13.6k|        ++it;
 1913|  13.6k|        return {it, string_type(1, *range.begin())};
 1914|  13.6k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  13.6k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    260|        : m_fptr([](storage fn,
  743|    260|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    260|              cvref<T> obj = *get<T>(fn);
  745|    260|              if constexpr (std::is_void_v<R>) {
  746|    260|                  obj(static_cast<decltype(args)>(args)...);
  747|    260|              }
  748|    260|              else {
  749|    260|                  return obj(static_cast<decltype(args)>(args)...);
  750|    260|              }
  751|    260|          }),
  752|    260|          m_storage(std::addressof(f))
  753|    260|    {
  754|    260|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    362|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    362|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    362|              else {
  749|    362|                  return obj(static_cast<decltype(args)>(args)...);
  750|    362|              }
  751|    362|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    362|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    362|        else if constexpr (std::is_object_v<T>) {
  688|    362|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    362|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    362|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    260|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    260|        {
  662|    260|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  8.35k|{
 2951|  8.35k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.25k, False: 1.10k]
  ------------------
 2952|  7.25k|        auto it = read_while_classic_space(range);
 2953|  7.25k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.25k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.25k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.25k|        return it;
 2959|  7.25k|    }
 2960|       |
 2961|  1.10k|    return read_while_classic_space(range);
 2962|  8.35k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  11.9k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  11.9k|    else {
 2126|  11.9k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|  11.9k|        return read_while_code_point(
 2138|  11.9k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  11.9k|    }
 2140|  11.9k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  12.1k|{
 2082|  12.1k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  12.1k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  15.0k|{
 2061|  15.0k|    auto it = range.begin();
 2062|  74.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 71.5k, False: 3.10k]
  ------------------
 2063|  71.5k|        const auto val =
 2064|  71.5k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  71.5k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  71.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 71.5k, False: 0]
  |  |  ------------------
  ------------------
 2066|  71.5k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  71.5k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  71.5k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 11.9k, False: 59.5k]
  ------------------
 2069|  11.9k|                return it;
 2070|  11.9k|            }
 2071|  71.5k|        }
 2072|  59.5k|        it = val.iterator;
 2073|  59.5k|    }
 2074|       |
 2075|  3.10k|    return it;
 2076|  15.0k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  11.9k|        : m_fptr([](storage fn,
  743|  11.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.9k|              cvref<T> obj = *get<T>(fn);
  745|  11.9k|              if constexpr (std::is_void_v<R>) {
  746|  11.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.9k|              }
  748|  11.9k|              else {
  749|  11.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.9k|              }
  751|  11.9k|          }),
  752|  11.9k|          m_storage(std::addressof(f))
  753|  11.9k|    {
  754|  11.9k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  17.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.1k|              else {
  749|  17.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.1k|              }
  751|  17.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  17.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  17.1k|        else if constexpr (std::is_object_v<T>) {
  688|  17.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.1k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  17.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  11.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.9k|        {
  662|  11.9k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  8.61k|    {
 3040|  8.61k|        reader_error_handler eh{};
 3041|  8.61k|        get_derived().check_specs_impl(specs, eh);
 3042|  8.61k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  8.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.50k, False: 1.11k]
  |  |  ------------------
  ------------------
 3043|  7.50k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  7.50k|        }
 3045|  1.11k|        return {};
 3046|  8.61k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  8.61k|    {
 3051|  8.61k|        return static_cast<Derived&>(*this);
 3052|  8.61k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  8.61k|    {
 3485|  8.61k|        detail::check_int_type_specs(specs, eh);
 3486|  8.61k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.26k|    {
 3035|  2.26k|        return true;
 3036|  2.26k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    178|    {
 3539|    178|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    178|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    178|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 178]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    178|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 178]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    178|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    178|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 158, False: 20]
  |  |  ------------------
  ------------------
 3565|    158|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    158|    }                                                  \
  |  |  |  | 3671|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     20|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     20|            localized_number_formatting_options<CharT>{loc};
 3586|     20|#endif
 3587|       |
 3588|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    376|    {
 3539|    376|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    376|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    376|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    376|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    376|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    376|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    376|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 376]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    376|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 376]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    376|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    376|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 354, False: 22]
  |  |  ------------------
  ------------------
 3565|    354|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    354|                    parse_integer_digits_without_thsep(
 3567|    354|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    354|                        prefix_result.parsed_base));
 3569|       |
 3570|    354|            auto buf = make_contiguous_buffer(
 3571|    354|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    354|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 354, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    354|    }                                                  \
  |  |  |  | 3671|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    354|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    140|    {
 3539|    140|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    140|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    140|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 140]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    140|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 140]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    140|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    140|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 140, False: 0]
  |  |  ------------------
  ------------------
 3565|    140|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 140, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    140|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    914|    {
 3539|    914|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 914]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    914|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    914|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 914]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|      0|        }
 3558|       |
 3559|    914|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 914]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    914|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    914|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 914, False: 0]
  |  |  ------------------
  ------------------
 3565|    914|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 914]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    914|                    parse_integer_digits_without_thsep(
 3567|    914|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    914|                        prefix_result.parsed_base));
 3569|       |
 3570|    914|            auto buf = make_contiguous_buffer(
 3571|    914|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    914|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 914, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    914|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    914|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    914|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    914|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    914|    }                                                  \
  |  |  |  | 3671|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    914|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.30k|    {
 3040|  4.30k|        reader_error_handler eh{};
 3041|  4.30k|        get_derived().check_specs_impl(specs, eh);
 3042|  4.30k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.78k, False: 528]
  |  |  ------------------
  ------------------
 3043|  3.78k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  3.78k|        }
 3045|    528|        return {};
 3046|  4.30k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  4.30k|    {
 3051|  4.30k|        return static_cast<Derived&>(*this);
 3052|  4.30k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  4.30k|    {
 4145|  4.30k|        detail::check_float_type_specs(specs, eh);
 4146|  4.30k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.10k|    {
 3035|  1.10k|        return true;
 3036|  1.10k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    524|    {
 4217|    524|        unsigned options{};
 4218|    524|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 22, False: 502]
  ------------------
 4219|     22|            options |= float_reader_base::allow_thsep;
 4220|     22|        }
 4221|       |
 4222|    524|        SCN_GCC_COMPAT_PUSH
 4223|    524|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    524|        switch (specs.type) {
 4226|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 8, False: 516]
  ------------------
 4227|      8|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 520]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 18, False: 506]
  ------------------
 4233|     18|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 2, False: 522]
  ------------------
 4236|      2|                return options | float_reader_base::allow_scientific |
 4237|      2|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    492|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 492, False: 32]
  ------------------
 4240|    492|                return options | float_reader_base::allow_scientific |
 4241|    492|                       float_reader_base::allow_fixed |
 4242|    492|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 524]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    524|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    524|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    524|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    524|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.10k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.20k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    934|    {
 4057|    934|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 934, False: 0]
  ------------------
 4058|    934|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 934, False: 0]
  ------------------
 4059|    934|            return;
 4060|    934|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    312|    {
 1587|    312|        return m_storage.has_value();
 1588|    312|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|    156|    {
 1592|    156|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    156|        return *m_storage;
 1594|    156|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    162|    {
  763|    162|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    162|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    162|    {
 3705|    162|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    162|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    162|        auto it = sign_result.first;
 3708|    162|        m_sign = sign_result.second;
 3709|       |
 3710|    162|        auto digits_begin = it;
 3711|    162|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|    162|        else {
 3738|    162|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    162|    }                                                  \
  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|    162|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    162|    {
 4000|    162|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    162|        const bool allowed_nonhex =
 4002|    162|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    162|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    162|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 162, False: 0]
  |  Branch (4005:45): [True: 0, False: 162]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    162|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 162]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    162|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 162, False: 0]
  |  Branch (4014:45): [True: 0, False: 162]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    162|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 162]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    162|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 154, False: 8]
  |  Branch (4021:28): [True: 6, False: 148]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    156|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 148]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    148|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 148]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    148|        m_kind = float_kind::generic;
 4052|    148|        return read_regular(range);
 4053|    148|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    162|    {
 3811|    162|        auto it = range.begin();
 3812|    162|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 162, False: 0]
  ------------------
 3813|    162|            return unexpected(r.error());
 3814|    162|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    162|    {
 3834|    162|        auto it = range.begin();
 3835|    162|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 162, False: 0]
  ------------------
 3836|    162|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    162|                scan_error::invalid_scanned_value,
 3838|    162|                "Invalid floating-point NaN value"));
 3839|    162|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    154|    {
 3804|    154|        return read_matching_string_classic_nocase(range, "0x");
 3805|    154|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    156|    {
 3944|    156|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    156|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 150, False: 6]
  |  Branch (3945:50): [True: 2, False: 148]
  ------------------
 3946|       |
 3947|    156|        auto it = ranges::begin(range);
 3948|    156|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    156|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    156|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 0]
  |  |  ------------------
  ------------------
 3952|    156|            return r.transform_error(
 3953|    156|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    156|                                              "Invalid floating-point value"));
 3955|    156|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    156|    {
 3774|    156|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  |  Branch (859:45): [True: 0, False: 156]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    156|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    156|        return read_while1_code_unit(
 3783|    156|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    156|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    156|        : m_fptr([](storage fn,
  743|    156|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    156|              cvref<T> obj = *get<T>(fn);
  745|    156|              if constexpr (std::is_void_v<R>) {
  746|    156|                  obj(static_cast<decltype(args)>(args)...);
  747|    156|              }
  748|    156|              else {
  749|    156|                  return obj(static_cast<decltype(args)>(args)...);
  750|    156|              }
  751|    156|          }),
  752|    156|          m_storage(std::addressof(f))
  753|    156|    {
  754|    156|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    156|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    156|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    156|              else {
  749|    156|                  return obj(static_cast<decltype(args)>(args)...);
  750|    156|              }
  751|    156|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    156|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    156|        else if constexpr (std::is_object_v<T>) {
  688|    156|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    156|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    156|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    156|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    156|        {
  662|    156|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    152|    {
 3665|    152|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    152|        return read_source_impl(range);
 3671|    152|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    940|    {
  763|    940|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    940|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    940|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     12|    {
 3679|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     12|        return read_source_impl(range);
 3685|     12|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    940|    {
 3705|    940|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    940|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    940|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    940|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 940]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    940|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    940|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    940|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    940|        auto it = sign_result.first;
 3708|    940|        m_sign = sign_result.second;
 3709|       |
 3710|    940|        auto digits_begin = it;
 3711|    940|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|    940|                      ranges::sized_range<Range>) {
 3714|    940|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 940]
  |  |  |  Branch (859:45): [True: 0, False: 940]
  |  |  |  Branch (859:45): [True: 0, False: 940]
  |  |  ------------------
  ------------------
 3715|    940|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    940|            else {
 3724|    940|                auto cb = [&](const auto& rr)
 3725|    940|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    940|                    auto res = read_all(rr);
 3727|    940|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    940|                        return unexpected_scan_error(
 3729|    940|                            scan_error::invalid_scanned_value,
 3730|    940|                            "Invalid float value");
 3731|    940|                    }
 3732|    940|                    return res;
 3733|    940|                };
 3734|    940|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    940|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    940|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6, False: 934]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      6|    }                                                  \
  |  | 3671|    940|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    940|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    934|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|    940|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    940|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    940|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    934|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 934, False: 0]
  |  Branch (3747:48): [True: 934, False: 0]
  ------------------
 3748|    934|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 934, False: 0]
  ------------------
 3749|    934|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 934, False: 0]
  ------------------
 3750|    934|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    934|        }
 3752|       |
 3753|    934|        handle_separators();
 3754|       |
 3755|    934|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 934]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    934|        return it;
 3768|    934|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    940|    {
 3811|    940|        auto it = range.begin();
 3812|    940|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 940, False: 0]
  ------------------
 3813|    940|            return unexpected(r.error());
 3814|    940|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    940|    {
 3834|    940|        auto it = range.begin();
 3835|    940|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 940, False: 0]
  ------------------
 3836|    940|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    940|                scan_error::invalid_scanned_value,
 3838|    940|                "Invalid floating-point NaN value"));
 3839|    940|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    934|    {
 3804|    934|        return read_matching_string_classic_nocase(range, "0x");
 3805|    934|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      6|{
 1996|      6|    auto it = read_while_code_unit(range, pred);
 1997|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 6, False: 0]
  ------------------
 1998|      6|        return unexpected(parse_error::error);
 1999|      6|    }
 2000|      0|    return it;
 2001|      6|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      6|    {
 3944|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 4, False: 2]
  |  Branch (3945:50): [True: 2, False: 2]
  ------------------
 3946|       |
 3947|      6|        auto it = ranges::begin(range);
 3948|      6|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3952|      6|            return r.transform_error(
 3953|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      6|                                              "Invalid floating-point value"));
 3955|      6|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      6|    {
 3774|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      6|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      6|        return read_while1_code_unit(
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    940|    {
 4000|    940|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    940|        const bool allowed_nonhex =
 4002|    940|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    940|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    940|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 940, False: 0]
  |  Branch (4005:45): [True: 0, False: 940]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    940|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 940]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    940|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 940, False: 0]
  |  Branch (4014:45): [True: 0, False: 940]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    940|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 940]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    940|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 934, False: 6]
  |  Branch (4021:28): [True: 12, False: 922]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    928|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 6, False: 922]
  |  Branch (4036:29): [True: 6, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      6|            m_kind = float_kind::generic;
 4040|      6|            return read_regular_float(range);
 4041|      6|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    922|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 922]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    922|        m_kind = float_kind::generic;
 4052|    922|        return read_regular(range);
 4053|    922|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    934|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    934|                    auto res = read_all(rr);
 3727|    934|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 934]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    934|                    return res;
 3733|    934|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    934|{
 1839|    934|    return ranges::next(range.begin(), range.end());
 1840|    934|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    934|    {
  313|    934|        ranges::advance(x, bound);
  314|    934|        return x;
  315|    934|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    934|    {
  275|    934|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    934|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|    934|    {
 1577|    934|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    934|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    934|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    934|    {
 1621|    934|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|    934|                      ranges::sized_range<Range>) {
 1626|    934|            m_storage.reset();
 1627|    934|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|    934|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    928|    {
 3665|    928|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 928]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    928|        return read_source_impl(range);
 3671|    928|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    934|    {
 3691|    934|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    934|        const std::ptrdiff_t sign_len =
 3694|    934|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 934]
  ------------------
 3695|       |
 3696|    934|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    934|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    934|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    934|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 934, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    934|    }                                                  \
  |  |  |  | 3671|    934|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    934|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    162|    {
 4170|    162|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    162|#if !SCN_DISABLE_LOCALE
 4173|    162|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 152]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    152|#endif
 4182|       |
 4183|    152|        return read_impl<Range>(
 4184|    152|            range, rd,
 4185|    152|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    152|                return r.read_source(SCN_FWD(args)...);
 4187|    152|            },
 4188|    152|            value);
 4189|    162|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    162|    {
 4206|    162|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    162|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  ------------------
  ------------------
 4208|    162|            return unexpected(r.error());
 4209|    162|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    152|        : m_fptr([](storage fn,
  743|    152|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    152|              cvref<T> obj = *get<T>(fn);
  745|    152|              if constexpr (std::is_void_v<R>) {
  746|    152|                  obj(static_cast<decltype(args)>(args)...);
  747|    152|              }
  748|    152|              else {
  749|    152|                  return obj(static_cast<decltype(args)>(args)...);
  750|    152|              }
  751|    152|          }),
  752|    152|          m_storage(std::addressof(f))
  753|    152|    {
  754|    152|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    152|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    152|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    152|              else {
  749|    152|                  return obj(static_cast<decltype(args)>(args)...);
  750|    152|              }
  751|    152|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    152|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    152|        else if constexpr (std::is_object_v<T>) {
  688|    152|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    152|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    152|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    152|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    152|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    152|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    152|        {
  662|    152|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    362|    {
 4170|    362|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    362|#if !SCN_DISABLE_LOCALE
 4173|    362|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 12, False: 350]
  ------------------
 4174|     12|            return read_impl<Range>(
 4175|     12|                range, rd,
 4176|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     12|                },
 4179|     12|                value, loc);
 4180|     12|        }
 4181|    350|#endif
 4182|       |
 4183|    350|        return read_impl<Range>(
 4184|    350|            range, rd,
 4185|    350|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    350|                return r.read_source(SCN_FWD(args)...);
 4187|    350|            },
 4188|    350|            value);
 4189|    362|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    940|    {
 4206|    940|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    940|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 934]
  |  |  ------------------
  ------------------
 4208|      6|            return unexpected(r.error());
 4209|      6|        }
 4210|       |
 4211|    934|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    934|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    934|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    934|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 934, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    934|    }                                                  \
  |  |  |  | 3671|    934|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    934|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     12|        : m_fptr([](storage fn,
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
  752|     12|          m_storage(std::addressof(f))
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     12|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  688|     12|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     12|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     12|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     12|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    350|        : m_fptr([](storage fn,
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
  752|    350|          m_storage(std::addressof(f))
  753|    350|    {
  754|    350|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    350|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    350|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    350|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    350|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    350|        {
  662|    350|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  4.82k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|       |                       std::is_same_v<T, std::wstring_view>) {
 5823|       |        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  4.82k|                       std::is_same_v<T, std::wstring>) {
 5827|  4.82k|        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  4.82k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  14.4k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  12.7k|    {
 3040|  12.7k|        reader_error_handler eh{};
 3041|  12.7k|        get_derived().check_specs_impl(specs, eh);
 3042|  12.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 12.5k]
  |  |  ------------------
  ------------------
 3043|    234|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    234|        }
 3045|  12.5k|        return {};
 3046|  12.7k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  12.7k|    {
 3051|  12.7k|        return static_cast<Derived&>(*this);
 3052|  12.7k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  12.7k|    {
 5210|  12.7k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  12.7k|        SCN_GCC_PUSH
 5213|  12.7k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  12.7k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  12.7k|        SCN_CLANG_PUSH
 5217|  12.7k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  12.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  12.7k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 228, False: 12.5k]
  ------------------
 5221|  1.42k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.42k, False: 11.3k]
  ------------------
 5222|  1.42k|                m_type = reader_type::word;
 5223|  1.42k|                break;
 5224|       |
 5225|    222|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 222, False: 12.5k]
  ------------------
 5226|    222|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 72, False: 150]
  ------------------
 5227|    222|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 102, False: 48]
  ------------------
 5228|    174|                    m_type = reader_type::custom_word;
 5229|    174|                }
 5230|     48|                else {
 5231|     48|                    m_type = reader_type::word;
 5232|     48|                }
 5233|    222|                break;
 5234|      0|            }
 5235|       |
 5236|     54|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 54, False: 12.6k]
  ------------------
 5237|     54|                m_type = reader_type::character;
 5238|     54|                break;
 5239|       |
 5240|    660|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 660, False: 12.0k]
  ------------------
 5241|    660|                m_type = reader_type::character_set;
 5242|    660|                break;
 5243|       |
 5244|  9.85k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 9.85k, False: 2.89k]
  ------------------
 5245|  9.85k|                m_type = reader_type::regex;
 5246|  9.85k|                break;
 5247|       |
 5248|    306|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 306, False: 12.4k]
  ------------------
 5249|    306|                m_type = reader_type::regex_escaped;
 5250|    306|                break;
 5251|  12.7k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  12.7k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  16.6k|    {
 5259|  16.6k|        return m_type == reader_type::word;
 5260|  16.6k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  7.70k|{
 1132|  7.70k|    auto it = src.begin();
 1133|  65.4k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 59.8k, False: 5.68k]
  ------------------
 1134|  59.8k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  59.8k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 59.8k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  59.8k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 59.8k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  59.8k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  59.8k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  59.8k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.01k, False: 57.7k]
  ------------------
 1144|  2.01k|            return false;
 1145|  2.01k|        }
 1146|  57.7k|        it += len;
 1147|  57.7k|    }
 1148|  5.68k|    return true;
 1149|  7.70k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    156|{
 2993|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2994|       |        if (source.stores_allocated_string()) {
 2995|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|       |        }
 2997|       |        else {
 2998|       |            dest.assign(source.view());
 2999|       |        }
 3000|       |    }
 3001|    156|    else {
 3002|    156|        return transcode_impl(source.view(), dest);
 3003|    156|    }
 3004|       |
 3005|      0|    return {};
 3006|    156|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  1.42k|{
 2968|  1.42k|    dst.clear();
 2969|  1.42k|    transcode_valid_to_string(src, dst);
 2970|  1.42k|    return {};
 2971|  1.42k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  1.42k|{
 1403|  1.42k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  1.42k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1407|       |        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|       |            std::u32string tmp;
 1410|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1411|       |            return transcode_to_string_impl_32to16<true>(
 1412|       |                std::u32string_view{tmp}, dest);
 1413|       |        }
 1414|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1415|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1416|       |        }
 1417|       |    }
 1418|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|       |        if constexpr (sizeof(DestCharT) == 1) {
 1420|       |            std::u32string tmp;
 1421|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1422|       |            return transcode_to_string_impl_32to8<true>(
 1423|       |                std::u32string_view{tmp}, dest);
 1424|       |        }
 1425|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1426|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|       |        }
 1428|       |    }
 1429|  1.42k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|  1.42k|        if constexpr (sizeof(DestCharT) == 1) {
 1431|  1.42k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|       |        }
 1433|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1434|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|       |        }
 1436|  1.42k|    }
 1437|       |
 1438|  1.42k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|  1.42k|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  1.42k|{
 1294|  1.42k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  1.42k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  9.75k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 9.75k, False: 1.42k]
  ------------------
 1298|  9.75k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  9.75k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  9.75k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 8.07k, False: 1.68k]
  ------------------
 1306|  8.07k|            dest.push_back(static_cast<char>(cp));
 1307|  8.07k|        }
 1308|  1.68k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 172, False: 1.51k]
  ------------------
 1309|    172|            dest.push_back(
 1310|    172|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    172|            dest.push_back(
 1312|    172|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    172|        }
 1314|  1.51k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 1.04k, False: 472]
  ------------------
 1315|  1.04k|            dest.push_back(
 1316|  1.04k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|  1.04k|            dest.push_back(static_cast<char>(
 1318|  1.04k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|  1.04k|            dest.push_back(
 1320|  1.04k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|  1.04k|        }
 1322|    472|        else {
 1323|    472|            dest.push_back(
 1324|    472|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    472|            dest.push_back(static_cast<char>(
 1326|    472|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    472|            dest.push_back(static_cast<char>(
 1328|    472|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    472|            dest.push_back(
 1330|    472|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    472|        }
 1332|  9.75k|    }
 1333|  1.42k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|    660|        {
 5103|    660|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 186, False: 474]
  ------------------
 5104|    186|                return {};
 5105|    186|            }
 5106|       |
 5107|    474|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    474|            auto it = detail::to_address(charset_string.begin());
 5109|    474|            auto set = detail::parse_presentation_set(
 5110|    474|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    474|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    474|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    474|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    474|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    474|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    474|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    474|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    474|            std::sort(nonascii.extra_ranges.begin(),
 5118|    474|                      nonascii.extra_ranges.end());
 5119|    474|            return {};
 5120|    474|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  5.52k|        {
 5138|  5.52k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 1.51k, False: 4.00k]
  ------------------
 5139|  1.51k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  1.51k|            }
 5141|       |
 5142|  4.00k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  5.52k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  1.51k|        {
 5086|       |            // TODO: binary search?
 5087|  1.51k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 1.51k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  1.51k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  1.51k|            return std::find_if(
 5093|  1.51k|                       nonascii.extra_ranges.begin(),
 5094|  1.51k|                       nonascii.extra_ranges.end(),
 5095|  1.51k|                       [cp_val](const auto& pair) noexcept {
 5096|  1.51k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  1.51k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  1.51k|                       }) != nonascii.extra_ranges.end();
 5099|  1.51k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  15.2k|                       [cp_val](const auto& pair) noexcept {
 5096|  15.2k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 15.0k, False: 216]
  ------------------
 5097|  15.2k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 1.44k, False: 13.5k]
  ------------------
 5098|  15.2k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  5.59k|        {
 5076|  5.59k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  5.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  5.59k|            const auto val =
 5078|  5.59k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  5.59k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  5.59k|                    (val % 8)) &
 5081|  5.59k|                   1u;
 5082|  5.59k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  1.59k|        {
 5129|  1.59k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 12, False: 1.58k]
  ------------------
 5130|     12|                return false;
 5131|     12|            }
 5132|       |
 5133|  1.58k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  1.59k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|    660|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    268|    {
 5277|    268|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    268|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    268|        return read_impl(range, specs, value);
 5279|    268|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    268|    {
 5295|    268|        SCN_CLANG_PUSH
 5296|    268|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    268|        switch (m_type) {
 5299|    142|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 142, False: 126]
  ------------------
 5300|    142|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 248]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     16|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 16, False: 252]
  ------------------
 5307|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|     84|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 84, False: 184]
  ------------------
 5310|     84|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|     84|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 266]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 264]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 268]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    268|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    268|        }
 5331|       |
 5332|    268|        SCN_CLANG_POP
 5333|    268|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    142|    {
 4820|    142|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    142|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    178|{
 4752|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    178|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    178|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 94, False: 84]
  ------------------
 4756|     94|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     94|                                     "Invalid encoding in scanned string");
 4758|     94|    }
 4759|     84|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     84|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     84|    return SCN_MOVE(result);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     84|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    426|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|    426|    else {
 2097|    426|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|    426|        return read_until_code_point(
 2109|    426|            ranges::subrange{it, range.end()},
 2110|    426|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    426|    }
 2112|    426|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    426|{
 2061|    426|    auto it = range.begin();
 2062|  12.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 12.4k, False: 348]
  ------------------
 2063|  12.4k|        const auto val =
 2064|  12.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  12.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  12.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.4k, False: 0]
  |  |  ------------------
  ------------------
 2066|  12.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  12.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  12.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 78, False: 12.3k]
  ------------------
 2069|     78|                return it;
 2070|     78|            }
 2071|  12.4k|        }
 2072|  12.3k|        it = val.iterator;
 2073|  12.3k|    }
 2074|       |
 2075|    348|    return it;
 2076|    426|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    426|        : m_fptr([](storage fn,
  743|    426|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    426|              cvref<T> obj = *get<T>(fn);
  745|    426|              if constexpr (std::is_void_v<R>) {
  746|    426|                  obj(static_cast<decltype(args)>(args)...);
  747|    426|              }
  748|    426|              else {
  749|    426|                  return obj(static_cast<decltype(args)>(args)...);
  750|    426|              }
  751|    426|          }),
  752|    426|          m_storage(std::addressof(f))
  753|    426|    {
  754|    426|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  12.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  12.4k|              else {
  749|  12.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.4k|              }
  751|  12.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  12.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  12.4k|        else if constexpr (std::is_object_v<T>) {
  688|  12.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  12.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  12.4k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    426|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    426|        {
  662|    426|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     16|    {
 4947|     16|        return read_impl(
 4948|     16|            range,
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
 4952|     16|            detail::priority_tag<1>{});
 4953|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     16|    {
 4974|     16|        return read_cb(range);
 4975|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     48|{
 1839|     48|    return ranges::next(range.begin(), range.end());
 1840|     48|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     48|    {
  313|     48|        ranges::advance(x, bound);
  314|     48|        return x;
  315|     48|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     48|    {
  275|     48|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     48|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     48|    {
  203|    684|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 636, False: 48]
  ------------------
  204|    636|            ++i;
  205|    636|        }
  206|     48|    }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|     84|    {
 5048|     84|        auto it = read_source_impl(range, {specs});
 5049|     84|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 72]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|     72|        return read_string_impl(range, *it, value);
 5054|     84|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    252|    {
 5153|    252|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    252|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    252|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    252|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    252|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 162, False: 90]
  ------------------
 5163|    162|            const auto cb = [&](char32_t cp) {
 5164|    162|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    162|            };
 5166|       |
 5167|    162|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 126, False: 36]
  ------------------
 5168|    126|                auto it = read_until_code_point(range, cb);
 5169|    126|                return check_nonempty(it, range);
 5170|    126|            }
 5171|     36|            auto it = read_while_code_point(range, cb);
 5172|     36|            return check_nonempty(it, range);
 5173|    162|        }
 5174|       |
 5175|     90|        const auto cb = [&](SourceCharT ch) {
 5176|     90|            return cb_wrapper.on_ascii_only(ch);
 5177|     90|        };
 5178|       |
 5179|     90|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 54, False: 36]
  ------------------
 5180|     54|            auto it = read_until_code_unit(range, cb);
 5181|     54|            return check_nonempty(it, range);
 5182|     54|        }
 5183|     36|        auto it = read_while_code_unit(range, cb);
 5184|     36|        return check_nonempty(it, range);
 5185|     90|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    162|        : m_fptr([](storage fn,
  743|    162|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    162|              cvref<T> obj = *get<T>(fn);
  745|    162|              if constexpr (std::is_void_v<R>) {
  746|    162|                  obj(static_cast<decltype(args)>(args)...);
  747|    162|              }
  748|    162|              else {
  749|    162|                  return obj(static_cast<decltype(args)>(args)...);
  750|    162|              }
  751|    162|          }),
  752|    162|          m_storage(std::addressof(f))
  753|    162|    {
  754|    162|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|    840|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    840|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    840|              else {
  749|    840|                  return obj(static_cast<decltype(args)>(args)...);
  750|    840|              }
  751|    840|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|    840|    {
  684|    840|        if constexpr (std::is_const_v<T>) {
  685|    840|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    840|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|    840|            const auto cb = [&](char32_t cp) {
 5164|    840|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    840|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    162|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    162|        {
  667|    162|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    252|    {
 5191|    252|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 36, False: 216]
  ------------------
 5192|     36|            return unexpected_scan_error(
 5193|     36|                scan_error::invalid_scanned_value,
 5194|     36|                "No characters matched in [character set]");
 5195|     36|        }
 5196|       |
 5197|    216|        return it;
 5198|    252|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     90|        : m_fptr([](storage fn,
  743|     90|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     90|              cvref<T> obj = *get<T>(fn);
  745|     90|              if constexpr (std::is_void_v<R>) {
  746|     90|                  obj(static_cast<decltype(args)>(args)...);
  747|     90|              }
  748|     90|              else {
  749|     90|                  return obj(static_cast<decltype(args)>(args)...);
  750|     90|              }
  751|     90|          }),
  752|     90|          m_storage(std::addressof(f))
  753|     90|    {
  754|     90|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    324|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    324|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    324|              else {
  749|    324|                  return obj(static_cast<decltype(args)>(args)...);
  750|    324|              }
  751|    324|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    324|    {
  684|    324|        if constexpr (std::is_const_v<T>) {
  685|    324|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    324|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5175|    324|        const auto cb = [&](SourceCharT ch) {
 5176|    324|            return cb_wrapper.on_ascii_only(ch);
 5177|    324|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|     90|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     90|        {
  667|     90|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|     72|{
 4752|     72|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     72|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     72|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 72]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     72|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     72|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     72|    return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     72|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     18|    {
 4913|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4914|       |                      !std::is_same_v<SourceCharT, char>) {
 4915|       |            return unexpected_scan_error(
 4916|       |                scan_error::invalid_scanned_value,
 4917|       |                "Regex backend doesn't support wide strings as input");
 4918|       |        }
 4919|     18|        else {
 4920|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 18, False: 0]
  ------------------
 4921|     18|                return unexpected_scan_error(
 4922|     18|                    scan_error::invalid_scanned_value,
 4923|     18|                    "Cannot use regex with a non-contiguous source "
 4924|     18|                    "range");
 4925|     18|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     18|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     18|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|     18|    else {
  974|     18|        return false;
  975|     18|    }
  976|     18|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  3.89k|    {
 5277|  3.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.89k|        return read_impl(range, specs, value);
 5279|  3.89k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  3.89k|    {
 5295|  3.89k|        SCN_CLANG_PUSH
 5296|  3.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.89k|        switch (m_type) {
 5299|    346|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 346, False: 3.55k]
  ------------------
 5300|    346|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 36, False: 3.86k]
  ------------------
 5303|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     36|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.89k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    136|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 136, False: 3.76k]
  ------------------
 5310|    136|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    136|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.28k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.28k, False: 616]
  ------------------
 5315|  3.28k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.28k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.28k|                    specs.regexp_flags, value);
 5318|       |
 5319|     98|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 98, False: 3.80k]
  ------------------
 5320|     98|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     98|                    range,
 5322|     98|                    get_unescaped_regex_pattern(
 5323|     98|                        specs.charset_string<SourceCharT>()),
 5324|     98|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.89k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.89k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.89k|        }
 5331|       |
 5332|  3.89k|        SCN_CLANG_POP
 5333|  3.89k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    924|    {
 4820|    924|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    924|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    960|{
 4752|    960|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    960|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    960|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 348, False: 612]
  ------------------
 4756|    348|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    348|                                     "Invalid encoding in scanned string");
 4758|    348|    }
 4759|    612|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    612|    static_cast<    \
  |  |  929|    612|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    612|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    612|    return SCN_MOVE(result);
  ------------------
  |  |  928|    612|    static_cast<    \
  |  |  929|    612|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    612|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.26k|{
 3012|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3013|       |        dest.assign(source.view());
 3014|       |    }
 3015|  1.26k|    else {
 3016|  1.26k|        return transcode_impl(source.view(), dest);
 3017|  1.26k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.26k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.77k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|  2.77k|    else {
 2097|  2.77k|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|  2.77k|        return read_until_code_point(
 2109|  2.77k|            ranges::subrange{it, range.end()},
 2110|  2.77k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.77k|    }
 2112|  2.77k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.77k|        : m_fptr([](storage fn,
  743|  2.77k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.77k|              cvref<T> obj = *get<T>(fn);
  745|  2.77k|              if constexpr (std::is_void_v<R>) {
  746|  2.77k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.77k|              }
  748|  2.77k|              else {
  749|  2.77k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.77k|              }
  751|  2.77k|          }),
  752|  2.77k|          m_storage(std::addressof(f))
  753|  2.77k|    {
  754|  2.77k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  49.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  49.6k|              else {
  749|  49.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.6k|              }
  751|  49.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  49.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  49.6k|        else if constexpr (std::is_object_v<T>) {
  688|  49.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  49.6k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  49.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.77k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.77k|        {
  662|  2.77k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     36|    {
 4841|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 0]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    136|    {
 5048|    136|        auto it = read_source_impl(range, {specs});
 5049|    136|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 118]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|    118|        return read_string_impl(range, *it, value);
 5054|    136|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|    408|    {
 5153|    408|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    408|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    408|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    408|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    408|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 312, False: 96]
  ------------------
 5163|    312|            const auto cb = [&](char32_t cp) {
 5164|    312|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    312|            };
 5166|       |
 5167|    312|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 120, False: 192]
  ------------------
 5168|    120|                auto it = read_until_code_point(range, cb);
 5169|    120|                return check_nonempty(it, range);
 5170|    120|            }
 5171|    192|            auto it = read_while_code_point(range, cb);
 5172|    192|            return check_nonempty(it, range);
 5173|    312|        }
 5174|       |
 5175|     96|        const auto cb = [&](SourceCharT ch) {
 5176|     96|            return cb_wrapper.on_ascii_only(ch);
 5177|     96|        };
 5178|       |
 5179|     96|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 42, False: 54]
  ------------------
 5180|     42|            auto it = read_until_code_unit(range, cb);
 5181|     42|            return check_nonempty(it, range);
 5182|     42|        }
 5183|     54|        auto it = read_while_code_unit(range, cb);
 5184|     54|        return check_nonempty(it, range);
 5185|     96|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    312|        : m_fptr([](storage fn,
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|    312|              if constexpr (std::is_void_v<R>) {
  746|    312|                  obj(static_cast<decltype(args)>(args)...);
  747|    312|              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
  752|    312|          m_storage(std::addressof(f))
  753|    312|    {
  754|    312|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  4.68k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.68k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.68k|              else {
  749|  4.68k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.68k|              }
  751|  4.68k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.68k|    {
  684|  4.68k|        if constexpr (std::is_const_v<T>) {
  685|  4.68k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.68k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  4.68k|            const auto cb = [&](char32_t cp) {
 5164|  4.68k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  4.68k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    312|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    312|        {
  667|    312|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|    408|    {
 5191|    408|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 54, False: 354]
  ------------------
 5192|     54|            return unexpected_scan_error(
 5193|     54|                scan_error::invalid_scanned_value,
 5194|     54|                "No characters matched in [character set]");
 5195|     54|        }
 5196|       |
 5197|    354|        return it;
 5198|    408|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5176|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5177|  1.27k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    884|{
 4752|    884|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    884|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    884|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 230, False: 654]
  ------------------
 4756|    230|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    230|                                     "Invalid encoding in scanned string");
 4758|    230|    }
 4759|    654|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    654|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    654|    return SCN_MOVE(result);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    654|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.38k|    {
 4891|  3.38k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|  3.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    766|        return read_string_impl(range, it, value);
 4893|  3.38k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  10.1k|    {
 4913|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4914|       |                      !std::is_same_v<SourceCharT, char>) {
 4915|       |            return unexpected_scan_error(
 4916|       |                scan_error::invalid_scanned_value,
 4917|       |                "Regex backend doesn't support wide strings as input");
 4918|       |        }
 4919|  10.1k|        else {
 4920|  10.1k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 10.1k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  10.1k|            auto input = get_as_contiguous(range);
 4928|  10.1k|            SCN_TRY(it,
  ------------------
  |  | 3672|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.84k, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.84k|    }                                                  \
  |  |  |  | 3671|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  2.29k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  2.29k|            return ranges::next(range.begin(),
 4931|  2.29k|                                ranges::distance(input.begin(), it));
 4932|  10.1k|        }
 4933|  10.1k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  10.1k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  10.1k|                  ranges::sized_range<Range>) {
  961|  10.1k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  10.1k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  10.1k|{
 1065|  10.1k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  10.1k|                  ranges::sized_range<Range>) {
 1069|  10.1k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  10.1k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  10.1k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  10.1k|                  ranges::sized_range<Range>) {
  983|  10.1k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  10.1k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  10.1k|{
 4346|  10.1k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  10.1k|                  ranges::borrowed_range<Input> &&
 4348|  10.1k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  10.1k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  10.1k|    std::basic_regex<CharT> re{};
 4352|  10.1k|    try {
 4353|  10.1k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  10.1k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  10.1k|                                     re_flags | std::regex_constants::nosubs};
 4356|  10.1k|    }
 4357|  10.1k|    catch (const std::regex_error& err) {
 4358|  3.56k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  3.56k|                                     "Invalid regex");
 4360|  3.56k|    }
 4361|       |
 4362|  6.57k|    std::match_results<const CharT*> matches{};
 4363|  6.57k|    try {
 4364|  6.57k|        bool found = std::regex_search(input.data(),
 4365|  6.57k|                                       input.data() + input.size(), matches, re,
 4366|  6.57k|                                       std::regex_constants::match_continuous);
 4367|  6.57k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 4.27k, False: 2.29k]
  |  Branch (4367:23): [True: 0, False: 2.29k]
  ------------------
 4368|  4.21k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  4.21k|                                         "Regular expression didn't match");
 4370|  4.21k|        }
 4371|  6.57k|    }
 4372|  6.57k|    catch (const std::regex_error& err) {
 4373|     60|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|     60|                                     "Regex matching failed with an error");
 4375|     60|    }
 4376|       |
 4377|  2.29k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  6.57k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  4.82k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|       |                       std::is_same_v<T, std::wstring_view>) {
 5823|       |        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  4.82k|                       std::is_same_v<T, std::wstring>) {
 5827|  4.82k|        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  4.82k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    156|{
 2993|    156|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2994|    156|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 156, False: 0]
  ------------------
 2995|    156|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    156|    static_cast<    \
  |  |  929|    156|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    156|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|       |    }
 3001|       |    else {
 3002|       |        return transcode_impl(source.view(), dest);
 3003|       |    }
 3004|       |
 3005|    156|    return {};
 3006|    156|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    268|    {
 5277|    268|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    268|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    268|        return read_impl(range, specs, value);
 5279|    268|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    268|    {
 5295|    268|        SCN_CLANG_PUSH
 5296|    268|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    268|        switch (m_type) {
 5299|    142|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 142, False: 126]
  ------------------
 5300|    142|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 248]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     16|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 16, False: 252]
  ------------------
 5307|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|     84|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 84, False: 184]
  ------------------
 5310|     84|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|     84|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 266]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 264]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 268]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    268|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    268|        }
 5331|       |
 5332|    268|        SCN_CLANG_POP
 5333|    268|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    142|    {
 4820|    142|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    142|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    178|{
 4752|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    178|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    178|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 94, False: 84]
  ------------------
 4756|     94|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     94|                                     "Invalid encoding in scanned string");
 4758|     94|    }
 4759|     84|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     84|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     84|    return SCN_MOVE(result);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     84|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     16|    {
 4947|     16|        return read_impl(
 4948|     16|            range,
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
 4952|     16|            detail::priority_tag<1>{});
 4953|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     16|    {
 4974|     16|        return read_cb(range);
 4975|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|     84|    {
 5048|     84|        auto it = read_source_impl(range, {specs});
 5049|     84|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 72]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|     72|        return read_string_impl(range, *it, value);
 5054|     84|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|     72|{
 4752|     72|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     72|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     72|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 72]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     72|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     72|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     72|    return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     72|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  3.89k|    {
 5277|  3.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.89k|        return read_impl(range, specs, value);
 5279|  3.89k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  3.89k|    {
 5295|  3.89k|        SCN_CLANG_PUSH
 5296|  3.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.89k|        switch (m_type) {
 5299|    346|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 346, False: 3.55k]
  ------------------
 5300|    346|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 36, False: 3.86k]
  ------------------
 5303|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     36|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.89k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    136|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 136, False: 3.76k]
  ------------------
 5310|    136|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    136|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.28k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.28k, False: 616]
  ------------------
 5315|  3.28k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.28k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.28k|                    specs.regexp_flags, value);
 5318|       |
 5319|     98|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 98, False: 3.80k]
  ------------------
 5320|     98|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     98|                    range,
 5322|     98|                    get_unescaped_regex_pattern(
 5323|     98|                        specs.charset_string<SourceCharT>()),
 5324|     98|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.89k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.89k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.89k|        }
 5331|       |
 5332|  3.89k|        SCN_CLANG_POP
 5333|  3.89k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    924|    {
 4820|    924|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    924|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    960|{
 4752|    960|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    960|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    960|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 348, False: 612]
  ------------------
 4756|    348|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    348|                                     "Invalid encoding in scanned string");
 4758|    348|    }
 4759|    612|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    612|    static_cast<    \
  |  |  929|    612|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    612|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    612|    return SCN_MOVE(result);
  ------------------
  |  |  928|    612|    static_cast<    \
  |  |  929|    612|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    612|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.26k|{
 3012|  1.26k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3013|  1.26k|        dest.assign(source.view());
 3014|       |    }
 3015|       |    else {
 3016|       |        return transcode_impl(source.view(), dest);
 3017|       |    }
 3018|       |
 3019|  1.26k|    return {};
 3020|  1.26k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     36|    {
 4841|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 0]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    136|    {
 5048|    136|        auto it = read_source_impl(range, {specs});
 5049|    136|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 118]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|    118|        return read_string_impl(range, *it, value);
 5054|    136|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    884|{
 4752|    884|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    884|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    884|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 230, False: 654]
  ------------------
 4756|    230|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    230|                                     "Invalid encoding in scanned string");
 4758|    230|    }
 4759|    654|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    654|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    654|    return SCN_MOVE(result);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    654|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.38k|    {
 4891|  3.38k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|  3.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    766|        return read_string_impl(range, it, value);
 4893|  3.38k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  4.82k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|  4.82k|                       std::is_same_v<T, std::wstring_view>) {
 5823|  4.82k|        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|       |                       std::is_same_v<T, std::wstring>) {
 5827|       |        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  4.82k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    268|    {
 5277|    268|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    268|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    268|        return read_impl(range, specs, value);
 5279|    268|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    268|    {
 5295|    268|        SCN_CLANG_PUSH
 5296|    268|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    268|        switch (m_type) {
 5299|    142|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 142, False: 126]
  ------------------
 5300|    142|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 248]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     16|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 16, False: 252]
  ------------------
 5307|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|     84|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 84, False: 184]
  ------------------
 5310|     84|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|     84|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 266]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 264]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 268]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    268|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    268|        }
 5331|       |
 5332|    268|        SCN_CLANG_POP
 5333|    268|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    142|    {
 4827|    142|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    142|                                     value);
 4829|    142|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    178|{
 4773|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    178|    auto src = [&]() {
 4776|    178|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    178|            return make_contiguous_buffer(
 4778|    178|                ranges::subrange{range.begin().base(), result.base()});
 4779|    178|        }
 4780|    178|        else {
 4781|    178|            return make_contiguous_buffer(
 4782|    178|                ranges::subrange{range.begin(), result});
 4783|    178|        }
 4784|    178|    }();
 4785|    178|    using src_type = decltype(src);
 4786|       |
 4787|    178|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|    178|    else {
 4800|    178|        const auto view = src.view();
 4801|    178|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    178|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 94, False: 84]
  ------------------
 4804|     94|            return unexpected_scan_error(
 4805|     94|                scan_error::invalid_scanned_value,
 4806|     94|                "Invalid encoding in scanned string_view");
 4807|     94|        }
 4808|       |
 4809|     84|        return SCN_MOVE(result);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    178|    }
 4811|    178|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    178|    auto src = [&]() {
 4776|    178|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    178|            return make_contiguous_buffer(
 4778|    178|                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|       |        else {
 4781|       |            return make_contiguous_buffer(
 4782|       |                ranges::subrange{range.begin(), result});
 4783|       |        }
 4784|    178|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     20|    {
 4863|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 20, False: 0]
  ------------------
 4864|     20|            return read_string_view_impl(
 4865|     20|                range,
 4866|     20|                read_until_code_unit(
 4867|     20|                    range,
 4868|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     20|                        SourceCharT ch) { return ch == until; }),
 4870|     20|                value);
 4871|     20|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     16|    {
 4959|     16|        return read_impl(
 4960|     16|            range,
 4961|     16|            [&](const auto& rng) {
 4962|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     16|            },
 4964|     16|            detail::priority_tag<1>{});
 4965|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     16|    {
 4974|     16|        return read_cb(range);
 4975|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     16|            [&](const auto& rng) {
 4962|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|     84|    {
 5062|     84|        auto it = read_source_impl(range, {specs});
 5063|     84|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 72]
  |  |  ------------------
  ------------------
 5064|     12|            return unexpected(it.error());
 5065|     12|        }
 5066|       |
 5067|     72|        return read_string_view_impl(range, *it, value);
 5068|     84|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|     72|{
 4773|     72|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     72|    auto src = [&]() {
 4776|     72|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     72|            return make_contiguous_buffer(
 4778|     72|                ranges::subrange{range.begin().base(), result.base()});
 4779|     72|        }
 4780|     72|        else {
 4781|     72|            return make_contiguous_buffer(
 4782|     72|                ranges::subrange{range.begin(), result});
 4783|     72|        }
 4784|     72|    }();
 4785|     72|    using src_type = decltype(src);
 4786|       |
 4787|     72|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|     72|    else {
 4800|     72|        const auto view = src.view();
 4801|     72|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     72|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 72]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     72|        return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     72|    }
 4811|     72|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|     72|    auto src = [&]() {
 4776|     72|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     72|            return make_contiguous_buffer(
 4778|     72|                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|       |        else {
 4781|       |            return make_contiguous_buffer(
 4782|       |                ranges::subrange{range.begin(), result});
 4783|       |        }
 4784|     72|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|      6|    {
 4902|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  3.89k|    {
 5277|  3.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.89k|        return read_impl(range, specs, value);
 5279|  3.89k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  3.89k|    {
 5295|  3.89k|        SCN_CLANG_PUSH
 5296|  3.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.89k|        switch (m_type) {
 5299|    346|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 346, False: 3.55k]
  ------------------
 5300|    346|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 36, False: 3.86k]
  ------------------
 5303|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     36|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.89k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    136|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 136, False: 3.76k]
  ------------------
 5310|    136|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    136|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.28k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.28k, False: 616]
  ------------------
 5315|  3.28k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.28k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.28k|                    specs.regexp_flags, value);
 5318|       |
 5319|     98|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 98, False: 3.80k]
  ------------------
 5320|     98|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     98|                    range,
 5322|     98|                    get_unescaped_regex_pattern(
 5323|     98|                        specs.charset_string<SourceCharT>()),
 5324|     98|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.89k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.89k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.89k|        }
 5331|       |
 5332|  3.89k|        SCN_CLANG_POP
 5333|  3.89k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    924|    {
 4827|    924|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    924|                                     value);
 4829|    924|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    960|{
 4773|    960|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    960|    auto src = [&]() {
 4776|    960|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    960|            return make_contiguous_buffer(
 4778|    960|                ranges::subrange{range.begin().base(), result.base()});
 4779|    960|        }
 4780|    960|        else {
 4781|    960|            return make_contiguous_buffer(
 4782|    960|                ranges::subrange{range.begin(), result});
 4783|    960|        }
 4784|    960|    }();
 4785|    960|    using src_type = decltype(src);
 4786|       |
 4787|    960|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|    960|    else {
 4800|    960|        const auto view = src.view();
 4801|    960|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    960|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 348, False: 612]
  ------------------
 4804|    348|            return unexpected_scan_error(
 4805|    348|                scan_error::invalid_scanned_value,
 4806|    348|                "Invalid encoding in scanned string_view");
 4807|    348|        }
 4808|       |
 4809|    612|        return SCN_MOVE(result);
  ------------------
  |  |  928|    612|    static_cast<    \
  |  |  929|    612|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    960|    }
 4811|    960|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    960|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|    960|        else {
 4781|    960|            return make_contiguous_buffer(
 4782|    960|                ranges::subrange{range.begin(), result});
 4783|    960|        }
 4784|    960|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     36|    {
 4863|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 36, False: 0]
  ------------------
 4864|     36|            return read_string_view_impl(
 4865|     36|                range,
 4866|     36|                read_until_code_unit(
 4867|     36|                    range,
 4868|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     36|                        SourceCharT ch) { return ch == until; }),
 4870|     36|                value);
 4871|     36|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    136|    {
 5062|    136|        auto it = read_source_impl(range, {specs});
 5063|    136|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 118]
  |  |  ------------------
  ------------------
 5064|     18|            return unexpected(it.error());
 5065|     18|        }
 5066|       |
 5067|    118|        return read_string_view_impl(range, *it, value);
 5068|    136|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    884|{
 4773|    884|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    884|    auto src = [&]() {
 4776|    884|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    884|            return make_contiguous_buffer(
 4778|    884|                ranges::subrange{range.begin().base(), result.base()});
 4779|    884|        }
 4780|    884|        else {
 4781|    884|            return make_contiguous_buffer(
 4782|    884|                ranges::subrange{range.begin(), result});
 4783|    884|        }
 4784|    884|    }();
 4785|    884|    using src_type = decltype(src);
 4786|       |
 4787|    884|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|    884|    else {
 4800|    884|        const auto view = src.view();
 4801|    884|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    884|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 230, False: 654]
  ------------------
 4804|    230|            return unexpected_scan_error(
 4805|    230|                scan_error::invalid_scanned_value,
 4806|    230|                "Invalid encoding in scanned string_view");
 4807|    230|        }
 4808|       |
 4809|    654|        return SCN_MOVE(result);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    884|    }
 4811|    884|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    884|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|    884|        else {
 4781|    884|            return make_contiguous_buffer(
 4782|    884|                ranges::subrange{range.begin(), result});
 4783|    884|        }
 4784|    884|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.38k|    {
 4902|  3.38k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|  3.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    766|        return read_string_view_impl(range, it, value);
 4904|  3.38k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  7.75k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  7.75k|                  ranges::sized_range<Range>) {
 1686|  7.75k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  7.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  7.75k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1488|  7.75k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  7.75k|    {
 1490|  7.75k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    904|    {
 4100|    904|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 904]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    904|        return std::copysign(value, T{1.0});
 4104|    904|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    934|    {
 4100|    934|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 934]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    934|        return std::copysign(value, T{1.0});
 4104|    934|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.77k|{
 5795|  5.77k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.77k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.77k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 642, False: 5.13k]
  ------------------
 5800|    642|        return range.begin();
 5801|    642|    }
 5802|       |
 5803|  5.13k|    return skip_classic_whitespace(range);
 5804|  5.77k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    642|    {
 3528|    642|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    642|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    642|        return read_default_with_base(range, value, 10);
 3530|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    642|    {
 3528|    642|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    642|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    642|        return read_default_with_base(range, value, 10);
 3530|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.16k|    {
 5748|  1.16k|        return true;
 5749|  1.16k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    894|    {
 5765|    894|        detail::format_specs specs{};
 5766|    894|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    894|        std::uintptr_t intvalue{};
 5769|    894|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    894|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    894|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    894|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    894|    }                                                  \
  |  |  |  | 3671|    894|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    894|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.47k|    {
 3035|  1.47k|        return true;
 3036|  1.47k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    642|    {
 5504|    642|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    642|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    642|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    642|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.22k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.03k|    {
 5355|  1.03k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.03k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.03k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 912, False: 122]
  ------------------
 5359|    912|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 912]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    912|            else {
 5363|    912|                err = r.error();
 5364|    912|            }
 5365|    912|        }
 5366|       |
 5367|  1.03k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.01k, False: 22]
  ------------------
 5368|  1.01k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.01k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.01k|            else {
 5372|  1.01k|                err = r.error();
 5373|  1.01k|            }
 5374|  1.01k|        }
 5375|       |
 5376|  1.03k|        return unexpected(err);
 5377|  1.03k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    946|    {
 5384|    946|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 946]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    946|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 946]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    946|        return unexpected_scan_error(
 5394|    946|            scan_error::invalid_scanned_value,
 5395|    946|            "Failed to read numeric boolean value: No match");
 5396|    946|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.01k|    {
 5402|  1.01k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.01k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.01k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.01k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.01k|        return unexpected_scan_error(
 5412|  1.01k|            scan_error::invalid_scanned_value,
 5413|  1.01k|            "Failed to read textual boolean value: No match");
 5414|  1.01k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.02k|{
 2194|  2.02k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  2.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.92k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.92k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.92k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|  1.92k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.92k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.92k|            return unexpected(parse_error::error);
 2202|  1.92k|        }
 2203|      0|        return it;
 2204|       |    }
 2205|       |    else {
 2206|       |        auto range_it = range.begin();
 2207|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|       |            if (SCN_UNLIKELY(*range_it !=
 2209|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|       |                return unexpected(parse_error::error);
 2211|       |            }
 2212|       |        }
 2213|       |        return it;
 2214|       |    }
 2215|  1.92k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    642|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.22k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    642|    {
 4152|    642|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    642|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    642|        float_reader<CharT> rd{};
 4155|    642|        return read_impl<Range>(
 4156|    642|            range, rd,
 4157|    642|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    642|                return r.read_source(SCN_FWD(args)...);
 4159|    642|            },
 4160|    642|            value);
 4161|    642|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    642|        : m_fptr([](storage fn,
  743|    642|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    642|              cvref<T> obj = *get<T>(fn);
  745|    642|              if constexpr (std::is_void_v<R>) {
  746|    642|                  obj(static_cast<decltype(args)>(args)...);
  747|    642|              }
  748|    642|              else {
  749|    642|                  return obj(static_cast<decltype(args)>(args)...);
  750|    642|              }
  751|    642|          }),
  752|    642|          m_storage(std::addressof(f))
  753|    642|    {
  754|    642|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    642|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    642|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    642|              else {
  749|    642|                  return obj(static_cast<decltype(args)>(args)...);
  750|    642|              }
  751|    642|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    642|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    642|        else if constexpr (std::is_object_v<T>) {
  688|    642|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    642|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    642|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    642|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    642|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    642|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    642|        {
  662|    642|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    642|    {
 5266|    642|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    642|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    642|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    642|    {
 5266|    642|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    642|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    642|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    642|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    642|                          basic_contiguous_scan_context<char_type>>) {
 5875|    642|            auto rd = make_reader<T, char_type>();
 5876|    642|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    642|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    642|    {
 5863|    642|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    642|                        .transform_error(make_eof_scan_error));
 5865|    642|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    642|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    642|    {
 5266|    642|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    642|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    642|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    642|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2875|   152k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   152k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   152k|          m_current(m_range.begin())
 2878|   152k|    {
 2879|   152k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   335k|    {
 2883|   335k|        return m_current;
 2884|   335k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   253k|    {
 2888|   253k|        return m_range.end();
 2889|   253k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  70.0k|{
 1221|       |    // TODO: optimize
 1222|  70.0k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  70.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  70.0k|    auto res = get_next_code_point(str);
 1224|  70.0k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  70.0k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  74.1k|    {
 2903|  74.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  74.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  74.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|  74.1k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 74.1k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  74.1k|        }
 2909|  74.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  74.1k|    static_cast<    \
  |  |  929|  74.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  74.1k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   107k|    {
 2893|   107k|        return ranges::subrange{begin(), end()};
 2894|   107k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  7.75k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|  7.75k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|  7.75k|        auto buf = make_contiguous_buffer(range);
 2121|  7.75k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  7.75k|        return ranges::next(range.begin(),
 2123|  7.75k|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|  7.75k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  5.13k|    {
 6037|  5.13k|        const bool need_skipped_width =
 6038|  5.13k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 52, False: 5.08k]
  |  Branch (6038:33): [True: 5.08k, False: 0]
  ------------------
 6039|  5.13k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  5.13k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 244, False: 4.89k]
  ------------------
 6043|  5.13k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 536, False: 4.35k]
  ------------------
 6044|    780|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    780|                             need_skipped_width);
 6046|    780|        }
 6047|  4.35k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 4.23k, False: 120]
  |  Branch (6047:56): [True: 2.03k, False: 2.20k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.03k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 2.03k, False: 0]
  ------------------
 6051|  2.03k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  2.03k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  2.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 1.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|  2.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.86k|                                  .transform_error(make_eof_scan_error));
 6054|  1.86k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  2.03k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  2.32k|        return result_type{rng.begin(), 0};
 6070|  4.35k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    780|{
 5951|    780|    using char_type = detail::char_t<Range>;
 5952|    780|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    780|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 518, False: 262]
  ------------------
 5955|    518|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    518|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    518|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 518]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    518|        auto max_width_view = take_width(range, max_width);
 5972|    518|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    518|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 518, False: 0]
  ------------------
 5975|    518|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    518|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    518|    }
 5979|       |
 5980|    262|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    262|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 262]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    262|    auto max_width_view = take_width(range, max_width);
 5994|    262|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    262|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 262, False: 0]
  ------------------
 5997|    262|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    262|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    262|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    518|        : m_fptr([](storage fn,
  743|    518|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    518|              cvref<T> obj = *get<T>(fn);
  745|    518|              if constexpr (std::is_void_v<R>) {
  746|    518|                  obj(static_cast<decltype(args)>(args)...);
  747|    518|              }
  748|    518|              else {
  749|    518|                  return obj(static_cast<decltype(args)>(args)...);
  750|    518|              }
  751|    518|          }),
  752|    518|          m_storage(std::addressof(f))
  753|    518|    {
  754|    518|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    700|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    700|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    700|              else {
  749|    700|                  return obj(static_cast<decltype(args)>(args)...);
  750|    700|              }
  751|    700|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    700|    {
  684|    700|        if constexpr (std::is_const_v<T>) {
  685|    700|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    700|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|    700|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    518|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    518|        {
  667|    518|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    518|{
 1976|    518|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    518|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    518|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|    518|    else {
 1961|    518|        auto first = range.begin();
 1962|    754|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 700, False: 54]
  ------------------
 1963|    700|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 464, False: 236]
  ------------------
 1964|    464|                return first;
 1965|    464|            }
 1966|    700|        }
 1967|     54|        return first;
 1968|    518|    }
 1969|    518|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  4.85k|    {
 2810|  4.85k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  4.85k|                                      m_count};
 2812|  4.85k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  19.4k|    {
 2717|  19.4k|        return view;
 2718|  19.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2380|  4.85k|        : m_current(x), m_end(s), m_count(n)
 2381|  4.85k|    {
 2382|  4.85k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  6.39k|        {
 2781|  6.39k|            return !(y == x);
 2782|  6.39k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  12.4k|        {
 2770|  12.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 784, False: 11.6k]
  |  Branch (2770:39): [True: 454, False: 330]
  ------------------
 2771|  12.4k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 11.9k]
  ------------------
 2772|  12.4k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    784|    {
 2421|    784|        return m_multibyte_left;
 2422|    784|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  9.71k|    {
 2816|  9.71k|        return sentinel<true>{m_base.get().end()};
 2817|  9.71k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  9.71k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  9.71k|    static_cast<    \
  |  |  929|  9.71k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  8.49k|    {
 2426|  8.49k|        return *m_current;
 2427|  8.49k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  9.70k|    {
 2435|  9.70k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  9.70k|        _increment_current();
 2437|  9.70k|        return *this;
 2438|  9.70k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  9.70k|    {
 2668|  9.70k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 5.42k, False: 4.27k]
  ------------------
 2669|  5.42k|            auto cplen = _get_cp_length_at_current();
 2670|  5.42k|            m_multibyte_left = cplen - 1;
 2671|  5.42k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  5.42k|        }
 2673|  4.27k|        else {
 2674|  4.27k|            --m_multibyte_left;
 2675|  4.27k|        }
 2676|       |
 2677|  9.70k|        ++m_current;
 2678|  9.70k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  5.42k|    {
 2639|  5.42k|        return static_cast<difference_type>(
 2640|  5.42k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  5.42k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  5.42k|    {
 2645|  5.42k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.42k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  5.42k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 3.09k, False: 2.33k]
  ------------------
 2650|  3.09k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  3.09k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  3.09k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  3.09k|        }
 2654|       |
 2655|  2.33k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  2.33k|                                           cplen);
 2657|  2.33k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.33k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  2.33k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  2.33k|        return static_cast<difference_type>(
 2663|  2.33k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  2.33k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    262|{
 2037|    262|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    262|    auto it = range.begin();
 2040|    262|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 262, False: 0]
  ------------------
 2041|    262|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    262|                                           needle.size());
 2043|    262|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 52, False: 210]
  ------------------
 2044|     52|            return it;
 2045|     52|        }
 2046|    210|        static_assert(
 2047|    210|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    210|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 210, False: 0]
  ------------------
 2049|    210|            return it;
 2050|    210|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    262|{
 1857|    262|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    262|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    262|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|    262|    else {
 1868|    262|        auto it = range.begin();
 1869|    262|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 262]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.07k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 866, False: 210]
  ------------------
 1874|    866|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 52, False: 814]
  ------------------
 1875|     52|                return unexpected(eof_error::eof);
 1876|     52|            }
 1877|    866|        }
 1878|       |
 1879|    210|        return it;
 1880|    262|    }
 1881|    262|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    262|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    262|    else {
 1115|    262|        return 0;
 1116|    262|    }
 1117|    262|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.03k|    {
  268|  2.03k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.03k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.03k|    {
  161|  2.03k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.03k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.03k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.03k|        else {
  169|  2.03k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.03k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.03k|        }
  173|  2.03k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  5.83k|    {
 2531|  5.83k|        return !(a == b);
 2532|  5.83k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  5.83k|    {
 2523|  5.83k|        return a.m_current == b.m_current;
 2524|  5.83k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  2.81k|    {
 2832|  2.81k|        return take_width_view{r, n};
 2833|  2.81k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2799|  2.81k|        : m_base(base), m_count(count)
 2800|  2.81k|    {
 2801|  2.81k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  2.81k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.03k|{
 2951|  2.03k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.03k, False: 0]
  ------------------
 2952|  2.03k|        auto it = read_while_classic_space(range);
 2953|  2.03k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.03k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.86k]
  |  |  ------------------
  ------------------
 2955|    174|            return unexpected(e);
 2956|    174|        }
 2957|       |
 2958|  1.86k|        return it;
 2959|  2.03k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.03k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.03k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  2.03k|    else {
 2126|  2.03k|        auto it = range.begin();
 2127|       |
 2128|  2.03k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.03k|            auto seg = get_contiguous_beginning(range);
 2130|  2.03k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.03k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.03k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.03k|            ranges::advance(it, seg.size());
 2135|  2.03k|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|  2.03k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.03k|    }
 2140|  2.03k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  2.03k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  2.03k|    else {
 1058|  2.03k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.03k|    }
 1060|  2.03k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.03k|{
 2082|  2.03k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.03k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.03k|{
 2061|  2.03k|    auto it = range.begin();
 2062|  3.28k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.11k, False: 174]
  ------------------
 2063|  3.11k|        const auto val =
 2064|  3.11k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.11k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.11k, False: 0]
  |  |  ------------------
  ------------------
 2066|  3.11k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.11k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.11k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.86k, False: 1.24k]
  ------------------
 2069|  1.86k|                return it;
 2070|  1.86k|            }
 2071|  3.11k|        }
 2072|  1.24k|        it = val.iterator;
 2073|  1.24k|    }
 2074|       |
 2075|    174|    return it;
 2076|  2.03k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  3.11k|{
 1899|  3.11k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.11k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.11k|    auto it = range.begin();
 1903|  3.11k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.11k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.11k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  3.11k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.38k, False: 724]
  ------------------
 1912|  2.38k|        ++it;
 1913|  2.38k|        return {it, string_type(1, *range.begin())};
 1914|  2.38k|    }
 1915|       |
 1916|    724|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    724|    return {it, string_type{range.begin(), it}};
 1918|  3.11k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  5.15k|{
  944|  5.15k|    return is_range_eof(r.begin(), r.end());
  945|  5.15k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  5.15k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.15k|    {
  937|  5.15k|        return begin == end;
  938|  5.15k|    }
  939|  5.15k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    724|    {
  283|    724|        return n - fn::impl_i_n_s(i, n, bound);
  284|    724|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    724|    {
  227|    724|        constexpr iter_difference_t<I> zero{0};
  228|    724|        iter_difference_t<I> counter{0};
  229|       |
  230|    724|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 724]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    724|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.08k, False: 724]
  |  Branch (237:34): [True: 2.08k, False: 0]
  ------------------
  238|  2.08k|                ++i;
  239|  2.08k|                ++counter;
  240|  2.08k|            }
  241|    724|        }
  242|       |
  243|    724|        return counter;
  244|    724|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  3.11k|    {
 1890|  3.11k|        return !codepoint.empty();
 1891|  3.11k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.03k|        : m_fptr([](storage fn,
  743|  2.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.03k|              cvref<T> obj = *get<T>(fn);
  745|  2.03k|              if constexpr (std::is_void_v<R>) {
  746|  2.03k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.03k|              }
  748|  2.03k|              else {
  749|  2.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.03k|              }
  751|  2.03k|          }),
  752|  2.03k|          m_storage(std::addressof(f))
  753|  2.03k|    {
  754|  2.03k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.11k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.11k|              else {
  749|  3.11k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.11k|              }
  751|  3.11k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.11k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.11k|        else if constexpr (std::is_object_v<T>) {
  688|  3.11k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.11k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.11k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.03k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.03k|        {
  662|  2.03k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.03k|{
  950|  2.03k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.86k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  1.86k|    return eof_error::good;
  954|  2.03k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  14.5k|    {
 2413|  14.5k|        return m_current;
 2414|  14.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  15.0k|    {
 2417|  15.0k|        return m_count;
 2418|  15.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  29.3k|    {
 6037|  29.3k|        const bool need_skipped_width =
 6038|  29.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 2.07k, False: 27.2k]
  |  Branch (6038:33): [True: 0, False: 27.2k]
  ------------------
 6039|  29.3k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  29.3k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 206, False: 29.1k]
  ------------------
 6043|  29.3k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 3.31k, False: 25.8k]
  ------------------
 6044|  3.52k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  3.52k|                             need_skipped_width);
 6046|  3.52k|        }
 6047|  25.8k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 25.1k, False: 716]
  |  Branch (6047:56): [True: 1.67k, False: 23.4k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.67k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.67k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.34k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.34k|                            make_eof_scan_error));
 6058|       |
 6059|  3.34k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.06k, False: 606]
  ------------------
 6060|  1.06k|                return result_type{
 6061|  1.06k|                    it,
 6062|  1.06k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.06k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.06k|                                             .view())};
 6065|  1.06k|            }
 6066|    606|            return result_type{it, 0};
 6067|  3.34k|        }
 6068|       |
 6069|  24.1k|        return result_type{rng.begin(), 0};
 6070|  25.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  5.95k|    {
 6079|  5.95k|        const bool need_skipped_width =
 6080|  5.95k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 548, False: 5.40k]
  |  Branch (6080:33): [True: 1.13k, False: 4.27k]
  ------------------
 6081|  5.95k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  5.95k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 316, False: 5.64k]
  ------------------
 6084|  5.95k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 336, False: 5.30k]
  ------------------
 6085|    652|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 248, False: 404]
  ------------------
 6086|    652|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 110, False: 138]
  ------------------
 6087|    110|                return result_type{rng.begin(), 0};
 6088|    110|            }
 6089|    542|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    542|                             specs.fill, need_skipped_width);
 6091|    652|        }
 6092|  5.30k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 5.13k, False: 170]
  ------------------
 6093|  5.30k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 4.81k, False: 318]
  ------------------
 6094|  5.30k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 280, False: 4.53k]
  |  Branch (6094:35): [True: 244, False: 36]
  ------------------
 6095|  4.81k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 598, False: 3.97k]
  ------------------
 6096|  4.57k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 498, False: 100]
  ------------------
 6097|    742|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 498, False: 244]
  ------------------
 6098|    498|                const auto initial_width =
 6099|    498|                    specs.precision - prefix_width - value_width;
 6100|    498|                auto max_width_view = take_width(rng, initial_width);
 6101|    498|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    498|                                  .transform_error(make_eof_scan_error));
 6103|    498|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    498|            }
 6105|    488|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    488|                            make_eof_scan_error));
 6107|       |
 6108|    488|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 244, False: 0]
  ------------------
 6109|    244|                return result_type{
 6110|    244|                    it,
 6111|    244|                    calculate_text_width(make_contiguous_buffer(
 6112|    244|                                             ranges::subrange{rng.begin(), it})
 6113|    244|                                             .view())};
 6114|    244|            }
 6115|      0|            return result_type{it, 0};
 6116|    488|        }
 6117|  4.56k|        return result_type{rng.begin(), 0};
 6118|  5.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  10.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.82k, False: 616]
  |  |  ------------------
  ------------------
 6199|  9.82k|                return unexpected(e);
 6200|  9.82k|            }
 6201|       |
 6202|    616|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    616|    {
 6124|    616|        const bool need_skipped_width =
 6125|    616|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 210, False: 406]
  |  Branch (6125:33): [True: 312, False: 94]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    616|        auto it = rng.begin();
 6129|    616|        std::ptrdiff_t prefix_width = 0;
 6130|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 314, False: 302]
  ------------------
 6131|    314|            auto max_width_view = take_width(rng, specs.precision);
 6132|    314|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 290]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    290|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    290|            it = prefix_result.first.base();
 6135|    290|            prefix_width = prefix_result.second;
 6136|    290|        }
 6137|    302|        else {
 6138|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    302|            std::tie(it, prefix_width) = prefix_result;
 6140|    302|        }
 6141|    592|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    592|        std::ptrdiff_t value_width = 0;
 6145|    592|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 290, False: 302]
  ------------------
 6146|    290|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 284]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    284|            const auto initial_width = specs.precision - prefix_width;
 6154|    284|            auto max_width_view =
 6155|    284|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    284|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 284, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    284|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    302|        else {
 6161|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    302|    }                                                  \
  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  10.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.82k, False: 616]
  |  |  ------------------
  ------------------
 6199|  9.82k|                return unexpected(e);
 6200|  9.82k|            }
 6201|       |
 6202|    616|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    616|    {
 6124|    616|        const bool need_skipped_width =
 6125|    616|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 210, False: 406]
  |  Branch (6125:33): [True: 312, False: 94]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    616|        auto it = rng.begin();
 6129|    616|        std::ptrdiff_t prefix_width = 0;
 6130|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 314, False: 302]
  ------------------
 6131|    314|            auto max_width_view = take_width(rng, specs.precision);
 6132|    314|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 290]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    290|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    290|            it = prefix_result.first.base();
 6135|    290|            prefix_width = prefix_result.second;
 6136|    290|        }
 6137|    302|        else {
 6138|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    302|            std::tie(it, prefix_width) = prefix_result;
 6140|    302|        }
 6141|    592|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    592|        std::ptrdiff_t value_width = 0;
 6145|    592|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 290, False: 302]
  ------------------
 6146|    290|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 284]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    284|            const auto initial_width = specs.precision - prefix_width;
 6154|    284|            auto max_width_view =
 6155|    284|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    284|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 284, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    284|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    302|        else {
 6161|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    302|    }                                                  \
  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.85k, False: 524]
  |  |  ------------------
  ------------------
 6199|  9.85k|                return unexpected(e);
 6200|  9.85k|            }
 6201|       |
 6202|    524|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.3k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  10.3k|    {
 5753|  10.3k|        reader_error_handler eh{};
 5754|  10.3k|        detail::check_pointer_type_specs(specs, eh);
 5755|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.85k, False: 524]
  |  |  ------------------
  ------------------
 5756|  9.85k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  9.85k|        }
 5758|    524|        return {};
 5759|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    524|    {
 6124|    524|        const bool need_skipped_width =
 6125|    524|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 184, False: 340]
  |  Branch (6125:33): [True: 270, False: 70]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    524|        auto it = rng.begin();
 6129|    524|        std::ptrdiff_t prefix_width = 0;
 6130|    524|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 272, False: 252]
  ------------------
 6131|    272|            auto max_width_view = take_width(rng, specs.precision);
 6132|    272|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    256|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    256|            it = prefix_result.first.base();
 6135|    256|            prefix_width = prefix_result.second;
 6136|    256|        }
 6137|    252|        else {
 6138|    252|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    252|            std::tie(it, prefix_width) = prefix_result;
 6140|    252|        }
 6141|    508|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    508|        std::ptrdiff_t value_width = 0;
 6145|    508|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 256, False: 252]
  ------------------
 6146|    256|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 252]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    252|            const auto initial_width = specs.precision - prefix_width;
 6154|    252|            auto max_width_view =
 6155|    252|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    252|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    252|        else {
 6161|    252|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    252|    }                                                  \
  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    252|    {
 5782|    252|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    252|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    252|        return read_default(range, value, loc);
 5784|    252|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    252|    {
 5765|    252|        detail::format_specs specs{};
 5766|    252|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    252|        std::uintptr_t intvalue{};
 5769|    252|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    252|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    252|    {
 5782|    252|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    252|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    252|        return read_default(range, value, loc);
 5784|    252|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  10.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.60k, False: 832]
  |  |  ------------------
  ------------------
 6199|  9.60k|                return unexpected(e);
 6200|  9.60k|            }
 6201|       |
 6202|    832|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.4k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.4k|    {
 3040|  10.4k|        reader_error_handler eh{};
 3041|  10.4k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.60k, False: 832]
  |  |  ------------------
  ------------------
 3043|  9.60k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.60k|        }
 3045|    832|        return {};
 3046|  10.4k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  10.4k|    {
 3051|  10.4k|        return static_cast<Derived&>(*this);
 3052|  10.4k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  10.4k|    {
 5497|  10.4k|        detail::check_bool_type_specs(specs, eh);
 5498|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    832|    {
 6124|    832|        const bool need_skipped_width =
 6125|    832|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 220, False: 612]
  |  Branch (6125:33): [True: 392, False: 220]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    832|        auto it = rng.begin();
 6129|    832|        std::ptrdiff_t prefix_width = 0;
 6130|    832|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 396, False: 436]
  ------------------
 6131|    396|            auto max_width_view = take_width(rng, specs.precision);
 6132|    396|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    396|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    396|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    396|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|    396|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    368|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    368|            it = prefix_result.first.base();
 6135|    368|            prefix_width = prefix_result.second;
 6136|    368|        }
 6137|    436|        else {
 6138|    436|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    436|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    436|            std::tie(it, prefix_width) = prefix_result;
 6140|    436|        }
 6141|    804|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    804|        std::ptrdiff_t value_width = 0;
 6145|    804|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 368, False: 436]
  ------------------
 6146|    368|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 362]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    362|            const auto initial_width = specs.precision - prefix_width;
 6154|    362|            auto max_width_view =
 6155|    362|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    362|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    362|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    436|        else {
 6161|    436|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 436, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    436|    }                                                  \
  |  | 3671|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    362|    {
 5516|    362|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    362|#if !SCN_DISABLE_LOCALE
 5519|    362|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 14, False: 348]
  ------------------
 5520|     14|            return rd.read_localized(range, loc, value);
 5521|     14|        }
 5522|    348|#endif
 5523|       |
 5524|    348|        return rd.read_classic(range, value);
 5525|    362|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    798|    {
 5529|    798|        SCN_GCC_COMPAT_PUSH
 5530|    798|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    798|        switch (specs.type) {
 5533|    210|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 210, False: 588]
  ------------------
 5534|    210|                return bool_reader_base::allow_text;
 5535|       |
 5536|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 12, False: 786]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 790]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 792]
  ------------------
 5539|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 12, False: 786]
  ------------------
 5540|     72|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 34, False: 764]
  ------------------
 5541|     76|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 794]
  ------------------
 5542|     76|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    512|            default:
  ------------------
  |  Branch (5544:13): [True: 512, False: 286]
  ------------------
 5545|    512|                return bool_reader_base::allow_text |
 5546|    512|                       bool_reader_base::allow_numeric;
 5547|    798|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    798|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     14|    {
 5428|     14|        scan_error err{scan_error::invalid_scanned_value,
 5429|     14|                       "Failed to read boolean"};
 5430|       |
 5431|     14|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 4]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     14|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 12, False: 2]
  ------------------
 5441|     12|            auto stdloc = loc.get<std::locale>();
 5442|     12|            const auto& numpunct =
 5443|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     12|            const auto truename = numpunct.truename();
 5445|     12|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     12|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 12]
  ------------------
 5448|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     12|            else {
 5452|     12|                err = r.error();
 5453|     12|            }
 5454|     12|        }
 5455|       |
 5456|     14|        return unexpected(err);
 5457|     14|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    284|    {
 5384|    284|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 284]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    284|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 284]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    284|        return unexpected_scan_error(
 5394|    284|            scan_error::invalid_scanned_value,
 5395|    284|            "Failed to read numeric boolean value: No match");
 5396|    284|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    568|{
 2146|    568|    auto it = read_code_unit(range);
 2147|    568|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 568]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    568|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 568, False: 0]
  |  |  ------------------
  ------------------
 2152|    568|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    568|        return unexpected(parse_error::error);
 2154|    568|    }
 2155|       |
 2156|      0|    return *it;
 2157|    568|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     12|    {
 5468|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     12|        const auto shorter = std::pair{
 5470|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 12, False: 0]
  ------------------
 5471|     12|        const auto longer = std::pair{
 5472|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 12]
  ------------------
 5473|       |
 5474|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 12]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 12]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     12|                                     "read_textual: No match");
 5485|     12|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     24|{
 2179|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    672|{
 1857|    672|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    672|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    672|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|    672|    else {
 1868|    672|        auto it = range.begin();
 1869|    672|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 672]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.34k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.80k, False: 534]
  ------------------
 1874|  2.80k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 138, False: 2.67k]
  ------------------
 1875|    138|                return unexpected(eof_error::eof);
 1876|    138|            }
 1877|  2.80k|        }
 1878|       |
 1879|    534|        return it;
 1880|    672|    }
 1881|    672|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    672|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    672|    else {
 1115|    672|        return 0;
 1116|    672|    }
 1117|    672|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    348|    {
 5355|    348|        scan_error err{scan_error::invalid_scanned_value,
 5356|    348|                       "Failed to read boolean"};
 5357|       |
 5358|    348|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 274, False: 74]
  ------------------
 5359|    274|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 274]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    274|            else {
 5363|    274|                err = r.error();
 5364|    274|            }
 5365|    274|        }
 5366|       |
 5367|    348|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 324, False: 24]
  ------------------
 5368|    324|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 324]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    324|            else {
 5372|    324|                err = r.error();
 5373|    324|            }
 5374|    324|        }
 5375|       |
 5376|    348|        return unexpected(err);
 5377|    348|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    324|    {
 5402|    324|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 324]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    324|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 324]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    324|        return unexpected_scan_error(
 5412|    324|            scan_error::invalid_scanned_value,
 5413|    324|            "Failed to read textual boolean value: No match");
 5414|    324|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    648|{
 2194|    648|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 520]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    128|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    520|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    520|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    520|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    520|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|    520|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    520|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 520, False: 0]
  |  |  ------------------
  ------------------
 2201|    520|            return unexpected(parse_error::error);
 2202|    520|        }
 2203|      0|        return it;
 2204|       |    }
 2205|       |    else {
 2206|       |        auto range_it = range.begin();
 2207|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|       |            if (SCN_UNLIKELY(*range_it !=
 2209|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|       |                return unexpected(parse_error::error);
 2211|       |            }
 2212|       |        }
 2213|       |        return it;
 2214|       |    }
 2215|    520|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    436|    {
 5516|    436|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    436|#if !SCN_DISABLE_LOCALE
 5519|    436|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 44, False: 392]
  ------------------
 5520|     44|            return rd.read_localized(range, loc, value);
 5521|     44|        }
 5522|    392|#endif
 5523|       |
 5524|    392|        return rd.read_classic(range, value);
 5525|    436|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     44|    {
 5428|     44|        scan_error err{scan_error::invalid_scanned_value,
 5429|     44|                       "Failed to read boolean"};
 5430|       |
 5431|     44|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 34, False: 10]
  ------------------
 5432|     34|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 34]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     34|            else {
 5436|     34|                err = r.error();
 5437|     34|            }
 5438|     34|        }
 5439|       |
 5440|     44|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 16, False: 28]
  ------------------
 5441|     16|            auto stdloc = loc.get<std::locale>();
 5442|     16|            const auto& numpunct =
 5443|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     16|            const auto truename = numpunct.truename();
 5445|     16|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     16|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 16]
  ------------------
 5448|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     16|            else {
 5452|     16|                err = r.error();
 5453|     16|            }
 5454|     16|        }
 5455|       |
 5456|     44|        return unexpected(err);
 5457|     44|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|     16|    {
 5468|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     16|        const auto shorter = std::pair{
 5470|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 16, False: 0]
  ------------------
 5471|     16|        const auto longer = std::pair{
 5472|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 16]
  ------------------
 5473|       |
 5474|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 16]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 16]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     16|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     16|                                     "read_textual: No match");
 5485|     16|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     32|{
 2179|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     30|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     30|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     30|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     30|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2185|     30|        return unexpected(parse_error::error);
 2186|     30|    }
 2187|      0|    return it;
 2188|     30|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.80k, False: 574]
  |  |  ------------------
  ------------------
 6199|  9.80k|                return unexpected(e);
 6200|  9.80k|            }
 6201|       |
 6202|    574|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    574|    {
 6124|    574|        const bool need_skipped_width =
 6125|    574|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 186, False: 388]
  |  Branch (6125:33): [True: 302, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    574|        auto it = rng.begin();
 6129|    574|        std::ptrdiff_t prefix_width = 0;
 6130|    574|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 304, False: 270]
  ------------------
 6131|    304|            auto max_width_view = take_width(rng, specs.precision);
 6132|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    304|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    304|            it = prefix_result.first.base();
 6135|    304|            prefix_width = prefix_result.second;
 6136|    304|        }
 6137|    270|        else {
 6138|    270|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    270|            std::tie(it, prefix_width) = prefix_result;
 6140|    270|        }
 6141|    574|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    574|        std::ptrdiff_t value_width = 0;
 6145|    574|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 304, False: 270]
  ------------------
 6146|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 298]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    298|            const auto initial_width = specs.precision - prefix_width;
 6154|    298|            auto max_width_view =
 6155|    298|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    298|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 266]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    266|            it = w_it.base();
 6158|    266|            value_width = initial_width - w_it.count();
 6159|    266|        }
 6160|    270|        else {
 6161|    270|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 248]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     22|    }                                                  \
  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    248|                                             specs, value, loc));
 6163|       |
 6164|    248|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 180, False: 68]
  ------------------
 6165|    180|                value_width = calculate_text_width(
 6166|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    180|                        .view());
 6168|    180|            }
 6169|    248|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    514|        std::ptrdiff_t postfix_width = 0;
 6173|    514|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 514, False: 0]
  ------------------
 6174|    514|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    514|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    514|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    514|                                 value_width));
 6178|    514|            std::tie(it, postfix_width) = postfix_result;
 6179|    514|        }
 6180|       |
 6181|    514|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    514|                                                 value_width, postfix_width);
 6183|    514|            !e) {
  ------------------
  |  Branch (6183:13): [True: 160, False: 354]
  ------------------
 6184|    160|            return unexpected(e);
 6185|    160|        }
 6186|       |
 6187|    354|        return it;
 6188|    514|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  10.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.83k, False: 598]
  |  |  ------------------
  ------------------
 6199|  9.83k|                return unexpected(e);
 6200|  9.83k|            }
 6201|       |
 6202|    598|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    598|    {
 6124|    598|        const bool need_skipped_width =
 6125|    598|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 194, False: 404]
  |  Branch (6125:33): [True: 306, False: 98]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    598|        auto it = rng.begin();
 6129|    598|        std::ptrdiff_t prefix_width = 0;
 6130|    598|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 310, False: 288]
  ------------------
 6131|    310|            auto max_width_view = take_width(rng, specs.precision);
 6132|    310|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    288|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    288|            it = prefix_result.first.base();
 6135|    288|            prefix_width = prefix_result.second;
 6136|    288|        }
 6137|    288|        else {
 6138|    288|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    288|            std::tie(it, prefix_width) = prefix_result;
 6140|    288|        }
 6141|    576|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    576|        std::ptrdiff_t value_width = 0;
 6145|    576|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 288, False: 288]
  ------------------
 6146|    288|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 280]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    280|            const auto initial_width = specs.precision - prefix_width;
 6154|    280|            auto max_width_view =
 6155|    280|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    280|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    280|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    288|        else {
 6161|    288|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 288, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    288|    }                                                  \
  |  | 3671|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 10.2k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  10.2k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  10.2k|    {
 6124|  10.2k|        const bool need_skipped_width =
 6125|  10.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 306, False: 9.94k]
  |  Branch (6125:33): [True: 1.06k, False: 8.87k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.2k|        auto it = rng.begin();
 6129|  10.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.07k, False: 9.17k]
  ------------------
 6131|  1.07k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.07k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.05k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.05k|            it = prefix_result.first.base();
 6135|  1.05k|            prefix_width = prefix_result.second;
 6136|  1.05k|        }
 6137|  9.17k|        else {
 6138|  9.17k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.17k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.17k|        }
 6141|  10.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.2k|        std::ptrdiff_t value_width = 0;
 6145|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.05k, False: 9.17k]
  ------------------
 6146|  1.05k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 1.05k]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|  1.05k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.05k|            auto max_width_view =
 6155|  1.05k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.05k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 656, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    656|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    656|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    656|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    656|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    656|    }                                                  \
  |  |  |  | 3671|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    394|            it = w_it.base();
 6158|    394|            value_width = initial_width - w_it.count();
 6159|    394|        }
 6160|  9.17k|        else {
 6161|  9.17k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.27k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  7.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  7.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  7.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  7.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  7.27k|    }                                                  \
  |  | 3671|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.89k|                                             specs, value, loc));
 6163|       |
 6164|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 246, False: 1.65k]
  ------------------
 6165|    246|                value_width = calculate_text_width(
 6166|    246|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    246|                        .view());
 6168|    246|            }
 6169|  1.89k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.29k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.29k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.81k, False: 476]
  ------------------
 6174|  1.81k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.81k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.81k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.81k|                                 value_width));
 6178|  1.81k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.81k|        }
 6180|       |
 6181|  2.29k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.29k|                                                 value_width, postfix_width);
 6183|  2.29k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 146, False: 2.14k]
  ------------------
 6184|    146|            return unexpected(e);
 6185|    146|        }
 6186|       |
 6187|  2.14k|        return it;
 6188|  2.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 10.2k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  10.2k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  10.2k|    {
 6124|  10.2k|        const bool need_skipped_width =
 6125|  10.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 306, False: 9.94k]
  |  Branch (6125:33): [True: 1.06k, False: 8.87k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.2k|        auto it = rng.begin();
 6129|  10.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.07k, False: 9.17k]
  ------------------
 6131|  1.07k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.07k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.05k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.05k|            it = prefix_result.first.base();
 6135|  1.05k|            prefix_width = prefix_result.second;
 6136|  1.05k|        }
 6137|  9.17k|        else {
 6138|  9.17k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.17k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.17k|        }
 6141|  10.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.2k|        std::ptrdiff_t value_width = 0;
 6145|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.05k, False: 9.17k]
  ------------------
 6146|  1.05k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 1.05k]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|  1.05k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.05k|            auto max_width_view =
 6155|  1.05k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.05k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 656, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    656|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    656|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    656|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    656|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    656|    }                                                  \
  |  |  |  | 3671|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    394|            it = w_it.base();
 6158|    394|            value_width = initial_width - w_it.count();
 6159|    394|        }
 6160|  9.17k|        else {
 6161|  9.17k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.27k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  7.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  7.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  7.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  7.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  7.27k|    }                                                  \
  |  | 3671|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.89k|                                             specs, value, loc));
 6163|       |
 6164|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 246, False: 1.65k]
  ------------------
 6165|    246|                value_width = calculate_text_width(
 6166|    246|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    246|                        .view());
 6168|    246|            }
 6169|  1.89k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.29k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.29k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.81k, False: 476]
  ------------------
 6174|  1.81k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.81k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.81k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.81k|                                 value_width));
 6178|  1.81k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.81k|        }
 6180|       |
 6181|  2.29k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.29k|                                                 value_width, postfix_width);
 6183|  2.29k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 146, False: 2.14k]
  ------------------
 6184|    146|            return unexpected(e);
 6185|    146|        }
 6186|       |
 6187|  2.14k|        return it;
 6188|  2.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 10.2k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  10.2k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  10.2k|    {
 6124|  10.2k|        const bool need_skipped_width =
 6125|  10.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 306, False: 9.94k]
  |  Branch (6125:33): [True: 1.06k, False: 8.87k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.2k|        auto it = rng.begin();
 6129|  10.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.07k, False: 9.17k]
  ------------------
 6131|  1.07k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.07k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.05k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.05k|            it = prefix_result.first.base();
 6135|  1.05k|            prefix_width = prefix_result.second;
 6136|  1.05k|        }
 6137|  9.17k|        else {
 6138|  9.17k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.17k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.17k|        }
 6141|  10.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.2k|        std::ptrdiff_t value_width = 0;
 6145|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.05k, False: 9.17k]
  ------------------
 6146|  1.05k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 1.05k]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|  1.05k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.05k|            auto max_width_view =
 6155|  1.05k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.05k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 656, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    656|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    656|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    656|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    656|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    656|    }                                                  \
  |  |  |  | 3671|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    394|            it = w_it.base();
 6158|    394|            value_width = initial_width - w_it.count();
 6159|    394|        }
 6160|  9.17k|        else {
 6161|  9.17k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.27k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  7.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  7.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  7.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  7.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  7.27k|    }                                                  \
  |  | 3671|  9.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.89k|                                             specs, value, loc));
 6163|       |
 6164|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 246, False: 1.65k]
  ------------------
 6165|    246|                value_width = calculate_text_width(
 6166|    246|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    246|                        .view());
 6168|    246|            }
 6169|  1.89k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.29k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.29k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.81k, False: 476]
  ------------------
 6174|  1.81k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.81k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.81k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.81k|                                 value_width));
 6178|  1.81k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.81k|        }
 6180|       |
 6181|  2.29k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.29k|                                                 value_width, postfix_width);
 6183|  2.29k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 146, False: 2.14k]
  ------------------
 6184|    146|            return unexpected(e);
 6185|    146|        }
 6186|       |
 6187|  2.14k|        return it;
 6188|  2.29k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.20k|{
 5795|  5.20k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.20k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.20k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 578, False: 4.62k]
  ------------------
 5800|    578|        return range.begin();
 5801|    578|    }
 5802|       |
 5803|  4.62k|    return skip_classic_whitespace(range);
 5804|  5.20k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    578|    {
 3528|    578|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    578|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    578|        return read_default_with_base(range, value, 10);
 3530|    578|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    578|    {
 3492|    578|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    578|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|    578|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 578]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.15k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.15k|                parse_integer_digits_without_thsep(
 3511|  1.15k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.15k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.15k|        auto buf = make_contiguous_buffer(
 3515|  1.15k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.15k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 578, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    578|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    578|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    578|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    578|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    578|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.15k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    578|    {
 3528|    578|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    578|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    578|        return read_default_with_base(range, value, 10);
 3530|    578|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    578|    {
 3492|    578|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    578|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    578|        if constexpr (!std::is_signed_v<T>) {
 3496|    578|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 578]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    578|        }
 3503|       |
 3504|    578|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 578]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.15k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.15k|                parse_integer_digits_without_thsep(
 3511|  1.15k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.15k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.15k|        auto buf = make_contiguous_buffer(
 3515|  1.15k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.15k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 578, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    578|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    578|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    578|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    578|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    578|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.15k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  1.05k|    {
 5748|  1.05k|        return true;
 5749|  1.05k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    914|    {
 5765|    914|        detail::format_specs specs{};
 5766|    914|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    914|        std::uintptr_t intvalue{};
 5769|    914|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 914, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    914|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    914|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    914|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    914|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    914|    }                                                  \
  |  |  |  | 3671|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    914|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.22k|    {
 3035|  1.22k|        return true;
 3036|  1.22k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    578|    {
 5504|    578|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    578|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    578|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    578|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    980|    {
 5355|    980|        scan_error err{scan_error::invalid_scanned_value,
 5356|    980|                       "Failed to read boolean"};
 5357|       |
 5358|    980|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 932, False: 48]
  ------------------
 5359|    932|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 932]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    932|            else {
 5363|    932|                err = r.error();
 5364|    932|            }
 5365|    932|        }
 5366|       |
 5367|    980|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 960, False: 20]
  ------------------
 5368|    960|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 960]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    960|            else {
 5372|    960|                err = r.error();
 5373|    960|            }
 5374|    960|        }
 5375|       |
 5376|    980|        return unexpected(err);
 5377|    980|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    956|    {
 5384|    956|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 956]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    956|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 956]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    956|        return unexpected_scan_error(
 5394|    956|            scan_error::invalid_scanned_value,
 5395|    956|            "Failed to read numeric boolean value: No match");
 5396|    956|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    960|    {
 5402|    960|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 960]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    960|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 960]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    960|        return unexpected_scan_error(
 5412|    960|            scan_error::invalid_scanned_value,
 5413|    960|            "Failed to read textual boolean value: No match");
 5414|    960|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.92k|{
 2194|  1.92k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 1.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    126|    }                                                  \
  |  |  |  | 3671|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.79k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.79k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|       |            return unexpected(parse_error::error);
 2202|       |        }
 2203|       |        return it;
 2204|       |    }
 2205|  1.79k|    else {
 2206|  1.79k|        auto range_it = range.begin();
 2207|  1.79k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.79k, False: 0]
  ------------------
 2208|  1.79k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.79k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.79k|                return unexpected(parse_error::error);
 2211|  1.79k|            }
 2212|  1.79k|        }
 2213|      0|        return it;
 2214|  1.79k|    }
 2215|  1.79k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    578|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    578|    {
 4152|    578|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    578|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    578|        float_reader<CharT> rd{};
 4155|    578|        return read_impl<Range>(
 4156|    578|            range, rd,
 4157|    578|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    578|                return r.read_source(SCN_FWD(args)...);
 4159|    578|            },
 4160|    578|            value);
 4161|    578|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    578|        : m_fptr([](storage fn,
  743|    578|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    578|              cvref<T> obj = *get<T>(fn);
  745|    578|              if constexpr (std::is_void_v<R>) {
  746|    578|                  obj(static_cast<decltype(args)>(args)...);
  747|    578|              }
  748|    578|              else {
  749|    578|                  return obj(static_cast<decltype(args)>(args)...);
  750|    578|              }
  751|    578|          }),
  752|    578|          m_storage(std::addressof(f))
  753|    578|    {
  754|    578|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    578|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    578|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    578|              else {
  749|    578|                  return obj(static_cast<decltype(args)>(args)...);
  750|    578|              }
  751|    578|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    578|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    578|        else if constexpr (std::is_object_v<T>) {
  688|    578|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    578|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    578|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    578|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    578|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    578|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    578|        {
  662|    578|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    578|    {
 5266|    578|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    578|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    578|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    578|    {
 5266|    578|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    578|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    578|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    578|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|    578|                          basic_contiguous_scan_context<char_type>>) {
 5875|    578|            auto rd = make_reader<T, char_type>();
 5876|    578|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|    578|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    578|    {
 5863|    578|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 578]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    578|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    578|                        .transform_error(make_eof_scan_error));
 5865|    578|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    578|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    578|    {
 5266|    578|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    578|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    578|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    578|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2875|   305k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   305k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   305k|          m_current(m_range.begin())
 2878|   305k|    {
 2879|   305k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   797k|    {
 2883|   797k|        return m_current;
 2884|   797k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   828k|    {
 2888|   828k|        return m_range.end();
 2889|   828k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   441k|{
 1221|       |    // TODO: optimize
 1222|   441k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   441k|    auto res = get_next_code_point(str);
 1224|   441k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   441k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   338k|    {
 2903|   338k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   338k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   338k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   338k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   338k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 338k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   338k|        }
 2909|   338k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   338k|    static_cast<    \
  |  |  929|   338k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   338k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  47.6k|    {
 2893|  47.6k|        return ranges::subrange{begin(), end()};
 2894|  47.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  1.86k|    {
 6037|  1.86k|        const bool need_skipped_width =
 6038|  1.86k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 52, False: 1.81k]
  |  Branch (6038:33): [True: 1.81k, False: 0]
  ------------------
 6039|  1.86k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.86k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 36, False: 1.82k]
  ------------------
 6043|  1.86k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 198, False: 1.62k]
  ------------------
 6044|    234|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    234|                             need_skipped_width);
 6046|    234|        }
 6047|  1.62k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.57k, False: 52]
  |  Branch (6047:56): [True: 1.12k, False: 450]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.12k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.12k, False: 0]
  ------------------
 6051|  1.12k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.12k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.12k|                                  .transform_error(make_eof_scan_error));
 6054|  1.12k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.12k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    502|        return result_type{rng.begin(), 0};
 6070|  1.62k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    234|{
 5951|    234|    using char_type = detail::char_t<Range>;
 5952|    234|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    234|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 234, False: 0]
  ------------------
 5955|    234|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    234|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    234|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 234]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    234|        auto max_width_view = take_width(range, max_width);
 5972|    234|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    234|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 234, False: 0]
  ------------------
 5975|    234|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    234|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    234|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    234|        : m_fptr([](storage fn,
  743|    234|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    234|              cvref<T> obj = *get<T>(fn);
  745|    234|              if constexpr (std::is_void_v<R>) {
  746|    234|                  obj(static_cast<decltype(args)>(args)...);
  747|    234|              }
  748|    234|              else {
  749|    234|                  return obj(static_cast<decltype(args)>(args)...);
  750|    234|              }
  751|    234|          }),
  752|    234|          m_storage(std::addressof(f))
  753|    234|    {
  754|    234|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    280|    {
  684|    280|        if constexpr (std::is_const_v<T>) {
  685|    280|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    280|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    280|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    234|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    234|        {
  667|    234|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    234|{
 1976|    234|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    234|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    234|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|    234|    else {
 1961|    234|        auto first = range.begin();
 1962|    314|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 280, False: 34]
  ------------------
 1963|    280|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 200, False: 80]
  ------------------
 1964|    200|                return first;
 1965|    200|            }
 1966|    280|        }
 1967|     34|        return first;
 1968|    234|    }
 1969|    234|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  2.48k|    {
 2810|  2.48k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  2.48k|                                      m_count};
 2812|  2.48k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  8.66k|    {
 2717|  8.66k|        return view;
 2718|  8.66k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2380|  2.48k|        : m_current(x), m_end(s), m_count(n)
 2381|  2.48k|    {
 2382|  2.48k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  1.44k|        {
 2781|  1.44k|            return !(y == x);
 2782|  1.44k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  3.69k|        {
 2770|  3.69k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 34, False: 3.65k]
  |  Branch (2770:39): [True: 34, False: 0]
  ------------------
 2771|  3.69k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 3.65k]
  ------------------
 2772|  3.69k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     34|    {
 2421|     34|        return m_multibyte_left;
 2422|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  3.69k|    {
 2816|  3.69k|        return sentinel<true>{m_base.get().end()};
 2817|  3.69k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  3.69k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  3.69k|    static_cast<    \
  |  |  929|  3.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  2.53k|    {
 2426|  2.53k|        return *m_current;
 2427|  2.53k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.20k|    {
 2435|  1.20k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.20k|        _increment_current();
 2437|  1.20k|        return *this;
 2438|  1.20k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.20k|    {
 2668|  1.20k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.20k, False: 0]
  ------------------
 2669|  1.20k|            auto cplen = _get_cp_length_at_current();
 2670|  1.20k|            m_multibyte_left = cplen - 1;
 2671|  1.20k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.20k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.20k|        ++m_current;
 2678|  1.20k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.20k|    {
 2639|  1.20k|        return static_cast<difference_type>(
 2640|  1.20k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.20k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.20k|    {
 2645|  1.20k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.20k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.20k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.20k, False: 0]
  ------------------
 2650|  1.20k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.20k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.20k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.20k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.36k|    {
 2832|  1.36k|        return take_width_view{r, n};
 2833|  1.36k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2799|  1.36k|        : m_base(base), m_count(count)
 2800|  1.36k|    {
 2801|  1.36k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.36k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.12k|{
 2951|  1.12k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.12k, False: 0]
  ------------------
 2952|  1.12k|        auto it = read_while_classic_space(range);
 2953|  1.12k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.12k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.12k|        return it;
 2959|  1.12k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.12k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.12k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  1.12k|    else {
 2126|  1.12k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|  1.12k|        return read_while_code_point(
 2138|  1.12k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.12k|    }
 2140|  1.12k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.12k|{
 2082|  1.12k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.12k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.12k|{
 2061|  1.12k|    auto it = range.begin();
 2062|  1.12k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.12k, False: 0]
  ------------------
 2063|  1.12k|        const auto val =
 2064|  1.12k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.12k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.12k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.12k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.12k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.12k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.12k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.12k, False: 0]
  ------------------
 2069|  1.12k|                return it;
 2070|  1.12k|            }
 2071|  1.12k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.12k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  1.12k|{
 1899|  1.12k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.12k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.12k|    auto it = range.begin();
 1903|  1.12k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.12k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.12k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.12k, False: 0]
  ------------------
 1912|  1.12k|        ++it;
 1913|  1.12k|        return {it, string_type(1, *range.begin())};
 1914|  1.12k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.12k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.25k|{
  944|  2.25k|    return is_range_eof(r.begin(), r.end());
  945|  2.25k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.25k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.25k|    {
  937|  2.25k|        return begin == end;
  938|  2.25k|    }
  939|  2.25k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|  1.12k|    {
 1890|  1.12k|        return !codepoint.empty();
 1891|  1.12k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.12k|        : m_fptr([](storage fn,
  743|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12k|              cvref<T> obj = *get<T>(fn);
  745|  1.12k|              if constexpr (std::is_void_v<R>) {
  746|  1.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.12k|              }
  748|  1.12k|              else {
  749|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12k|              }
  751|  1.12k|          }),
  752|  1.12k|          m_storage(std::addressof(f))
  753|  1.12k|    {
  754|  1.12k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.12k|              else {
  749|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12k|              }
  751|  1.12k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.12k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.12k|        else if constexpr (std::is_object_v<T>) {
  688|  1.12k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.12k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.12k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.12k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.12k|        {
  662|  1.12k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.12k|{
  950|  1.12k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.12k|    return eof_error::good;
  954|  1.12k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  5.01k|    {
 2413|  5.01k|        return m_current;
 2414|  5.01k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  5.05k|    {
 2417|  5.05k|        return m_count;
 2418|  5.05k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  13.9k|    {
 6037|  13.9k|        const bool need_skipped_width =
 6038|  13.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 6.96k, False: 6.96k]
  |  Branch (6038:33): [True: 0, False: 6.96k]
  ------------------
 6039|  13.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  13.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 54, False: 13.8k]
  ------------------
 6043|  13.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 270, False: 13.6k]
  ------------------
 6044|    324|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    324|                             need_skipped_width);
 6046|    324|        }
 6047|  13.6k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 13.2k, False: 352]
  |  Branch (6047:56): [True: 2.62k, False: 10.6k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.62k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.62k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  5.25k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  5.25k|                            make_eof_scan_error));
 6058|       |
 6059|  5.25k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.95k, False: 676]
  ------------------
 6060|  1.95k|                return result_type{
 6061|  1.95k|                    it,
 6062|  1.95k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.95k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.95k|                                             .view())};
 6065|  1.95k|            }
 6066|    676|            return result_type{it, 0};
 6067|  5.25k|        }
 6068|       |
 6069|  10.9k|        return result_type{rng.begin(), 0};
 6070|  13.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  2.92k|    {
 6079|  2.92k|        const bool need_skipped_width =
 6080|  2.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 1.30k, False: 1.61k]
  |  Branch (6080:33): [True: 482, False: 1.13k]
  ------------------
 6081|  2.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 72, False: 2.84k]
  ------------------
 6084|  2.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 154, False: 2.69k]
  ------------------
 6085|    226|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 66, False: 160]
  ------------------
 6086|    226|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 44, False: 22]
  ------------------
 6087|     44|                return result_type{rng.begin(), 0};
 6088|     44|            }
 6089|    182|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    182|                             specs.fill, need_skipped_width);
 6091|    226|        }
 6092|  2.69k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.67k, False: 18]
  ------------------
 6093|  2.69k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 2.43k, False: 240]
  ------------------
 6094|  2.69k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 1.15k, False: 1.28k]
  |  Branch (6094:35): [True: 1.10k, False: 46]
  ------------------
 6095|  2.43k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 356, False: 976]
  ------------------
 6096|  1.36k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 258, False: 98]
  ------------------
 6097|  1.36k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 260, False: 1.10k]
  ------------------
 6098|    260|                const auto initial_width =
 6099|    260|                    specs.precision - prefix_width - value_width;
 6100|    260|                auto max_width_view = take_width(rng, initial_width);
 6101|    260|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    260|                                  .transform_error(make_eof_scan_error));
 6103|    260|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    260|            }
 6105|  2.20k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  2.20k|                            make_eof_scan_error));
 6107|       |
 6108|  2.20k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 1.10k, False: 0]
  ------------------
 6109|  1.10k|                return result_type{
 6110|  1.10k|                    it,
 6111|  1.10k|                    calculate_text_width(make_contiguous_buffer(
 6112|  1.10k|                                             ranges::subrange{rng.begin(), it})
 6113|  1.10k|                                             .view())};
 6114|  1.10k|            }
 6115|      0|            return result_type{it, 0};
 6116|  2.20k|        }
 6117|  1.33k|        return result_type{rng.begin(), 0};
 6118|  2.69k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  4.30k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.30k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.30k|            auto rd = make_reader<T, char_type>();
 6198|  4.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.75k, False: 556]
  |  |  ------------------
  ------------------
 6199|  3.75k|                return unexpected(e);
 6200|  3.75k|            }
 6201|       |
 6202|    556|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    556|    {
 6124|    556|        const bool need_skipped_width =
 6125|    556|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 256, False: 300]
  |  Branch (6125:33): [True: 176, False: 124]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    556|        auto it = rng.begin();
 6129|    556|        std::ptrdiff_t prefix_width = 0;
 6130|    556|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 180, False: 376]
  ------------------
 6131|    180|            auto max_width_view = take_width(rng, specs.precision);
 6132|    180|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    180|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    180|            it = prefix_result.first.base();
 6135|    180|            prefix_width = prefix_result.second;
 6136|    180|        }
 6137|    376|        else {
 6138|    376|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    376|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    376|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    376|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    376|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    376|            std::tie(it, prefix_width) = prefix_result;
 6140|    376|        }
 6141|    556|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    556|        std::ptrdiff_t value_width = 0;
 6145|    556|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 180, False: 376]
  ------------------
 6146|    180|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 178]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    178|            const auto initial_width = specs.precision - prefix_width;
 6154|    178|            auto max_width_view =
 6155|    178|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    178|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 178, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    178|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    178|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    178|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    178|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    178|    }                                                  \
  |  |  |  | 3671|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    376|        else {
 6161|    376|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    376|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    376|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 376, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    376|    }                                                  \
  |  | 3671|    376|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  4.30k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.30k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.30k|            auto rd = make_reader<T, char_type>();
 6198|  4.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.75k, False: 556]
  |  |  ------------------
  ------------------
 6199|  3.75k|                return unexpected(e);
 6200|  3.75k|            }
 6201|       |
 6202|    556|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    556|    {
 6124|    556|        const bool need_skipped_width =
 6125|    556|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 256, False: 300]
  |  Branch (6125:33): [True: 176, False: 124]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    556|        auto it = rng.begin();
 6129|    556|        std::ptrdiff_t prefix_width = 0;
 6130|    556|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 180, False: 376]
  ------------------
 6131|    180|            auto max_width_view = take_width(rng, specs.precision);
 6132|    180|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    180|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    180|            it = prefix_result.first.base();
 6135|    180|            prefix_width = prefix_result.second;
 6136|    180|        }
 6137|    376|        else {
 6138|    376|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    376|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    376|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    376|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    376|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    376|            std::tie(it, prefix_width) = prefix_result;
 6140|    376|        }
 6141|    556|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    556|        std::ptrdiff_t value_width = 0;
 6145|    556|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 180, False: 376]
  ------------------
 6146|    180|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 178]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    178|            const auto initial_width = specs.precision - prefix_width;
 6154|    178|            auto max_width_view =
 6155|    178|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    178|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 178, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    178|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    178|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    178|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    178|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    178|    }                                                  \
  |  |  |  | 3671|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    376|        else {
 6161|    376|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    376|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    376|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 376, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    376|    }                                                  \
  |  | 3671|    376|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  4.25k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.25k|            auto rd = make_reader<T, char_type>();
 6198|  4.25k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.77k, False: 478]
  |  |  ------------------
  ------------------
 6199|  3.77k|                return unexpected(e);
 6200|  3.77k|            }
 6201|       |
 6202|    478|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.25k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  4.25k|    {
 5753|  4.25k|        reader_error_handler eh{};
 5754|  4.25k|        detail::check_pointer_type_specs(specs, eh);
 5755|  4.25k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.77k, False: 478]
  |  |  ------------------
  ------------------
 5756|  3.77k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  3.77k|        }
 5758|    478|        return {};
 5759|  4.25k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    478|    {
 6124|    478|        const bool need_skipped_width =
 6125|    478|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 250, False: 228]
  |  Branch (6125:33): [True: 138, False: 90]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    478|        auto it = rng.begin();
 6129|    478|        std::ptrdiff_t prefix_width = 0;
 6130|    478|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 142, False: 336]
  ------------------
 6131|    142|            auto max_width_view = take_width(rng, specs.precision);
 6132|    142|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    142|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    142|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    142|            it = prefix_result.first.base();
 6135|    142|            prefix_width = prefix_result.second;
 6136|    142|        }
 6137|    336|        else {
 6138|    336|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    336|            std::tie(it, prefix_width) = prefix_result;
 6140|    336|        }
 6141|    478|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    478|        std::ptrdiff_t value_width = 0;
 6145|    478|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 142, False: 336]
  ------------------
 6146|    142|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 140]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    140|            const auto initial_width = specs.precision - prefix_width;
 6154|    140|            auto max_width_view =
 6155|    140|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    140|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 140, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    140|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    336|        else {
 6161|    336|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 336, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    336|    }                                                  \
  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    140|    {
 5782|    140|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    140|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    140|        return read_default(range, value, loc);
 5784|    140|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    140|    {
 5765|    140|        detail::format_specs specs{};
 5766|    140|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    140|        std::uintptr_t intvalue{};
 5769|    140|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 140, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    140|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    140|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    336|    {
 5782|    336|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    336|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    336|        return read_default(range, value, loc);
 5784|    336|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  4.30k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.30k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.30k|            auto rd = make_reader<T, char_type>();
 6198|  4.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.66k, False: 644]
  |  |  ------------------
  ------------------
 6199|  3.66k|                return unexpected(e);
 6200|  3.66k|            }
 6201|       |
 6202|    644|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.30k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.30k|    {
 3040|  4.30k|        reader_error_handler eh{};
 3041|  4.30k|        get_derived().check_specs_impl(specs, eh);
 3042|  4.30k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.66k, False: 644]
  |  |  ------------------
  ------------------
 3043|  3.66k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  3.66k|        }
 3045|    644|        return {};
 3046|  4.30k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  4.30k|    {
 3051|  4.30k|        return static_cast<Derived&>(*this);
 3052|  4.30k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  4.30k|    {
 5497|  4.30k|        detail::check_bool_type_specs(specs, eh);
 5498|  4.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    644|    {
 6124|    644|        const bool need_skipped_width =
 6125|    644|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 270, False: 374]
  |  Branch (6125:33): [True: 206, False: 168]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    644|        auto it = rng.begin();
 6129|    644|        std::ptrdiff_t prefix_width = 0;
 6130|    644|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 212, False: 432]
  ------------------
 6131|    212|            auto max_width_view = take_width(rng, specs.precision);
 6132|    212|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 212]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    212|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    212|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    212|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    212|            it = prefix_result.first.base();
 6135|    212|            prefix_width = prefix_result.second;
 6136|    212|        }
 6137|    432|        else {
 6138|    432|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    432|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    432|            std::tie(it, prefix_width) = prefix_result;
 6140|    432|        }
 6141|    644|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    644|        std::ptrdiff_t value_width = 0;
 6145|    644|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 212, False: 432]
  ------------------
 6146|    212|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 208]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    208|            const auto initial_width = specs.precision - prefix_width;
 6154|    208|            auto max_width_view =
 6155|    208|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    208|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 208, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    208|    }                                                  \
  |  |  |  | 3671|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    432|        else {
 6161|    432|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 432, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    432|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    432|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    432|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    432|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    432|    }                                                  \
  |  | 3671|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    208|    {
 5516|    208|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    208|#if !SCN_DISABLE_LOCALE
 5519|    208|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 26, False: 182]
  ------------------
 5520|     26|            return rd.read_localized(range, loc, value);
 5521|     26|        }
 5522|    182|#endif
 5523|       |
 5524|    182|        return rd.read_classic(range, value);
 5525|    208|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    640|    {
 5529|    640|        SCN_GCC_COMPAT_PUSH
 5530|    640|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    640|        switch (specs.type) {
 5533|     84|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 84, False: 556]
  ------------------
 5534|     84|                return bool_reader_base::allow_text;
 5535|       |
 5536|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 14, False: 626]
  ------------------
 5537|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 632]
  ------------------
 5538|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 8, False: 632]
  ------------------
 5539|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 12, False: 628]
  ------------------
 5540|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 10, False: 630]
  ------------------
 5541|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 12, False: 628]
  ------------------
 5542|     64|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    492|            default:
  ------------------
  |  Branch (5544:13): [True: 492, False: 148]
  ------------------
 5545|    492|                return bool_reader_base::allow_text |
 5546|    492|                       bool_reader_base::allow_numeric;
 5547|    640|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    640|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     26|    {
 5428|     26|        scan_error err{scan_error::invalid_scanned_value,
 5429|     26|                       "Failed to read boolean"};
 5430|       |
 5431|     26|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 20, False: 6]
  ------------------
 5432|     20|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 20]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     20|            else {
 5436|     20|                err = r.error();
 5437|     20|            }
 5438|     20|        }
 5439|       |
 5440|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 16, False: 10]
  ------------------
 5441|     16|            auto stdloc = loc.get<std::locale>();
 5442|     16|            const auto& numpunct =
 5443|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     16|            const auto truename = numpunct.truename();
 5445|     16|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     16|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 16]
  ------------------
 5448|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     16|            else {
 5452|     16|                err = r.error();
 5453|     16|            }
 5454|     16|        }
 5455|       |
 5456|     26|        return unexpected(err);
 5457|     26|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    178|    {
 5384|    178|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 178]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    178|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 178]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    178|        return unexpected_scan_error(
 5394|    178|            scan_error::invalid_scanned_value,
 5395|    178|            "Failed to read numeric boolean value: No match");
 5396|    178|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    356|{
 2146|    356|    auto it = read_code_unit(range);
 2147|    356|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    356|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  ------------------
  ------------------
 2152|    356|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    356|        return unexpected(parse_error::error);
 2154|    356|    }
 2155|       |
 2156|      0|    return *it;
 2157|    356|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     16|    {
 5468|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     16|        const auto shorter = std::pair{
 5470|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 16, False: 0]
  ------------------
 5471|     16|        const auto longer = std::pair{
 5472|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 16]
  ------------------
 5473|       |
 5474|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 16]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 16]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     16|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     16|                                     "read_textual: No match");
 5485|     16|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     32|{
 2179|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    356|{
 1857|    356|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|    356|    else {
 1868|    356|        auto it = range.begin();
 1869|    356|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 356]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.77k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.49k, False: 286]
  ------------------
 1874|  1.49k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 70, False: 1.42k]
  ------------------
 1875|     70|                return unexpected(eof_error::eof);
 1876|     70|            }
 1877|  1.49k|        }
 1878|       |
 1879|    286|        return it;
 1880|    356|    }
 1881|    356|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    356|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    356|    else {
 1115|    356|        return 0;
 1116|    356|    }
 1117|    356|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    182|    {
 5355|    182|        scan_error err{scan_error::invalid_scanned_value,
 5356|    182|                       "Failed to read boolean"};
 5357|       |
 5358|    182|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 158, False: 24]
  ------------------
 5359|    158|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 158]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    158|            else {
 5363|    158|                err = r.error();
 5364|    158|            }
 5365|    158|        }
 5366|       |
 5367|    182|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 162, False: 20]
  ------------------
 5368|    162|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 162]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    162|            else {
 5372|    162|                err = r.error();
 5373|    162|            }
 5374|    162|        }
 5375|       |
 5376|    182|        return unexpected(err);
 5377|    182|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    162|    {
 5402|    162|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 162]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    162|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 162]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    162|        return unexpected_scan_error(
 5412|    162|            scan_error::invalid_scanned_value,
 5413|    162|            "Failed to read textual boolean value: No match");
 5414|    162|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    324|{
 2194|    324|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     48|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    276|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    276|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|       |            return unexpected(parse_error::error);
 2202|       |        }
 2203|       |        return it;
 2204|       |    }
 2205|    276|    else {
 2206|    276|        auto range_it = range.begin();
 2207|    276|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 276, False: 0]
  ------------------
 2208|    276|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 276, False: 0]
  |  |  ------------------
  ------------------
 2209|    276|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    276|                return unexpected(parse_error::error);
 2211|    276|            }
 2212|    276|        }
 2213|      0|        return it;
 2214|    276|    }
 2215|    276|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    432|    {
 5516|    432|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    432|#if !SCN_DISABLE_LOCALE
 5519|    432|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 30, False: 402]
  ------------------
 5520|     30|            return rd.read_localized(range, loc, value);
 5521|     30|        }
 5522|    402|#endif
 5523|       |
 5524|    402|        return rd.read_classic(range, value);
 5525|    432|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     30|    {
 5428|     30|        scan_error err{scan_error::invalid_scanned_value,
 5429|     30|                       "Failed to read boolean"};
 5430|       |
 5431|     30|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 24, False: 6]
  ------------------
 5432|     24|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 24]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     24|            else {
 5436|     24|                err = r.error();
 5437|     24|            }
 5438|     24|        }
 5439|       |
 5440|     30|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 16, False: 14]
  ------------------
 5441|     16|            auto stdloc = loc.get<std::locale>();
 5442|     16|            const auto& numpunct =
 5443|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     16|            const auto truename = numpunct.truename();
 5445|     16|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     16|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 16]
  ------------------
 5448|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     16|            else {
 5452|     16|                err = r.error();
 5453|     16|            }
 5454|     16|        }
 5455|       |
 5456|     30|        return unexpected(err);
 5457|     30|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     16|    {
 5468|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     16|        const auto shorter = std::pair{
 5470|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 16, False: 0]
  ------------------
 5471|     16|        const auto longer = std::pair{
 5472|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 16]
  ------------------
 5473|       |
 5474|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 16]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 16]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     16|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     16|                                     "read_textual: No match");
 5485|     16|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     32|{
 2179|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     30|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     30|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     30|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     30|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2185|     30|        return unexpected(parse_error::error);
 2186|     30|    }
 2187|      0|    return it;
 2188|     30|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  4.25k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.25k|            auto rd = make_reader<T, char_type>();
 6198|  4.25k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.73k, False: 514]
  |  |  ------------------
  ------------------
 6199|  3.73k|                return unexpected(e);
 6200|  3.73k|            }
 6201|       |
 6202|    514|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.25k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    514|    {
 6124|    514|        const bool need_skipped_width =
 6125|    514|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 252, False: 262]
  |  Branch (6125:33): [True: 156, False: 106]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    514|        auto it = rng.begin();
 6129|    514|        std::ptrdiff_t prefix_width = 0;
 6130|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 160, False: 354]
  ------------------
 6131|    160|            auto max_width_view = take_width(rng, specs.precision);
 6132|    160|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    160|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    160|            it = prefix_result.first.base();
 6135|    160|            prefix_width = prefix_result.second;
 6136|    160|        }
 6137|    354|        else {
 6138|    354|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    354|            std::tie(it, prefix_width) = prefix_result;
 6140|    354|        }
 6141|    514|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    514|        std::ptrdiff_t value_width = 0;
 6145|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 160, False: 354]
  ------------------
 6146|    160|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 158]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    158|            const auto initial_width = specs.precision - prefix_width;
 6154|    158|            auto max_width_view =
 6155|    158|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    158|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    138|            it = w_it.base();
 6158|    138|            value_width = initial_width - w_it.count();
 6159|    138|        }
 6160|    354|        else {
 6161|    354|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 334]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     20|    }                                                  \
  |  | 3671|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    334|                                             specs, value, loc));
 6163|       |
 6164|    334|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 246, False: 88]
  ------------------
 6165|    246|                value_width = calculate_text_width(
 6166|    246|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    246|                        .view());
 6168|    246|            }
 6169|    334|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    472|        std::ptrdiff_t postfix_width = 0;
 6173|    472|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 472, False: 0]
  ------------------
 6174|    472|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 472]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    472|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    472|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    472|                                 value_width));
 6178|    472|            std::tie(it, postfix_width) = postfix_result;
 6179|    472|        }
 6180|       |
 6181|    472|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    472|                                                 value_width, postfix_width);
 6183|    472|            !e) {
  ------------------
  |  Branch (6183:13): [True: 246, False: 226]
  ------------------
 6184|    246|            return unexpected(e);
 6185|    246|        }
 6186|       |
 6187|    226|        return it;
 6188|    472|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  4.30k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.30k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.30k|            auto rd = make_reader<T, char_type>();
 6198|  4.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.78k, False: 528]
  |  |  ------------------
  ------------------
 6199|  3.78k|                return unexpected(e);
 6200|  3.78k|            }
 6201|       |
 6202|    528|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    528|    {
 6124|    528|        const bool need_skipped_width =
 6125|    528|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 260, False: 268]
  |  Branch (6125:33): [True: 160, False: 108]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    528|        auto it = rng.begin();
 6129|    528|        std::ptrdiff_t prefix_width = 0;
 6130|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 166, False: 362]
  ------------------
 6131|    166|            auto max_width_view = take_width(rng, specs.precision);
 6132|    166|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    166|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    166|            it = prefix_result.first.base();
 6135|    166|            prefix_width = prefix_result.second;
 6136|    166|        }
 6137|    362|        else {
 6138|    362|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    362|            std::tie(it, prefix_width) = prefix_result;
 6140|    362|        }
 6141|    528|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    528|        std::ptrdiff_t value_width = 0;
 6145|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 166, False: 362]
  ------------------
 6146|    166|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 162]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    162|            const auto initial_width = specs.precision - prefix_width;
 6154|    162|            auto max_width_view =
 6155|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    162|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    362|        else {
 6161|    362|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    362|    }                                                  \
  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  4.25k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.25k|            auto rd = make_reader<T, char_type>();
 6198|  4.25k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 4.17k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  4.17k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.25k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  4.17k|    {
 6124|  4.17k|        const bool need_skipped_width =
 6125|  4.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.82k, False: 2.34k]
  |  Branch (6125:33): [True: 266, False: 2.08k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.17k|        auto it = rng.begin();
 6129|  4.17k|        std::ptrdiff_t prefix_width = 0;
 6130|  4.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 274, False: 3.89k]
  ------------------
 6131|    274|            auto max_width_view = take_width(rng, specs.precision);
 6132|    274|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    274|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    274|            it = prefix_result.first.base();
 6135|    274|            prefix_width = prefix_result.second;
 6136|    274|        }
 6137|  3.89k|        else {
 6138|  3.89k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.89k|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.89k|        }
 6141|  4.17k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.17k|        std::ptrdiff_t value_width = 0;
 6145|  4.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 274, False: 3.89k]
  ------------------
 6146|    274|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 268]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    268|            const auto initial_width = specs.precision - prefix_width;
 6154|    268|            auto max_width_view =
 6155|    268|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    268|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    156|            it = w_it.base();
 6158|    156|            value_width = initial_width - w_it.count();
 6159|    156|        }
 6160|  3.89k|        else {
 6161|  3.89k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 976]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.92k|    }                                                  \
  |  | 3671|  3.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    976|                                             specs, value, loc));
 6163|       |
 6164|    976|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 550, False: 426]
  ------------------
 6165|    550|                value_width = calculate_text_width(
 6166|    550|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    550|                        .view());
 6168|    550|            }
 6169|    976|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.13k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.13k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 816, False: 316]
  ------------------
 6174|    816|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    816|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    816|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    816|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 816]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    816|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    816|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    816|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    816|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    816|                                 value_width));
 6178|    816|            std::tie(it, postfix_width) = postfix_result;
 6179|    816|        }
 6180|       |
 6181|  1.13k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.13k|                                                 value_width, postfix_width);
 6183|  1.13k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 320, False: 812]
  ------------------
 6184|    320|            return unexpected(e);
 6185|    320|        }
 6186|       |
 6187|    812|        return it;
 6188|  1.13k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  4.25k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.25k|            auto rd = make_reader<T, char_type>();
 6198|  4.25k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 4.17k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  4.17k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.25k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  4.17k|    {
 6124|  4.17k|        const bool need_skipped_width =
 6125|  4.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.82k, False: 2.34k]
  |  Branch (6125:33): [True: 266, False: 2.08k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.17k|        auto it = rng.begin();
 6129|  4.17k|        std::ptrdiff_t prefix_width = 0;
 6130|  4.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 274, False: 3.89k]
  ------------------
 6131|    274|            auto max_width_view = take_width(rng, specs.precision);
 6132|    274|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    274|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    274|            it = prefix_result.first.base();
 6135|    274|            prefix_width = prefix_result.second;
 6136|    274|        }
 6137|  3.89k|        else {
 6138|  3.89k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.89k|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.89k|        }
 6141|  4.17k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.17k|        std::ptrdiff_t value_width = 0;
 6145|  4.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 274, False: 3.89k]
  ------------------
 6146|    274|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 268]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    268|            const auto initial_width = specs.precision - prefix_width;
 6154|    268|            auto max_width_view =
 6155|    268|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    268|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    156|            it = w_it.base();
 6158|    156|            value_width = initial_width - w_it.count();
 6159|    156|        }
 6160|  3.89k|        else {
 6161|  3.89k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 976]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.92k|    }                                                  \
  |  | 3671|  3.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    976|                                             specs, value, loc));
 6163|       |
 6164|    976|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 550, False: 426]
  ------------------
 6165|    550|                value_width = calculate_text_width(
 6166|    550|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    550|                        .view());
 6168|    550|            }
 6169|    976|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.13k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.13k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 816, False: 316]
  ------------------
 6174|    816|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    816|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    816|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    816|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 816]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    816|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    816|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    816|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    816|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    816|                                 value_width));
 6178|    816|            std::tie(it, postfix_width) = postfix_result;
 6179|    816|        }
 6180|       |
 6181|  1.13k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.13k|                                                 value_width, postfix_width);
 6183|  1.13k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 320, False: 812]
  ------------------
 6184|    320|            return unexpected(e);
 6185|    320|        }
 6186|       |
 6187|    812|        return it;
 6188|  1.13k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  4.25k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.25k|            auto rd = make_reader<T, char_type>();
 6198|  4.25k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 4.17k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  4.17k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  4.25k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  4.17k|    {
 6124|  4.17k|        const bool need_skipped_width =
 6125|  4.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.82k, False: 2.34k]
  |  Branch (6125:33): [True: 266, False: 2.08k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.17k|        auto it = rng.begin();
 6129|  4.17k|        std::ptrdiff_t prefix_width = 0;
 6130|  4.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 274, False: 3.89k]
  ------------------
 6131|    274|            auto max_width_view = take_width(rng, specs.precision);
 6132|    274|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    274|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    274|            it = prefix_result.first.base();
 6135|    274|            prefix_width = prefix_result.second;
 6136|    274|        }
 6137|  3.89k|        else {
 6138|  3.89k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.89k|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.89k|        }
 6141|  4.17k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.17k|        std::ptrdiff_t value_width = 0;
 6145|  4.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 274, False: 3.89k]
  ------------------
 6146|    274|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 268]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    268|            const auto initial_width = specs.precision - prefix_width;
 6154|    268|            auto max_width_view =
 6155|    268|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    268|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    156|            it = w_it.base();
 6158|    156|            value_width = initial_width - w_it.count();
 6159|    156|        }
 6160|  3.89k|        else {
 6161|  3.89k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 976]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.92k|    }                                                  \
  |  | 3671|  3.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    976|                                             specs, value, loc));
 6163|       |
 6164|    976|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 550, False: 426]
  ------------------
 6165|    550|                value_width = calculate_text_width(
 6166|    550|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    550|                        .view());
 6168|    550|            }
 6169|    976|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.13k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.13k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 816, False: 316]
  ------------------
 6174|    816|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    816|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    816|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    816|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 816]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    816|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    816|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    816|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    816|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    816|                                 value_width));
 6178|    816|            std::tie(it, postfix_width) = postfix_result;
 6179|    816|        }
 6180|       |
 6181|  1.13k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.13k|                                                 value_width, postfix_width);
 6183|  1.13k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 320, False: 812]
  ------------------
 6184|    320|            return unexpected(e);
 6185|    320|        }
 6186|       |
 6187|    812|        return it;
 6188|  1.13k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    642|    {
 3492|    642|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    642|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|    642|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 642]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.28k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.28k|                parse_integer_digits_without_thsep(
 3511|  1.28k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.28k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.28k|        auto buf = make_contiguous_buffer(
 3515|  1.28k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.28k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 642, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    642|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    642|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    642|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    642|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    642|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.28k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    642|    {
 3492|    642|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    642|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    642|        if constexpr (!std::is_signed_v<T>) {
 3496|    642|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 642]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    642|        }
 3503|       |
 3504|    642|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 642]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.28k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.28k|                parse_integer_digits_without_thsep(
 3511|  1.28k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.28k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.28k|        auto buf = make_contiguous_buffer(
 3515|  1.28k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.28k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 642, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    642|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    642|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    642|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    642|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    642|    }                                                  \
  |  |  |  | 3671|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.28k|    }

LLVMFuzzerTestOneInput:
   68|  8.48k|{
   69|  8.48k|    scn::fuzz::run(data, size);
   70|  8.48k|    return 0;
   71|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  8.48k|{
   52|  8.48k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 8.48k]
  |  Branch (52:35): [True: 0, False: 8.48k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  8.48k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  8.48k|    run_for_source(sv);
   59|  8.48k|    run_for_source(wsv_reinterpret);
   60|  8.48k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 8.48k, False: 0]
  ------------------
   61|  8.48k|        run_for_source(wsv_transcode);
   62|  8.48k|    }
   63|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  8.48k|{
   37|  8.48k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.48k|    run_for_type<char_type>(source);
   40|  8.48k|    run_for_type<int>(source);
   41|  8.48k|    run_for_type<unsigned>(source);
   42|  8.48k|    run_for_type<double>(source);
   43|  8.48k|    run_for_type<bool>(source);
   44|  8.48k|    run_for_type<void*>(source);
   45|  8.48k|    run_for_type<std::string>(source);
   46|  8.48k|    run_for_type<std::wstring>(source);
   47|  8.48k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  8.48k|{
   25|  8.48k|    {
   26|  8.48k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.48k|    }
   28|  8.48k|    {
   29|  8.48k|        auto _ =
   30|  8.48k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.48k|    }
   32|  8.48k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  16.9k|{
   37|  16.9k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  16.9k|    run_for_type<char_type>(source);
   40|  16.9k|    run_for_type<int>(source);
   41|  16.9k|    run_for_type<unsigned>(source);
   42|  16.9k|    run_for_type<double>(source);
   43|  16.9k|    run_for_type<bool>(source);
   44|  16.9k|    run_for_type<void*>(source);
   45|  16.9k|    run_for_type<std::string>(source);
   46|  16.9k|    run_for_type<std::wstring>(source);
   47|  16.9k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  16.9k|{
   25|  16.9k|    {
   26|  16.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  16.9k|    }
   28|  16.9k|    {
   29|  16.9k|        auto _ =
   30|  16.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  16.9k|    }
   32|  16.9k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  8.48k|{
   52|  8.48k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  8.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  8.48k|    string_buffer.resize(size);
   56|  8.48k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  8.48k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  8.48k|    const auto wsv_reinterpret_size =
   61|  8.48k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 93, False: 8.38k]
  ------------------
   62|  8.48k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  8.48k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  8.48k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  8.48k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  8.48k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  8.48k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  8.48k|}

