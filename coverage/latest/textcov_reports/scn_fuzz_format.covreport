_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  865|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.74M|{
 4068|  2.74M|    if constexpr (sizeof(U) == 1) {
 4069|  2.74M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.74M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.74M|{
 4032|  2.74M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.74M|    SCN_GCC_COMPAT_PUSH
 4035|  2.74M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.74M|    constexpr char lengths[] =
 4037|  2.74M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.74M|        "\1\1\1\1\1\1\1\1"
 4039|  2.74M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.74M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.74M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.74M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.74M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.74M|    SCN_GCC_COMPAT_POP
 4046|  2.74M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.53M|{
 4274|  2.53M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.53M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.53M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.53M|{
 4087|  2.53M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.53M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.53M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.53M|    };
 4092|       |
 4093|  2.53M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.21M, False: 316k]
  ------------------
 4094|  2.21M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 84, False: 2.21M]
  ------------------
 4095|     84|            SCN_UNLIKELY_ATTR
 4096|     84|            return invalid_code_point;
 4097|     84|        }
 4098|  2.21M|        return static_cast<char32_t>(input[0]);
 4099|  2.21M|    }
 4100|       |
 4101|   316k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 284k, False: 32.2k]
  ------------------
 4102|   284k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 18, False: 284k]
  ------------------
 4103|     18|            SCN_UNLIKELY_ATTR
 4104|     18|            return invalid_code_point;
 4105|     18|        }
 4106|   284k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 3.88k, False: 280k]
  ------------------
 4107|  3.88k|            SCN_UNLIKELY_ATTR
 4108|  3.88k|            return invalid_code_point;
 4109|  3.88k|        }
 4110|       |
 4111|   280k|        char32_t cp{};
 4112|   280k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   280k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   280k|        return cp;
 4115|   284k|    }
 4116|       |
 4117|  32.2k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 27.3k, False: 4.87k]
  ------------------
 4118|  27.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 18, False: 27.3k]
  ------------------
 4119|     18|            SCN_UNLIKELY_ATTR
 4120|     18|            return invalid_code_point;
 4121|     18|        }
 4122|  27.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 2.75k, False: 24.6k]
  ------------------
 4123|  27.3k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 308, False: 24.3k]
  ------------------
 4124|  3.06k|            SCN_UNLIKELY_ATTR
 4125|  3.06k|            return invalid_code_point;
 4126|  3.06k|        }
 4127|       |
 4128|  24.3k|        char32_t cp{};
 4129|  24.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  24.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  24.3k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  24.3k|        return cp;
 4133|  27.3k|    }
 4134|       |
 4135|  4.87k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 4.87k, False: 0]
  ------------------
 4136|  4.87k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 4.87k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  4.87k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 521, False: 4.35k]
  ------------------
 4141|    521|            SCN_UNLIKELY_ATTR
 4142|    521|            return invalid_code_point;
 4143|    521|        }
 4144|  4.35k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 686, False: 3.66k]
  ------------------
 4145|  4.35k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 384, False: 3.28k]
  ------------------
 4146|  4.35k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 270, False: 3.01k]
  ------------------
 4147|  1.34k|            SCN_UNLIKELY_ATTR
 4148|  1.34k|            return invalid_code_point;
 4149|  1.34k|        }
 4150|       |
 4151|  3.01k|        char32_t cp{};
 4152|  3.01k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  3.01k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  3.01k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  3.01k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  3.01k|        return cp;
 4157|  4.35k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   347k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   347k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   347k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  1.03M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  1.03M|    else {
 3966|  1.03M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  1.03M|                                       to_address(first), to_address(last)))};
 3968|  1.03M|    }
 3969|  1.03M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  3.14M|{
  316|  3.14M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  3.14M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  3.35M|{
  294|  3.35M|    return p;
  295|  3.35M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   633k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   633k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   633k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   633k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   633k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   633k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.75k|        : m_value(T{}), m_has_value(true)
  427|  8.75k|    {
  428|  8.75k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  78.7k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  78.7k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6344|  8.75k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.54k, False: 212]
  |  |  ------------------
  ------------------
 9623|  8.54k|        out = unexpected(in.error());
 9624|  8.54k|    }
 9625|    212|    else {
 9626|    212|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    212|    static_cast<    \
  |  |  935|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    212|    }
 9628|  8.75k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  78.7k|    {
 1740|  78.7k|        return has_value();
 1741|  78.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   157k|    {
  490|   157k|        return m_has_value;
  491|   157k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  75.8k|    {
 1746|  75.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  75.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  75.8k|        return this->get_unexpected().error();
 1748|  75.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  75.8k|    {
  473|  75.8k|        return m_unexpected;
  474|  75.8k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  2.23M|    {
  365|  2.23M|        return m_unexpected;
  366|  2.23M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.07M|        : m_unexpected(std::forward<Err>(e))
  350|  1.07M|    {
  351|  1.07M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.07M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.54k|        : base(unexpect, std::move(e.error())),
 1616|  8.54k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.54k|    {
 1618|  8.54k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.54k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.54k|          m_has_value(false)
  451|  8.54k|    {
  452|  8.54k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.37M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.37M|    {
  360|  1.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.37M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.54k|    {
 1316|  8.54k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.54k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.54k|    {
  903|  8.54k|        assign_common(std::move(other));
  904|  8.54k|        return *this;
  905|  8.54k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.54k|    {
  950|  8.54k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.54k, False: 0]
  ------------------
  951|  8.54k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.54k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.54k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.54k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.0k|    {
  490|  26.0k|        return m_has_value;
  491|  26.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.96k|    {
  456|  8.96k|        return m_value;
  457|  8.96k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.54k|    {
 1046|  8.54k|        this->destroy_value();
 1047|  8.54k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.54k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.54k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.54k|    {
  504|  8.54k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.54k|                                  std::forward<Args>(args)...);
  506|  8.54k|        m_has_value = false;
  507|  8.54k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   231k|{
  396|   231k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   231k|        T(std::forward<Args>(args)...);
  398|   231k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.54k|    {
  473|  8.54k|        return m_unexpected;
  474|  8.54k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.54k|    {
  481|  8.54k|        return std::move(m_unexpected);
  482|  8.54k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|  2.90k|    {
 6445|  2.90k|        m_range = std::forward<Other>(r);
 6446|  2.90k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  2.90k|    {
 1795|  2.90k|        return value();
 1796|  2.90k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  2.90k|    {
 1769|  2.90k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.90k|        return this->get_value();
 1771|  2.90k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.90k|    {
  456|  2.90k|        return m_value;
  457|  2.90k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9460|  39.3k|{
 9461|  39.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  39.3k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  39.3k|{
 9398|  39.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  39.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  39.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  39.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 37.9k, False: 1.45k]
  |  |  ------------------
  ------------------
 9402|  37.9k|        return unexpected(result.error());
 9403|  37.9k|    }
 9404|  1.45k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  39.3k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5380|  78.7k|{
 5381|  78.7k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  78.7k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  78.7k|                  "\n"
 5385|  78.7k|                  "Unsupported range type given as input to a scanning "
 5386|  78.7k|                  "function.\n"
 5387|  78.7k|                  "A range needs to have a character type (value type) "
 5388|  78.7k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  78.7k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  78.7k|                  "to be included.\n"
 5391|  78.7k|                  "See the scnlib documentation for more details.");
 5392|  78.7k|    static_assert(
 5393|  78.7k|        !std::is_same_v<T, custom_char_traits>,
 5394|  78.7k|        "\n"
 5395|  78.7k|        "Unsupported range type given as input to a scanning "
 5396|  78.7k|        "function.\n"
 5397|  78.7k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  78.7k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  78.7k|        "not supported.");
 5400|  78.7k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  78.7k|                  "\n"
 5402|  78.7k|                  "Unsupported range type given as input to a scanning "
 5403|  78.7k|                  "function.\n"
 5404|  78.7k|                  "file_marker_found cannot be used as an "
 5405|  78.7k|                  "source range type to scn::scan.\n"
 5406|  78.7k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  78.7k|                  "and do not provide an explicit source range, "
 5408|  78.7k|                  "or use scn::scan with a FILE* directly.");
 5409|  78.7k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  78.7k|                  "\n"
 5411|  78.7k|                  "Unsupported range type given as input to a scanning "
 5412|  78.7k|                  "function.\n"
 5413|  78.7k|                  "In order to be scannable, a range needs to satisfy "
 5414|  78.7k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  78.7k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  78.7k|                  "\n"
 5417|  78.7k|                  "Unsupported range type given as input to a scanning "
 5418|  78.7k|                  "function.\n"
 5419|  78.7k|                  "A range needs to model forward_range and have a valid "
 5420|  78.7k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  78.7k|                  "Examples of scannable ranges are std::string, "
 5422|  78.7k|                  "std::string_view, "
 5423|  78.7k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  78.7k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  78.7k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  78.7k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  78.7k|{
 5273|  78.7k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  78.7k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  78.7k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   241k|    {
 1740|   241k|        return has_value();
 1741|   241k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   484k|    {
  490|   484k|        return m_has_value;
  491|   484k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   238k|    {
 1746|   238k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   238k|        return this->get_unexpected().error();
 1748|   238k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   238k|    {
  473|   238k|        return m_unexpected;
  474|   238k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  75.8k|        : base(unexpect, std::move(e.error())),
 1616|  75.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  75.8k|    {
 1618|  75.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  75.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  75.8k|          m_has_value(false)
  451|  75.8k|    {
  452|  75.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  78.7k|    {
 1316|  78.7k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|  2.90k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  2.90k|                      ranges::iterator_t<SourceRange>>) {
 6677|  2.90k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  2.90k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.90k|    {
 2869|  2.90k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.90k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.90k|    {
 2850|  2.90k|        return decay_copy(t.begin());
 2851|  2.90k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   206k|{
 2094|   206k|    return SCN_FWD(t);
  ------------------
  |  |  936|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   206k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6661|  2.90k|{
 6662|  2.90k|    return ranges::end(source);
 6663|  2.90k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.90k|    {
 2926|  2.90k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.90k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.90k|    {
 2908|  2.90k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.90k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   525k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   525k|    static_cast<    \
  |  |  935|   525k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   525k|    static_cast<    \
  |  |  935|   525k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   525k|    {
 3466|   525k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.33k|    {
 1795|  4.33k|        return value();
 1796|  4.33k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  4.33k|    {
 1769|  4.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.33k|        return this->get_value();
 1771|  4.33k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  4.33k|    {
  456|  4.33k|        return m_value;
  457|  4.33k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  2.90k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.90k|    {
 1572|  2.90k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  2.90k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.90k|    {
  442|  2.90k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5824|  8.75k|{
 5825|  8.75k|    constexpr bool default_constructible_constraint =
 5826|  8.75k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  8.75k|    static_assert(default_constructible_constraint,
 5828|  8.75k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  8.75k|    constexpr bool destructible_constraint =
 5831|  8.75k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  8.75k|    static_assert(destructible_constraint,
 5833|  8.75k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  8.75k|    constexpr bool non_reference_constraint =
 5836|  8.75k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  8.75k|    static_assert(non_reference_constraint,
 5838|  8.75k|                  "Scan argument types must not be references");
 5839|       |
 5840|  8.75k|    constexpr bool movable_constraint =
 5841|  8.75k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  8.75k|    static_assert(movable_constraint,
 5843|  8.75k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  8.75k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  8.75k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  8.75k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5678|  8.75k|    {
 5679|       |        if constexpr (std::is_same_v<char_type, char> &&
 5680|  8.75k|                      !is_type_disabled<char_type>) {
 5681|  8.75k|            return val;
 5682|       |        }
 5683|       |        else if constexpr (is_type_disabled<char_type>) {
 5684|       |            return unscannable_disabled{val};
 5685|       |        }
 5686|       |        else {
 5687|       |            SCN_UNUSED(val);
 5688|       |            return unscannable_char{};
 5689|       |        }
 5690|  8.75k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5778|  8.75k|{
 5779|  8.75k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  8.75k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  8.75k|    constexpr bool scannable_char =
 5783|  8.75k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  8.75k|    static_assert(scannable_char,
 5785|  8.75k|                  "Cannot scan an argument of an unsupported character "
 5786|  8.75k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  8.75k|    constexpr bool scannable_const =
 5789|  8.75k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  8.75k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  8.75k|    constexpr bool scannable_disabled =
 5793|  8.75k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  8.75k|    static_assert(scannable_disabled,
 5795|  8.75k|                  "Cannot scan an argument that has been disabled by "
 5796|  8.75k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  8.75k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  8.75k|    static_assert(
 5800|  8.75k|        scannable,
 5801|  8.75k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  8.75k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  8.75k|    return arg_value{arg};
 5805|  8.75k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5562|  8.75k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  8.75k|    {
 5564|  8.75k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1814|  8.96k|    {
 1815|  8.96k|        return &value();
 1816|  8.96k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.96k|    {
 1769|  8.96k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.96k|        return this->get_value();
 1771|  8.96k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6353|  8.75k|    {
 6354|  8.75k|        return m_values;
 6355|  8.75k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|  78.7k|        : m_desc(desc), m_builtin_values(data)
 6188|  78.7k|    {
 6189|  78.7k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|  78.7k|{
 8441|  78.7k|    return s;
 8442|  78.7k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|  78.7k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9478|  39.3k|{
 9479|  39.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  39.3k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  39.3k|{
 9414|  39.3k|#if !SCN_DISABLE_LOCALE
 9415|  39.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  39.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  39.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  39.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  39.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  39.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 37.9k, False: 1.45k]
  |  |  ------------------
  ------------------
 9422|  37.9k|        return unexpected(result.error());
 9423|  37.9k|    }
 9424|  1.45k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  39.3k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.75k|        : m_value(T{}), m_has_value(true)
  427|  8.75k|    {
  428|  8.75k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6344|  26.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.75k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.75k|        out = unexpected(in.error());
 9624|  8.75k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.75k|        : base(unexpect, std::move(e.error())),
 1616|  8.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.75k|    {
 1618|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.75k|          m_has_value(false)
  451|  8.75k|    {
  452|  8.75k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.75k|    {
 1316|  8.75k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.75k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.75k|    {
  903|  8.75k|        assign_common(std::move(other));
  904|  8.75k|        return *this;
  905|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.75k|    {
  950|  8.75k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.75k, False: 0]
  ------------------
  951|  8.75k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.75k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.75k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.75k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.2k|    {
  490|  26.2k|        return m_has_value;
  491|  26.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.75k|    {
  456|  8.75k|        return m_value;
  457|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.75k|    {
 1046|  8.75k|        this->destroy_value();
 1047|  8.75k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.75k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.75k|    {
  504|  8.75k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.75k|                                  std::forward<Args>(args)...);
  506|  8.75k|        m_has_value = false;
  507|  8.75k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.75k|    {
  473|  8.75k|        return m_unexpected;
  474|  8.75k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.75k|    {
  481|  8.75k|        return std::move(m_unexpected);
  482|  8.75k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5824|  26.2k|{
 5825|  26.2k|    constexpr bool default_constructible_constraint =
 5826|  26.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.2k|    static_assert(default_constructible_constraint,
 5828|  26.2k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.2k|    constexpr bool destructible_constraint =
 5831|  26.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.2k|    static_assert(destructible_constraint,
 5833|  26.2k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.2k|    constexpr bool non_reference_constraint =
 5836|  26.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.2k|    static_assert(non_reference_constraint,
 5838|  26.2k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.2k|    constexpr bool movable_constraint =
 5841|  26.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.2k|    static_assert(movable_constraint,
 5843|  26.2k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5778|  26.2k|{
 5779|  26.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.2k|    constexpr bool scannable_char =
 5783|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.2k|    static_assert(scannable_char,
 5785|  26.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.2k|    constexpr bool scannable_const =
 5789|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.2k|    constexpr bool scannable_disabled =
 5793|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.2k|    static_assert(scannable_disabled,
 5795|  26.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.2k|    static_assert(
 5800|  26.2k|        scannable,
 5801|  26.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.2k|    return arg_value{arg};
 5805|  26.2k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5562|  26.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.2k|    {
 5564|  26.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  8.75k|    {
 1815|  8.75k|        return &value();
 1816|  8.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.75k|    {
 1769|  8.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.75k|        return this->get_value();
 1771|  8.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6353|  26.2k|    {
 6354|  26.2k|        return m_values;
 6355|  26.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.75k|        : m_value(T{}), m_has_value(true)
  427|  8.75k|    {
  428|  8.75k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6344|  26.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.75k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.75k|        out = unexpected(in.error());
 9624|  8.75k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.75k|        : base(unexpect, std::move(e.error())),
 1616|  8.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.75k|    {
 1618|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.75k|          m_has_value(false)
  451|  8.75k|    {
  452|  8.75k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.75k|    {
 1316|  8.75k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.75k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.75k|    {
  903|  8.75k|        assign_common(std::move(other));
  904|  8.75k|        return *this;
  905|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.75k|    {
  950|  8.75k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.75k, False: 0]
  ------------------
  951|  8.75k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.75k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.75k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.75k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.2k|    {
  490|  26.2k|        return m_has_value;
  491|  26.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.75k|    {
  456|  8.75k|        return m_value;
  457|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.75k|    {
 1046|  8.75k|        this->destroy_value();
 1047|  8.75k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.75k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.75k|    {
  504|  8.75k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.75k|                                  std::forward<Args>(args)...);
  506|  8.75k|        m_has_value = false;
  507|  8.75k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.75k|    {
  473|  8.75k|        return m_unexpected;
  474|  8.75k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.75k|    {
  481|  8.75k|        return std::move(m_unexpected);
  482|  8.75k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5824|  26.2k|{
 5825|  26.2k|    constexpr bool default_constructible_constraint =
 5826|  26.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.2k|    static_assert(default_constructible_constraint,
 5828|  26.2k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.2k|    constexpr bool destructible_constraint =
 5831|  26.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.2k|    static_assert(destructible_constraint,
 5833|  26.2k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.2k|    constexpr bool non_reference_constraint =
 5836|  26.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.2k|    static_assert(non_reference_constraint,
 5838|  26.2k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.2k|    constexpr bool movable_constraint =
 5841|  26.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.2k|    static_assert(movable_constraint,
 5843|  26.2k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5778|  26.2k|{
 5779|  26.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.2k|    constexpr bool scannable_char =
 5783|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.2k|    static_assert(scannable_char,
 5785|  26.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.2k|    constexpr bool scannable_const =
 5789|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.2k|    constexpr bool scannable_disabled =
 5793|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.2k|    static_assert(scannable_disabled,
 5795|  26.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.2k|    static_assert(
 5800|  26.2k|        scannable,
 5801|  26.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.2k|    return arg_value{arg};
 5805|  26.2k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5562|  26.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.2k|    {
 5564|  26.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  8.75k|    {
 1815|  8.75k|        return &value();
 1816|  8.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.75k|    {
 1769|  8.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.75k|        return this->get_value();
 1771|  8.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6353|  26.2k|    {
 6354|  26.2k|        return m_values;
 6355|  26.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.75k|        : m_value(T{}), m_has_value(true)
  427|  8.75k|    {
  428|  8.75k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6344|  26.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.75k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.75k|        out = unexpected(in.error());
 9624|  8.75k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.75k|        : base(unexpect, std::move(e.error())),
 1616|  8.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.75k|    {
 1618|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.75k|          m_has_value(false)
  451|  8.75k|    {
  452|  8.75k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.75k|    {
 1316|  8.75k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.75k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.75k|    {
  903|  8.75k|        assign_common(std::move(other));
  904|  8.75k|        return *this;
  905|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.75k|    {
  950|  8.75k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.75k, False: 0]
  ------------------
  951|  8.75k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.75k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.75k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.75k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.2k|    {
  490|  26.2k|        return m_has_value;
  491|  26.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.75k|    {
  456|  8.75k|        return m_value;
  457|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.75k|    {
 1046|  8.75k|        this->destroy_value();
 1047|  8.75k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.75k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.75k|    {
  504|  8.75k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.75k|                                  std::forward<Args>(args)...);
  506|  8.75k|        m_has_value = false;
  507|  8.75k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.75k|    {
  473|  8.75k|        return m_unexpected;
  474|  8.75k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.75k|    {
  481|  8.75k|        return std::move(m_unexpected);
  482|  8.75k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5824|  26.2k|{
 5825|  26.2k|    constexpr bool default_constructible_constraint =
 5826|  26.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.2k|    static_assert(default_constructible_constraint,
 5828|  26.2k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.2k|    constexpr bool destructible_constraint =
 5831|  26.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.2k|    static_assert(destructible_constraint,
 5833|  26.2k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.2k|    constexpr bool non_reference_constraint =
 5836|  26.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.2k|    static_assert(non_reference_constraint,
 5838|  26.2k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.2k|    constexpr bool movable_constraint =
 5841|  26.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.2k|    static_assert(movable_constraint,
 5843|  26.2k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5778|  26.2k|{
 5779|  26.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.2k|    constexpr bool scannable_char =
 5783|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.2k|    static_assert(scannable_char,
 5785|  26.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.2k|    constexpr bool scannable_const =
 5789|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.2k|    constexpr bool scannable_disabled =
 5793|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.2k|    static_assert(scannable_disabled,
 5795|  26.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.2k|    static_assert(
 5800|  26.2k|        scannable,
 5801|  26.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.2k|    return arg_value{arg};
 5805|  26.2k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5562|  26.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.2k|    {
 5564|  26.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  8.75k|    {
 1815|  8.75k|        return &value();
 1816|  8.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.75k|    {
 1769|  8.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.75k|        return this->get_value();
 1771|  8.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6353|  26.2k|    {
 6354|  26.2k|        return m_values;
 6355|  26.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.75k|        : m_value(T{}), m_has_value(true)
  427|  8.75k|    {
  428|  8.75k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6344|  26.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.75k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.75k|        out = unexpected(in.error());
 9624|  8.75k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  8.75k|        : base(unexpect, std::move(e.error())),
 1616|  8.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.75k|    {
 1618|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  8.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.75k|          m_has_value(false)
  451|  8.75k|    {
  452|  8.75k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.75k|    {
 1316|  8.75k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  8.75k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  8.75k|    {
  903|  8.75k|        assign_common(std::move(other));
  904|  8.75k|        return *this;
  905|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  8.75k|    {
  950|  8.75k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.75k, False: 0]
  ------------------
  951|  8.75k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.75k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.75k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.75k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.2k|    {
  490|  26.2k|        return m_has_value;
  491|  26.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.75k|    {
  456|  8.75k|        return m_value;
  457|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  8.75k|    {
 1046|  8.75k|        this->destroy_value();
 1047|  8.75k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.75k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  8.75k|    {
  504|  8.75k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.75k|                                  std::forward<Args>(args)...);
  506|  8.75k|        m_has_value = false;
  507|  8.75k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.75k|    {
  473|  8.75k|        return m_unexpected;
  474|  8.75k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.75k|    {
  481|  8.75k|        return std::move(m_unexpected);
  482|  8.75k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5824|  26.2k|{
 5825|  26.2k|    constexpr bool default_constructible_constraint =
 5826|  26.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.2k|    static_assert(default_constructible_constraint,
 5828|  26.2k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.2k|    constexpr bool destructible_constraint =
 5831|  26.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.2k|    static_assert(destructible_constraint,
 5833|  26.2k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.2k|    constexpr bool non_reference_constraint =
 5836|  26.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.2k|    static_assert(non_reference_constraint,
 5838|  26.2k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.2k|    constexpr bool movable_constraint =
 5841|  26.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.2k|    static_assert(movable_constraint,
 5843|  26.2k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5778|  26.2k|{
 5779|  26.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.2k|    constexpr bool scannable_char =
 5783|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.2k|    static_assert(scannable_char,
 5785|  26.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.2k|    constexpr bool scannable_const =
 5789|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.2k|    constexpr bool scannable_disabled =
 5793|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.2k|    static_assert(scannable_disabled,
 5795|  26.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.2k|    static_assert(
 5800|  26.2k|        scannable,
 5801|  26.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.2k|    return arg_value{arg};
 5805|  26.2k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5562|  26.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.2k|    {
 5564|  26.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  8.75k|    {
 1815|  8.75k|        return &value();
 1816|  8.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  8.75k|    {
 1769|  8.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.75k|        return this->get_value();
 1771|  8.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6353|  26.2k|    {
 6354|  26.2k|        return m_values;
 6355|  26.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.75k|        : m_value(T{}), m_has_value(true)
  427|  8.75k|    {
  428|  8.75k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6344|  26.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.75k, False: 0]
  |  |  ------------------
  ------------------
 9623|  8.75k|        out = unexpected(in.error());
 9624|  8.75k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  8.75k|        : base(unexpect, std::move(e.error())),
 1616|  8.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.75k|    {
 1618|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  8.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.75k|          m_has_value(false)
  451|  8.75k|    {
  452|  8.75k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.75k|    {
 1316|  8.75k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  8.75k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  8.75k|    {
  903|  8.75k|        assign_common(std::move(other));
  904|  8.75k|        return *this;
  905|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  8.75k|    {
  950|  8.75k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 8.75k, False: 0]
  ------------------
  951|  8.75k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 8.75k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  8.75k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  8.75k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  26.2k|    {
  490|  26.2k|        return m_has_value;
  491|  26.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.75k|    {
  456|  8.75k|        return m_value;
  457|  8.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  8.75k|    {
 1046|  8.75k|        this->destroy_value();
 1047|  8.75k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  8.75k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  8.75k|    {
  504|  8.75k|        scn::detail::construct_at(&get_unexpected(),
  505|  8.75k|                                  std::forward<Args>(args)...);
  506|  8.75k|        m_has_value = false;
  507|  8.75k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.75k|    {
  473|  8.75k|        return m_unexpected;
  474|  8.75k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  8.75k|    {
  481|  8.75k|        return std::move(m_unexpected);
  482|  8.75k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5824|  26.2k|{
 5825|  26.2k|    constexpr bool default_constructible_constraint =
 5826|  26.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.2k|    static_assert(default_constructible_constraint,
 5828|  26.2k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.2k|    constexpr bool destructible_constraint =
 5831|  26.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.2k|    static_assert(destructible_constraint,
 5833|  26.2k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.2k|    constexpr bool non_reference_constraint =
 5836|  26.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.2k|    static_assert(non_reference_constraint,
 5838|  26.2k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.2k|    constexpr bool movable_constraint =
 5841|  26.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.2k|    static_assert(movable_constraint,
 5843|  26.2k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5778|  26.2k|{
 5779|  26.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.2k|    constexpr bool scannable_char =
 5783|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.2k|    static_assert(scannable_char,
 5785|  26.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.2k|    constexpr bool scannable_const =
 5789|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.2k|    constexpr bool scannable_disabled =
 5793|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.2k|    static_assert(scannable_disabled,
 5795|  26.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.2k|    static_assert(
 5800|  26.2k|        scannable,
 5801|  26.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.2k|    return arg_value{arg};
 5805|  26.2k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5562|  26.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.2k|    {
 5564|  26.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  8.75k|    {
 1815|  8.75k|        return &value();
 1816|  8.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  8.75k|    {
 1769|  8.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.75k|        return this->get_value();
 1771|  8.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6353|  26.2k|    {
 6354|  26.2k|        return m_values;
 6355|  26.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  8.75k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  8.75k|    {
  613|  8.75k|        construct();
  614|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  8.75k|    {
  694|  8.75k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.75k|        m_has_value = true;
  696|  8.75k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  8.75k|{
  396|  8.75k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.75k|        T(std::forward<Args>(args)...);
  398|  8.75k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6344|  26.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  27.1k|    {
  718|  27.1k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  27.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  27.1k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.85k, False: 898]
  |  |  ------------------
  ------------------
 9623|  7.85k|        out = unexpected(in.error());
 9624|  7.85k|    }
 9625|    898|    else {
 9626|    898|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    898|    static_cast<    \
  |  |  935|    898|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    898|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  7.85k|        : base(unexpect, std::move(e.error())),
 1616|  7.85k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  7.85k|    {
 1618|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  7.85k|        : m_has_value(false)
  637|  7.85k|    {
  638|  7.85k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  7.85k|    {
  701|  7.85k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.85k|                                  std::forward<Args>(args)...);
  703|  7.85k|        m_has_value = false;
  704|  7.85k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  49.9k|{
  396|  49.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  49.9k|        T(std::forward<Args>(args)...);
  398|  49.9k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  39.2k|    {
  730|  39.2k|        return reinterpret_cast<unexpected<E>*>(
  731|  39.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  39.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  39.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.85k|    {
 1316|  7.85k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  7.85k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  7.85k|    {
  903|  7.85k|        assign_common(std::move(other));
  904|  7.85k|        return *this;
  905|  7.85k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  7.85k|    {
  950|  7.85k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 7.85k, False: 0]
  ------------------
  951|  7.85k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 7.85k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  7.85k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  7.85k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  41.9k|    {
  687|  41.9k|        return m_has_value;
  688|  41.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  9.65k|    {
  653|  9.65k|        return *value_ptr();
  654|  9.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  7.85k|    {
 1046|  7.85k|        this->destroy_value();
 1047|  7.85k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.75k|    {
  708|  8.75k|        scn::detail::destroy_at(value_ptr());
  709|  8.75k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  8.75k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.75k|    else {
  408|  8.75k|        p->~T();
  409|  8.75k|    }
  410|  8.75k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  8.75k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  7.85k|    {
  701|  7.85k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.85k|                                  std::forward<Args>(args)...);
  703|  7.85k|        m_has_value = false;
  704|  7.85k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  7.85k|    {
  678|  7.85k|        return std::move(*unexpected_ptr());
  679|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  15.7k|    {
  712|  15.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  15.7k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  99.7k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  99.7k|    else {
  408|  99.7k|        p->~T();
  409|  99.7k|    }
  410|  99.7k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5824|  26.2k|{
 5825|  26.2k|    constexpr bool default_constructible_constraint =
 5826|  26.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.2k|    static_assert(default_constructible_constraint,
 5828|  26.2k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.2k|    constexpr bool destructible_constraint =
 5831|  26.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.2k|    static_assert(destructible_constraint,
 5833|  26.2k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.2k|    constexpr bool non_reference_constraint =
 5836|  26.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.2k|    static_assert(non_reference_constraint,
 5838|  26.2k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.2k|    constexpr bool movable_constraint =
 5841|  26.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.2k|    static_assert(movable_constraint,
 5843|  26.2k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5778|  26.2k|{
 5779|  26.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.2k|    constexpr bool scannable_char =
 5783|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.2k|    static_assert(scannable_char,
 5785|  26.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.2k|    constexpr bool scannable_const =
 5789|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.2k|    constexpr bool scannable_disabled =
 5793|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.2k|    static_assert(scannable_disabled,
 5795|  26.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.2k|    static_assert(
 5800|  26.2k|        scannable,
 5801|  26.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.2k|    return arg_value{arg};
 5805|  26.2k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5562|  26.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.2k|    {
 5564|  26.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.65k|    {
 1815|  9.65k|        return &value();
 1816|  9.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  9.65k|    {
 1769|  9.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.65k|        return this->get_value();
 1771|  9.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6353|  26.2k|    {
 6354|  26.2k|        return m_values;
 6355|  26.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  16.6k|    {
  643|  16.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 898, False: 15.7k]
  ------------------
  644|    898|            destroy_value();
  645|    898|        }
  646|  15.7k|        else {
  647|  15.7k|            destroy_unexpected();
  648|  15.7k|        }
  649|  16.6k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  8.75k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  8.75k|    {
  613|  8.75k|        construct();
  614|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  8.75k|    {
  694|  8.75k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.75k|        m_has_value = true;
  696|  8.75k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  8.75k|{
  396|  8.75k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.75k|        T(std::forward<Args>(args)...);
  398|  8.75k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6344|  26.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  27.1k|    {
  718|  27.1k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  27.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  27.1k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.85k, False: 898]
  |  |  ------------------
  ------------------
 9623|  7.85k|        out = unexpected(in.error());
 9624|  7.85k|    }
 9625|    898|    else {
 9626|    898|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    898|    static_cast<    \
  |  |  935|    898|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    898|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  7.85k|        : base(unexpect, std::move(e.error())),
 1616|  7.85k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  7.85k|    {
 1618|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  7.85k|        : m_has_value(false)
  637|  7.85k|    {
  638|  7.85k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  7.85k|    {
  701|  7.85k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.85k|                                  std::forward<Args>(args)...);
  703|  7.85k|        m_has_value = false;
  704|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  39.2k|    {
  730|  39.2k|        return reinterpret_cast<unexpected<E>*>(
  731|  39.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  39.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  39.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.85k|    {
 1316|  7.85k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  7.85k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  7.85k|    {
  903|  7.85k|        assign_common(std::move(other));
  904|  7.85k|        return *this;
  905|  7.85k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  7.85k|    {
  950|  7.85k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 7.85k, False: 0]
  ------------------
  951|  7.85k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 7.85k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  7.85k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  7.85k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  41.9k|    {
  687|  41.9k|        return m_has_value;
  688|  41.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  9.65k|    {
  653|  9.65k|        return *value_ptr();
  654|  9.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  7.85k|    {
 1046|  7.85k|        this->destroy_value();
 1047|  7.85k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.75k|    {
  708|  8.75k|        scn::detail::destroy_at(value_ptr());
  709|  8.75k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  8.75k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.75k|    else {
  408|  8.75k|        p->~T();
  409|  8.75k|    }
  410|  8.75k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  8.75k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  7.85k|    {
  701|  7.85k|        scn::detail::construct_at(unexpected_ptr(),
  702|  7.85k|                                  std::forward<Args>(args)...);
  703|  7.85k|        m_has_value = false;
  704|  7.85k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  7.85k|    {
  678|  7.85k|        return std::move(*unexpected_ptr());
  679|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  15.7k|    {
  712|  15.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  15.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5824|  26.2k|{
 5825|  26.2k|    constexpr bool default_constructible_constraint =
 5826|  26.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  26.2k|    static_assert(default_constructible_constraint,
 5828|  26.2k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  26.2k|    constexpr bool destructible_constraint =
 5831|  26.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  26.2k|    static_assert(destructible_constraint,
 5833|  26.2k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  26.2k|    constexpr bool non_reference_constraint =
 5836|  26.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  26.2k|    static_assert(non_reference_constraint,
 5838|  26.2k|                  "Scan argument types must not be references");
 5839|       |
 5840|  26.2k|    constexpr bool movable_constraint =
 5841|  26.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  26.2k|    static_assert(movable_constraint,
 5843|  26.2k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  26.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  26.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  26.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5778|  26.2k|{
 5779|  26.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  26.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  26.2k|    constexpr bool scannable_char =
 5783|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  26.2k|    static_assert(scannable_char,
 5785|  26.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  26.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  26.2k|    constexpr bool scannable_const =
 5789|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  26.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  26.2k|    constexpr bool scannable_disabled =
 5793|  26.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  26.2k|    static_assert(scannable_disabled,
 5795|  26.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  26.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  26.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  26.2k|    static_assert(
 5800|  26.2k|        scannable,
 5801|  26.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  26.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  26.2k|    return arg_value{arg};
 5805|  26.2k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5562|  26.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  26.2k|    {
 5564|  26.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.65k|    {
 1815|  9.65k|        return &value();
 1816|  9.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  9.65k|    {
 1769|  9.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.65k|        return this->get_value();
 1771|  9.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6353|  26.2k|    {
 6354|  26.2k|        return m_values;
 6355|  26.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  16.6k|    {
  643|  16.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 898, False: 15.7k]
  ------------------
  644|    898|            destroy_value();
  645|    898|        }
  646|  15.7k|        else {
  647|  15.7k|            destroy_unexpected();
  648|  15.7k|        }
  649|  16.6k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  4.37k|{
 9681|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9682|  4.37k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  4.37k|                                   make_scan_args(result->values())));
 9684|  4.37k|    return result;
 9685|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9636|  8.75k|{
 9637|  8.75k|    return scan_result_type<Source, Args...>();
 9638|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  8.75k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  8.75k|        : m_value(T{}), m_has_value(true)
  427|  8.75k|    {
  428|  8.75k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6570|  8.75k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6344|  8.75k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  8.75k|{
 9622|  8.75k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.85k, False: 898]
  |  |  ------------------
  ------------------
 9623|  7.85k|        out = unexpected(in.error());
 9624|  7.85k|    }
 9625|    898|    else {
 9626|    898|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    898|    static_cast<    \
  |  |  935|    898|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    898|    }
 9628|  8.75k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  7.85k|        : base(unexpect, std::move(e.error())),
 1616|  7.85k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  7.85k|    {
 1618|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  7.85k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  7.85k|          m_has_value(false)
  451|  7.85k|    {
  452|  7.85k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.85k|    {
 1316|  7.85k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  7.85k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  7.85k|    {
  903|  7.85k|        assign_common(std::move(other));
  904|  7.85k|        return *this;
  905|  7.85k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  7.85k|    {
  950|  7.85k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 7.85k, False: 0]
  ------------------
  951|  7.85k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 7.85k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  7.85k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  7.85k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  25.3k|    {
  490|  25.3k|        return m_has_value;
  491|  25.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  9.65k|    {
  456|  9.65k|        return m_value;
  457|  9.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  7.85k|    {
 1046|  7.85k|        this->destroy_value();
 1047|  7.85k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  7.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  7.85k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  7.85k|    {
  504|  7.85k|        scn::detail::construct_at(&get_unexpected(),
  505|  7.85k|                                  std::forward<Args>(args)...);
  506|  7.85k|        m_has_value = false;
  507|  7.85k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  7.85k|    {
  473|  7.85k|        return m_unexpected;
  474|  7.85k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  7.85k|    {
  481|  7.85k|        return std::move(m_unexpected);
  482|  7.85k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8767|  8.75k|    {
 8768|  8.75k|        return m_str;
 8769|  8.75k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  8.75k|{
 6110|  8.75k|    detail::check_scan_arg_types<Args...>();
 6111|  8.75k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  8.75k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5824|  8.75k|{
 5825|  8.75k|    constexpr bool default_constructible_constraint =
 5826|  8.75k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  8.75k|    static_assert(default_constructible_constraint,
 5828|  8.75k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  8.75k|    constexpr bool destructible_constraint =
 5831|  8.75k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  8.75k|    static_assert(destructible_constraint,
 5833|  8.75k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  8.75k|    constexpr bool non_reference_constraint =
 5836|  8.75k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  8.75k|    static_assert(non_reference_constraint,
 5838|  8.75k|                  "Scan argument types must not be references");
 5839|       |
 5840|  8.75k|    constexpr bool movable_constraint =
 5841|  8.75k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  8.75k|    static_assert(movable_constraint,
 5843|  8.75k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  8.75k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  8.75k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  8.75k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  8.75k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  8.75k|    {
 6087|  8.75k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  8.75k|    {
 6095|  8.75k|        return {detail::make_arg<
 6096|  8.75k|            kind, Context,
 6097|  8.75k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  8.75k|                                 typename Context::char_type>::value>(args)...};
 6099|  8.75k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5874|  8.75k|{
 5875|  8.75k|    return make_value<Context>(value).ref_value;
 5876|  8.75k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5809|  8.75k|{
 5810|  8.75k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  8.75k|                                  needs_context_tag>) {
 5814|  8.75k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  8.75k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5648|  8.75k|    {                                                                        \
 5649|  8.75k|        return val;                                                          \
 5650|  8.75k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5778|  8.75k|{
 5779|  8.75k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  8.75k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  8.75k|    constexpr bool scannable_char =
 5783|  8.75k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  8.75k|    static_assert(scannable_char,
 5785|  8.75k|                  "Cannot scan an argument of an unsupported character "
 5786|  8.75k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  8.75k|    constexpr bool scannable_const =
 5789|  8.75k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  8.75k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  8.75k|    constexpr bool scannable_disabled =
 5793|  8.75k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  8.75k|    static_assert(scannable_disabled,
 5795|  8.75k|                  "Cannot scan an argument that has been disabled by "
 5796|  8.75k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  8.75k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  8.75k|    static_assert(
 5800|  8.75k|        scannable,
 5801|  8.75k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  8.75k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  8.75k|    return arg_value{arg};
 5805|  8.75k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5562|  8.75k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  8.75k|    {
 5564|  8.75k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.65k|    {
 1815|  9.65k|        return &value();
 1816|  9.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  9.65k|    {
 1769|  9.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.65k|        return this->get_value();
 1771|  9.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6353|  8.75k|    {
 6354|  8.75k|        return m_values;
 6355|  8.75k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  8.75k|        : basic_scan_args(store.desc, store.args.data())
 6136|  8.75k|    {
 6137|  8.75k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  8.75k|        : m_str(r.str)
 8763|  8.75k|    {
 8764|  8.75k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  4.37k|{
 9750|  4.37k|    auto result = make_scan_result<Source, Args...>();
 9751|  4.37k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  4.37k|                                   make_scan_args(result->values())));
 9753|  4.37k|    return result;
 9754|  4.37k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.5k|        : m_value(T{}), m_has_value(true)
  427|  17.5k|    {
  428|  17.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|   157k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   157k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6344|  17.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.4k, False: 96]
  |  |  ------------------
  ------------------
 9623|  17.4k|        out = unexpected(in.error());
 9624|  17.4k|    }
 9625|     96|    else {
 9626|     96|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     96|    static_cast<    \
  |  |  935|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     96|    }
 9628|  17.5k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   157k|    {
 1740|   157k|        return has_value();
 1741|   157k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   315k|    {
  490|   315k|        return m_has_value;
  491|   315k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   156k|    {
 1746|   156k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   156k|        return this->get_unexpected().error();
 1748|   156k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   156k|    {
  473|   156k|        return m_unexpected;
  474|   156k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.4k|        : base(unexpect, std::move(e.error())),
 1616|  17.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.4k|    {
 1618|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.4k|          m_has_value(false)
  451|  17.4k|    {
  452|  17.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.4k|    {
 1316|  17.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.4k|    {
  903|  17.4k|        assign_common(std::move(other));
  904|  17.4k|        return *this;
  905|  17.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.4k|    {
  950|  17.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.4k, False: 0]
  ------------------
  951|  17.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.4k|    {
  490|  52.4k|        return m_has_value;
  491|  52.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.6k|    {
  456|  17.6k|        return m_value;
  457|  17.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.4k|    {
 1046|  17.4k|        this->destroy_value();
 1047|  17.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.4k|    {
  504|  17.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.4k|                                  std::forward<Args>(args)...);
  506|  17.4k|        m_has_value = false;
  507|  17.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.4k|    {
  473|  17.4k|        return m_unexpected;
  474|  17.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.4k|    {
  481|  17.4k|        return std::move(m_unexpected);
  482|  17.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  1.42k|    {
 6445|  1.42k|        m_range = std::forward<Other>(r);
 6446|  1.42k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.42k|    {
 1795|  1.42k|        return value();
 1796|  1.42k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.42k|    {
 1769|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.42k|        return this->get_value();
 1771|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.42k|    {
  456|  1.42k|        return m_value;
  457|  1.42k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  78.7k|{
 9398|  78.7k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  78.7k|    auto result = vscan_impl(buffer, format, args);
 9401|  78.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  78.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 78.0k, False: 714]
  |  |  ------------------
  ------------------
 9402|  78.0k|        return unexpected(result.error());
 9403|  78.0k|    }
 9404|    714|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    714|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  78.7k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5380|   157k|{
 5381|   157k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   157k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   157k|                  "\n"
 5385|   157k|                  "Unsupported range type given as input to a scanning "
 5386|   157k|                  "function.\n"
 5387|   157k|                  "A range needs to have a character type (value type) "
 5388|   157k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   157k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   157k|                  "to be included.\n"
 5391|   157k|                  "See the scnlib documentation for more details.");
 5392|   157k|    static_assert(
 5393|   157k|        !std::is_same_v<T, custom_char_traits>,
 5394|   157k|        "\n"
 5395|   157k|        "Unsupported range type given as input to a scanning "
 5396|   157k|        "function.\n"
 5397|   157k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   157k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   157k|        "not supported.");
 5400|   157k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   157k|                  "\n"
 5402|   157k|                  "Unsupported range type given as input to a scanning "
 5403|   157k|                  "function.\n"
 5404|   157k|                  "file_marker_found cannot be used as an "
 5405|   157k|                  "source range type to scn::scan.\n"
 5406|   157k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   157k|                  "and do not provide an explicit source range, "
 5408|   157k|                  "or use scn::scan with a FILE* directly.");
 5409|   157k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   157k|                  "\n"
 5411|   157k|                  "Unsupported range type given as input to a scanning "
 5412|   157k|                  "function.\n"
 5413|   157k|                  "In order to be scannable, a range needs to satisfy "
 5414|   157k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   157k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   157k|                  "\n"
 5417|   157k|                  "Unsupported range type given as input to a scanning "
 5418|   157k|                  "function.\n"
 5419|   157k|                  "A range needs to model forward_range and have a valid "
 5420|   157k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   157k|                  "Examples of scannable ranges are std::string, "
 5422|   157k|                  "std::string_view, "
 5423|   157k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   157k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   157k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   157k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|   157k|{
 5273|   157k|    if constexpr (is_valid_char_type<CharT>) {
 5274|   157k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|   157k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   156k|        : base(unexpect, std::move(e.error())),
 1616|   156k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   156k|    {
 1618|   156k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   156k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   156k|          m_has_value(false)
  451|   156k|    {
  452|   156k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   157k|    {
 1316|   157k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|  1.42k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.42k|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.42k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.42k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.42k|    {
 2869|  1.42k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.42k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.42k|    {
 2850|  1.42k|        return decay_copy(t.begin());
 2851|  1.42k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   335k|{
 2094|   335k|    return SCN_FWD(t);
  ------------------
  |  |  936|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   335k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6661|  1.42k|{
 6662|  1.42k|    return ranges::end(source);
 6663|  1.42k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.42k|    {
 2926|  1.42k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.42k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.42k|    {
 2908|  1.42k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.42k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   420k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   420k|    static_cast<    \
  |  |  935|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   420k|    static_cast<    \
  |  |  935|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   420k|    {
 3466|   420k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.42k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.42k|    {
 1572|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.42k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.42k|    {
  442|  1.42k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5824|  17.5k|{
 5825|  17.5k|    constexpr bool default_constructible_constraint =
 5826|  17.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  17.5k|    static_assert(default_constructible_constraint,
 5828|  17.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  17.5k|    constexpr bool destructible_constraint =
 5831|  17.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  17.5k|    static_assert(destructible_constraint,
 5833|  17.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  17.5k|    constexpr bool non_reference_constraint =
 5836|  17.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  17.5k|    static_assert(non_reference_constraint,
 5838|  17.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  17.5k|    constexpr bool movable_constraint =
 5841|  17.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  17.5k|    static_assert(movable_constraint,
 5843|  17.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  17.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  17.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5778|  17.5k|{
 5779|  17.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  17.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  17.5k|    constexpr bool scannable_char =
 5783|  17.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  17.5k|    static_assert(scannable_char,
 5785|  17.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  17.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  17.5k|    constexpr bool scannable_const =
 5789|  17.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  17.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  17.5k|    constexpr bool scannable_disabled =
 5793|  17.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  17.5k|    static_assert(scannable_disabled,
 5795|  17.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  17.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  17.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  17.5k|    static_assert(
 5800|  17.5k|        scannable,
 5801|  17.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  17.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  17.5k|    return arg_value{arg};
 5805|  17.5k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5562|  17.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  17.5k|    {
 5564|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1814|  17.6k|    {
 1815|  17.6k|        return &value();
 1816|  17.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.6k|    {
 1769|  17.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.6k|        return this->get_value();
 1771|  17.6k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6353|  17.5k|    {
 6354|  17.5k|        return m_values;
 6355|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|   157k|        : m_desc(desc), m_builtin_values(data)
 6188|   157k|    {
 6189|   157k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   157k|{
 8446|   157k|    return s;
 8447|   157k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   157k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  78.7k|{
 9414|  78.7k|#if !SCN_DISABLE_LOCALE
 9415|  78.7k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  78.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  78.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  78.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  78.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  78.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 78.0k, False: 714]
  |  |  ------------------
  ------------------
 9422|  78.0k|        return unexpected(result.error());
 9423|  78.0k|    }
 9424|    714|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    714|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  78.7k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.5k|        : m_value(T{}), m_has_value(true)
  427|  17.5k|    {
  428|  17.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.5k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.5k|        out = unexpected(in.error());
 9624|  17.5k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.5k|        : base(unexpect, std::move(e.error())),
 1616|  17.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.5k|    {
 1618|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.5k|          m_has_value(false)
  451|  17.5k|    {
  452|  17.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.5k|    {
 1316|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.5k|    {
  903|  17.5k|        assign_common(std::move(other));
  904|  17.5k|        return *this;
  905|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.5k|    {
  950|  17.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.5k, False: 0]
  ------------------
  951|  17.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.5k|    {
  490|  52.5k|        return m_has_value;
  491|  52.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.5k|    {
  456|  17.5k|        return m_value;
  457|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.5k|    {
 1046|  17.5k|        this->destroy_value();
 1047|  17.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.5k|    {
  504|  17.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.5k|                                  std::forward<Args>(args)...);
  506|  17.5k|        m_has_value = false;
  507|  17.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.5k|    {
  473|  17.5k|        return m_unexpected;
  474|  17.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.5k|    {
  481|  17.5k|        return std::move(m_unexpected);
  482|  17.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  17.5k|    {
 1815|  17.5k|        return &value();
 1816|  17.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.5k|    {
 1769|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.5k|        return this->get_value();
 1771|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.5k|        : m_value(T{}), m_has_value(true)
  427|  17.5k|    {
  428|  17.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.5k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.5k|        out = unexpected(in.error());
 9624|  17.5k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.5k|        : base(unexpect, std::move(e.error())),
 1616|  17.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.5k|    {
 1618|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.5k|          m_has_value(false)
  451|  17.5k|    {
  452|  17.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.5k|    {
 1316|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.5k|    {
  903|  17.5k|        assign_common(std::move(other));
  904|  17.5k|        return *this;
  905|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.5k|    {
  950|  17.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.5k, False: 0]
  ------------------
  951|  17.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.5k|    {
  490|  52.5k|        return m_has_value;
  491|  52.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.5k|    {
  456|  17.5k|        return m_value;
  457|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.5k|    {
 1046|  17.5k|        this->destroy_value();
 1047|  17.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.5k|    {
  504|  17.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.5k|                                  std::forward<Args>(args)...);
  506|  17.5k|        m_has_value = false;
  507|  17.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.5k|    {
  473|  17.5k|        return m_unexpected;
  474|  17.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.5k|    {
  481|  17.5k|        return std::move(m_unexpected);
  482|  17.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  17.5k|    {
 1815|  17.5k|        return &value();
 1816|  17.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.5k|    {
 1769|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.5k|        return this->get_value();
 1771|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.5k|        : m_value(T{}), m_has_value(true)
  427|  17.5k|    {
  428|  17.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.5k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.5k|        out = unexpected(in.error());
 9624|  17.5k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.5k|        : base(unexpect, std::move(e.error())),
 1616|  17.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.5k|    {
 1618|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.5k|          m_has_value(false)
  451|  17.5k|    {
  452|  17.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.5k|    {
 1316|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.5k|    {
  903|  17.5k|        assign_common(std::move(other));
  904|  17.5k|        return *this;
  905|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.5k|    {
  950|  17.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.5k, False: 0]
  ------------------
  951|  17.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.5k|    {
  490|  52.5k|        return m_has_value;
  491|  52.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.5k|    {
  456|  17.5k|        return m_value;
  457|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.5k|    {
 1046|  17.5k|        this->destroy_value();
 1047|  17.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.5k|    {
  504|  17.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.5k|                                  std::forward<Args>(args)...);
  506|  17.5k|        m_has_value = false;
  507|  17.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.5k|    {
  473|  17.5k|        return m_unexpected;
  474|  17.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.5k|    {
  481|  17.5k|        return std::move(m_unexpected);
  482|  17.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  17.5k|    {
 1815|  17.5k|        return &value();
 1816|  17.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.5k|    {
 1769|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.5k|        return this->get_value();
 1771|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.5k|        : m_value(T{}), m_has_value(true)
  427|  17.5k|    {
  428|  17.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.5k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.5k|        out = unexpected(in.error());
 9624|  17.5k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  17.5k|        : base(unexpect, std::move(e.error())),
 1616|  17.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.5k|    {
 1618|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  17.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.5k|          m_has_value(false)
  451|  17.5k|    {
  452|  17.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.5k|    {
 1316|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  17.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  17.5k|    {
  903|  17.5k|        assign_common(std::move(other));
  904|  17.5k|        return *this;
  905|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  17.5k|    {
  950|  17.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.5k, False: 0]
  ------------------
  951|  17.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.5k|    {
  490|  52.5k|        return m_has_value;
  491|  52.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.5k|    {
  456|  17.5k|        return m_value;
  457|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  17.5k|    {
 1046|  17.5k|        this->destroy_value();
 1047|  17.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  17.5k|    {
  504|  17.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.5k|                                  std::forward<Args>(args)...);
  506|  17.5k|        m_has_value = false;
  507|  17.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.5k|    {
  473|  17.5k|        return m_unexpected;
  474|  17.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.5k|    {
  481|  17.5k|        return std::move(m_unexpected);
  482|  17.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  17.5k|    {
 1815|  17.5k|        return &value();
 1816|  17.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  17.5k|    {
 1769|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.5k|        return this->get_value();
 1771|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.5k|        : m_value(T{}), m_has_value(true)
  427|  17.5k|    {
  428|  17.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.5k, False: 0]
  |  |  ------------------
  ------------------
 9623|  17.5k|        out = unexpected(in.error());
 9624|  17.5k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  17.5k|        : base(unexpect, std::move(e.error())),
 1616|  17.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.5k|    {
 1618|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  17.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.5k|          m_has_value(false)
  451|  17.5k|    {
  452|  17.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.5k|    {
 1316|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  17.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  17.5k|    {
  903|  17.5k|        assign_common(std::move(other));
  904|  17.5k|        return *this;
  905|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  17.5k|    {
  950|  17.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.5k, False: 0]
  ------------------
  951|  17.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.5k|    {
  490|  52.5k|        return m_has_value;
  491|  52.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.5k|    {
  456|  17.5k|        return m_value;
  457|  17.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  17.5k|    {
 1046|  17.5k|        this->destroy_value();
 1047|  17.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  17.5k|    {
  504|  17.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.5k|                                  std::forward<Args>(args)...);
  506|  17.5k|        m_has_value = false;
  507|  17.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.5k|    {
  473|  17.5k|        return m_unexpected;
  474|  17.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.5k|    {
  481|  17.5k|        return std::move(m_unexpected);
  482|  17.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  17.5k|    {
 1815|  17.5k|        return &value();
 1816|  17.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  17.5k|    {
 1769|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.5k|        return this->get_value();
 1771|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  17.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  17.5k|    {
  613|  17.5k|        construct();
  614|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  17.5k|    {
  694|  17.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  17.5k|        m_has_value = true;
  696|  17.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  17.5k|{
  396|  17.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  17.5k|        T(std::forward<Args>(args)...);
  398|  17.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  52.9k|    {
  718|  52.9k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  52.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  52.9k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.0k, False: 444]
  |  |  ------------------
  ------------------
 9623|  17.0k|        out = unexpected(in.error());
 9624|  17.0k|    }
 9625|    444|    else {
 9626|    444|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    444|    static_cast<    \
  |  |  935|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    444|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  17.0k|        : base(unexpect, std::move(e.error())),
 1616|  17.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.0k|    {
 1618|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  17.0k|        : m_has_value(false)
  637|  17.0k|    {
  638|  17.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  17.0k|    {
  701|  17.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  17.0k|                                  std::forward<Args>(args)...);
  703|  17.0k|        m_has_value = false;
  704|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  85.3k|    {
  730|  85.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  85.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  85.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  85.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.0k|    {
 1316|  17.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  17.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  17.0k|    {
  903|  17.0k|        assign_common(std::move(other));
  904|  17.0k|        return *this;
  905|  17.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  17.0k|    {
  950|  17.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.0k, False: 0]
  ------------------
  951|  17.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  86.6k|    {
  687|  86.6k|        return m_has_value;
  688|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  17.9k|    {
  653|  17.9k|        return *value_ptr();
  654|  17.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  17.0k|    {
 1046|  17.0k|        this->destroy_value();
 1047|  17.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  17.5k|    {
  708|  17.5k|        scn::detail::destroy_at(value_ptr());
  709|  17.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  17.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  17.5k|    else {
  408|  17.5k|        p->~T();
  409|  17.5k|    }
  410|  17.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  17.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  17.0k|    {
  701|  17.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  17.0k|                                  std::forward<Args>(args)...);
  703|  17.0k|        m_has_value = false;
  704|  17.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  17.0k|    {
  678|  17.0k|        return std::move(*unexpected_ptr());
  679|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  34.1k|    {
  712|  34.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  34.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  17.9k|    {
 1815|  17.9k|        return &value();
 1816|  17.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  17.9k|    {
 1769|  17.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.9k|        return this->get_value();
 1771|  17.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  34.5k|    {
  643|  34.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 444, False: 34.1k]
  ------------------
  644|    444|            destroy_value();
  645|    444|        }
  646|  34.1k|        else {
  647|  34.1k|            destroy_unexpected();
  648|  34.1k|        }
  649|  34.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  17.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  17.5k|    {
  613|  17.5k|        construct();
  614|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  17.5k|    {
  694|  17.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  17.5k|        m_has_value = true;
  696|  17.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  17.5k|{
  396|  17.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  17.5k|        T(std::forward<Args>(args)...);
  398|  17.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  52.9k|    {
  718|  52.9k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  52.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  52.9k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.0k, False: 444]
  |  |  ------------------
  ------------------
 9623|  17.0k|        out = unexpected(in.error());
 9624|  17.0k|    }
 9625|    444|    else {
 9626|    444|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    444|    static_cast<    \
  |  |  935|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    444|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  17.0k|        : base(unexpect, std::move(e.error())),
 1616|  17.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.0k|    {
 1618|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  17.0k|        : m_has_value(false)
  637|  17.0k|    {
  638|  17.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  17.0k|    {
  701|  17.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  17.0k|                                  std::forward<Args>(args)...);
  703|  17.0k|        m_has_value = false;
  704|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  85.3k|    {
  730|  85.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  85.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  85.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  85.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.0k|    {
 1316|  17.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  17.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  17.0k|    {
  903|  17.0k|        assign_common(std::move(other));
  904|  17.0k|        return *this;
  905|  17.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  17.0k|    {
  950|  17.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.0k, False: 0]
  ------------------
  951|  17.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  86.6k|    {
  687|  86.6k|        return m_has_value;
  688|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  17.9k|    {
  653|  17.9k|        return *value_ptr();
  654|  17.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  17.0k|    {
 1046|  17.0k|        this->destroy_value();
 1047|  17.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  17.5k|    {
  708|  17.5k|        scn::detail::destroy_at(value_ptr());
  709|  17.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  17.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  17.5k|    else {
  408|  17.5k|        p->~T();
  409|  17.5k|    }
  410|  17.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  17.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  17.0k|    {
  701|  17.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  17.0k|                                  std::forward<Args>(args)...);
  703|  17.0k|        m_has_value = false;
  704|  17.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  17.0k|    {
  678|  17.0k|        return std::move(*unexpected_ptr());
  679|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  34.1k|    {
  712|  34.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  34.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  17.9k|    {
 1815|  17.9k|        return &value();
 1816|  17.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  17.9k|    {
 1769|  17.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.9k|        return this->get_value();
 1771|  17.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  34.5k|    {
  643|  34.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 444, False: 34.1k]
  ------------------
  644|    444|            destroy_value();
  645|    444|        }
  646|  34.1k|        else {
  647|  34.1k|            destroy_unexpected();
  648|  34.1k|        }
  649|  34.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9636|  17.5k|{
 9637|  17.5k|    return scan_result_type<Source, Args...>();
 9638|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  17.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  17.5k|        : m_value(T{}), m_has_value(true)
  427|  17.5k|    {
  428|  17.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6570|  17.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6344|  17.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  17.5k|{
 9622|  17.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.0k, False: 444]
  |  |  ------------------
  ------------------
 9623|  17.0k|        out = unexpected(in.error());
 9624|  17.0k|    }
 9625|    444|    else {
 9626|    444|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    444|    static_cast<    \
  |  |  935|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    444|    }
 9628|  17.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  17.0k|        : base(unexpect, std::move(e.error())),
 1616|  17.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.0k|    {
 1618|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  17.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.0k|          m_has_value(false)
  451|  17.0k|    {
  452|  17.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.0k|    {
 1316|  17.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  17.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  17.0k|    {
  903|  17.0k|        assign_common(std::move(other));
  904|  17.0k|        return *this;
  905|  17.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  17.0k|    {
  950|  17.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 17.0k, False: 0]
  ------------------
  951|  17.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 17.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  17.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  17.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  52.0k|    {
  490|  52.0k|        return m_has_value;
  491|  52.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.9k|    {
  456|  17.9k|        return m_value;
  457|  17.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  17.0k|    {
 1046|  17.0k|        this->destroy_value();
 1047|  17.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  17.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  17.0k|    {
  504|  17.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  17.0k|                                  std::forward<Args>(args)...);
  506|  17.0k|        m_has_value = false;
  507|  17.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.0k|    {
  473|  17.0k|        return m_unexpected;
  474|  17.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  17.0k|    {
  481|  17.0k|        return std::move(m_unexpected);
  482|  17.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8767|  17.5k|    {
 8768|  17.5k|        return m_str;
 8769|  17.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  17.5k|{
 6110|  17.5k|    detail::check_scan_arg_types<Args...>();
 6111|  17.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  17.5k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5824|  17.5k|{
 5825|  17.5k|    constexpr bool default_constructible_constraint =
 5826|  17.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  17.5k|    static_assert(default_constructible_constraint,
 5828|  17.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  17.5k|    constexpr bool destructible_constraint =
 5831|  17.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  17.5k|    static_assert(destructible_constraint,
 5833|  17.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  17.5k|    constexpr bool non_reference_constraint =
 5836|  17.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  17.5k|    static_assert(non_reference_constraint,
 5838|  17.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  17.5k|    constexpr bool movable_constraint =
 5841|  17.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  17.5k|    static_assert(movable_constraint,
 5843|  17.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  17.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  17.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  17.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  17.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  17.5k|    {
 6087|  17.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  17.5k|    {
 6095|  17.5k|        return {detail::make_arg<
 6096|  17.5k|            kind, Context,
 6097|  17.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  17.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  17.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5874|  17.5k|{
 5875|  17.5k|    return make_value<Context>(value).ref_value;
 5876|  17.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5809|  17.5k|{
 5810|  17.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  17.5k|                                  needs_context_tag>) {
 5814|  17.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  17.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5648|  17.5k|    {                                                                        \
 5649|  17.5k|        return val;                                                          \
 5650|  17.5k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5778|  17.5k|{
 5779|  17.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  17.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  17.5k|    constexpr bool scannable_char =
 5783|  17.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  17.5k|    static_assert(scannable_char,
 5785|  17.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  17.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  17.5k|    constexpr bool scannable_const =
 5789|  17.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  17.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  17.5k|    constexpr bool scannable_disabled =
 5793|  17.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  17.5k|    static_assert(scannable_disabled,
 5795|  17.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  17.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  17.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  17.5k|    static_assert(
 5800|  17.5k|        scannable,
 5801|  17.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  17.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  17.5k|    return arg_value{arg};
 5805|  17.5k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5562|  17.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  17.5k|    {
 5564|  17.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  17.9k|    {
 1815|  17.9k|        return &value();
 1816|  17.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  17.9k|    {
 1769|  17.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.9k|        return this->get_value();
 1771|  17.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6353|  17.5k|    {
 6354|  17.5k|        return m_values;
 6355|  17.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  17.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  17.5k|    {
 6137|  17.5k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  17.5k|        : m_str(r.str)
 8763|  17.5k|    {
 8764|  17.5k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   526k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   526k|    {
 3742|   526k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   526k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   526k|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|  3.32k|    {
 3753|  3.32k|        return m_code;
 3754|  3.32k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  62.7k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  62.7k|    else {
 3981|  62.7k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  62.7k|    }
 3983|  62.7k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  2.28M|    {
  572|  2.28M|        return m_has_value;
  573|  2.28M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   272k|    {
  555|   272k|        return m_unexpected;
  556|   272k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   268k|    {
 1746|   268k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   268k|        return this->get_unexpected().error();
 1748|   268k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 6932|  3.44k|    {
 6933|  3.44k|        return m_size;
 6934|  3.44k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6973|  3.99k|    {
 6974|  3.99k|        SCN_GCC_COMPAT_PUSH
 6975|  3.99k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6976|  3.99k|        switch (type) {
 6977|  1.72k|            case presentation_type::none:
  ------------------
  |  Branch (6977:13): [True: 1.72k, False: 2.26k]
  ------------------
 6978|  1.72k|                return 10;
 6979|     74|            case presentation_type::int_generic:
  ------------------
  |  Branch (6979:13): [True: 74, False: 3.92k]
  ------------------
 6980|     74|                return 0;
 6981|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6981:13): [True: 0, False: 3.99k]
  ------------------
 6982|      0|                return arbitrary_base;
 6983|       |
 6984|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6984:13): [True: 38, False: 3.95k]
  ------------------
 6985|     38|                return 2;
 6986|     76|            case presentation_type::int_octal:
  ------------------
  |  Branch (6986:13): [True: 76, False: 3.91k]
  ------------------
 6987|     76|                return 8;
 6988|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6988:13): [True: 40, False: 3.95k]
  ------------------
 6989|     78|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6989:13): [True: 38, False: 3.95k]
  ------------------
 6990|     78|                return 10;
 6991|  2.00k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6991:13): [True: 2.00k, False: 1.99k]
  ------------------
 6992|  2.00k|                return 16;
 6993|       |
 6994|      0|            default:
  ------------------
  |  Branch (6994:13): [True: 0, False: 3.99k]
  ------------------
 6995|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6996|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6997|  3.99k|        }
 6998|  3.99k|        SCN_GCC_COMPAT_POP
 6999|  3.99k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  67.7k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7014|  7.01k|    {
 7015|  7.01k|        m_specs.align = align;
 7016|  7.01k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7034|  10.1k|    {
 7035|  10.1k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7035:13): [True: 0, False: 10.1k]
  |  Branch (7035:39): [True: 0, False: 0]
  ------------------
 7036|       |            // clang-format off
 7037|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7038|       |            // clang-format on
 7039|      0|        }
 7040|       |
 7041|  10.1k|        m_specs.width = width;
 7042|  10.1k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7044|  8.46k|    {
 7045|  8.46k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7045:13): [True: 68, False: 8.39k]
  ------------------
 7046|       |            // clang-format off
 7047|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7048|       |            // clang-format on
 7049|     68|        }
 7050|       |
 7051|  8.39k|        m_specs.precision = prec;
 7052|  8.39k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|  67.8k|    {
 7056|  67.8k|        m_specs.type = type;
 7057|  67.8k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7060|  1.00M|    {
 7061|  1.00M|        const auto cp_value = static_cast<unsigned>(cp);
 7062|  1.00M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  864|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 864k, False: 142k]
  |  |  ------------------
  ------------------
 7063|   864k|            m_specs.charset_literals[cp_value / 8] |=
 7064|   864k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7065|   864k|        }
 7066|   142k|        else {
 7067|   142k|            m_specs.charset_has_nonascii = true;
 7068|   142k|        }
 7069|  1.00M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7072|  9.10k|    {
 7073|  9.10k|        const auto begin_value = static_cast<unsigned>(begin);
 7074|  9.10k|        const auto end_value = static_cast<unsigned>(end);
 7075|  9.10k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  9.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7076|       |
 7077|  9.10k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  9.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.63k, False: 4.47k]
  |  |  ------------------
  ------------------
 7078|       |            // No need to bit-twiddle with a mask, because with the
 7079|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7080|  4.63k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  4.63k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7081|   310k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7081:40): [True: 306k, False: 4.63k]
  ------------------
 7082|   306k|                m_specs.charset_literals[v / 8] |=
 7083|   306k|                    static_cast<unsigned char>(1ul << (v % 8));
 7084|   306k|            }
 7085|  4.63k|        }
 7086|  4.47k|        else {
 7087|  4.47k|            m_specs.charset_has_nonascii = true;
 7088|  4.47k|        }
 7089|  9.10k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7092|  2.90k|    {
 7093|  2.90k|        m_specs.charset_is_inverted = true;
 7094|  2.90k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7111|  38.2k|    {
 7112|  38.2k|        m_specs.regexp_flags = flags;
 7113|  38.2k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|  10.0k|    {
 7118|  10.0k|        SCN_UNLIKELY_ATTR
 7119|  10.0k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|  10.0k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  1.09M|    {
 7129|  1.09M|        return m_error;
 7130|  1.09M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   299k|{
 3918|   299k|    return unexpected(scan_error{c, m});
 3919|   299k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4168|  94.8k|{
 4169|  94.8k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  94.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4170|       |
 4171|  94.8k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  94.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  94.8k|    };
 4174|       |
 4175|  94.8k|    if (input.size() == 1) {
  ------------------
  |  Branch (4175:9): [True: 82.9k, False: 11.9k]
  ------------------
 4176|  82.9k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  930|  82.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  82.9k|        return static_cast<char32_t>(input[0]);
 4178|  82.9k|    }
 4179|       |
 4180|  11.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (4180:9): [True: 11.1k, False: 804]
  ------------------
 4181|  11.1k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  930|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4182|  11.1k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4183|       |
 4184|  11.1k|        char32_t cp{};
 4185|  11.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4186|  11.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4187|  11.1k|        return cp;
 4188|  11.1k|    }
 4189|       |
 4190|    804|    if (input.size() == 3) {
  ------------------
  |  Branch (4190:9): [True: 680, False: 124]
  ------------------
 4191|    680|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  930|    680|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    680|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4192|    680|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    680|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    680|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4193|    680|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    680|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    680|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4194|       |
 4195|    680|        char32_t cp{};
 4196|    680|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4197|    680|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4198|    680|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4199|    680|        return cp;
 4200|    680|    }
 4201|       |
 4202|    124|    if (input.size() == 4) {
  ------------------
  |  Branch (4202:9): [True: 124, False: 0]
  ------------------
 4203|    124|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4204|    124|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4205|    124|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|    124|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4207|    124|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  930|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4208|       |
 4209|    124|        char32_t cp{};
 4210|    124|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4211|    124|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4212|    124|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4213|    124|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4214|    124|        return cp;
 4215|    124|    }
 4216|       |
 4217|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4218|       |    // gcc 7 thinks we'll get here, even when we won't
 4219|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|      0|#endif
 4221|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4222|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   322M|{
 4308|       |    // Pattern_White_Space property
 4309|   322M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 147k, False: 322M]
  |  Branch (4309:27): [True: 7.98k, False: 139k]
  ------------------
 4310|   322M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 4.08k, False: 322M]
  ------------------
 4311|   322M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 5.63k, False: 322M]
  ------------------
 4312|   322M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 2.02k, False: 322M]
  ------------------
 4313|   322M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 3.32k, False: 322M]
  ------------------
 4314|   322M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.20k, False: 322M]
  ------------------
 4315|   322M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 102, False: 322M]
  ------------------
 4316|   322M|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6862|  54.8k|{
 6863|  54.8k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6864|  54.8k|                                    static_cast<unsigned>(b));
 6865|  54.8k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6867|  4.26k|{
 6868|  4.26k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6869|  4.26k|                                    static_cast<unsigned>(b));
 6870|  4.26k|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6882|  4.26k|{
 6883|  4.26k|    return a = a | b;
 6884|  4.26k|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|    892|{
 7812|    892|    switch (type) {
 7813|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 100, False: 792]
  ------------------
 7814|    100|            return arg_type_category::none;
 7815|       |
 7816|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 892]
  ------------------
 7817|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 892]
  ------------------
 7818|     88|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 88, False: 804]
  ------------------
 7819|     88|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 892]
  ------------------
 7820|     88|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 892]
  ------------------
 7821|     88|            return arg_type_category::integer;
 7822|       |
 7823|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 892]
  ------------------
 7824|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 892]
  ------------------
 7825|     88|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 88, False: 804]
  ------------------
 7826|     88|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 892]
  ------------------
 7827|     88|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 892]
  ------------------
 7828|     88|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|     88|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 88, False: 804]
  ------------------
 7831|     88|            return arg_type_category::pointer;
 7832|     88|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 88, False: 804]
  ------------------
 7833|     88|            return arg_type_category::boolean;
 7834|     46|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 46, False: 846]
  ------------------
 7835|     88|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 42, False: 850]
  ------------------
 7836|     88|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 892]
  ------------------
 7837|     88|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 892]
  ------------------
 7840|     88|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 88, False: 804]
  ------------------
 7841|     88|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 892]
  ------------------
 7842|     88|            return arg_type_category::floating;
 7843|       |
 7844|     46|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 46, False: 846]
  ------------------
 7845|    134|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 88, False: 804]
  ------------------
 7846|    176|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 42, False: 850]
  ------------------
 7847|    264|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 88, False: 804]
  ------------------
 7848|    264|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 892]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 892]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|    892|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|    892|            SCN_CLANG_POP
 7859|    892|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|    892|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  3.45k|    {
 1756|  3.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.45k|        return std::move(this->get_unexpected().error());
 1758|  3.45k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7897|  13.8k|{
 7898|  13.8k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.7k, False: 2.03k]
  |  |  ------------------
  ------------------
 7899|  11.7k|        return handler.on_error("Invalid type specifier for integer type");
 7900|  11.7k|    }
 7901|  2.03k|    if (specs.localized) {
  ------------------
  |  Branch (7901:9): [True: 116, False: 1.91k]
  ------------------
 7902|    116|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 108]
  |  |  ------------------
  ------------------
 7903|       |            // clang-format off
 7904|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7905|       |            // clang-format on
 7906|      8|            return;
 7907|      8|        }
 7908|    108|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 108]
  |  |  ------------------
  ------------------
 7909|       |            // clang-format off
 7910|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7911|       |            // clang-format on
 7912|      0|        }
 7913|    108|    }
 7914|  2.03k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   236k|{
 2094|   236k|    return SCN_FWD(t);
  ------------------
  |  |  936|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   236k|}
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7941|  6.91k|{
 7942|  6.91k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7942:9): [True: 6.02k, False: 886]
  ------------------
 7943|  6.91k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7943:10): [True: 130, False: 5.89k]
  ------------------
 7944|  6.02k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7944:10): [True: 5.79k, False: 96]
  ------------------
 7945|  5.92k|        SCN_UNLIKELY_ATTR
 7946|  5.92k|        return handler.on_error("Invalid type specifier for float type");
 7947|  5.92k|    }
 7948|  6.91k|}
_ZNK3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  489|  25.2k|    {
  490|  25.2k|        return m_has_value;
  491|  25.2k|    }
_ZNK3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1739|  12.6k|    {
 1740|  12.6k|        return has_value();
 1741|  12.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.6k|    {
  456|  12.6k|        return m_value;
  457|  12.6k|    }
_ZNR3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  12.6k|    {
 1769|  12.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.6k|        return this->get_value();
 1771|  12.6k|    }
_ZNO3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  12.6k|    {
 1805|  12.6k|        return std::move(value());
 1806|  12.6k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  2.01M|    {
 1740|  2.01M|        return has_value();
 1741|  2.01M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7953|  20.5k|{
 7954|  20.5k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7954:9): [True: 2.58k, False: 17.9k]
  ------------------
 7955|  20.5k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7955:9): [True: 786, False: 17.1k]
  ------------------
 7956|  20.5k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7956:9): [True: 3.69k, False: 13.4k]
  ------------------
 7957|  20.5k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7957:9): [True: 12.1k, False: 1.30k]
  ------------------
 7958|  20.5k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7958:9): [True: 552, False: 756]
  ------------------
 7959|  19.7k|        return;
 7960|  19.7k|    }
 7961|    756|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7961:9): [True: 162, False: 594]
  ------------------
 7962|    162|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 150]
  |  |  ------------------
  ------------------
 7963|       |            // clang-format off
 7964|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7965|       |            // clang-format on
 7966|     12|        }
 7967|    150|        return;
 7968|    162|    }
 7969|    594|    SCN_UNLIKELY_ATTR
 7970|    594|    handler.on_error("Invalid type specifier for string");
 7971|    594|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7987|  6.91k|{
 7988|  6.91k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7988:9): [True: 6.02k, False: 886]
  ------------------
 7989|  6.91k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7989:9): [True: 5.75k, False: 274]
  ------------------
 7990|  6.91k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7990:9): [True: 5.72k, False: 30]
  ------------------
 7991|  6.91k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7991:9): [True: 5.69k, False: 22]
  ------------------
 7992|  6.91k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7992:9): [True: 5.68k, False: 18]
  ------------------
 7993|  6.91k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7993:9): [True: 5.66k, False: 14]
  ------------------
 7994|  6.91k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7994:9): [True: 5.63k, False: 30]
  ------------------
 7995|  6.91k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7995:9): [True: 5.62k, False: 16]
  ------------------
 7996|  5.62k|        SCN_UNLIKELY_ATTR
 7997|  5.62k|        return handler.on_error("Invalid type specifier for boolean");
 7998|  5.62k|    }
 7999|  6.91k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7919|  6.83k|{
 7920|  6.83k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7920:9): [True: 5.87k, False: 958]
  ------------------
 7921|  6.83k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7921:9): [True: 0, False: 958]
  ------------------
 7922|  5.87k|        SCN_UNLIKELY_ATTR
 7923|  5.87k|        return handler.on_error("Invalid type specifier for character type");
 7924|  5.87k|    }
 7925|  6.83k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7976|  6.83k|{
 7977|  6.83k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7977:9): [True: 5.97k, False: 862]
  ------------------
 7978|  6.83k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7978:9): [True: 5.96k, False: 10]
  ------------------
 7979|  5.96k|        SCN_UNLIKELY_ATTR
 7980|  5.96k|        return handler.on_error("Invalid type specifier for pointer");
 7981|  5.96k|    }
 7982|  6.83k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   322M|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   322M|    else {
 3981|   322M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   322M|    }
 3983|   322M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.15M|    {
 3480|  1.15M|        return m_iterator;
 3481|  1.15M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.02M|    {
 3484|  1.02M|        return m_sentinel;
 3485|  1.02M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   705k|    {
 3480|   705k|        return m_iterator;
 3481|   705k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   645M|    {
 3484|   645M|        return m_sentinel;
 3485|   645M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   123k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|    174|{
 1350|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    174|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  2.18k|    {
  365|  2.18k|        return m_unexpected;
  366|  2.18k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   299k|        : m_unexpected(std::forward<Err>(e))
  350|   299k|    {
  351|   299k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   299k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   299k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   235k|        : base(unexpect, std::move(e.error())),
 1616|   235k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   235k|    {
 1618|   235k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   235k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   235k|          m_has_value(false)
  451|   235k|    {
  452|   235k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   239k|    {
 1316|   239k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  67.7k|        : base(unexpect, std::move(e.error())),
 1616|  67.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  67.7k|    {
 1618|  67.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  68.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  68.7k|          m_has_value(false)
  451|  68.7k|    {
  452|  68.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  96.1k|    {
 1316|  96.1k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  26.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  26.0k|    {
 1572|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  26.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  26.0k|    {
  442|  26.0k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  97.0k|    {
 1740|  97.0k|        return has_value();
 1741|  97.0k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   191k|    {
  490|   191k|        return m_has_value;
  491|   191k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  67.8k|    {
 1746|  67.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  67.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  67.8k|        return this->get_unexpected().error();
 1748|  67.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  67.8k|    {
  473|  67.8k|        return m_unexpected;
  474|  67.8k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  18.7k|    {
 1805|  18.7k|        return std::move(value());
 1806|  18.7k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  26.6k|    {
 1769|  26.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  26.6k|        return this->get_value();
 1771|  26.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  26.6k|    {
  456|  26.6k|        return m_value;
  457|  26.6k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  40.8k|        : base(unexpect, std::move(e.error())),
 1616|  40.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  40.8k|    {
 1618|  40.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  41.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  41.6k|          m_has_value(false)
  451|  41.6k|    {
  452|  41.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.2k|    {
 1316|  61.2k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  19.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  19.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  19.1k|    {
 1572|  19.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  19.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  19.1k|    {
  442|  19.1k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  61.9k|    {
 1740|  61.9k|        return has_value();
 1741|  61.9k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   121k|    {
  490|   121k|        return m_has_value;
  491|   121k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  40.8k|    {
 1746|  40.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  40.8k|        return this->get_unexpected().error();
 1748|  40.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  40.8k|    {
  473|  40.8k|        return m_unexpected;
  474|  40.8k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  15.0k|    {
 1805|  15.0k|        return std::move(value());
 1806|  15.0k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  18.7k|    {
 1769|  18.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  18.7k|        return this->get_value();
 1771|  18.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  18.7k|    {
  456|  18.7k|        return m_value;
  457|  18.7k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  8.35k|    {
 1979|  8.35k|        return detail::transform_error_impl(std::move(*this),
 1980|  8.35k|                                            std::forward<F>(f));
 1981|  8.35k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  8.35k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  8.35k|    else {
 1472|  8.35k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  8.35k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  8.35k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.35k, False: 0]
  |  |  ------------------
  ------------------
 1474|  8.35k|                   ? result(*std::forward<Exp>(exp))
 1475|  8.35k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  8.35k|    }
 1479|  8.35k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  65.4k|    {
  490|  65.4k|        return m_has_value;
  491|  65.4k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  10.2k|    {
 1805|  10.2k|        return std::move(value());
 1806|  10.2k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  29.8k|    {
 1769|  29.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  29.8k|        return this->get_value();
 1771|  29.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  29.8k|    {
  456|  29.8k|        return m_value;
  457|  29.8k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    102|    {
 1756|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    102|        return std::move(this->get_unexpected().error());
 1758|    102|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    102|    {
  473|    102|        return m_unexpected;
  474|    102|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    928|        : base(unexpect, std::forward<Args>(args)...),
 1626|    928|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    928|    {
 1628|    928|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8836|  5.77k|    {
 8837|  5.77k|        return m_args;
 8838|  5.77k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|  46.0k|    {
 8842|  46.0k|        return m_locale;
 8843|  46.0k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|  78.7k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  78.7k|    {
 8849|  78.7k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  6.10k|    {
 3000|  6.10k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  6.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  6.10k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  6.10k|    {
 2981|  6.10k|        return t.data();
 2982|  6.10k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8836|  4.23k|    {
 8837|  4.23k|        return m_args;
 8838|  4.23k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|  25.9k|    {
 8842|  25.9k|        return m_locale;
 8843|  25.9k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   157k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   157k|    {
 8849|   157k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   560k|        : base(unexpect, std::move(e.error())),
 1616|   560k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   560k|    {
 1618|   560k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   560k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   560k|          m_has_value(false)
  550|   560k|    {
  551|   560k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   560k|    {
 1316|   560k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|   586k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|   586k|        : m_deferred_init(), m_has_value(true)
  529|   586k|    {
  530|   586k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 6938|  1.77k|    {
 6939|  1.77k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|  1.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|  1.77k|        CharT r{};
 6941|  1.77k|        std::memcpy(&r, m_data, m_size);
 6942|  1.77k|        return r;
 6943|  1.77k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  1.11k|        : m_unexpected(std::forward<Err>(e))
  350|  1.11k|    {
  351|  1.11k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.11k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  1.29k|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.29k|    {
  360|  1.29k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.29k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.29k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6947|    800|    {
 6948|    800|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6949|    800|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3106|     52|    {
 3107|     52|        return fn::impl(std::forward<T>(t));
 3108|     52|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3097|     52|    {
 3098|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|     52|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|     52|    {
 3075|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|     52|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|     52|    {
 3041|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|     52|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|    174|        : m_unexpected(std::forward<Err>(e))
  350|    174|    {
  351|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|    174|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|      8|        : m_unexpected(std::forward<Err>(e))
  350|      8|    {
  351|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|      8|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  17.1k|    {
  365|  17.1k|        return m_unexpected;
  366|  17.1k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.49k|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.49k|    {
  360|  3.49k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.49k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.49k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  26.1k|        : m_unexpected(std::forward<Err>(e))
  350|  26.1k|    {
  351|  26.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  26.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  26.1k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  26.1k|    {
  365|  26.1k|        return m_unexpected;
  366|  26.1k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  26.1k|        : m_unexpected(std::forward<Args>(args)...)
  359|  26.1k|    {
  360|  26.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  26.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  26.1k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|    722|{
 1350|    722|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    722|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  2.76k|        : m_unexpected(std::forward<Err>(e))
  350|  2.76k|    {
  351|  2.76k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.76k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.76k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|  1.03k|{
 1350|  1.03k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  1.03k|}
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   208k|{
  316|   208k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   208k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   137k|    {
 3496|   137k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   137k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    418|        : base(unexpect, std::move(e.error())),
 1616|    418|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    418|    {
 1618|    418|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    418|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    418|          m_has_value(false)
  451|    418|    {
  452|    418|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  35.5k|    {
 1316|  35.5k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  35.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  35.1k|    {
 1572|  35.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  35.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  35.1k|    {
  442|  35.1k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  25.1k|    {
 1740|  25.1k|        return has_value();
 1741|  25.1k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  19.5k|    {
 1795|  19.5k|        return value();
 1796|  19.5k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  6.51k|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.51k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.51k|    {
 1572|  6.51k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  6.51k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.51k|    {
  442|  6.51k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.85k|    {
 1316|  6.85k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    344|        : base(unexpect, std::move(e.error())),
 1616|    344|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    344|    {
 1618|    344|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    344|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    344|          m_has_value(false)
  451|    344|    {
  452|    344|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1739|  4.54k|    {
 1740|  4.54k|        return has_value();
 1741|  4.54k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  12.2k|    {
  490|  12.2k|        return m_has_value;
  491|  12.2k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|  3.11k|    {
 1795|  3.11k|        return value();
 1796|  3.11k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  5.11k|    {
 1769|  5.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.11k|        return this->get_value();
 1771|  5.11k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  5.11k|    {
  456|  5.11k|        return m_value;
  457|  5.11k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    174|        : base(unexpect, std::move(e.error())),
 1616|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    174|    {
 1618|    174|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    174|          m_has_value(false)
  451|    174|    {
  452|    174|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.37k|    {
 1316|  3.37k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  3.20k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.20k|    {
 1572|  3.20k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  3.20k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.20k|    {
  442|  3.20k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    676|    {
 1979|    676|        return detail::transform_error_impl(std::move(*this),
 1980|    676|                                            std::forward<F>(f));
 1981|    676|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    676|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    676|    else {
 1472|    676|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    676|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    676|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 676, False: 0]
  |  |  ------------------
  ------------------
 1474|    676|                   ? result(*std::forward<Exp>(exp))
 1475|    676|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    676|    }
 1479|    676|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.00k|    {
 1805|  2.00k|        return std::move(value());
 1806|  2.00k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|  1.94k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.94k|    {
 1572|  1.94k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.94k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.94k|    {
  442|  1.94k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.72k|    {
 1316|  6.72k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1755|    316|    {
 1756|    316|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    316|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    316|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    316|        return std::move(this->get_unexpected().error());
 1758|    316|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    316|    {
  473|    316|        return m_unexpected;
  474|    316|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.23k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.23k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.23k|    {
 1628|  1.23k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  4.17k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.17k|          m_has_value(false)
  451|  4.17k|    {
  452|  4.17k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.47k|    {
 2869|  1.47k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.47k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.47k|    {
 2850|  1.47k|        return decay_copy(t.begin());
 2851|  1.47k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2093|  3.19k|{
 2094|  3.19k|    return SCN_FWD(t);
  ------------------
  |  |  936|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  3.19k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3479|  1.47k|    {
 3480|  1.47k|        return m_iterator;
 3481|  1.47k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.47k|    {
 2926|  1.47k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.47k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.47k|    {
 2908|  1.47k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.47k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3483|  1.47k|    {
 3484|  1.47k|        return m_sentinel;
 3485|  1.47k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|  1.47k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.47k|    static_cast<    \
  |  |  935|  1.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.47k|    static_cast<    \
  |  |  935|  1.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.47k|    {
 3466|  1.47k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  3.37k|    {
 1740|  3.37k|        return has_value();
 1741|  3.37k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.74k|    {
  490|  6.74k|        return m_has_value;
  491|  6.74k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1745|    174|    {
 1746|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    174|        return this->get_unexpected().error();
 1748|    174|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    174|    {
  473|    174|        return m_unexpected;
  474|    174|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  3.20k|    {
 1805|  3.20k|        return std::move(value());
 1806|  3.20k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  3.20k|    {
 1769|  3.20k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.20k|        return this->get_value();
 1771|  3.20k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.20k|    {
  456|  3.20k|        return m_value;
  457|  3.20k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.0k|    {
 1316|  17.0k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  17.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  17.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  17.0k|    {
 1572|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  17.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  17.0k|    {
  442|  17.0k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  17.0k|    {
 1740|  17.0k|        return has_value();
 1741|  17.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  34.0k|    {
  490|  34.0k|        return m_has_value;
  491|  34.0k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  17.0k|    {
 1805|  17.0k|        return std::move(value());
 1806|  17.0k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  17.0k|    {
 1769|  17.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.0k|        return this->get_value();
 1771|  17.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.0k|    {
  456|  17.0k|        return m_value;
  457|  17.0k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  2.94k|        : base(unexpect, std::move(e.error())),
 1616|  2.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.94k|    {
 1618|  2.94k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    564|        : base(unexpect, std::move(e.error())),
 1616|    564|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    564|    {
 1618|    564|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    880|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    880|          m_has_value(false)
  451|    880|    {
  452|    880|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.08k|    {
 1316|  6.08k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  3.88k|        : base(unexpect, std::move(e.error())),
 1616|  3.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.88k|    {
 1618|  3.88k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.88k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.88k|          m_has_value(false)
  451|  3.88k|    {
  452|  3.88k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1739|  5.60k|    {
 1740|  5.60k|        return has_value();
 1741|  5.60k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  10.9k|    {
  490|  10.9k|        return m_has_value;
  491|  10.9k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1745|  2.06k|    {
 1746|  2.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.06k|        return this->get_unexpected().error();
 1748|  2.06k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  2.80k|    {
  473|  2.80k|        return m_unexpected;
  474|  2.80k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|  1.00k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.00k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.00k|    {
 1572|  1.00k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|  1.00k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.00k|    {
  442|  1.00k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.00k|    {
 1316|  1.00k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.32k|    {
 1769|  1.32k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.32k|        return this->get_value();
 1771|  1.32k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|  1.32k|    {
  456|  1.32k|        return m_value;
  457|  1.32k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|    756|    {
 1740|    756|        return has_value();
 1741|    756|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  2.00k|    {
  490|  2.00k|        return m_has_value;
  491|  2.00k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    756|    {
 1316|    756|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|  1.00k|    {
 1805|  1.00k|        return std::move(value());
 1806|  1.00k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.00k|    {
 1769|  1.00k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.00k|        return this->get_value();
 1771|  1.00k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|  1.00k|    {
  456|  1.00k|        return m_value;
  457|  1.00k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  53.7k|    {
 3484|  53.7k|        return m_sentinel;
 3485|  53.7k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|  1.64k|    {
 1979|  1.64k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.64k|                                            std::forward<F>(f));
 1981|  1.64k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|  1.64k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.64k|    else {
 1472|  1.64k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.64k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.64k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.32k, False: 316]
  |  |  ------------------
  ------------------
 1474|  1.64k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.64k|                   : result(unexpect,
 1476|    316|                            trivial_invoke(std::forward<F>(f),
 1477|    316|                                           std::forward<Exp>(exp).error()));
 1478|  1.64k|    }
 1479|  1.64k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|  1.32k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.32k|    {
 1572|  1.32k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.32k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.32k|    {
  442|  1.32k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    316|        : base(unexpect, std::forward<Args>(args)...),
 1626|    316|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    316|    {
 1628|    316|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.32k|    {
 1805|  1.32k|        return std::move(value());
 1806|  1.32k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  65.3k|    {
 3480|  65.3k|        return m_iterator;
 3481|  65.3k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|    756|        : base(std::in_place, std::forward<U>(val)),
 1570|    756|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    756|    {
 1572|    756|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    756|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    756|    {
  442|    756|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    756|    {
 1979|    756|        return detail::transform_error_impl(std::move(*this),
 1980|    756|                                            std::forward<F>(f));
 1981|    756|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|    756|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    756|    else {
 1472|    756|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    756|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    756|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 756, False: 0]
  |  |  ------------------
  ------------------
 1474|    756|                   ? result(*std::forward<Exp>(exp))
 1475|    756|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    756|    }
 1479|    756|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.51k|    {
  490|  1.51k|        return m_has_value;
  491|  1.51k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    756|    {
 1805|    756|        return std::move(value());
 1806|    756|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    756|    {
 1769|    756|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    756|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    756|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    756|        return this->get_value();
 1771|    756|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    756|    {
  456|    756|        return m_value;
  457|    756|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|    756|        : base(std::in_place, std::forward<U>(val)),
 1570|    756|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    756|    {
 1572|    756|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    756|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    756|    {
  442|    756|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    756|    {
 1316|    756|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1739|    756|    {
 1740|    756|        return has_value();
 1741|    756|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.51k|    {
  490|  1.51k|        return m_has_value;
  491|  1.51k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    756|    {
 1805|    756|        return std::move(value());
 1806|    756|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    756|    {
 1769|    756|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    756|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    756|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    756|        return this->get_value();
 1771|    756|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    756|    {
  456|    756|        return m_value;
  457|    756|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    736|    {
 1979|    736|        return detail::transform_error_impl(std::move(*this),
 1980|    736|                                            std::forward<F>(f));
 1981|    736|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    736|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    736|    else {
 1472|    736|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    736|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    736|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 736]
  |  |  ------------------
  ------------------
 1474|    736|                   ? result(*std::forward<Exp>(exp))
 1475|    736|                   : result(unexpect,
 1476|    736|                            trivial_invoke(std::forward<F>(f),
 1477|    736|                                           std::forward<Exp>(exp).error()));
 1478|    736|    }
 1479|    736|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1755|    736|    {
 1756|    736|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    736|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    736|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    736|        return std::move(this->get_unexpected().error());
 1758|    736|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|  1.23k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.23k|    static_cast<    \
  |  |  935|  1.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.23k|    {
 3912|  1.23k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  26.2k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  26.2k|    static_cast<    \
  |  |  935|  26.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  26.2k|    static_cast<    \
  |  |  935|  26.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  26.2k|    {
 3466|  26.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|     20|        : base(unexpect, std::move(e.error())),
 1616|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     20|    {
 1618|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|     20|        : m_has_value(false)
  637|     20|    {
  638|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|     20|    {
  701|     20|        scn::detail::construct_at(unexpected_ptr(),
  702|     20|                                  std::forward<Args>(args)...);
  703|     20|        m_has_value = false;
  704|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     60|    {
  730|     60|        return reinterpret_cast<unexpected<E>*>(
  731|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     60|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     20|    {
 1316|     20|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1739|     20|    {
 1740|     20|        return has_value();
 1741|     20|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     60|    {
  687|     60|        return m_has_value;
  688|     60|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1745|     20|    {
 1746|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     20|        return this->get_unexpected().error();
 1748|     20|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     20|    {
  670|     20|        return *unexpected_ptr();
  671|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  642|     20|    {
  643|     20|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 20]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     20|        else {
  647|     20|            destroy_unexpected();
  648|     20|        }
  649|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     20|    {
  712|     20|        scn::detail::destroy_at(unexpected_ptr());
  713|     20|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1739|  6.96k|    {
 1740|  6.96k|        return has_value();
 1741|  6.96k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  13.4k|    {
  490|  13.4k|        return m_has_value;
  491|  13.4k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1745|  3.93k|    {
 1746|  3.93k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.93k|        return this->get_unexpected().error();
 1748|  3.93k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.93k|    {
  473|  3.93k|        return m_unexpected;
  474|  3.93k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.94k|    {
 1805|  1.94k|        return std::move(value());
 1806|  1.94k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  2.54k|    {
 1769|  2.54k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.54k|        return this->get_value();
 1771|  2.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.54k|    {
  456|  2.54k|        return m_value;
  457|  2.54k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.01k|        : base(unexpect, std::move(e.error())),
 1616|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.01k|    {
 1618|  1.01k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.11k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.11k|          m_has_value(false)
  451|  1.11k|    {
  452|  1.11k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.1k|    {
 1316|  14.1k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.1k|        : base(unexpect, std::move(e.error())),
 1616|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.1k|    {
 1618|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.1k|          m_has_value(false)
  451|  11.1k|    {
  452|  11.1k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  15.0k|    {
 1740|  15.0k|        return has_value();
 1741|  15.0k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  23.4k|    {
  490|  23.4k|        return m_has_value;
  491|  23.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  5.55k|    {
 1746|  5.55k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.55k|        return this->get_unexpected().error();
 1748|  5.55k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  5.55k|    {
  473|  5.55k|        return m_unexpected;
  474|  5.55k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  3.61k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.61k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.61k|    {
 1572|  3.61k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.61k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.61k|    {
  442|  3.61k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.61k|    {
 1316|  3.61k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.91k|    {
 1769|  1.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.91k|        return this->get_value();
 1771|  1.91k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.91k|    {
  456|  1.91k|        return m_value;
  457|  1.91k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.71k|    {
 1740|  2.71k|        return has_value();
 1741|  2.71k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  7.23k|    {
  490|  7.23k|        return m_has_value;
  491|  7.23k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.71k|    {
 1316|  2.71k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.61k|    {
 1805|  3.61k|        return std::move(value());
 1806|  3.61k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.61k|    {
 1769|  3.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.61k|        return this->get_value();
 1771|  3.61k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.61k|    {
  456|  3.61k|        return m_value;
  457|  3.61k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   200k|    {
 3375|   200k|        return detail::to_address(ranges::begin(derived()));
 3376|   200k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   200k|    {
 2869|   200k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   200k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   200k|    {
 2850|   200k|        return decay_copy(t.begin());
 2851|   200k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   200k|    {
 3334|   200k|        return static_cast<D&>(*this);
 3335|   200k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.91k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.91k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.91k|    {
 1572|  1.91k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.91k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.91k|    {
  442|  1.91k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.71k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.71k|    {
 1572|  2.71k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.71k|    {
  442|  2.71k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.71k|    {
 1979|  2.71k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.71k|                                            std::forward<F>(f));
 1981|  2.71k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.71k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.71k|    else {
 1472|  2.71k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.71k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.71k, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.71k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.71k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.71k|    }
 1479|  2.71k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.42k|    {
  490|  5.42k|        return m_has_value;
  491|  5.42k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.71k|    {
 1805|  2.71k|        return std::move(value());
 1806|  2.71k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.71k|    {
 1769|  2.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.71k|        return this->get_value();
 1771|  2.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.71k|    {
  456|  2.71k|        return m_value;
  457|  2.71k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.71k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.71k|    {
 1572|  2.71k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.71k|    {
  442|  2.71k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.71k|    {
 1316|  2.71k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|  2.71k|    {
 1740|  2.71k|        return has_value();
 1741|  2.71k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.42k|    {
  490|  5.42k|        return m_has_value;
  491|  5.42k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.71k|    {
 1805|  2.71k|        return std::move(value());
 1806|  2.71k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.71k|    {
 1769|  2.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.71k|        return this->get_value();
 1771|  2.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.71k|    {
  456|  2.71k|        return m_value;
  457|  2.71k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|     24|        : m_has_value(false)
  637|     24|    {
  638|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|     24|    {
  701|     24|        scn::detail::construct_at(unexpected_ptr(),
  702|     24|                                  std::forward<Args>(args)...);
  703|     24|        m_has_value = false;
  704|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     72|    {
  730|     72|        return reinterpret_cast<unexpected<E>*>(
  731|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     24|    {
 1316|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|     24|    {
 1740|     24|        return has_value();
 1741|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     72|    {
  687|     72|        return m_has_value;
  688|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|     24|    {
 1746|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     24|        return this->get_unexpected().error();
 1748|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     24|    {
  670|     24|        return *unexpected_ptr();
  671|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|     24|    {
  643|     24|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 24]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     24|        else {
  647|     24|            destroy_unexpected();
  648|     24|        }
  649|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     24|    {
  712|     24|        scn::detail::destroy_at(unexpected_ptr());
  713|     24|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   187k|    {
 3000|   187k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   187k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   187k|    {
 2981|   187k|        return t.data();
 2982|   187k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  4.33k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.33k|    {
 1572|  4.33k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  4.33k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.33k|    {
  442|  4.33k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  2.41k|{
 1350|  2.41k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  2.41k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    248|    {
 1979|    248|        return detail::transform_error_impl(std::move(*this),
 1980|    248|                                            std::forward<F>(f));
 1981|    248|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    248|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    248|    else {
 1472|    248|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    248|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 248, False: 0]
  |  |  ------------------
  ------------------
 1474|    248|                   ? result(*std::forward<Exp>(exp))
 1475|    248|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    248|    }
 1479|    248|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    248|        : base(std::in_place, std::forward<U>(val)),
 1570|    248|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    248|    {
 1572|    248|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    248|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    248|    {
  442|    248|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    248|    {
 1316|    248|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    248|    {
 1740|    248|        return has_value();
 1741|    248|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    496|    {
  490|    496|        return m_has_value;
  491|    496|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    248|    {
 1805|    248|        return std::move(value());
 1806|    248|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    248|    {
 1769|    248|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    248|        return this->get_value();
 1771|    248|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    248|    {
  456|    248|        return m_value;
  457|    248|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1964|    496|    {
 1965|    496|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    496|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1461|    496|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    496|    else {
 1472|    496|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    496|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    496|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 496]
  |  |  ------------------
  ------------------
 1474|    496|                   ? result(*std::forward<Exp>(exp))
 1475|    496|                   : result(unexpect,
 1476|    496|                            trivial_invoke(std::forward<F>(f),
 1477|    496|                                           std::forward<Exp>(exp).error()));
 1478|    496|    }
 1479|    496|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    600|    {
 1795|    600|        return value();
 1796|    600|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    244|    {
 2869|    244|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    244|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    244|    {
 2850|    244|        return decay_copy(t.begin());
 2851|    244|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|    226|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|    906|    {
 1979|    906|        return detail::transform_error_impl(std::move(*this),
 1980|    906|                                            std::forward<F>(f));
 1981|    906|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|    906|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    906|    else {
 1472|    906|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    906|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    906|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 906, False: 0]
  |  |  ------------------
  ------------------
 1474|    906|                   ? result(*std::forward<Exp>(exp))
 1475|    906|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    906|    }
 1479|    906|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    906|        : base(std::in_place, std::forward<U>(val)),
 1570|    906|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    906|    {
 1572|    906|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    906|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    906|    {
  442|    906|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    906|    {
 1316|    906|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    906|    {
 1740|    906|        return has_value();
 1741|    906|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.81k|    {
  490|  1.81k|        return m_has_value;
  491|  1.81k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    906|    {
 1805|    906|        return std::move(value());
 1806|    906|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    906|    {
 1769|    906|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    906|        return this->get_value();
 1771|    906|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    906|    {
  456|    906|        return m_value;
  457|    906|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|    928|    {
 1965|    928|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    928|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|    928|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    928|    else {
 1472|    928|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    928|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    928|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 928]
  |  |  ------------------
  ------------------
 1474|    928|                   ? result(*std::forward<Exp>(exp))
 1475|    928|                   : result(unexpect,
 1476|    928|                            trivial_invoke(std::forward<F>(f),
 1477|    928|                                           std::forward<Exp>(exp).error()));
 1478|    928|    }
 1479|    928|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|    928|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    928|    static_cast<    \
  |  |  935|    928|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    928|    {
 3912|    928|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  7.81k|    {
 1795|  7.81k|        return value();
 1796|  7.81k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|  2.53k|{
 7445|  2.53k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  2.53k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  2.53k|    auto start = begin;
 7449|  2.53k|    ++begin;
 7450|       |
 7451|  2.53k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.53k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  2.53k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 360, False: 2.17k]
  ------------------
 7458|    360|        handler.on_charset_inverted();
 7459|    360|        ++begin;
 7460|    360|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 360]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|    360|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 6, False: 354]
  ------------------
 7467|      6|            handler.on_charset_single(char32_t{']'});
 7468|      6|            ++begin;
 7469|      6|        }
 7470|    360|    }
 7471|  2.17k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 2.17k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|   334k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 334k, False: 0]
  ------------------
 7476|   334k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|   334k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 2.53k, False: 332k]
  ------------------
 7481|  2.53k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  2.53k|        }
 7483|       |
 7484|   332k|        parse_presentation_set_literal(begin, end, handler);
 7485|   332k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  2.53k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|   332k|{
 7409|   332k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|   332k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|   332k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|   332k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 332k, False: 0]
  |  Branch (7416:25): [True: 2.40k, False: 329k]
  |  Branch (7416:49): [True: 2.40k, False: 0]
  ------------------
 7417|   332k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 2.33k, False: 66]
  ------------------
 7418|  2.33k|        ++begin;
 7419|       |
 7420|  2.33k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  2.33k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.33k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  2.33k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.33k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  2.33k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  2.33k|        return;
 7434|  2.33k|    }
 7435|       |
 7436|   329k|    handler.on_charset_single(cp_first);
 7437|   329k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|   334k|{
 7385|   334k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|   334k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|   334k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  |  Branch (865:45): [True: 0, False: 334k]
  |  |  |  Branch (865:45): [True: 0, False: 334k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|   334k|    const auto cp =
 7394|   334k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|   334k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|   334k|    begin += len;
 7401|   334k|    return cp;
 7402|   334k|}
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.6k|    {
 1316|  12.6k|    }
_ZN3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1569|  12.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  12.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  12.6k|    {
 1572|  12.6k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  440|  12.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  12.6k|    {
  442|  12.6k|    }
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|  10.3k|    {
 7004|  10.3k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|  10.3k|                charset_string_size};
 7006|  10.3k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    600|        : base(std::in_place, std::forward<U>(val)),
 1570|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    600|    {
 1572|    600|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    600|    {
  442|    600|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.45k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.45k|    {
 1572|  1.45k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.45k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.45k|    {
  442|  1.45k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4293|  94.8k|{
 4294|  94.8k|    if constexpr (sizeof(CharT) == 1) {
 4295|  94.8k|        return decode_utf8_code_point_exhaustive_valid(input);
 4296|       |    }
 4297|       |    else if constexpr (sizeof(CharT) == 2) {
 4298|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4299|       |    }
 4300|       |    else {
 4301|       |        SCN_EXPECT(input.size() == 1);
 4302|       |        return static_cast<char32_t>(input.front());
 4303|       |    }
 4304|  94.8k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4171|  12.8k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  12.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  12.8k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 6938|    872|    {
 6939|    872|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|    872|        CharT r{};
 6941|    872|        std::memcpy(&r, m_data, m_size);
 6942|    872|        return r;
 6943|    872|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   322M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   322M|    else {
 4075|       |        // utf-32
 4076|   322M|        static_assert(sizeof(U) == 4);
 4077|   322M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   322M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   322M|        return 1;
 4079|   322M|    }
 4080|   322M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   322M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   322M|    else {
 4281|   322M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   322M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   322M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   322M|        auto cp = static_cast<char32_t>(input.front());
 4283|   322M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   322M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.5k, False: 322M]
  |  |  ------------------
  ------------------
 4284|  57.5k|            return invalid_code_point;
 4285|  57.5k|        }
 4286|   322M|        return cp;
 4287|   322M|    }
 4288|   322M|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  46.8k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  46.8k|    else {
 3966|  46.8k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  46.8k|                                       to_address(first), to_address(last)))};
 3968|  46.8k|    }
 3969|  46.8k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   145k|{
  316|   145k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   145k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   479k|{
  294|   479k|    return p;
  295|   479k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  7.20k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  7.20k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  7.20k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  7.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  7.20k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  7.20k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   333k|{
  316|   333k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   333k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   175k|    {
 3496|   175k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   175k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    126|        : base(unexpect, std::move(e.error())),
 1616|    126|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    126|    {
 1618|    126|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    126|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    126|          m_has_value(false)
  451|    126|    {
  452|    126|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.2k|    {
 1316|  17.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  17.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  17.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  17.0k|    {
 1572|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  17.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  17.0k|    {
  442|  17.0k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|  4.77k|    {
 1740|  4.77k|        return has_value();
 1741|  4.77k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  29.6k|    {
  490|  29.6k|        return m_has_value;
  491|  29.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  12.3k|    {
 1769|  12.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.3k|        return this->get_value();
 1771|  12.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  12.3k|    {
  456|  12.3k|        return m_value;
  457|  12.3k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  1.49k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.49k|    {
 1572|  1.49k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.49k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.49k|    {
  442|  1.49k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.67k|    {
 1316|  1.67k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    178|        : base(unexpect, std::move(e.error())),
 1616|    178|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    178|    {
 1618|    178|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    178|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    178|          m_has_value(false)
  451|    178|    {
  452|    178|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1739|    720|    {
 1740|    720|        return has_value();
 1741|    720|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  2.62k|    {
  490|  2.62k|        return m_has_value;
  491|  2.62k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    772|    {
 1769|    772|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    772|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    772|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    772|        return this->get_value();
 1771|    772|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|    772|    {
  456|    772|        return m_value;
  457|    772|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.27k|    {
 1316|  1.27k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.27k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.27k|    {
 1572|  1.27k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  1.27k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.27k|    {
  442|  1.27k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    246|    {
 1979|    246|        return detail::transform_error_impl(std::move(*this),
 1980|    246|                                            std::forward<F>(f));
 1981|    246|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    246|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    246|    else {
 1472|    246|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    246|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    246|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 246, False: 0]
  |  |  ------------------
  ------------------
 1474|    246|                   ? result(*std::forward<Exp>(exp))
 1475|    246|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    246|    }
 1479|    246|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    772|    {
 1805|    772|        return std::move(value());
 1806|    772|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|    710|        : base(std::in_place, std::forward<U>(val)),
 1570|    710|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    710|    {
 1572|    710|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    710|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    710|    {
  442|    710|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.62k|    {
 1316|  2.62k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1755|    178|    {
 1756|    178|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    178|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    178|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    178|        return std::move(this->get_unexpected().error());
 1758|    178|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    178|    {
  473|    178|        return m_unexpected;
  474|    178|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    506|        : base(unexpect, std::forward<Args>(args)...),
 1626|    506|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    506|    {
 1628|    506|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.73k|          m_has_value(false)
  451|  1.73k|    {
  452|  1.73k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    366|    {
 2869|    366|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    366|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    366|    {
 2850|    366|        return decay_copy(t.begin());
 2851|    366|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2093|    828|{
 2094|    828|    return SCN_FWD(t);
  ------------------
  |  |  936|    828|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|    828|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3479|    366|    {
 3480|    366|        return m_iterator;
 3481|    366|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|    366|    {
 2926|    366|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|    366|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|    366|    {
 2908|    366|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|    366|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3483|    366|    {
 3484|    366|        return m_sentinel;
 3485|    366|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|    366|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    366|    static_cast<    \
  |  |  935|    366|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    366|    static_cast<    \
  |  |  935|    366|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|    366|    {
 3466|    366|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  1.27k|    {
 1740|  1.27k|        return has_value();
 1741|  1.27k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.55k|    {
  490|  2.55k|        return m_has_value;
  491|  2.55k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.27k|    {
 1805|  1.27k|        return std::move(value());
 1806|  1.27k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.27k|    {
 1769|  1.27k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.27k|        return this->get_value();
 1771|  1.27k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.27k|    {
  456|  1.27k|        return m_value;
  457|  1.27k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.2k|    {
 1316|  10.2k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  10.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  10.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  10.2k|    {
 1572|  10.2k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  10.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.2k|    {
  442|  10.2k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  7.61k|    {
 1979|  7.61k|        return detail::transform_error_impl(std::move(*this),
 1980|  7.61k|                                            std::forward<F>(f));
 1981|  7.61k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  7.61k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  7.61k|    else {
 1472|  7.61k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  7.61k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  7.61k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.61k, False: 0]
  |  |  ------------------
  ------------------
 1474|  7.61k|                   ? result(*std::forward<Exp>(exp))
 1475|  7.61k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  7.61k|    }
 1479|  7.61k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  12.3k|    {
 1805|  12.3k|        return std::move(value());
 1806|  12.3k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    126|    {
 1756|    126|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    126|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    126|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    126|        return std::move(this->get_unexpected().error());
 1758|    126|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    126|    {
  473|    126|        return m_unexpected;
  474|    126|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    788|        : base(unexpect, std::forward<Args>(args)...),
 1626|    788|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    788|    {
 1628|    788|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  10.2k|    {
 1740|  10.2k|        return has_value();
 1741|  10.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  20.4k|    {
  490|  20.4k|        return m_has_value;
  491|  20.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  10.2k|    {
 1805|  10.2k|        return std::move(value());
 1806|  10.2k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  10.2k|    {
 1769|  10.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.2k|        return this->get_value();
 1771|  10.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.2k|    {
  456|  10.2k|        return m_value;
  457|  10.2k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.23k|        : base(unexpect, std::move(e.error())),
 1616|  1.23k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.23k|    {
 1618|  1.23k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    280|        : base(unexpect, std::move(e.error())),
 1616|    280|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    280|    {
 1618|    280|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    458|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    458|          m_has_value(false)
  451|    458|    {
  452|    458|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.67k|    {
 1316|  2.67k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  1.69k|        : base(unexpect, std::move(e.error())),
 1616|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.69k|    {
 1618|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.69k|          m_has_value(false)
  451|  1.69k|    {
  452|  1.69k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1739|  2.47k|    {
 1740|  2.47k|        return has_value();
 1741|  2.47k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  4.73k|    {
  490|  4.73k|        return m_has_value;
  491|  4.73k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1745|    924|    {
 1746|    924|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    924|        return this->get_unexpected().error();
 1748|    924|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  1.22k|    {
  473|  1.22k|        return m_unexpected;
  474|  1.22k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|    440|        : base(std::in_place, std::forward<U>(val)),
 1570|    440|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    440|    {
 1572|    440|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    440|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    440|    {
  442|    440|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    440|    {
 1316|    440|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    526|    {
 1769|    526|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    526|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    526|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    526|        return this->get_value();
 1771|    526|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|    526|    {
  456|    526|        return m_value;
  457|    526|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|    338|    {
 1740|    338|        return has_value();
 1741|    338|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|    880|    {
  490|    880|        return m_has_value;
  491|    880|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    338|    {
 1316|    338|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    440|    {
 1805|    440|        return std::move(value());
 1806|    440|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    440|    {
 1769|    440|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    440|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    440|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    440|        return this->get_value();
 1771|    440|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|    440|    {
  456|    440|        return m_value;
  457|    440|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  17.2k|    {
 3484|  17.2k|        return m_sentinel;
 3485|  17.2k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    704|    {
 1979|    704|        return detail::transform_error_impl(std::move(*this),
 1980|    704|                                            std::forward<F>(f));
 1981|    704|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    704|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    704|    else {
 1472|    704|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    704|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    704|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 526, False: 178]
  |  |  ------------------
  ------------------
 1474|    704|                   ? result(*std::forward<Exp>(exp))
 1475|    704|                   : result(unexpect,
 1476|    178|                            trivial_invoke(std::forward<F>(f),
 1477|    178|                                           std::forward<Exp>(exp).error()));
 1478|    704|    }
 1479|    704|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|    526|        : base(std::in_place, std::forward<U>(val)),
 1570|    526|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    526|    {
 1572|    526|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    526|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    526|    {
  442|    526|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    178|        : base(unexpect, std::forward<Args>(args)...),
 1626|    178|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    178|    {
 1628|    178|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    526|    {
 1805|    526|        return std::move(value());
 1806|    526|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  20.1k|    {
 3480|  20.1k|        return m_iterator;
 3481|  20.1k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|    338|        : base(std::in_place, std::forward<U>(val)),
 1570|    338|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    338|    {
 1572|    338|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    338|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    338|    {
  442|    338|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    338|    {
 1979|    338|        return detail::transform_error_impl(std::move(*this),
 1980|    338|                                            std::forward<F>(f));
 1981|    338|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|    338|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    338|    else {
 1472|    338|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    338|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    338|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 338, False: 0]
  |  |  ------------------
  ------------------
 1474|    338|                   ? result(*std::forward<Exp>(exp))
 1475|    338|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    338|    }
 1479|    338|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|    676|    {
  490|    676|        return m_has_value;
  491|    676|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    338|    {
 1805|    338|        return std::move(value());
 1806|    338|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    338|    {
 1769|    338|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    338|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    338|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    338|        return this->get_value();
 1771|    338|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    338|    {
  456|    338|        return m_value;
  457|    338|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|    338|        : base(std::in_place, std::forward<U>(val)),
 1570|    338|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    338|    {
 1572|    338|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    338|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    338|    {
  442|    338|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    338|    {
 1316|    338|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1739|    338|    {
 1740|    338|        return has_value();
 1741|    338|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    676|    {
  490|    676|        return m_has_value;
  491|    676|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    338|    {
 1805|    338|        return std::move(value());
 1806|    338|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    338|    {
 1769|    338|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    338|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    338|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    338|        return this->get_value();
 1771|    338|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    338|    {
  456|    338|        return m_value;
  457|    338|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    302|    {
 1979|    302|        return detail::transform_error_impl(std::move(*this),
 1980|    302|                                            std::forward<F>(f));
 1981|    302|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1461|    302|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    302|    else {
 1472|    302|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    302|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 302]
  |  |  ------------------
  ------------------
 1474|    302|                   ? result(*std::forward<Exp>(exp))
 1475|    302|                   : result(unexpect,
 1476|    302|                            trivial_invoke(std::forward<F>(f),
 1477|    302|                                           std::forward<Exp>(exp).error()));
 1478|    302|    }
 1479|    302|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1755|    302|    {
 1756|    302|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    302|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    302|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    302|        return std::move(this->get_unexpected().error());
 1758|    302|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|    506|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    506|    static_cast<    \
  |  |  935|    506|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    506|    {
 3912|    506|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  6.92k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.92k|    static_cast<    \
  |  |  935|  6.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.92k|    static_cast<    \
  |  |  935|  6.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.92k|    {
 3466|  6.92k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1615|     36|        : base(unexpect, std::move(e.error())),
 1616|     36|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     36|    {
 1618|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  636|     36|        : m_has_value(false)
  637|     36|    {
  638|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  700|     36|    {
  701|     36|        scn::detail::construct_at(unexpected_ptr(),
  702|     36|                                  std::forward<Args>(args)...);
  703|     36|        m_has_value = false;
  704|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|    108|    {
  730|    108|        return reinterpret_cast<unexpected<E>*>(
  731|    108|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|    108|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     36|    {
 1316|     36|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     36|    {
 1740|     36|        return has_value();
 1741|     36|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|    108|    {
  687|    108|        return m_has_value;
  688|    108|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     36|    {
 1746|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     36|        return this->get_unexpected().error();
 1748|     36|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     36|    {
  670|     36|        return *unexpected_ptr();
  671|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     36|    {
  643|     36|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 36]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     36|        else {
  647|     36|            destroy_unexpected();
  648|     36|        }
  649|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     36|    {
  712|     36|        scn::detail::destroy_at(unexpected_ptr());
  713|     36|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1739|  2.73k|    {
 1740|  2.73k|        return has_value();
 1741|  2.73k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.25k|    {
  490|  5.25k|        return m_has_value;
  491|  5.25k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1745|  1.63k|    {
 1746|  1.63k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.63k|        return this->get_unexpected().error();
 1748|  1.63k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.63k|    {
  473|  1.63k|        return m_unexpected;
  474|  1.63k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    710|    {
 1805|    710|        return std::move(value());
 1806|    710|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    890|    {
 1769|    890|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    890|        return this->get_value();
 1771|    890|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|    890|    {
  456|    890|        return m_value;
  457|    890|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    908|        : base(unexpect, std::move(e.error())),
 1616|    908|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    908|    {
 1618|    908|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03k|          m_has_value(false)
  451|  1.03k|    {
  452|  1.03k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  15.2k|    {
 1316|  15.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  9.49k|        : base(unexpect, std::move(e.error())),
 1616|  9.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.49k|    {
 1618|  9.49k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  9.49k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.49k|          m_has_value(false)
  451|  9.49k|    {
  452|  9.49k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  15.9k|    {
 1740|  15.9k|        return has_value();
 1741|  15.9k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  26.3k|    {
  490|  26.3k|        return m_has_value;
  491|  26.3k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  4.84k|    {
 1746|  4.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.84k|        return this->get_unexpected().error();
 1748|  4.84k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  4.84k|    {
  473|  4.84k|        return m_unexpected;
  474|  4.84k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  3.15k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.15k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.15k|    {
 1572|  3.15k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.15k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.15k|    {
  442|  3.15k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.15k|    {
 1316|  3.15k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  4.69k|    {
 1769|  4.69k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.69k|        return this->get_value();
 1771|  4.69k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  4.69k|    {
  456|  4.69k|        return m_value;
  457|  4.69k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.37k|    {
 1740|  2.37k|        return has_value();
 1741|  2.37k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  6.30k|    {
  490|  6.30k|        return m_has_value;
  491|  6.30k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.37k|    {
 1316|  2.37k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.15k|    {
 1805|  3.15k|        return std::move(value());
 1806|  3.15k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.15k|    {
 1769|  3.15k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.15k|        return this->get_value();
 1771|  3.15k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.15k|    {
  456|  3.15k|        return m_value;
  457|  3.15k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  4.81k|    {
 1979|  4.81k|        return detail::transform_error_impl(std::move(*this),
 1980|  4.81k|                                            std::forward<F>(f));
 1981|  4.81k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  4.81k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  4.81k|    else {
 1472|  4.81k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  4.81k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  4.81k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.69k, False: 126]
  |  |  ------------------
  ------------------
 1474|  4.81k|                   ? result(*std::forward<Exp>(exp))
 1475|  4.81k|                   : result(unexpect,
 1476|    126|                            trivial_invoke(std::forward<F>(f),
 1477|    126|                                           std::forward<Exp>(exp).error()));
 1478|  4.81k|    }
 1479|  4.81k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  4.69k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.69k|    {
 1572|  4.69k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.69k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.69k|    {
  442|  4.69k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    126|        : base(unexpect, std::forward<Args>(args)...),
 1626|    126|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    126|    {
 1628|    126|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  4.69k|    {
 1805|  4.69k|        return std::move(value());
 1806|  4.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.37k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.37k|    {
 1572|  2.37k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.37k|    {
  442|  2.37k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.37k|    {
 1979|  2.37k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.37k|                                            std::forward<F>(f));
 1981|  2.37k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.37k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.37k|    else {
 1472|  2.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.37k, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.37k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.37k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.37k|    }
 1479|  2.37k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|  4.74k|    {
  490|  4.74k|        return m_has_value;
  491|  4.74k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.37k|    {
 1805|  2.37k|        return std::move(value());
 1806|  2.37k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.37k|    {
 1769|  2.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.37k|        return this->get_value();
 1771|  2.37k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.37k|    {
  456|  2.37k|        return m_value;
  457|  2.37k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.37k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.37k|    {
 1572|  2.37k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.37k|    {
  442|  2.37k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.37k|    {
 1316|  2.37k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|  2.37k|    {
 1740|  2.37k|        return has_value();
 1741|  2.37k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.74k|    {
  490|  4.74k|        return m_has_value;
  491|  4.74k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.37k|    {
 1805|  2.37k|        return std::move(value());
 1806|  2.37k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.37k|    {
 1769|  2.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.37k|        return this->get_value();
 1771|  2.37k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.37k|    {
  456|  2.37k|        return m_value;
  457|  2.37k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|     28|        : base(unexpect, std::move(e.error())),
 1616|     28|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     28|    {
 1618|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|     28|        : m_has_value(false)
  637|     28|    {
  638|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|     28|    {
  701|     28|        scn::detail::construct_at(unexpected_ptr(),
  702|     28|                                  std::forward<Args>(args)...);
  703|     28|        m_has_value = false;
  704|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     84|    {
  730|     84|        return reinterpret_cast<unexpected<E>*>(
  731|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     84|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     28|    {
 1316|     28|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     28|    {
 1740|     28|        return has_value();
 1741|     28|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|     84|    {
  687|     84|        return m_has_value;
  688|     84|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     28|    {
 1746|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     28|        return this->get_unexpected().error();
 1748|     28|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     28|    {
  670|     28|        return *unexpected_ptr();
  671|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     28|    {
  643|     28|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 28]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     28|        else {
  647|     28|            destroy_unexpected();
  648|     28|        }
  649|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     28|    {
  712|     28|        scn::detail::destroy_at(unexpected_ptr());
  713|     28|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   325k|    {
 3000|   325k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   325k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   325k|    {
 2981|   325k|        return t.data();
 2982|   325k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   332k|    {
 3375|   332k|        return detail::to_address(ranges::begin(derived()));
 3376|   332k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   332k|    {
 2869|   332k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   332k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   332k|    {
 2850|   332k|        return decay_copy(t.begin());
 2851|   332k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   332k|    {
 3334|   332k|        return static_cast<D&>(*this);
 3335|   332k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    102|    {
 1979|    102|        return detail::transform_error_impl(std::move(*this),
 1980|    102|                                            std::forward<F>(f));
 1981|    102|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    102|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    102|    else {
 1472|    102|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    102|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    102|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 102, False: 0]
  |  |  ------------------
  ------------------
 1474|    102|                   ? result(*std::forward<Exp>(exp))
 1475|    102|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    102|    }
 1479|    102|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    102|        : base(std::in_place, std::forward<U>(val)),
 1570|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    102|    {
 1572|    102|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    102|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    102|    {
  442|    102|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    102|    {
 1316|    102|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    102|    {
 1740|    102|        return has_value();
 1741|    102|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    204|    {
  490|    204|        return m_has_value;
  491|    204|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    102|    {
 1805|    102|        return std::move(value());
 1806|    102|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    102|    {
 1769|    102|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    102|        return this->get_value();
 1771|    102|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    102|    {
  456|    102|        return m_value;
  457|    102|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1964|    204|    {
 1965|    204|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    204|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1461|    204|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    204|    else {
 1472|    204|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    204|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    204|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 204]
  |  |  ------------------
  ------------------
 1474|    204|                   ? result(*std::forward<Exp>(exp))
 1475|    204|                   : result(unexpect,
 1476|    204|                            trivial_invoke(std::forward<F>(f),
 1477|    204|                                           std::forward<Exp>(exp).error()));
 1478|    204|    }
 1479|    204|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    180|    {
 1795|    180|        return value();
 1796|    180|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     96|    {
 2869|     96|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     96|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     96|    {
 2850|     96|        return decay_copy(t.begin());
 2851|     96|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|     88|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|    782|    {
 1979|    782|        return detail::transform_error_impl(std::move(*this),
 1980|    782|                                            std::forward<F>(f));
 1981|    782|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|    782|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    782|    else {
 1472|    782|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    782|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    782|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 782, False: 0]
  |  |  ------------------
  ------------------
 1474|    782|                   ? result(*std::forward<Exp>(exp))
 1475|    782|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    782|    }
 1479|    782|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    782|        : base(std::in_place, std::forward<U>(val)),
 1570|    782|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    782|    {
 1572|    782|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    782|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    782|    {
  442|    782|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    782|    {
 1316|    782|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    782|    {
 1740|    782|        return has_value();
 1741|    782|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.56k|    {
  490|  1.56k|        return m_has_value;
  491|  1.56k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    782|    {
 1805|    782|        return std::move(value());
 1806|    782|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    782|    {
 1769|    782|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    782|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    782|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    782|        return this->get_value();
 1771|    782|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    782|    {
  456|    782|        return m_value;
  457|    782|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|    788|    {
 1965|    788|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    788|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|    788|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    788|    else {
 1472|    788|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    788|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    788|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 788]
  |  |  ------------------
  ------------------
 1474|    788|                   ? result(*std::forward<Exp>(exp))
 1475|    788|                   : result(unexpect,
 1476|    788|                            trivial_invoke(std::forward<F>(f),
 1477|    788|                                           std::forward<Exp>(exp).error()));
 1478|    788|    }
 1479|    788|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|    788|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    788|    static_cast<    \
  |  |  935|    788|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    788|    {
 3912|    788|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  3.75k|    {
 1795|  3.75k|        return value();
 1796|  3.75k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|    420|{
 7445|    420|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    420|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    420|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|    420|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|    420|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    420|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|    420|    auto start = begin;
 7449|    420|    ++begin;
 7450|       |
 7451|    420|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 420]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|    420|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 210, False: 210]
  ------------------
 7458|    210|        handler.on_charset_inverted();
 7459|    210|        ++begin;
 7460|    210|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|    210|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 6, False: 204]
  ------------------
 7467|      6|            handler.on_charset_single(char32_t{']'});
 7468|      6|            ++begin;
 7469|      6|        }
 7470|    210|    }
 7471|    210|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 210]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  3.81k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 3.81k, False: 0]
  ------------------
 7476|  3.81k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.81k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  3.81k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 420, False: 3.39k]
  ------------------
 7481|    420|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|    420|        }
 7483|       |
 7484|  3.39k|        parse_presentation_set_literal(begin, end, handler);
 7485|  3.39k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|    420|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|  3.39k|{
 7409|  3.39k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  3.39k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  3.39k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.39k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  3.39k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 3.39k, False: 0]
  |  Branch (7416:25): [True: 246, False: 3.14k]
  |  Branch (7416:49): [True: 246, False: 0]
  ------------------
 7417|  3.39k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 240, False: 6]
  ------------------
 7418|    240|        ++begin;
 7419|       |
 7420|    240|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|    240|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|    240|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|    240|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|    240|        return;
 7434|    240|    }
 7435|       |
 7436|  3.15k|    handler.on_charset_single(cp_first);
 7437|  3.15k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|  3.63k|{
 7385|  3.63k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  3.63k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  3.63k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  |  Branch (865:45): [True: 0, False: 3.63k]
  |  |  |  Branch (865:45): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  3.63k|    const auto cp =
 7394|  3.63k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  3.63k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  3.63k|    begin += len;
 7401|  3.63k|    return cp;
 7402|  3.63k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|  5.31k|    {
 7004|  5.31k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|  5.31k|                charset_string_size};
 7006|  5.31k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    180|        : base(std::in_place, std::forward<U>(val)),
 1570|    180|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    180|    {
 1572|    180|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    180|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    180|    {
  442|    180|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    348|        : base(std::in_place, std::forward<U>(val)),
 1570|    348|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    348|    {
 1572|    348|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    348|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    348|    {
  442|    348|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|  78.7k|    {
 6177|  78.7k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  78.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.7k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  78.7k|        return static_cast<std::size_t>(m_desc &
 6182|  78.7k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  78.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|   128k|    {
 6203|   128k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   128k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|  49.3k|    {
 6145|  49.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 49.3k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  49.3k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 49.2k]
  |  |  ------------------
  ------------------
 6153|     68|            return {};
 6154|     68|        }
 6155|       |
 6156|  49.2k|        const auto t = type(id);
 6157|  49.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.30k, False: 47.9k]
  |  |  ------------------
  ------------------
 6158|  1.30k|            return {};
 6159|  1.30k|        }
 6160|       |
 6161|  47.9k|        basic_scan_arg<Context> arg;
 6162|  47.9k|        arg.m_type = t;
 6163|  47.9k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 47.9k, False: 0]
  ------------------
 6164|  47.9k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  47.9k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  47.9k|        return arg;
 6170|  49.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|  49.3k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  77.8k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|  49.2k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  49.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  49.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  49.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  49.2k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|  47.9k|    {
 6207|  47.9k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  47.9k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  95.1k|    {
 5961|  95.1k|        return m_type != detail::arg_type::none_type;
 5962|  95.1k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  5.67k|{
 9300|  5.67k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  5.67k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  5.67k|{
 9201|  5.67k|#define SCN_VISIT(Type)                                                \
 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  5.67k|    }                                                                  \
 9205|  5.67k|    else {                                                             \
 9206|  5.67k|        return vis(monostate_val);                                     \
 9207|  5.67k|    }
 9208|       |
 9209|  5.67k|    monostate monostate_val{};
 9210|       |
 9211|  5.67k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 5.67k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 5.67k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|    630|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 630, False: 5.04k]
  ------------------
 9217|    630|            SCN_VISIT(int);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9218|    630|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 5.67k]
  ------------------
 9219|    630|            SCN_VISIT(long);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9220|    630|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 5.67k]
  ------------------
 9221|    630|            SCN_VISIT(long long);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9222|    630|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 5.67k]
  ------------------
 9223|    630|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9224|    630|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 5.67k]
  ------------------
 9225|    630|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|    630|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    630|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    630|    }                                                                  \
  |  | 9205|    630|    else {                                                             \
  |  | 9206|    630|        return vis(monostate_val);                                     \
  |  | 9207|    630|    }
  ------------------
 9226|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 630, False: 5.04k]
  ------------------
 9227|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9228|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 5.67k]
  ------------------
 9229|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9230|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 5.67k]
  ------------------
 9231|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9232|  1.89k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 630, False: 5.04k]
  ------------------
 9233|  1.89k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  1.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.89k|    }                                                                  \
  |  | 9205|  1.89k|    else {                                                             \
  |  | 9206|  1.89k|        return vis(monostate_val);                                     \
  |  | 9207|  1.89k|    }
  ------------------
 9234|  2.52k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 630, False: 5.04k]
  ------------------
 9235|  2.52k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.52k|    }                                                                  \
  |  | 9205|  2.52k|    else {                                                             \
  |  | 9206|  2.52k|        return vis(monostate_val);                                     \
  |  | 9207|  2.52k|    }
  ------------------
 9236|  3.15k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 630, False: 5.04k]
  ------------------
 9237|  3.15k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9238|  3.15k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 5.67k]
  ------------------
 9239|  3.15k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9240|  3.15k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 5.67k]
  ------------------
 9241|  3.15k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9242|  3.15k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 5.67k]
  ------------------
 9243|  3.15k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.15k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.15k|    }                                                                  \
  |  | 9205|  3.15k|    else {                                                             \
  |  | 9206|  3.15k|        return vis(monostate_val);                                     \
  |  | 9207|  3.15k|    }
  ------------------
 9244|  3.78k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 630, False: 5.04k]
  ------------------
 9245|  3.78k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  3.78k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.78k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.78k|    }                                                                  \
  |  | 9205|  3.78k|    else {                                                             \
  |  | 9206|  3.78k|        return vis(monostate_val);                                     \
  |  | 9207|  3.78k|    }
  ------------------
 9246|  3.78k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 5.67k]
  ------------------
 9247|  3.78k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  3.78k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.78k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.78k|    }                                                                  \
  |  | 9205|  3.78k|    else {                                                             \
  |  | 9206|  3.78k|        return vis(monostate_val);                                     \
  |  | 9207|  3.78k|    }
  ------------------
 9248|  4.41k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 630, False: 5.04k]
  ------------------
 9249|  4.41k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  4.41k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.41k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.41k|    }                                                                  \
  |  | 9205|  4.41k|    else {                                                             \
  |  | 9206|  4.41k|        return vis(monostate_val);                                     \
  |  | 9207|  4.41k|    }
  ------------------
 9250|  5.04k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 630, False: 5.04k]
  ------------------
 9251|  5.04k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  5.04k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.04k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.04k|    }                                                                  \
  |  | 9205|  5.04k|    else {                                                             \
  |  | 9206|  5.04k|        return vis(monostate_val);                                     \
  |  | 9207|  5.04k|    }
  ------------------
 9252|  5.04k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 5.67k]
  ------------------
 9253|  5.04k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  5.04k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.04k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.04k|    }                                                                  \
  |  | 9205|  5.04k|    else {                                                             \
  |  | 9206|  5.04k|        return vis(monostate_val);                                     \
  |  | 9207|  5.04k|    }
  ------------------
 9254|  5.67k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 630, False: 5.04k]
  ------------------
 9255|  5.67k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.67k|    }                                                                  \
  |  | 9205|  5.67k|    else {                                                             \
  |  | 9206|  5.67k|        return vis(monostate_val);                                     \
  |  | 9207|  5.67k|    }
  ------------------
 9256|  5.67k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 5.67k]
  ------------------
 9257|  5.67k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.67k|    }                                                                  \
  |  | 9205|  5.67k|    else {                                                             \
  |  | 9206|  5.67k|        return vis(monostate_val);                                     \
  |  | 9207|  5.67k|    }
  ------------------
 9258|  5.67k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 5.67k]
  ------------------
 9259|  5.67k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.67k|    }                                                                  \
  |  | 9205|  5.67k|    else {                                                             \
  |  | 9206|  5.67k|        return vis(monostate_val);                                     \
  |  | 9207|  5.67k|    }
  ------------------
 9260|       |
 9261|  5.67k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 5.67k]
  ------------------
 9262|  5.67k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  5.67k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  5.67k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 5.67k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 5.67k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  5.67k|            SCN_CLANG_POP
 9279|  5.67k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   132k|{
 6006|   132k|    return arg.m_type;
 6007|   132k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  45.8k|{
 6018|  45.8k|    return arg.m_value;
 6019|  45.8k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  2.01k|    {
 1979|  2.01k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.01k|                                            std::forward<F>(f));
 1981|  2.01k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  2.01k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.01k|    else {
 1472|  2.01k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.01k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.91k, False: 102]
  |  |  ------------------
  ------------------
 1474|  2.01k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.01k|                   : result(unexpect,
 1476|    102|                            trivial_invoke(std::forward<F>(f),
 1477|    102|                                           std::forward<Exp>(exp).error()));
 1478|  2.01k|    }
 1479|  2.01k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    102|        : base(unexpect, std::forward<Args>(args)...),
 1626|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    102|    {
 1628|    102|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.91k|    {
 1805|  1.91k|        return std::move(value());
 1806|  1.91k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|  78.7k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  78.7k|    {
 6258|  78.7k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  78.7k|    {
 3075|  78.7k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  78.7k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  78.7k|    {
 3041|  78.7k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  78.7k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  78.7k|{
 7793|  78.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  78.7k|    handler.check_args_exhausted();
 7795|  78.7k|    return handler.get_error();
 7796|  78.7k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  78.7k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  78.7k|    auto begin = format.data();
 7761|  78.7k|    auto it = begin;
 7762|  78.7k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   170k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 164k, False: 6.61k]
  ------------------
 7765|   164k|        const auto ch = *it++;
 7766|   164k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 82.7k, False: 81.6k]
  ------------------
 7767|  82.7k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  82.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  82.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 71.3k, False: 11.4k]
  ------------------
 7771|  71.3k|                return;
 7772|  71.3k|            }
 7773|  82.7k|        }
 7774|  81.6k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 1.96k, False: 79.6k]
  ------------------
 7775|  1.96k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 796, False: 1.16k]
  |  |  |  Branch (865:45): [True: 276, False: 1.68k]
  |  |  |  Branch (865:45): [True: 520, False: 1.16k]
  |  |  ------------------
  ------------------
 7776|    796|                handler.on_error("Unmatched '}' in format string");
 7777|    796|                return;
 7778|    796|            }
 7779|       |
 7780|  1.16k|            handler.on_literal_text(begin, it);
 7781|  1.16k|            begin = ++it;
 7782|  1.16k|        }
 7783|   164k|    }
 7784|       |
 7785|  6.61k|    handler.on_literal_text(begin, end);
 7786|  6.61k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  82.7k|{
 7690|  82.7k|    struct id_adapter {
 7691|  82.7k|        constexpr void operator()()
 7692|  82.7k|        {
 7693|  82.7k|            arg_id = handler.on_arg_id();
 7694|  82.7k|        }
 7695|  82.7k|        constexpr void operator()(std::size_t id)
 7696|  82.7k|        {
 7697|  82.7k|            arg_id = handler.on_arg_id(id);
 7698|  82.7k|        }
 7699|       |
 7700|  82.7k|        constexpr void on_error(const char* msg)
 7701|  82.7k|        {
 7702|  82.7k|            SCN_UNLIKELY_ATTR
 7703|  82.7k|            handler.on_error(msg);
 7704|  82.7k|        }
 7705|       |
 7706|  82.7k|        Handler& handler;
 7707|  82.7k|        std::size_t arg_id;
 7708|  82.7k|    };
 7709|       |
 7710|  82.7k|    ++begin;
 7711|  82.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 104, False: 82.6k]
  |  |  ------------------
  ------------------
 7712|    104|        handler.on_error("Unexpected end of replacement field");
 7713|    104|        return begin;
 7714|    104|    }
 7715|       |
 7716|  82.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 5.63k, False: 77.0k]
  ------------------
 7717|  5.63k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|  5.63k|    }
 7719|  77.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 5.20k, False: 71.8k]
  ------------------
 7720|  5.20k|        handler.on_literal_text(begin, begin + 1);
 7721|  5.20k|    }
 7722|  71.8k|    else {
 7723|  71.8k|        auto adapter = id_adapter{handler, 0};
 7724|  71.8k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  71.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  71.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 110, False: 71.7k]
  |  |  ------------------
  ------------------
 7727|    110|            handler.on_error("Missing '}' in format string");
 7728|    110|            return begin;
 7729|    110|        }
 7730|       |
 7731|  71.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 140, False: 71.5k]
  ------------------
 7732|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|    140|        }
 7734|  71.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 43.5k, False: 27.9k]
  ------------------
 7735|  43.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  43.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74, False: 43.5k]
  |  |  ------------------
  ------------------
 7736|     74|                handler.on_error("Unexpected end of replacement field");
 7737|     74|                return begin;
 7738|     74|            }
 7739|  43.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  43.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.91k, False: 40.5k]
  |  |  |  Branch (865:45): [True: 0, False: 43.5k]
  |  |  |  Branch (865:45): [True: 2.91k, False: 40.5k]
  |  |  ------------------
  ------------------
 7741|  2.91k|                handler.on_error("Unknown format specifier");
 7742|  2.91k|                return begin;
 7743|  2.91k|            }
 7744|  43.5k|        }
 7745|  27.9k|        else {
 7746|  27.9k|            SCN_UNLIKELY_ATTR
 7747|  27.9k|            handler.on_error("Missing '}' in format string");
 7748|  27.9k|            return begin;
 7749|  27.9k|        }
 7750|  71.7k|    }
 7751|  51.5k|    return begin + 1;
 7752|  82.6k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|  49.2k|    {
 8832|  49.2k|        return m_args.get(id);
 8833|  49.2k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|  47.5k|    {
 6286|  47.5k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 47.5k]
  |  |  ------------------
  ------------------
 6287|     42|            on_error(
 6288|     42|                "Cannot switch from manual to automatic argument indexing");
 6289|     42|            return 0;
 6290|     42|        }
 6291|       |
 6292|  47.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  47.5k|        do_check_arg_id(id);
 6294|  47.5k|        return id;
 6295|  47.5k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6315|    112|    {
 6316|    112|        m_error = unexpected(detail::handle_error(
 6317|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6318|    112|        return m_error.error();
 6319|    112|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|  49.2k|{
 6806|  49.2k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  49.2k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  49.2k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  71.8k|{
 7191|  71.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  71.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  71.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 71.8k, False: 0]
  |  Branch (7192:26): [True: 29.8k, False: 41.9k]
  ------------------
 7193|  29.8k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|  29.8k|    }
 7195|       |
 7196|  41.9k|    handler();
 7197|  41.9k|    return begin;
 7198|  71.8k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|  29.8k|{
 7161|  29.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|  29.8k|    CharT c = *begin;
 7164|  29.8k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 27.8k, False: 2.01k]
  |  Branch (7164:27): [True: 58, False: 1.95k]
  ------------------
 7165|  27.9k|        handler.on_error("Invalid argument ID");
 7166|  27.9k|        return begin;
 7167|  27.9k|    }
 7168|       |
 7169|  1.95k|    int idx = 0;
 7170|  1.95k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 306, False: 1.65k]
  ------------------
 7171|    306|        idx = parse_simple_int(begin, end);
 7172|    306|    }
 7173|  1.65k|    else {
 7174|  1.65k|        ++begin;
 7175|  1.65k|    }
 7176|       |
 7177|  1.95k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 110, False: 1.84k]
  |  Branch (7177:26): [True: 1.70k, False: 140]
  |  Branch (7177:50): [True: 84, False: 1.62k]
  ------------------
 7178|    194|        handler.on_error("Invalid argument ID");
 7179|    194|        return begin;
 7180|    194|    }
 7181|  1.76k|    handler(idx);
 7182|       |
 7183|  1.76k|    return begin;
 7184|  1.95k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|  28.0k|        {
 7702|  28.0k|            SCN_UNLIKELY_ATTR
 7703|  28.0k|            handler.on_error(msg);
 7704|  28.0k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7139|  9.70k|{
 7140|  9.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  9.70k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  9.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  9.70k|    unsigned long long value = 0;
 7144|  23.0k|    do {
 7145|  23.0k|        value *= 10;
 7146|  23.0k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  23.0k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 116, False: 22.9k]
  ------------------
 7148|  23.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|    116|            return -1;
 7150|    116|        }
 7151|  22.9k|        ++begin;
 7152|  22.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 22.6k, False: 294]
  |  Branch (7152:30): [True: 21.4k, False: 1.12k]
  |  Branch (7152:47): [True: 13.3k, False: 8.17k]
  ------------------
 7153|  9.58k|    return static_cast<int>(value);
 7154|  9.70k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|  1.76k|        {
 7697|  1.76k|            arg_id = handler.on_arg_id(id);
 7698|  1.76k|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6298|  1.76k|    {
 6299|  1.76k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|  1.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 1.69k]
  |  |  ------------------
  ------------------
 6300|     70|            on_error(
 6301|     70|                "Cannot switch from manual to automatic argument indexing");
 6302|     70|            return;
 6303|     70|        }
 6304|  1.69k|        m_next_arg_id = -1;
 6305|  1.69k|        do_check_arg_id(id);
 6306|  1.69k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  41.9k|        {
 7693|  41.9k|            arg_id = handler.on_arg_id();
 7694|  41.9k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|  40.3k|    {
 6281|  40.3k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  40.3k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  83.8k|    {
 6270|  83.8k|        return m_format.data();
 6271|  83.8k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  43.5k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  43.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  43.5k|    {
 7871|  43.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  43.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  43.5k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|  43.5k|{
 7606|  43.5k|    auto do_presentation = [&]() -> const CharT* {
 7607|  43.5k|        if (*begin == CharT{'['}) {
 7608|  43.5k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  43.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  43.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  43.5k|                return begin;
 7614|  43.5k|            }
 7615|  43.5k|            handler.on_character_set_string(set);
 7616|  43.5k|            return begin;
 7617|  43.5k|        }
 7618|  43.5k|        if (*begin == CharT{'/'}) {
 7619|  43.5k|            return parse_presentation_regex(begin, end, handler);
 7620|  43.5k|        }
 7621|  43.5k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  43.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  43.5k|            handler.on_error("Invalid type specifier in format string");
 7624|  43.5k|            return begin;
 7625|  43.5k|        }
 7626|  43.5k|        handler.on_type(type);
 7627|  43.5k|        return begin;
 7628|  43.5k|    };
 7629|       |
 7630|  43.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 42.4k, False: 1.07k]
  |  Branch (7630:28): [True: 2.26k, False: 40.1k]
  ------------------
 7631|  43.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 896, False: 1.36k]
  |  Branch (7631:36): [True: 862, False: 34]
  ------------------
 7632|    862|        return do_presentation();
 7633|    862|    }
 7634|       |
 7635|  42.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.6k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  42.6k|    begin = parse_align(begin, end, handler);
 7641|  42.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 126, False: 42.5k]
  |  |  ------------------
  ------------------
 7642|    126|        handler.on_error("Unexpected end of format string");
 7643|    126|        return begin;
 7644|    126|    }
 7645|       |
 7646|  42.5k|    begin = parse_width(begin, end, handler);
 7647|  42.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 42.4k]
  |  |  ------------------
  ------------------
 7648|    102|        handler.on_error("Unexpected end of format string");
 7649|    102|        return begin;
 7650|    102|    }
 7651|       |
 7652|  42.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 6.14k, False: 36.2k]
  ------------------
 7653|  6.14k|        ++begin;
 7654|  6.14k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 6.11k]
  |  |  ------------------
  ------------------
 7655|     34|            handler.on_error("Unexpected end of format string");
 7656|     34|            return begin;
 7657|     34|        }
 7658|  6.11k|        begin = parse_precision(begin, end, handler);
 7659|  6.11k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 114, False: 5.99k]
  |  |  ------------------
  ------------------
 7660|    114|            handler.on_error("Unexpected end of format string");
 7661|    114|            return begin;
 7662|    114|        }
 7663|  6.11k|    }
 7664|       |
 7665|  42.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 464, False: 41.8k]
  ------------------
 7666|    464|        handler.on_localized();
 7667|    464|        ++begin;
 7668|    464|    }
 7669|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 42.2k]
  |  |  ------------------
  ------------------
 7670|     52|        handler.on_error("Unexpected end of format string");
 7671|     52|        return begin;
 7672|     52|    }
 7673|       |
 7674|  42.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 42.2k, False: 0]
  |  Branch (7674:25): [True: 37.7k, False: 4.49k]
  ------------------
 7675|  37.7k|        do_presentation();
 7676|  37.7k|    }
 7677|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.99k, False: 40.2k]
  |  |  ------------------
  ------------------
 7678|  1.99k|        handler.on_error("Unexpected end of format string");
 7679|  1.99k|        return begin;
 7680|  1.99k|    }
 7681|       |
 7682|  40.2k|    return begin;
 7683|  42.2k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|  2.26k|{
 7255|  2.26k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 860, False: 1.40k]
  |  Branch (7255:33): [True: 808, False: 52]
  ------------------
 7256|  2.26k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 250, False: 1.20k]
  |  Branch (7256:33): [True: 88, False: 162]
  ------------------
 7257|  2.26k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  38.5k|    auto do_presentation = [&]() -> const CharT* {
 7607|  38.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 10.1k, False: 28.4k]
  ------------------
 7608|  10.1k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  10.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 810, False: 9.32k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|    810|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|    810|                return begin;
 7614|    810|            }
 7615|  9.32k|            handler.on_character_set_string(set);
 7616|  9.32k|            return begin;
 7617|  10.1k|        }
 7618|  28.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 23.8k, False: 4.57k]
  ------------------
 7619|  23.8k|            return parse_presentation_regex(begin, end, handler);
 7620|  23.8k|        }
 7621|  4.57k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  4.57k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 512, False: 4.05k]
  |  |  ------------------
  ------------------
 7623|    512|            handler.on_error("Invalid type specifier in format string");
 7624|    512|            return begin;
 7625|    512|        }
 7626|  4.05k|        handler.on_type(type);
 7627|  4.05k|        return begin;
 7628|  4.57k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  10.1k|{
 7445|  10.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  10.1k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  10.1k|    auto start = begin;
 7449|  10.1k|    ++begin;
 7450|       |
 7451|  10.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 10.0k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|     42|        return {};
 7456|     42|    }
 7457|  10.0k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 1.92k, False: 8.17k]
  ------------------
 7458|  1.92k|        handler.on_charset_inverted();
 7459|  1.92k|        ++begin;
 7460|  1.92k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.88k]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|     34|            return {};
 7465|     34|        }
 7466|  1.88k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 52, False: 1.83k]
  ------------------
 7467|     52|            handler.on_charset_single(char32_t{']'});
 7468|     52|            ++begin;
 7469|     52|        }
 7470|  1.88k|    }
 7471|  8.17k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 34, False: 8.14k]
  ------------------
 7472|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|     34|    }
 7474|       |
 7475|  1.01M|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 1.01M, False: 484]
  ------------------
 7476|  1.01M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 216, False: 1.01M]
  |  |  ------------------
  ------------------
 7477|    216|            break;
 7478|    216|        }
 7479|       |
 7480|  1.01M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 9.32k, False: 1.00M]
  ------------------
 7481|  9.32k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  9.32k|        }
 7483|       |
 7484|  1.00M|        parse_presentation_set_literal(begin, end, handler);
 7485|  1.00M|    }
 7486|       |
 7487|    700|    SCN_UNLIKELY_ATTR
 7488|    700|    handler.on_error("Invalid [character set] specifier in format string");
 7489|    700|    return {};
 7490|  10.0k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7408|  1.00M|{
 7409|  1.00M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  1.00M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  1.00M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 94, False: 1.00M]
  |  |  ------------------
  ------------------
 7413|     94|        return;
 7414|     94|    }
 7415|       |
 7416|  1.00M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 1.00M, False: 188]
  |  Branch (7416:25): [True: 8.38k, False: 993k]
  |  Branch (7416:49): [True: 8.34k, False: 34]
  ------------------
 7417|  1.00M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 8.11k, False: 232]
  ------------------
 7418|  8.11k|        ++begin;
 7419|       |
 7420|  8.11k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  8.11k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  8.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 8.04k]
  |  |  ------------------
  ------------------
 7422|     70|            return;
 7423|     70|        }
 7424|       |
 7425|  8.04k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  8.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 8.01k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|     34|            return;
 7430|     34|        }
 7431|       |
 7432|  8.01k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  8.01k|        return;
 7434|  8.04k|    }
 7435|       |
 7436|   993k|    handler.on_charset_single(cp_first);
 7437|   993k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7384|  1.00M|{
 7385|  1.00M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  1.00M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  1.00M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 96, False: 1.00M]
  |  |  |  Branch (865:45): [True: 70, False: 1.00M]
  |  |  |  Branch (865:45): [True: 26, False: 1.00M]
  |  |  ------------------
  ------------------
 7389|     96|        handler.on_error("Invalid encoding in format string");
 7390|     96|        return invalid_code_point;
 7391|     96|    }
 7392|       |
 7393|  1.00M|    const auto cp =
 7394|  1.00M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  1.00M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 1.00M]
  |  |  ------------------
  ------------------
 7396|     68|        handler.on_error("Invalid encoding in format string");
 7397|     68|        return invalid_code_point;
 7398|     68|    }
 7399|       |
 7400|  1.00M|    begin += len;
 7401|  1.00M|    return cp;
 7402|  1.00M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  9.32k|    {
 7099|  9.32k|        m_specs.charset_string_data = fmt.data();
 7100|  9.32k|        m_specs.charset_string_size = fmt.size();
 7101|  9.32k|        on_type(presentation_type::string_set);
 7102|  9.32k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7496|  23.8k|{
 7497|  23.8k|#if !SCN_DISABLE_REGEX
 7498|  23.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|  23.8k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  23.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|       |                  std::is_same_v<CharT, wchar_t>) {
 7503|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|       |        return begin;
 7505|       |    }
 7506|       |
 7507|  23.8k|    auto start = begin;
 7508|  23.8k|    ++begin;
 7509|       |
 7510|  23.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 23.8k]
  |  |  ------------------
  ------------------
 7511|     34|        handler.on_error("Unexpected end of regex in format string");
 7512|     34|        return begin;
 7513|     34|    }
 7514|       |
 7515|  23.8k|    handler.on_type(presentation_type::regex);
 7516|  2.68M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 2.68M, False: 212]
  ------------------
 7517|  2.68M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 31.8k, False: 2.65M]
  ------------------
 7518|  31.8k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 23.6k, False: 8.20k]
  ------------------
 7519|  23.6k|                break;
 7520|  23.6k|            }
 7521|  8.20k|            else {
 7522|  8.20k|                handler.on_type(presentation_type::regex_escaped);
 7523|  8.20k|            }
 7524|  31.8k|        }
 7525|  2.68M|    }
 7526|  23.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 212, False: 23.6k]
  |  |  ------------------
  ------------------
 7527|    212|        handler.on_error("Unexpected end of regex in format string");
 7528|    212|        return begin;
 7529|    212|    }
 7530|       |
 7531|  23.6k|    auto regex_end = begin;
 7532|  23.6k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|  23.6k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 23.5k]
  |  |  ------------------
  ------------------
 7534|     34|        handler.on_error("Invalid (empty) regex in format string");
 7535|     34|        return begin;
 7536|     34|    }
 7537|  23.5k|    handler.on_regex_pattern(regex_pattern);
 7538|  23.5k|    ++begin;
 7539|       |
 7540|  23.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 23.5k]
  |  |  ------------------
  ------------------
 7541|     34|        handler.on_error("Unexpected end of regex in format string");
 7542|     34|        return begin;
 7543|     34|    }
 7544|       |
 7545|  23.5k|    regex_flags flags{regex_flags::none};
 7546|  23.5k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|  23.5k|        {{'m', regex_flags::multiline},
 7548|  23.5k|         {'s', regex_flags::singleline},
 7549|  23.5k|         {'i', regex_flags::nocase},
 7550|  23.5k|         {'n', regex_flags::nocapture}}};
 7551|  26.2k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 26.2k, False: 58]
  ------------------
 7552|  26.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 23.3k, False: 2.80k]
  ------------------
 7553|  23.3k|            break;
 7554|  23.3k|        }
 7555|  2.80k|        bool found_flag = false;
 7556|  7.04k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 7.04k, False: 70]
  ------------------
 7557|  7.04k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 4.30k, False: 2.73k]
  ------------------
 7558|  4.30k|                continue;
 7559|  4.30k|            }
 7560|  2.73k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 34, False: 2.70k]
  ------------------
 7561|     34|                handler.on_error("Flag set multiple times in regex");
 7562|     34|                return begin;
 7563|     34|            }
 7564|  2.70k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|  2.70k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7565:17): [True: 48, False: 2.65k]
  ------------------
 7566|       |                // clang-format off
 7567|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|     48|            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|  2.70k|#endif
 7578|  2.70k|            flags |= flag.second;
 7579|  2.70k|            found_flag = true;
 7580|  2.70k|            break;
 7581|  2.73k|        }
 7582|  2.77k|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 70, False: 2.70k]
  ------------------
 7583|     70|            handler.on_error("Invalid flag in regex");
 7584|     70|            return begin;
 7585|     70|        }
 7586|  2.77k|    }
 7587|  23.4k|    handler.on_regex_flags(flags);
 7588|       |
 7589|  23.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 58, False: 23.3k]
  |  |  ------------------
  ------------------
 7590|     58|        handler.on_error("Unexpected end of regex in format string");
 7591|     58|        return begin;
 7592|     58|    }
 7593|       |
 7594|  23.3k|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|  23.4k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7106|  23.5k|    {
 7107|  23.5k|        m_specs.charset_string_data = pattern.data();
 7108|  23.5k|        m_specs.charset_string_size = pattern.size();
 7109|  23.5k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|  4.57k|{
 7203|  4.57k|    switch (type) {
 7204|    106|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 106, False: 4.46k]
  ------------------
 7205|    158|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 52, False: 4.51k]
  ------------------
 7206|    158|            return presentation_type::int_binary;
 7207|    108|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 108, False: 4.46k]
  ------------------
 7208|    108|            return presentation_type::int_decimal;
 7209|    178|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 178, False: 4.39k]
  ------------------
 7210|    178|            return presentation_type::int_generic;
 7211|     70|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 70, False: 4.50k]
  ------------------
 7212|     70|            return presentation_type::int_unsigned_decimal;
 7213|    196|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 196, False: 4.37k]
  ------------------
 7214|    196|            return presentation_type::int_octal;
 7215|    116|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 116, False: 4.45k]
  ------------------
 7216|    168|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 52, False: 4.51k]
  ------------------
 7217|    168|            return presentation_type::int_hex;
 7218|     34|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 34, False: 4.53k]
  ------------------
 7219|     68|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 34, False: 4.53k]
  ------------------
 7220|     68|            return presentation_type::int_arbitrary_base;
 7221|    106|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 106, False: 4.46k]
  ------------------
 7222|    194|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 88, False: 4.48k]
  ------------------
 7223|    194|            return presentation_type::float_hex;
 7224|     70|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 70, False: 4.50k]
  ------------------
 7225|    140|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 70, False: 4.50k]
  ------------------
 7226|    140|            return presentation_type::float_scientific;
 7227|    214|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 214, False: 4.35k]
  ------------------
 7228|    320|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 106, False: 4.46k]
  ------------------
 7229|    320|            return presentation_type::float_fixed;
 7230|    132|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 132, False: 4.43k]
  ------------------
 7231|    190|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 58, False: 4.51k]
  ------------------
 7232|    190|            return presentation_type::float_general;
 7233|  1.83k|        case 's':
  ------------------
  |  Branch (7233:9): [True: 1.83k, False: 2.73k]
  ------------------
 7234|  1.83k|            return presentation_type::string;
 7235|    322|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 322, False: 4.24k]
  ------------------
 7236|    322|            return presentation_type::character;
 7237|     34|        case '?':
  ------------------
  |  Branch (7237:9): [True: 34, False: 4.53k]
  ------------------
 7238|     34|            return presentation_type::escaped_character;
 7239|     78|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 78, False: 4.49k]
  ------------------
 7240|     78|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 4.57k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 4.57k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    512|        default:
  ------------------
  |  Branch (7247:9): [True: 512, False: 4.05k]
  ------------------
 7248|    512|            return presentation_type::none;
 7249|  4.57k|    }
 7250|  4.57k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  42.6k|{
 7280|  42.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  42.6k|    auto check_align = [](wchar_t ch) {
 7283|  42.6k|        switch (ch) {
 7284|  42.6k|            case L'<':
 7285|  42.6k|                return align_type::left;
 7286|  42.6k|            case L'>':
 7287|  42.6k|                return align_type::right;
 7288|  42.6k|            case L'^':
 7289|  42.6k|                return align_type::center;
 7290|  42.6k|            default:
 7291|  42.6k|                return align_type::none;
 7292|  42.6k|        }
 7293|  42.6k|    };
 7294|       |
 7295|  42.6k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  42.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 42.6k]
  |  |  |  Branch (865:45): [True: 38, False: 42.6k]
  |  |  |  Branch (865:45): [True: 4, False: 42.6k]
  |  |  ------------------
  ------------------
 7297|  42.6k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|     42|        handler.on_error("Invalid encoding in fill character");
 7299|     42|        return begin;
 7300|     42|    }
 7301|       |
 7302|  42.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  42.6k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  42.6k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  42.6k|    const auto begin_before_fill = begin;
 7307|  42.6k|    begin += potential_fill_len;
 7308|       |
 7309|  42.6k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 1.03k, False: 41.5k]
  ------------------
 7310|  1.03k|        return begin_before_fill;
 7311|  1.03k|    }
 7312|       |
 7313|  41.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  41.5k|    const auto begin_after_fill = begin;
 7315|  41.5k|    ++begin;
 7316|       |
 7317|  41.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 40.2k, False: 1.34k]
  ------------------
 7318|  40.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  40.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60, False: 40.1k]
  |  |  ------------------
  ------------------
 7319|     60|            handler.on_error("Invalid fill character '{' in format string");
 7320|     60|            return begin;
 7321|     60|        }
 7322|  40.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 7.50k, False: 32.6k]
  ------------------
 7323|  7.50k|            return begin_before_fill;
 7324|  7.50k|        }
 7325|  40.1k|    }
 7326|       |
 7327|  34.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 31.0k, False: 2.99k]
  ------------------
 7328|  31.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 2.28k, False: 28.7k]
  ------------------
 7329|  2.28k|            handler.on_align(potential_align_on_fill);
 7330|  2.28k|            return begin_after_fill;
 7331|  2.28k|        }
 7332|  28.7k|        return begin_before_fill;
 7333|  31.0k|    }
 7334|       |
 7335|  2.99k|    handler.on_fill(potential_fill);
 7336|  2.99k|    handler.on_align(potential_align_after_fill);
 7337|  2.99k|    return begin;
 7338|  34.0k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|  42.6k|{
 7262|  42.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|  42.6k|    else {
 7267|  42.6k|        const auto lengths =
 7268|  42.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|  42.6k|            "\3\4";
 7270|  42.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|  42.6k|        return len;
 7272|  42.6k|    }
 7273|  42.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  84.1k|    auto check_align = [](wchar_t ch) {
 7283|  84.1k|        switch (ch) {
 7284|  1.27k|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 1.27k, False: 82.8k]
  ------------------
 7285|  1.27k|                return align_type::left;
 7286|    778|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 778, False: 83.3k]
  ------------------
 7287|    778|                return align_type::right;
 7288|  4.22k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 4.22k, False: 79.9k]
  ------------------
 7289|  4.22k|                return align_type::center;
 7290|  77.8k|            default:
  ------------------
  |  Branch (7290:13): [True: 77.8k, False: 6.27k]
  ------------------
 7291|  77.8k|                return align_type::none;
 7292|  84.1k|        }
 7293|  84.1k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|  2.99k|    {
 7020|  2.99k|        m_specs.fill = fill;
 7021|  2.99k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|  2.99k|    {
 6901|  2.99k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  2.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|  2.99k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  2.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|  2.99k|        if constexpr (sizeof(CharT) == 1) {
 6904|  8.10k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6904:32): [True: 5.10k, False: 2.99k]
  ------------------
 6905|  5.10k|                SCN_GCC_PUSH
 6906|  5.10k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|  5.10k|                m_data[i] = s[i];
 6908|  5.10k|                SCN_GCC_POP
 6909|  5.10k|            }
 6910|  2.99k|            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|       |        else {
 6923|       |            const auto front = static_cast<unsigned>(s.front());
 6924|       |            m_data[0] = static_cast<char>(front);
 6925|       |            m_data[1] = static_cast<char>(front >> 8);
 6926|       |            m_data[2] = static_cast<char>(front >> 16);
 6927|       |            m_data[3] = static_cast<char>(front >> 24);
 6928|       |        }
 6929|  2.99k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  42.5k|{
 7345|  42.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  42.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 13.3k, False: 29.1k]
  |  Branch (7347:33): [True: 3.39k, False: 9.93k]
  ------------------
 7348|  3.39k|        int width = parse_simple_int(begin, end);
 7349|  3.39k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.39k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.35k, False: 34]
  |  |  ------------------
  ------------------
 7350|  3.35k|            handler.on_width(width);
 7351|  3.35k|        }
 7352|     34|        else {
 7353|     34|            handler.on_error("Invalid field width");
 7354|     34|            return begin;
 7355|     34|        }
 7356|  3.39k|    }
 7357|  42.4k|    return begin;
 7358|  42.5k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  6.11k|{
 7365|  6.11k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  6.11k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 6.07k, False: 34]
  |  Branch (7367:33): [True: 6.00k, False: 70]
  ------------------
 7368|  6.00k|        int prec = parse_simple_int(begin, end);
 7369|  6.00k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  6.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.95k, False: 48]
  |  |  ------------------
  ------------------
 7370|  5.95k|            handler.on_precision(prec);
 7371|  5.95k|        }
 7372|     48|        else {
 7373|     48|            handler.on_error("Invalid field precision");
 7374|     48|            return begin;
 7375|     48|        }
 7376|  6.00k|    }
 7377|  6.06k|    return begin;
 7378|  6.11k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|    464|    {
 7876|    464|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|    464|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 418, False: 46]
  ------------------
 7878|    464|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 372, False: 46]
  ------------------
 7879|    464|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 326, False: 46]
  ------------------
 7880|    464|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 280, False: 46]
  ------------------
 7881|    280|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|    280|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|    280|        }
 7886|       |
 7887|    184|        Handler::on_localized();
 7888|    184|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|    352|    {
 7025|    352|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|    352|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|    352|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  40.2k|{
 9300|  40.2k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  40.2k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  40.2k|{
 9201|  40.2k|#define SCN_VISIT(Type)                                                \
 9202|  40.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  40.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  40.2k|    }                                                                  \
 9205|  40.2k|    else {                                                             \
 9206|  40.2k|        return vis(monostate_val);                                     \
 9207|  40.2k|    }
 9208|       |
 9209|  40.2k|    monostate monostate_val{};
 9210|       |
 9211|  40.2k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 40.2k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 40.2k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|  4.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.48k, False: 35.7k]
  ------------------
 9217|  4.48k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  4.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.48k|    }                                                                  \
  |  | 9205|  4.48k|    else {                                                             \
  |  | 9206|  4.48k|        return vis(monostate_val);                                     \
  |  | 9207|  4.48k|    }
  ------------------
 9218|  4.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 40.2k]
  ------------------
 9219|  4.48k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  4.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.48k|    }                                                                  \
  |  | 9205|  4.48k|    else {                                                             \
  |  | 9206|  4.48k|        return vis(monostate_val);                                     \
  |  | 9207|  4.48k|    }
  ------------------
 9220|  4.48k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 40.2k]
  ------------------
 9221|  4.48k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  4.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.48k|    }                                                                  \
  |  | 9205|  4.48k|    else {                                                             \
  |  | 9206|  4.48k|        return vis(monostate_val);                                     \
  |  | 9207|  4.48k|    }
  ------------------
 9222|  4.48k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 40.2k]
  ------------------
 9223|  4.48k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  4.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.48k|    }                                                                  \
  |  | 9205|  4.48k|    else {                                                             \
  |  | 9206|  4.48k|        return vis(monostate_val);                                     \
  |  | 9207|  4.48k|    }
  ------------------
 9224|  4.48k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 40.2k]
  ------------------
 9225|  4.48k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  4.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.48k|    }                                                                  \
  |  | 9205|  4.48k|    else {                                                             \
  |  | 9206|  4.48k|        return vis(monostate_val);                                     \
  |  | 9207|  4.48k|    }
  ------------------
 9226|  8.97k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.48k, False: 35.7k]
  ------------------
 9227|  8.97k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.97k|    }                                                                  \
  |  | 9205|  8.97k|    else {                                                             \
  |  | 9206|  8.97k|        return vis(monostate_val);                                     \
  |  | 9207|  8.97k|    }
  ------------------
 9228|  8.97k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 40.2k]
  ------------------
 9229|  8.97k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.97k|    }                                                                  \
  |  | 9205|  8.97k|    else {                                                             \
  |  | 9206|  8.97k|        return vis(monostate_val);                                     \
  |  | 9207|  8.97k|    }
  ------------------
 9230|  8.97k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 40.2k]
  ------------------
 9231|  8.97k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.97k|    }                                                                  \
  |  | 9205|  8.97k|    else {                                                             \
  |  | 9206|  8.97k|        return vis(monostate_val);                                     \
  |  | 9207|  8.97k|    }
  ------------------
 9232|  13.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 4.45k, False: 35.7k]
  ------------------
 9233|  13.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  13.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  13.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  13.4k|    }                                                                  \
  |  | 9205|  13.4k|    else {                                                             \
  |  | 9206|  13.4k|        return vis(monostate_val);                                     \
  |  | 9207|  13.4k|    }
  ------------------
 9234|  17.9k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 4.48k, False: 35.7k]
  ------------------
 9235|  17.9k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  17.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.9k|    }                                                                  \
  |  | 9205|  17.9k|    else {                                                             \
  |  | 9206|  17.9k|        return vis(monostate_val);                                     \
  |  | 9207|  17.9k|    }
  ------------------
 9236|  22.3k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 4.45k, False: 35.7k]
  ------------------
 9237|  22.3k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  22.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.3k|    }                                                                  \
  |  | 9205|  22.3k|    else {                                                             \
  |  | 9206|  22.3k|        return vis(monostate_val);                                     \
  |  | 9207|  22.3k|    }
  ------------------
 9238|  22.3k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 40.2k]
  ------------------
 9239|  22.3k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  22.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.3k|    }                                                                  \
  |  | 9205|  22.3k|    else {                                                             \
  |  | 9206|  22.3k|        return vis(monostate_val);                                     \
  |  | 9207|  22.3k|    }
  ------------------
 9240|  22.3k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 40.2k]
  ------------------
 9241|  22.3k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  22.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.3k|    }                                                                  \
  |  | 9205|  22.3k|    else {                                                             \
  |  | 9206|  22.3k|        return vis(monostate_val);                                     \
  |  | 9207|  22.3k|    }
  ------------------
 9242|  22.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 40.2k]
  ------------------
 9243|  22.3k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  22.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  22.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  22.3k|    }                                                                  \
  |  | 9205|  22.3k|    else {                                                             \
  |  | 9206|  22.3k|        return vis(monostate_val);                                     \
  |  | 9207|  22.3k|    }
  ------------------
 9244|  26.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 4.48k, False: 35.7k]
  ------------------
 9245|  26.8k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  26.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.8k|    }                                                                  \
  |  | 9205|  26.8k|    else {                                                             \
  |  | 9206|  26.8k|        return vis(monostate_val);                                     \
  |  | 9207|  26.8k|    }
  ------------------
 9246|  26.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 40.2k]
  ------------------
 9247|  26.8k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  26.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.8k|    }                                                                  \
  |  | 9205|  26.8k|    else {                                                             \
  |  | 9206|  26.8k|        return vis(monostate_val);                                     \
  |  | 9207|  26.8k|    }
  ------------------
 9248|  31.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 4.45k, False: 35.7k]
  ------------------
 9249|  31.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  31.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  31.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  31.3k|    }                                                                  \
  |  | 9205|  31.3k|    else {                                                             \
  |  | 9206|  31.3k|        return vis(monostate_val);                                     \
  |  | 9207|  31.3k|    }
  ------------------
 9250|  35.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 4.45k, False: 35.7k]
  ------------------
 9251|  35.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  35.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  35.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  35.7k|    }                                                                  \
  |  | 9205|  35.7k|    else {                                                             \
  |  | 9206|  35.7k|        return vis(monostate_val);                                     \
  |  | 9207|  35.7k|    }
  ------------------
 9252|  35.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 40.2k]
  ------------------
 9253|  35.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  35.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  35.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  35.7k|    }                                                                  \
  |  | 9205|  35.7k|    else {                                                             \
  |  | 9206|  35.7k|        return vis(monostate_val);                                     \
  |  | 9207|  35.7k|    }
  ------------------
 9254|  40.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 4.45k, False: 35.7k]
  ------------------
 9255|  40.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  40.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  40.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  40.2k|    }                                                                  \
  |  | 9205|  40.2k|    else {                                                             \
  |  | 9206|  40.2k|        return vis(monostate_val);                                     \
  |  | 9207|  40.2k|    }
  ------------------
 9256|  40.2k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 40.2k]
  ------------------
 9257|  40.2k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  40.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  40.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  40.2k|    }                                                                  \
  |  | 9205|  40.2k|    else {                                                             \
  |  | 9206|  40.2k|        return vis(monostate_val);                                     \
  |  | 9207|  40.2k|    }
  ------------------
 9258|  40.2k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 40.2k]
  ------------------
 9259|  40.2k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  40.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  40.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  40.2k|    }                                                                  \
  |  | 9205|  40.2k|    else {                                                             \
  |  | 9206|  40.2k|        return vis(monostate_val);                                     \
  |  | 9207|  40.2k|    }
  ------------------
 9260|       |
 9261|  40.2k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 40.2k]
  ------------------
 9262|  40.2k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  40.2k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  40.2k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 40.2k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 40.2k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  40.2k|            SCN_CLANG_POP
 9279|  40.2k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  11.0k|    {
 3480|  11.0k|        return m_iterator;
 3481|  11.0k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|  1.80k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.80k|    {
 1572|  1.80k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  1.80k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.80k|    {
  442|  1.80k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.02k|    {
 1316|  2.02k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  6.43k|    {
 3484|  6.43k|        return m_sentinel;
 3485|  6.43k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1615|    226|        : base(unexpect, std::move(e.error())),
 1616|    226|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    226|    {
 1618|    226|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    226|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    226|          m_has_value(false)
  451|    226|    {
  452|    226|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  5.02k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.02k|    static_cast<    \
  |  |  935|  5.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.02k|    static_cast<    \
  |  |  935|  5.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  5.02k|    {
 3466|  5.02k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1739|    246|    {
 1740|    246|        return has_value();
 1741|    246|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  4.00k|    {
  490|  4.00k|        return m_has_value;
  491|  4.00k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1794|    194|    {
 1795|    194|        return value();
 1796|    194|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  1.80k|    {
 1769|  1.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.80k|        return this->get_value();
 1771|  1.80k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.80k|    {
  456|  1.80k|        return m_value;
  457|  1.80k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|  1.78k|    {
 1979|  1.78k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.78k|                                            std::forward<F>(f));
 1981|  1.78k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|  1.78k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.78k|    else {
 1472|  1.78k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.78k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.78k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.60k, False: 174]
  |  |  ------------------
  ------------------
 1474|  1.78k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.78k|                   : result(unexpect,
 1476|    174|                            trivial_invoke(std::forward<F>(f),
 1477|    174|                                           std::forward<Exp>(exp).error()));
 1478|  1.78k|    }
 1479|  1.78k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  1.60k|    {
 1805|  1.60k|        return std::move(value());
 1806|  1.60k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|  1.60k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.60k|    {
 1572|  1.60k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  1.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.60k|    {
  442|  1.60k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.78k|    {
 1316|  1.78k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1755|    174|    {
 1756|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    174|        return std::move(this->get_unexpected().error());
 1758|    174|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    174|    {
  473|    174|        return m_unexpected;
  474|    174|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1625|    174|        : base(unexpect, std::forward<Args>(args)...),
 1626|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    174|    {
 1628|    174|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    174|          m_has_value(false)
  451|    174|    {
  452|    174|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|  1.78k|    {
 1740|  1.78k|        return has_value();
 1741|  1.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.56k|    {
  490|  3.56k|        return m_has_value;
  491|  3.56k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1745|    174|    {
 1746|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    174|        return this->get_unexpected().error();
 1748|    174|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    174|    {
  473|    174|        return m_unexpected;
  474|    174|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  1.60k|    {
 1805|  1.60k|        return std::move(value());
 1806|  1.60k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  1.60k|    {
 1769|  1.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.60k|        return this->get_value();
 1771|  1.60k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.60k|    {
  456|  1.60k|        return m_value;
  457|  1.60k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   157k|    {
 6177|   157k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   157k|        return static_cast<std::size_t>(m_desc &
 6182|   157k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   157k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   186k|    {
 6203|   186k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   186k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|  28.5k|    {
 6145|  28.5k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  28.5k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 28.4k]
  |  |  ------------------
  ------------------
 6153|     68|            return {};
 6154|     68|        }
 6155|       |
 6156|  28.4k|        const auto t = type(id);
 6157|  28.4k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.10k, False: 27.3k]
  |  |  ------------------
  ------------------
 6158|  1.10k|            return {};
 6159|  1.10k|        }
 6160|       |
 6161|  27.3k|        basic_scan_arg<Context> arg;
 6162|  27.3k|        arg.m_type = t;
 6163|  27.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 27.3k, False: 0]
  ------------------
 6164|  27.3k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  27.3k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  27.3k|        return arg;
 6170|  28.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|  28.5k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|  28.4k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  28.4k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  28.4k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  28.4k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  28.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|  27.3k|    {
 6207|  27.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  27.3k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|  54.2k|    {
 5961|  54.2k|        return m_type != detail::arg_type::none_type;
 5962|  54.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  4.14k|{
 9300|  4.14k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.14k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.14k|{
 9201|  4.14k|#define SCN_VISIT(Type)                                                \
 9202|  4.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.14k|    }                                                                  \
 9205|  4.14k|    else {                                                             \
 9206|  4.14k|        return vis(monostate_val);                                     \
 9207|  4.14k|    }
 9208|       |
 9209|  4.14k|    monostate monostate_val{};
 9210|       |
 9211|  4.14k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.14k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.14k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|    460|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 460, False: 3.68k]
  ------------------
 9217|    460|            SCN_VISIT(int);
  ------------------
  |  | 9202|    460|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    460|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    460|    }                                                                  \
  |  | 9205|    460|    else {                                                             \
  |  | 9206|    460|        return vis(monostate_val);                                     \
  |  | 9207|    460|    }
  ------------------
 9218|    460|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.14k]
  ------------------
 9219|    460|            SCN_VISIT(long);
  ------------------
  |  | 9202|    460|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    460|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    460|    }                                                                  \
  |  | 9205|    460|    else {                                                             \
  |  | 9206|    460|        return vis(monostate_val);                                     \
  |  | 9207|    460|    }
  ------------------
 9220|    460|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.14k]
  ------------------
 9221|    460|            SCN_VISIT(long long);
  ------------------
  |  | 9202|    460|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    460|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    460|    }                                                                  \
  |  | 9205|    460|    else {                                                             \
  |  | 9206|    460|        return vis(monostate_val);                                     \
  |  | 9207|    460|    }
  ------------------
 9222|    460|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.14k]
  ------------------
 9223|    460|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|    460|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    460|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    460|    }                                                                  \
  |  | 9205|    460|    else {                                                             \
  |  | 9206|    460|        return vis(monostate_val);                                     \
  |  | 9207|    460|    }
  ------------------
 9224|    460|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.14k]
  ------------------
 9225|    460|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|    460|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    460|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    460|    }                                                                  \
  |  | 9205|    460|    else {                                                             \
  |  | 9206|    460|        return vis(monostate_val);                                     \
  |  | 9207|    460|    }
  ------------------
 9226|    920|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 460, False: 3.68k]
  ------------------
 9227|    920|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|    920|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    920|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    920|    }                                                                  \
  |  | 9205|    920|    else {                                                             \
  |  | 9206|    920|        return vis(monostate_val);                                     \
  |  | 9207|    920|    }
  ------------------
 9228|    920|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.14k]
  ------------------
 9229|    920|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|    920|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    920|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    920|    }                                                                  \
  |  | 9205|    920|    else {                                                             \
  |  | 9206|    920|        return vis(monostate_val);                                     \
  |  | 9207|    920|    }
  ------------------
 9230|    920|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.14k]
  ------------------
 9231|    920|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|    920|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    920|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    920|    }                                                                  \
  |  | 9205|    920|    else {                                                             \
  |  | 9206|    920|        return vis(monostate_val);                                     \
  |  | 9207|    920|    }
  ------------------
 9232|  1.38k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 460, False: 3.68k]
  ------------------
 9233|  1.38k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  1.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.38k|    }                                                                  \
  |  | 9205|  1.38k|    else {                                                             \
  |  | 9206|  1.38k|        return vis(monostate_val);                                     \
  |  | 9207|  1.38k|    }
  ------------------
 9234|  1.84k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 460, False: 3.68k]
  ------------------
 9235|  1.84k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  1.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.84k|    }                                                                  \
  |  | 9205|  1.84k|    else {                                                             \
  |  | 9206|  1.84k|        return vis(monostate_val);                                     \
  |  | 9207|  1.84k|    }
  ------------------
 9236|  1.84k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.14k]
  ------------------
 9237|  1.84k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  1.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.84k|    }                                                                  \
  |  | 9205|  1.84k|    else {                                                             \
  |  | 9206|  1.84k|        return vis(monostate_val);                                     \
  |  | 9207|  1.84k|    }
  ------------------
 9238|  2.30k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 460, False: 3.68k]
  ------------------
 9239|  2.30k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  2.30k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.30k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.30k|    }                                                                  \
  |  | 9205|  2.30k|    else {                                                             \
  |  | 9206|  2.30k|        return vis(monostate_val);                                     \
  |  | 9207|  2.30k|    }
  ------------------
 9240|  2.30k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.14k]
  ------------------
 9241|  2.30k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  2.30k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.30k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.30k|    }                                                                  \
  |  | 9205|  2.30k|    else {                                                             \
  |  | 9206|  2.30k|        return vis(monostate_val);                                     \
  |  | 9207|  2.30k|    }
  ------------------
 9242|  2.30k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.14k]
  ------------------
 9243|  2.30k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  2.30k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.30k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.30k|    }                                                                  \
  |  | 9205|  2.30k|    else {                                                             \
  |  | 9206|  2.30k|        return vis(monostate_val);                                     \
  |  | 9207|  2.30k|    }
  ------------------
 9244|  2.76k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 460, False: 3.68k]
  ------------------
 9245|  2.76k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  2.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.76k|    }                                                                  \
  |  | 9205|  2.76k|    else {                                                             \
  |  | 9206|  2.76k|        return vis(monostate_val);                                     \
  |  | 9207|  2.76k|    }
  ------------------
 9246|  2.76k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.14k]
  ------------------
 9247|  2.76k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  2.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.76k|    }                                                                  \
  |  | 9205|  2.76k|    else {                                                             \
  |  | 9206|  2.76k|        return vis(monostate_val);                                     \
  |  | 9207|  2.76k|    }
  ------------------
 9248|  2.76k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.14k]
  ------------------
 9249|  2.76k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  2.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.76k|    }                                                                  \
  |  | 9205|  2.76k|    else {                                                             \
  |  | 9206|  2.76k|        return vis(monostate_val);                                     \
  |  | 9207|  2.76k|    }
  ------------------
 9250|  3.22k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 460, False: 3.68k]
  ------------------
 9251|  3.22k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  3.22k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.22k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.22k|    }                                                                  \
  |  | 9205|  3.22k|    else {                                                             \
  |  | 9206|  3.22k|        return vis(monostate_val);                                     \
  |  | 9207|  3.22k|    }
  ------------------
 9252|  3.68k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 460, False: 3.68k]
  ------------------
 9253|  3.68k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  3.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.68k|    }                                                                  \
  |  | 9205|  3.68k|    else {                                                             \
  |  | 9206|  3.68k|        return vis(monostate_val);                                     \
  |  | 9207|  3.68k|    }
  ------------------
 9254|  4.14k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 460, False: 3.68k]
  ------------------
 9255|  4.14k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  4.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.14k|    }                                                                  \
  |  | 9205|  4.14k|    else {                                                             \
  |  | 9206|  4.14k|        return vis(monostate_val);                                     \
  |  | 9207|  4.14k|    }
  ------------------
 9256|  4.14k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.14k]
  ------------------
 9257|  4.14k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  4.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.14k|    }                                                                  \
  |  | 9205|  4.14k|    else {                                                             \
  |  | 9206|  4.14k|        return vis(monostate_val);                                     \
  |  | 9207|  4.14k|    }
  ------------------
 9258|  4.14k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.14k]
  ------------------
 9259|  4.14k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  4.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.14k|    }                                                                  \
  |  | 9205|  4.14k|    else {                                                             \
  |  | 9206|  4.14k|        return vis(monostate_val);                                     \
  |  | 9207|  4.14k|    }
  ------------------
 9260|       |
 9261|  4.14k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 4.14k]
  ------------------
 9262|  4.14k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.14k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.14k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.14k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.14k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.14k|            SCN_CLANG_POP
 9279|  4.14k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  74.2k|{
 6006|  74.2k|    return arg.m_type;
 6007|  74.2k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  25.7k|{
 6018|  25.7k|    return arg.m_value;
 6019|  25.7k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   157k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   157k|    {
 6258|   157k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   157k|    {
 3075|   157k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   157k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   157k|    {
 3041|   157k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   157k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   157k|{
 7793|   157k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   157k|    handler.check_args_exhausted();
 7795|   157k|    return handler.get_error();
 7796|   157k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   157k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   157k|    auto begin = format.data();
 7761|   157k|    auto it = begin;
 7762|   157k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   323M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 323M, False: 52.8k]
  ------------------
 7765|   323M|        const auto ch = *it++;
 7766|   323M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 107k, False: 323M]
  ------------------
 7767|   107k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   107k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   107k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 104k, False: 3.51k]
  ------------------
 7771|   104k|                return;
 7772|   104k|            }
 7773|   107k|        }
 7774|   323M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 1.38k, False: 323M]
  ------------------
 7775|  1.38k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 234, False: 1.14k]
  |  |  |  Branch (865:45): [True: 106, False: 1.27k]
  |  |  |  Branch (865:45): [True: 128, False: 1.14k]
  |  |  ------------------
  ------------------
 7776|    234|                handler.on_error("Unmatched '}' in format string");
 7777|    234|                return;
 7778|    234|            }
 7779|       |
 7780|  1.14k|            handler.on_literal_text(begin, it);
 7781|  1.14k|            begin = ++it;
 7782|  1.14k|        }
 7783|   323M|    }
 7784|       |
 7785|  52.8k|    handler.on_literal_text(begin, end);
 7786|  52.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   107k|{
 7690|   107k|    struct id_adapter {
 7691|   107k|        constexpr void operator()()
 7692|   107k|        {
 7693|   107k|            arg_id = handler.on_arg_id();
 7694|   107k|        }
 7695|   107k|        constexpr void operator()(std::size_t id)
 7696|   107k|        {
 7697|   107k|            arg_id = handler.on_arg_id(id);
 7698|   107k|        }
 7699|       |
 7700|   107k|        constexpr void on_error(const char* msg)
 7701|   107k|        {
 7702|   107k|            SCN_UNLIKELY_ATTR
 7703|   107k|            handler.on_error(msg);
 7704|   107k|        }
 7705|       |
 7706|   107k|        Handler& handler;
 7707|   107k|        std::size_t arg_id;
 7708|   107k|    };
 7709|       |
 7710|   107k|    ++begin;
 7711|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 107k]
  |  |  ------------------
  ------------------
 7712|     70|        handler.on_error("Unexpected end of replacement field");
 7713|     70|        return begin;
 7714|     70|    }
 7715|       |
 7716|   107k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 4.10k, False: 103k]
  ------------------
 7717|  4.10k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|  4.10k|    }
 7719|   103k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 176, False: 103k]
  ------------------
 7720|    176|        handler.on_literal_text(begin, begin + 1);
 7721|    176|    }
 7722|   103k|    else {
 7723|   103k|        auto adapter = id_adapter{handler, 0};
 7724|   103k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   103k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 103k]
  |  |  ------------------
  ------------------
 7727|    120|            handler.on_error("Missing '}' in format string");
 7728|    120|            return begin;
 7729|    120|        }
 7730|       |
 7731|   103k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 134, False: 103k]
  ------------------
 7732|    134|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|    134|        }
 7734|   103k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 24.3k, False: 79.0k]
  ------------------
 7735|  24.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50, False: 24.2k]
  |  |  ------------------
  ------------------
 7736|     50|                handler.on_error("Unexpected end of replacement field");
 7737|     50|                return begin;
 7738|     50|            }
 7739|  24.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  24.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.18k, False: 22.0k]
  |  |  |  Branch (865:45): [True: 0, False: 24.2k]
  |  |  |  Branch (865:45): [True: 2.18k, False: 22.0k]
  |  |  ------------------
  ------------------
 7741|  2.18k|                handler.on_error("Unknown format specifier");
 7742|  2.18k|                return begin;
 7743|  2.18k|            }
 7744|  24.2k|        }
 7745|  79.0k|        else {
 7746|  79.0k|            SCN_UNLIKELY_ATTR
 7747|  79.0k|            handler.on_error("Missing '}' in format string");
 7748|  79.0k|            return begin;
 7749|  79.0k|        }
 7750|   103k|    }
 7751|  26.4k|    return begin + 1;
 7752|   107k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|  28.4k|    {
 8832|  28.4k|        return m_args.get(id);
 8833|  28.4k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|  28.2k|    {
 6286|  28.2k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 28.2k]
  |  |  ------------------
  ------------------
 6287|     40|            on_error(
 6288|     40|                "Cannot switch from manual to automatic argument indexing");
 6289|     40|            return 0;
 6290|     40|        }
 6291|       |
 6292|  28.2k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  28.2k|        do_check_arg_id(id);
 6294|  28.2k|        return id;
 6295|  28.2k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6315|    112|    {
 6316|    112|        m_error = unexpected(detail::handle_error(
 6317|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6318|    112|        return m_error.error();
 6319|    112|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|  28.4k|{
 6806|  28.4k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  28.4k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  28.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   103k|{
 7191|   103k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   103k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 103k, False: 0]
  |  Branch (7192:26): [True: 79.4k, False: 24.1k]
  ------------------
 7193|  79.4k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  79.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|  79.4k|    }
 7195|       |
 7196|  24.1k|    handler();
 7197|  24.1k|    return begin;
 7198|   103k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|  79.4k|{
 7161|  79.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  79.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  79.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|  79.4k|    CharT c = *begin;
 7164|  79.4k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 72, False: 79.3k]
  |  Branch (7164:27): [True: 78.8k, False: 456]
  ------------------
 7165|  78.9k|        handler.on_error("Invalid argument ID");
 7166|  78.9k|        return begin;
 7167|  78.9k|    }
 7168|       |
 7169|    456|    int idx = 0;
 7170|    456|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 278, False: 178]
  ------------------
 7171|    278|        idx = parse_simple_int(begin, end);
 7172|    278|    }
 7173|    178|    else {
 7174|    178|        ++begin;
 7175|    178|    }
 7176|       |
 7177|    456|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 120, False: 336]
  |  Branch (7177:26): [True: 202, False: 134]
  |  Branch (7177:50): [True: 66, False: 136]
  ------------------
 7178|    186|        handler.on_error("Invalid argument ID");
 7179|    186|        return begin;
 7180|    186|    }
 7181|    270|    handler(idx);
 7182|       |
 7183|    270|    return begin;
 7184|    456|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|  79.1k|        {
 7702|  79.1k|            SCN_UNLIKELY_ATTR
 7703|  79.1k|            handler.on_error(msg);
 7704|  79.1k|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7139|  9.60k|{
 7140|  9.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  9.60k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  9.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  9.60k|    unsigned long long value = 0;
 7144|  11.6k|    do {
 7145|  11.6k|        value *= 10;
 7146|  11.6k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  11.6k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 62, False: 11.6k]
  ------------------
 7148|  11.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|     62|            return -1;
 7150|     62|        }
 7151|  11.6k|        ++begin;
 7152|  11.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 11.3k, False: 288]
  |  Branch (7152:30): [True: 6.96k, False: 4.35k]
  |  Branch (7152:47): [True: 2.07k, False: 4.89k]
  ------------------
 7153|  9.53k|    return static_cast<int>(value);
 7154|  9.60k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|    270|        {
 7697|    270|            arg_id = handler.on_arg_id(id);
 7698|    270|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6298|    270|    {
 6299|    270|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 198]
  |  |  ------------------
  ------------------
 6300|     72|            on_error(
 6301|     72|                "Cannot switch from manual to automatic argument indexing");
 6302|     72|            return;
 6303|     72|        }
 6304|    198|        m_next_arg_id = -1;
 6305|    198|        do_check_arg_id(id);
 6306|    198|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  24.1k|        {
 7693|  24.1k|            arg_id = handler.on_arg_id();
 7694|  24.1k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|  21.7k|    {
 6281|  21.7k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  21.7k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  45.9k|    {
 6270|  45.9k|        return m_format.data();
 6271|  45.9k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  24.2k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  24.2k|    {
 7871|  24.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  24.2k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|  24.2k|{
 7606|  24.2k|    auto do_presentation = [&]() -> const CharT* {
 7607|  24.2k|        if (*begin == CharT{'['}) {
 7608|  24.2k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  24.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  24.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  24.2k|                return begin;
 7614|  24.2k|            }
 7615|  24.2k|            handler.on_character_set_string(set);
 7616|  24.2k|            return begin;
 7617|  24.2k|        }
 7618|  24.2k|        if (*begin == CharT{'/'}) {
 7619|  24.2k|            return parse_presentation_regex(begin, end, handler);
 7620|  24.2k|        }
 7621|  24.2k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  24.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  24.2k|            handler.on_error("Invalid type specifier in format string");
 7624|  24.2k|            return begin;
 7625|  24.2k|        }
 7626|  24.2k|        handler.on_type(type);
 7627|  24.2k|        return begin;
 7628|  24.2k|    };
 7629|       |
 7630|  24.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 23.3k, False: 926]
  |  Branch (7630:28): [True: 2.48k, False: 20.8k]
  ------------------
 7631|  24.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 266, False: 2.21k]
  |  Branch (7631:36): [True: 232, False: 34]
  ------------------
 7632|    232|        return do_presentation();
 7633|    232|    }
 7634|       |
 7635|  24.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.0k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  24.0k|    begin = parse_align(begin, end, handler);
 7641|  24.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 23.9k]
  |  |  ------------------
  ------------------
 7642|    102|        handler.on_error("Unexpected end of format string");
 7643|    102|        return begin;
 7644|    102|    }
 7645|       |
 7646|  23.9k|    begin = parse_width(begin, end, handler);
 7647|  23.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 23.8k]
  |  |  ------------------
  ------------------
 7648|     98|        handler.on_error("Unexpected end of format string");
 7649|     98|        return begin;
 7650|     98|    }
 7651|       |
 7652|  23.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 2.61k, False: 21.2k]
  ------------------
 7653|  2.61k|        ++begin;
 7654|  2.61k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.57k]
  |  |  ------------------
  ------------------
 7655|     34|            handler.on_error("Unexpected end of format string");
 7656|     34|            return begin;
 7657|     34|        }
 7658|  2.57k|        begin = parse_precision(begin, end, handler);
 7659|  2.57k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 96, False: 2.48k]
  |  |  ------------------
  ------------------
 7660|     96|            handler.on_error("Unexpected end of format string");
 7661|     96|            return begin;
 7662|     96|        }
 7663|  2.57k|    }
 7664|       |
 7665|  23.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 428, False: 23.2k]
  ------------------
 7666|    428|        handler.on_localized();
 7667|    428|        ++begin;
 7668|    428|    }
 7669|  23.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 23.6k]
  |  |  ------------------
  ------------------
 7670|     52|        handler.on_error("Unexpected end of format string");
 7671|     52|        return begin;
 7672|     52|    }
 7673|       |
 7674|  23.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 23.6k, False: 0]
  |  Branch (7674:25): [True: 20.0k, False: 3.62k]
  ------------------
 7675|  20.0k|        do_presentation();
 7676|  20.0k|    }
 7677|  23.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 22.1k]
  |  |  ------------------
  ------------------
 7678|  1.54k|        handler.on_error("Unexpected end of format string");
 7679|  1.54k|        return begin;
 7680|  1.54k|    }
 7681|       |
 7682|  22.1k|    return begin;
 7683|  23.6k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|  2.48k|{
 7255|  2.48k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 230, False: 2.25k]
  |  Branch (7255:33): [True: 196, False: 34]
  ------------------
 7256|  2.48k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 140, False: 2.14k]
  |  Branch (7256:33): [True: 70, False: 70]
  ------------------
 7257|  2.48k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  20.2k|    auto do_presentation = [&]() -> const CharT* {
 7607|  20.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 2.44k, False: 17.8k]
  ------------------
 7608|  2.44k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  2.44k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 578, False: 1.86k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|    578|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|    578|                return begin;
 7614|    578|            }
 7615|  1.86k|            handler.on_character_set_string(set);
 7616|  1.86k|            return begin;
 7617|  2.44k|        }
 7618|  17.8k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 15.0k, False: 2.78k]
  ------------------
 7619|  15.0k|            return parse_presentation_regex(begin, end, handler);
 7620|  15.0k|        }
 7621|  2.78k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  2.78k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 358, False: 2.43k]
  |  |  ------------------
  ------------------
 7623|    358|            handler.on_error("Invalid type specifier in format string");
 7624|    358|            return begin;
 7625|    358|        }
 7626|  2.43k|        handler.on_type(type);
 7627|  2.43k|        return begin;
 7628|  2.78k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  2.44k|{
 7445|  2.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  2.44k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  2.44k|    auto start = begin;
 7449|  2.44k|    ++begin;
 7450|       |
 7451|  2.44k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.41k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|     34|        return {};
 7456|     34|    }
 7457|  2.41k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 984, False: 1.42k]
  ------------------
 7458|    984|        handler.on_charset_inverted();
 7459|    984|        ++begin;
 7460|    984|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    984|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 950]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|     34|            return {};
 7465|     34|        }
 7466|    950|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 52, False: 898]
  ------------------
 7467|     52|            handler.on_charset_single(char32_t{']'});
 7468|     52|            ++begin;
 7469|     52|        }
 7470|    950|    }
 7471|  1.42k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 34, False: 1.39k]
  ------------------
 7472|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|     34|    }
 7474|       |
 7475|  17.0k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 16.7k, False: 320]
  ------------------
 7476|  16.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156, False: 16.6k]
  |  |  ------------------
  ------------------
 7477|    156|            break;
 7478|    156|        }
 7479|       |
 7480|  16.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 1.86k, False: 14.7k]
  ------------------
 7481|  1.86k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  1.86k|        }
 7483|       |
 7484|  14.7k|        parse_presentation_set_literal(begin, end, handler);
 7485|  14.7k|    }
 7486|       |
 7487|    476|    SCN_UNLIKELY_ATTR
 7488|    476|    handler.on_error("Invalid [character set] specifier in format string");
 7489|    476|    return {};
 7490|  2.34k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7408|  14.7k|{
 7409|  14.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  14.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  14.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 14.6k]
  |  |  ------------------
  ------------------
 7413|    120|        return;
 7414|    120|    }
 7415|       |
 7416|  14.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 14.5k, False: 88]
  |  Branch (7416:25): [True: 1.25k, False: 13.2k]
  |  Branch (7416:49): [True: 1.21k, False: 34]
  ------------------
 7417|  14.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 1.16k, False: 52]
  ------------------
 7418|  1.16k|        ++begin;
 7419|       |
 7420|  1.16k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  1.16k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.13k]
  |  |  ------------------
  ------------------
 7422|     34|            return;
 7423|     34|        }
 7424|       |
 7425|  1.13k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.09k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|     34|            return;
 7430|     34|        }
 7431|       |
 7432|  1.09k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  1.09k|        return;
 7434|  1.13k|    }
 7435|       |
 7436|  13.4k|    handler.on_charset_single(cp_first);
 7437|  13.4k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7384|  15.9k|{
 7385|  15.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  15.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  15.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  |  Branch (865:45): [True: 0, False: 15.9k]
  |  |  |  Branch (865:45): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  15.9k|    const auto cp =
 7394|  15.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  15.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 154, False: 15.7k]
  |  |  ------------------
  ------------------
 7396|    154|        handler.on_error("Invalid encoding in format string");
 7397|    154|        return invalid_code_point;
 7398|    154|    }
 7399|       |
 7400|  15.7k|    begin += len;
 7401|  15.7k|    return cp;
 7402|  15.9k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  1.86k|    {
 7099|  1.86k|        m_specs.charset_string_data = fmt.data();
 7100|  1.86k|        m_specs.charset_string_size = fmt.size();
 7101|  1.86k|        on_type(presentation_type::string_set);
 7102|  1.86k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7496|  15.0k|{
 7497|  15.0k|#if !SCN_DISABLE_REGEX
 7498|  15.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|  15.0k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|       |                  std::is_same_v<CharT, wchar_t>) {
 7503|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|       |        return begin;
 7505|       |    }
 7506|       |
 7507|  15.0k|    auto start = begin;
 7508|  15.0k|    ++begin;
 7509|       |
 7510|  15.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 14.9k]
  |  |  ------------------
  ------------------
 7511|     34|        handler.on_error("Unexpected end of regex in format string");
 7512|     34|        return begin;
 7513|     34|    }
 7514|       |
 7515|  14.9k|    handler.on_type(presentation_type::regex);
 7516|   804k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 804k, False: 72]
  ------------------
 7517|   804k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 18.0k, False: 786k]
  ------------------
 7518|  18.0k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 14.9k, False: 3.09k]
  ------------------
 7519|  14.9k|                break;
 7520|  14.9k|            }
 7521|  3.09k|            else {
 7522|  3.09k|                handler.on_type(presentation_type::regex_escaped);
 7523|  3.09k|            }
 7524|  18.0k|        }
 7525|   804k|    }
 7526|  14.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 14.9k]
  |  |  ------------------
  ------------------
 7527|     72|        handler.on_error("Unexpected end of regex in format string");
 7528|     72|        return begin;
 7529|     72|    }
 7530|       |
 7531|  14.9k|    auto regex_end = begin;
 7532|  14.9k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|  14.9k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 14.8k]
  |  |  ------------------
  ------------------
 7534|     34|        handler.on_error("Invalid (empty) regex in format string");
 7535|     34|        return begin;
 7536|     34|    }
 7537|  14.8k|    handler.on_regex_pattern(regex_pattern);
 7538|  14.8k|    ++begin;
 7539|       |
 7540|  14.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 14.8k]
  |  |  ------------------
  ------------------
 7541|     34|        handler.on_error("Unexpected end of regex in format string");
 7542|     34|        return begin;
 7543|     34|    }
 7544|       |
 7545|  14.8k|    regex_flags flags{regex_flags::none};
 7546|  14.8k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|  14.8k|        {{'m', regex_flags::multiline},
 7548|  14.8k|         {'s', regex_flags::singleline},
 7549|  14.8k|         {'i', regex_flags::nocase},
 7550|  14.8k|         {'n', regex_flags::nocapture}}};
 7551|  16.4k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 16.3k, False: 44]
  ------------------
 7552|  16.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 14.7k, False: 1.64k]
  ------------------
 7553|  14.7k|            break;
 7554|  14.7k|        }
 7555|  1.64k|        bool found_flag = false;
 7556|  4.38k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 4.38k, False: 54]
  ------------------
 7557|  4.38k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 2.79k, False: 1.59k]
  ------------------
 7558|  2.79k|                continue;
 7559|  2.79k|            }
 7560|  1.59k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 34, False: 1.55k]
  ------------------
 7561|     34|                handler.on_error("Flag set multiple times in regex");
 7562|     34|                return begin;
 7563|     34|            }
 7564|  1.55k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|  1.55k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7565:17): [True: 34, False: 1.52k]
  ------------------
 7566|       |                // clang-format off
 7567|     34|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|     34|            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|  1.55k|#endif
 7578|  1.55k|            flags |= flag.second;
 7579|  1.55k|            found_flag = true;
 7580|  1.55k|            break;
 7581|  1.59k|        }
 7582|  1.61k|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 54, False: 1.55k]
  ------------------
 7583|     54|            handler.on_error("Invalid flag in regex");
 7584|     54|            return begin;
 7585|     54|        }
 7586|  1.61k|    }
 7587|  14.7k|    handler.on_regex_flags(flags);
 7588|       |
 7589|  14.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44, False: 14.7k]
  |  |  ------------------
  ------------------
 7590|     44|        handler.on_error("Unexpected end of regex in format string");
 7591|     44|        return begin;
 7592|     44|    }
 7593|       |
 7594|  14.7k|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|  14.7k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7106|  14.8k|    {
 7107|  14.8k|        m_specs.charset_string_data = pattern.data();
 7108|  14.8k|        m_specs.charset_string_size = pattern.size();
 7109|  14.8k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|  2.78k|{
 7203|  2.78k|    switch (type) {
 7204|     88|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 88, False: 2.70k]
  ------------------
 7205|    122|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 34, False: 2.75k]
  ------------------
 7206|    122|            return presentation_type::int_binary;
 7207|    106|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 106, False: 2.68k]
  ------------------
 7208|    106|            return presentation_type::int_decimal;
 7209|    160|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 160, False: 2.62k]
  ------------------
 7210|    160|            return presentation_type::int_generic;
 7211|    106|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 106, False: 2.68k]
  ------------------
 7212|    106|            return presentation_type::int_unsigned_decimal;
 7213|    142|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 142, False: 2.64k]
  ------------------
 7214|    142|            return presentation_type::int_octal;
 7215|     88|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 88, False: 2.70k]
  ------------------
 7216|    140|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 52, False: 2.73k]
  ------------------
 7217|    140|            return presentation_type::int_hex;
 7218|     34|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 34, False: 2.75k]
  ------------------
 7219|     68|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 34, False: 2.75k]
  ------------------
 7220|     68|            return presentation_type::int_arbitrary_base;
 7221|    150|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 150, False: 2.63k]
  ------------------
 7222|    238|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 88, False: 2.70k]
  ------------------
 7223|    238|            return presentation_type::float_hex;
 7224|     70|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 70, False: 2.71k]
  ------------------
 7225|    104|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 34, False: 2.75k]
  ------------------
 7226|    104|            return presentation_type::float_scientific;
 7227|     52|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 52, False: 2.73k]
  ------------------
 7228|    140|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 88, False: 2.70k]
  ------------------
 7229|    140|            return presentation_type::float_fixed;
 7230|     34|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 34, False: 2.75k]
  ------------------
 7231|     86|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 52, False: 2.73k]
  ------------------
 7232|     86|            return presentation_type::float_general;
 7233|    682|        case 's':
  ------------------
  |  Branch (7233:9): [True: 682, False: 2.10k]
  ------------------
 7234|    682|            return presentation_type::string;
 7235|    232|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 232, False: 2.55k]
  ------------------
 7236|    232|            return presentation_type::character;
 7237|     34|        case '?':
  ------------------
  |  Branch (7237:9): [True: 34, False: 2.75k]
  ------------------
 7238|     34|            return presentation_type::escaped_character;
 7239|     70|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 70, False: 2.71k]
  ------------------
 7240|     70|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 2.78k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 2.78k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    358|        default:
  ------------------
  |  Branch (7247:9): [True: 358, False: 2.43k]
  ------------------
 7248|    358|            return presentation_type::none;
 7249|  2.78k|    }
 7250|  2.78k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  24.0k|{
 7280|  24.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  24.0k|    auto check_align = [](wchar_t ch) {
 7283|  24.0k|        switch (ch) {
 7284|  24.0k|            case L'<':
 7285|  24.0k|                return align_type::left;
 7286|  24.0k|            case L'>':
 7287|  24.0k|                return align_type::right;
 7288|  24.0k|            case L'^':
 7289|  24.0k|                return align_type::center;
 7290|  24.0k|            default:
 7291|  24.0k|                return align_type::none;
 7292|  24.0k|        }
 7293|  24.0k|    };
 7294|       |
 7295|  24.0k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  24.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.0k]
  |  |  |  Branch (865:45): [True: 0, False: 24.0k]
  |  |  |  Branch (865:45): [True: 0, False: 24.0k]
  |  |  ------------------
  ------------------
 7297|  24.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  24.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  24.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  24.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  24.0k|    const auto begin_before_fill = begin;
 7307|  24.0k|    begin += potential_fill_len;
 7308|       |
 7309|  24.0k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 926, False: 23.1k]
  ------------------
 7310|    926|        return begin_before_fill;
 7311|    926|    }
 7312|       |
 7313|  23.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  23.1k|    const auto begin_after_fill = begin;
 7315|  23.1k|    ++begin;
 7316|       |
 7317|  23.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 23.1k, False: 0]
  ------------------
 7318|  23.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 23.0k]
  |  |  ------------------
  ------------------
 7319|     42|            handler.on_error("Invalid fill character '{' in format string");
 7320|     42|            return begin;
 7321|     42|        }
 7322|  23.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 1.51k, False: 21.5k]
  ------------------
 7323|  1.51k|            return begin_before_fill;
 7324|  1.51k|        }
 7325|  23.0k|    }
 7326|       |
 7327|  21.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 20.7k, False: 762]
  ------------------
 7328|  20.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 964, False: 19.8k]
  ------------------
 7329|    964|            handler.on_align(potential_align_on_fill);
 7330|    964|            return begin_after_fill;
 7331|    964|        }
 7332|  19.8k|        return begin_before_fill;
 7333|  20.7k|    }
 7334|       |
 7335|    762|    handler.on_fill(potential_fill);
 7336|    762|    handler.on_align(potential_align_after_fill);
 7337|    762|    return begin;
 7338|  21.5k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|  24.0k|{
 7262|  24.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|  24.0k|    if constexpr (sizeof(CharT) != 1) {
 7264|  24.0k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|  24.0k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  47.1k|    auto check_align = [](wchar_t ch) {
 7283|  47.1k|        switch (ch) {
 7284|    662|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 662, False: 46.4k]
  ------------------
 7285|    662|                return align_type::left;
 7286|    230|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 230, False: 46.9k]
  ------------------
 7287|    230|                return align_type::right;
 7288|  1.26k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 1.26k, False: 45.8k]
  ------------------
 7289|  1.26k|                return align_type::center;
 7290|  44.9k|            default:
  ------------------
  |  Branch (7290:13): [True: 44.9k, False: 2.15k]
  ------------------
 7291|  44.9k|                return align_type::none;
 7292|  47.1k|        }
 7293|  47.1k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|    762|    {
 7020|    762|        m_specs.fill = fill;
 7021|    762|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|    762|    {
 6901|    762|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|    762|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    762|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|    762|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|    762|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    762|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|       |        if constexpr (sizeof(CharT) == 1) {
 6904|       |            for (size_t i = 0; i < s.size(); ++i) {
 6905|       |                SCN_GCC_PUSH
 6906|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|       |                m_data[i] = s[i];
 6908|       |                SCN_GCC_POP
 6909|       |            }
 6910|       |            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|    762|        else {
 6923|    762|            const auto front = static_cast<unsigned>(s.front());
 6924|    762|            m_data[0] = static_cast<char>(front);
 6925|    762|            m_data[1] = static_cast<char>(front >> 8);
 6926|    762|            m_data[2] = static_cast<char>(front >> 16);
 6927|    762|            m_data[3] = static_cast<char>(front >> 24);
 6928|    762|        }
 6929|    762|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  23.9k|{
 7345|  23.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  23.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 10.5k, False: 13.4k]
  |  Branch (7347:33): [True: 6.81k, False: 3.69k]
  ------------------
 7348|  6.81k|        int width = parse_simple_int(begin, end);
 7349|  6.81k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  6.81k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.78k, False: 34]
  |  |  ------------------
  ------------------
 7350|  6.78k|            handler.on_width(width);
 7351|  6.78k|        }
 7352|     34|        else {
 7353|     34|            handler.on_error("Invalid field width");
 7354|     34|            return begin;
 7355|     34|        }
 7356|  6.81k|    }
 7357|  23.8k|    return begin;
 7358|  23.9k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  2.57k|{
 7365|  2.57k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  2.57k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 2.54k, False: 34]
  |  Branch (7367:33): [True: 2.50k, False: 34]
  ------------------
 7368|  2.50k|        int prec = parse_simple_int(begin, end);
 7369|  2.50k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  2.50k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.50k, False: 0]
  |  |  ------------------
  ------------------
 7370|  2.50k|            handler.on_precision(prec);
 7371|  2.50k|        }
 7372|      0|        else {
 7373|      0|            handler.on_error("Invalid field precision");
 7374|      0|            return begin;
 7375|      0|        }
 7376|  2.50k|    }
 7377|  2.57k|    return begin;
 7378|  2.57k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|    428|    {
 7876|    428|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|    428|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 386, False: 42]
  ------------------
 7878|    428|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 344, False: 42]
  ------------------
 7879|    428|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 302, False: 42]
  ------------------
 7880|    428|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 260, False: 42]
  ------------------
 7881|    260|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|    260|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|    260|        }
 7886|       |
 7887|    168|        Handler::on_localized();
 7888|    168|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  21.5k|{
 9300|  21.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  21.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  21.5k|{
 9201|  21.5k|#define SCN_VISIT(Type)                                                \
 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  21.5k|    }                                                                  \
 9205|  21.5k|    else {                                                             \
 9206|  21.5k|        return vis(monostate_val);                                     \
 9207|  21.5k|    }
 9208|       |
 9209|  21.5k|    monostate monostate_val{};
 9210|       |
 9211|  21.5k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 21.5k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 21.5k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|  2.42k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 2.42k, False: 19.1k]
  ------------------
 9217|  2.42k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  2.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.42k|    }                                                                  \
  |  | 9205|  2.42k|    else {                                                             \
  |  | 9206|  2.42k|        return vis(monostate_val);                                     \
  |  | 9207|  2.42k|    }
  ------------------
 9218|  2.42k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 21.5k]
  ------------------
 9219|  2.42k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  2.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.42k|    }                                                                  \
  |  | 9205|  2.42k|    else {                                                             \
  |  | 9206|  2.42k|        return vis(monostate_val);                                     \
  |  | 9207|  2.42k|    }
  ------------------
 9220|  2.42k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 21.5k]
  ------------------
 9221|  2.42k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  2.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.42k|    }                                                                  \
  |  | 9205|  2.42k|    else {                                                             \
  |  | 9206|  2.42k|        return vis(monostate_val);                                     \
  |  | 9207|  2.42k|    }
  ------------------
 9222|  2.42k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 21.5k]
  ------------------
 9223|  2.42k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  2.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.42k|    }                                                                  \
  |  | 9205|  2.42k|    else {                                                             \
  |  | 9206|  2.42k|        return vis(monostate_val);                                     \
  |  | 9207|  2.42k|    }
  ------------------
 9224|  2.42k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 21.5k]
  ------------------
 9225|  2.42k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  2.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.42k|    }                                                                  \
  |  | 9205|  2.42k|    else {                                                             \
  |  | 9206|  2.42k|        return vis(monostate_val);                                     \
  |  | 9207|  2.42k|    }
  ------------------
 9226|  4.84k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 2.42k, False: 19.1k]
  ------------------
 9227|  4.84k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  4.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.84k|    }                                                                  \
  |  | 9205|  4.84k|    else {                                                             \
  |  | 9206|  4.84k|        return vis(monostate_val);                                     \
  |  | 9207|  4.84k|    }
  ------------------
 9228|  4.84k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 21.5k]
  ------------------
 9229|  4.84k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  4.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.84k|    }                                                                  \
  |  | 9205|  4.84k|    else {                                                             \
  |  | 9206|  4.84k|        return vis(monostate_val);                                     \
  |  | 9207|  4.84k|    }
  ------------------
 9230|  4.84k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 21.5k]
  ------------------
 9231|  4.84k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  4.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.84k|    }                                                                  \
  |  | 9205|  4.84k|    else {                                                             \
  |  | 9206|  4.84k|        return vis(monostate_val);                                     \
  |  | 9207|  4.84k|    }
  ------------------
 9232|  7.22k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 2.38k, False: 19.2k]
  ------------------
 9233|  7.22k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  7.22k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.22k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.22k|    }                                                                  \
  |  | 9205|  7.22k|    else {                                                             \
  |  | 9206|  7.22k|        return vis(monostate_val);                                     \
  |  | 9207|  7.22k|    }
  ------------------
 9234|  9.64k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 2.42k, False: 19.1k]
  ------------------
 9235|  9.64k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  9.64k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.64k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.64k|    }                                                                  \
  |  | 9205|  9.64k|    else {                                                             \
  |  | 9206|  9.64k|        return vis(monostate_val);                                     \
  |  | 9207|  9.64k|    }
  ------------------
 9236|  9.64k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 21.5k]
  ------------------
 9237|  9.64k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  9.64k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.64k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.64k|    }                                                                  \
  |  | 9205|  9.64k|    else {                                                             \
  |  | 9206|  9.64k|        return vis(monostate_val);                                     \
  |  | 9207|  9.64k|    }
  ------------------
 9238|  12.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 2.38k, False: 19.2k]
  ------------------
 9239|  12.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  12.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.0k|    }                                                                  \
  |  | 9205|  12.0k|    else {                                                             \
  |  | 9206|  12.0k|        return vis(monostate_val);                                     \
  |  | 9207|  12.0k|    }
  ------------------
 9240|  12.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 21.5k]
  ------------------
 9241|  12.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  12.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.0k|    }                                                                  \
  |  | 9205|  12.0k|    else {                                                             \
  |  | 9206|  12.0k|        return vis(monostate_val);                                     \
  |  | 9207|  12.0k|    }
  ------------------
 9242|  12.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 21.5k]
  ------------------
 9243|  12.0k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  12.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.0k|    }                                                                  \
  |  | 9205|  12.0k|    else {                                                             \
  |  | 9206|  12.0k|        return vis(monostate_val);                                     \
  |  | 9207|  12.0k|    }
  ------------------
 9244|  14.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 2.42k, False: 19.1k]
  ------------------
 9245|  14.4k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  14.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.4k|    }                                                                  \
  |  | 9205|  14.4k|    else {                                                             \
  |  | 9206|  14.4k|        return vis(monostate_val);                                     \
  |  | 9207|  14.4k|    }
  ------------------
 9246|  14.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 21.5k]
  ------------------
 9247|  14.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  14.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.4k|    }                                                                  \
  |  | 9205|  14.4k|    else {                                                             \
  |  | 9206|  14.4k|        return vis(monostate_val);                                     \
  |  | 9207|  14.4k|    }
  ------------------
 9248|  14.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 21.5k]
  ------------------
 9249|  14.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  14.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.4k|    }                                                                  \
  |  | 9205|  14.4k|    else {                                                             \
  |  | 9206|  14.4k|        return vis(monostate_val);                                     \
  |  | 9207|  14.4k|    }
  ------------------
 9250|  16.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 2.38k, False: 19.2k]
  ------------------
 9251|  16.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  16.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.8k|    }                                                                  \
  |  | 9205|  16.8k|    else {                                                             \
  |  | 9206|  16.8k|        return vis(monostate_val);                                     \
  |  | 9207|  16.8k|    }
  ------------------
 9252|  19.2k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 2.38k, False: 19.2k]
  ------------------
 9253|  19.2k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  19.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  19.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  19.2k|    }                                                                  \
  |  | 9205|  19.2k|    else {                                                             \
  |  | 9206|  19.2k|        return vis(monostate_val);                                     \
  |  | 9207|  19.2k|    }
  ------------------
 9254|  21.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 2.38k, False: 19.2k]
  ------------------
 9255|  21.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.5k|    }                                                                  \
  |  | 9205|  21.5k|    else {                                                             \
  |  | 9206|  21.5k|        return vis(monostate_val);                                     \
  |  | 9207|  21.5k|    }
  ------------------
 9256|  21.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 21.5k]
  ------------------
 9257|  21.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.5k|    }                                                                  \
  |  | 9205|  21.5k|    else {                                                             \
  |  | 9206|  21.5k|        return vis(monostate_val);                                     \
  |  | 9207|  21.5k|    }
  ------------------
 9258|  21.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 21.5k]
  ------------------
 9259|  21.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.5k|    }                                                                  \
  |  | 9205|  21.5k|    else {                                                             \
  |  | 9206|  21.5k|        return vis(monostate_val);                                     \
  |  | 9207|  21.5k|    }
  ------------------
 9260|       |
 9261|  21.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 21.5k]
  ------------------
 9262|  21.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  21.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  21.5k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 21.5k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 21.5k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  21.5k|            SCN_CLANG_POP
 9279|  21.5k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  2.60k|    {
 3480|  2.60k|        return m_iterator;
 3481|  2.60k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|    650|        : base(std::in_place, std::forward<U>(val)),
 1570|    650|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    650|    {
 1572|    650|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    650|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    650|    {
  442|    650|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    650|    {
 1316|    650|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  1.30k|    {
 3484|  1.30k|        return m_sentinel;
 3485|  1.30k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  1.30k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.30k|    static_cast<    \
  |  |  935|  1.30k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.30k|    static_cast<    \
  |  |  935|  1.30k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.30k|    {
 3466|  1.30k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.30k|    {
  490|  1.30k|        return m_has_value;
  491|  1.30k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    650|    {
 1769|    650|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    650|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    650|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    650|        return this->get_value();
 1771|    650|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    650|    {
  456|    650|        return m_value;
  457|    650|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|    650|    {
 1979|    650|        return detail::transform_error_impl(std::move(*this),
 1980|    650|                                            std::forward<F>(f));
 1981|    650|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|    650|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    650|    else {
 1472|    650|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    650|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    650|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 650, False: 0]
  |  |  ------------------
  ------------------
 1474|    650|                   ? result(*std::forward<Exp>(exp))
 1475|    650|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    650|    }
 1479|    650|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    650|    {
 1805|    650|        return std::move(value());
 1806|    650|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    650|        : base(std::in_place, std::forward<U>(val)),
 1570|    650|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    650|    {
 1572|    650|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    650|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    650|    {
  442|    650|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    650|    {
 1316|    650|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|    650|    {
 1740|    650|        return has_value();
 1741|    650|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.30k|    {
  490|  1.30k|        return m_has_value;
  491|  1.30k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    650|    {
 1805|    650|        return std::move(value());
 1806|    650|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    650|    {
 1769|    650|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    650|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    650|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    650|        return this->get_value();
 1771|    650|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    650|    {
  456|    650|        return m_value;
  457|    650|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  78.7k|{
   44|  78.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  78.7k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  78.7k|{
   60|  78.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  78.7k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.75k|{
   89|  8.75k|    auto result = make_scan_result<Source, Args...>();
   90|  8.75k|    fill_scan_result(result,
   91|  8.75k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  8.75k|                           make_scan_args<wscan_context>(result->values())));
   93|  8.75k|    return result;
   94|  8.75k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  8.75k|{
  131|  8.75k|    auto result = make_scan_result<Source, Args...>();
  132|  8.75k|    fill_scan_result(result,
  133|  8.75k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  8.75k|                           make_scan_args<wscan_context>(result->values())));
  135|  8.75k|    return result;
  136|  8.75k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   118k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   118k|{
  309|   118k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   118k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    172|{
  315|    172|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    172|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 86, False: 86]
  ------------------
  317|    172|                    : std::locale{};
  318|    172|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|    884|{
  895|    884|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|    884|                                  m_nan_payload_buffer, value);
  897|    884|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|    884|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|    884|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 884]
  ------------------
  903|    884|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|    884|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 884]
  ------------------
  908|    884|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|    884|    return n;
  913|    884|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|    776|{
  895|    776|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|    776|                                  m_nan_payload_buffer, value);
  897|    776|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|    776|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 776]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|    776|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 776]
  ------------------
  903|    776|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|    776|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 776]
  ------------------
  908|    776|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|    776|    return n;
  913|    776|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     22|{
 1153|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 22, False: 0]
  ------------------
 1159|     22|        SCN_UNLIKELY_ATTR
 1160|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     22|                                             "Invalid integer value");
 1162|     22|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    894|{
 1153|    894|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    894|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    894|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    894|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    894|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 894, False: 0]
  ------------------
 1159|    894|        SCN_UNLIKELY_ATTR
 1160|    894|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    894|                                             "Invalid integer value");
 1162|    894|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    800|{
 1153|    800|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    800|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    800|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    800|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    800|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 800, False: 0]
  ------------------
 1159|    800|        SCN_UNLIKELY_ATTR
 1160|    800|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    800|                                             "Invalid integer value");
 1162|    800|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    894|{
 1153|    894|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    894|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    894|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    894|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    894|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 894, False: 0]
  ------------------
 1159|    894|        SCN_UNLIKELY_ATTR
 1160|    894|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    894|                                             "Invalid integer value");
 1162|    894|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    780|{
 1153|    780|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    780|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    780|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    780|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    780|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 780, False: 0]
  ------------------
 1159|    780|        SCN_UNLIKELY_ATTR
 1160|    780|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    780|                                             "Invalid integer value");
 1162|    780|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    876|{
 1153|    876|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    876|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    876|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    876|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    876|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 876, False: 0]
  ------------------
 1159|    876|        SCN_UNLIKELY_ATTR
 1160|    876|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    876|                                             "Invalid integer value");
 1162|    876|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    762|{
 1153|    762|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    762|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    762|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    762|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    762|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    762|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    762|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    762|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    762|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    762|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    762|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    762|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    762|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 762, False: 0]
  ------------------
 1159|    762|        SCN_UNLIKELY_ATTR
 1160|    762|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    762|                                             "Invalid integer value");
 1162|    762|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  39.3k|{
 1903|  39.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  39.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  78.7k|{
 1921|  78.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  78.7k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  3.49k|{
  207|  3.49k|    return find_classic_impl(
  208|  3.49k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  3.49k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  3.49k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  21.2k|{
  215|  21.2k|    return find_classic_impl(
  216|  21.2k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  21.2k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  21.2k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    224|{
  329|    224|    SCN_UNLIKELY_ATTR
  330|    224|    return e;
  331|    224|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  39.3k|{
 1872|  39.3k|    return vscan_internal(source, format, args);
 1873|  39.3k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  78.7k|{
 1886|  78.7k|    return vscan_internal(source, format, args);
 1887|  78.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  3.49k|{
  131|  3.49k|    auto it = source.begin();
  132|       |
  133|  11.7k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 9.04k, False: 2.75k]
  ------------------
  134|  9.04k|        auto sv =
  135|  9.04k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  9.04k|                .substr(0, 8);
  137|       |
  138|  9.04k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.71k, False: 6.32k]
  ------------------
  139|  2.71k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.71k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.71k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 438, False: 2.28k]
  ------------------
  142|    438|                break;
  143|    438|            }
  144|  2.28k|            continue;
  145|  2.71k|        }
  146|       |
  147|  24.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 18.9k, False: 6.02k]
  ------------------
  148|  18.9k|            auto tmp =
  149|  18.9k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  18.9k|            auto res = get_next_code_point(tmp);
  151|  18.9k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 300, False: 18.6k]
  ------------------
  152|    300|                return it;
  153|    300|            }
  154|  18.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  18.6k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  18.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  18.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  18.6k|        }
  158|  6.32k|    }
  159|       |
  160|  3.19k|    return detail::make_string_view_iterator(source, it);
  161|  3.49k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  29.5k|{
  118|  29.5k|    static_assert(sizeof(*source.data()) == 1);
  119|  29.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  29.5k|    uint64_t word{};
  121|  29.5k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  29.5k|    return has_byte_greater(word, 127) != 0;
  124|  29.5k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  15.5k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  18.9k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  21.2k|{
  131|  21.2k|    auto it = source.begin();
  132|       |
  133|  26.8k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 20.4k, False: 6.34k]
  ------------------
  134|  20.4k|        auto sv =
  135|  20.4k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  20.4k|                .substr(0, 8);
  137|       |
  138|  20.4k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 9.54k, False: 10.9k]
  ------------------
  139|  9.54k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  9.54k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  9.54k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 7.79k, False: 1.74k]
  ------------------
  142|  7.79k|                break;
  143|  7.79k|            }
  144|  1.74k|            continue;
  145|  9.54k|        }
  146|       |
  147|  20.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.1k, False: 3.78k]
  ------------------
  148|  17.1k|            auto tmp =
  149|  17.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.1k|            auto res = get_next_code_point(tmp);
  151|  17.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 7.13k, False: 10.0k]
  ------------------
  152|  7.13k|                return it;
  153|  7.13k|            }
  154|  10.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  10.0k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  10.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  10.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  10.0k|        }
  158|  10.9k|    }
  159|       |
  160|  14.1k|    return detail::make_string_view_iterator(source, it);
  161|  21.2k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  18.7k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  17.1k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|    884|{
  804|    884|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 884]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|    884|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 884]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|    884|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 884]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|    884|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 884]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|    884|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|    884|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 8, False: 876]
  ------------------
  851|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
  852|      8|            return detail::unexpected_scan_error(
  853|      8|                scan_error::invalid_scanned_value,
  854|      8|                "Invalid floating-point digit");
  855|      8|        }
  856|      8|    }
  857|    876|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 876, False: 0]
  |  |  ------------------
  ------------------
  858|    876|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|    876|                                             "Invalid floating-point digit");
  860|    876|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|    776|{
  804|    776|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 776]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|    776|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 776]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|    776|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 776]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|    776|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 776]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|    776|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|    776|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    776|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|    776|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 12, False: 764]
  ------------------
  851|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
  852|     12|            return detail::unexpected_scan_error(
  853|     12|                scan_error::invalid_scanned_value,
  854|     12|                "Invalid floating-point digit");
  855|     12|        }
  856|     12|    }
  857|    764|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 764, False: 0]
  |  |  ------------------
  ------------------
  858|    764|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|    764|                                             "Invalid floating-point digit");
  860|    764|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  78.7k|{
 1317|  78.7k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 78.3k, False: 378]
  ------------------
 1318|  78.3k|        return false;
 1319|  78.3k|    }
 1320|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 252]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|  78.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  78.7k|        : format_handler_base{argcount},
 1593|  78.7k|          parse_ctx{format},
 1594|  78.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  78.7k|    {
 1596|  78.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   236k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   236k|    {
 1412|   236k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 236k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   236k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  78.7k|        : contiguous_ctx(source, args, loc)
 1544|  78.7k|    {
 1545|  78.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  78.7k|{
 1734|  78.7k|    const auto beg = handler.get_ctx().begin();
 1735|  78.7k|    detail::parse_format_string<false>(format, handler);
 1736|  78.7k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  78.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 75.8k, False: 2.89k]
  |  |  ------------------
  ------------------
 1737|  75.8k|        return unexpected(err.error());
 1738|  75.8k|    }
 1739|  2.89k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  78.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   382k|    {
 1718|   382k|        return ctx.get();
 1719|   382k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   382k|    {
 1549|   382k|        return contiguous_ctx;
 1550|   382k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  95.7k|    {
 1600|   125k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 34.0k, False: 91.6k]
  ------------------
 1601|  34.0k|            auto it = get_ctx().begin();
 1602|  34.0k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 1.03k, False: 33.0k]
  ------------------
 1603|  1.03k|                SCN_UNLIKELY_ATTR
 1604|  1.03k|                return on_error(
 1605|  1.03k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|  1.03k|            }
 1607|       |
 1608|  33.0k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|  33.0k|                    detail::make_string_view_from_pointers(begin, end));
 1610|  33.0k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 2.17k, False: 30.8k]
  ------------------
 1611|  2.17k|                SCN_UNLIKELY_ATTR
 1612|  2.17k|                return on_error({scan_error::invalid_format_string,
 1613|  2.17k|                                 "Invalid encoding in format string"});
 1614|  2.17k|            }
 1615|  30.8k|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 6.10k, False: 24.7k]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  6.10k|                get_ctx().advance_to(
 1618|  6.10k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  6.10k|                auto begin_it = impl::read_while_classic_space(
 1621|  6.10k|                    detail::make_string_view_from_pointers(
 1622|  6.10k|                        detail::to_address(after_space_it),
 1623|  6.10k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  6.10k|                begin = detail::to_address(begin_it) - 1;
 1626|  6.10k|                continue;
 1627|  6.10k|            }
 1628|       |
 1629|  24.7k|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 894, False: 23.8k]
  ------------------
 1630|    894|                SCN_UNLIKELY_ATTR
 1631|    894|                return on_error({scan_error::invalid_literal,
 1632|    894|                                 "Unexpected literal character in source"});
 1633|    894|            }
 1634|  23.8k|            get_ctx().advance_to(ranges::next(it));
 1635|  23.8k|        }
 1636|  95.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   286k|    {
 1460|   286k|        error = unexpected(err);
 1461|   286k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1666|  5.77k|    {
 1667|  5.77k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  5.77k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  5.77k|        on_visit_scan_arg(
 1671|  5.77k|            impl::default_arg_reader<context_type>{
 1672|  5.77k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  5.77k|            arg);
 1674|  5.77k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  49.2k|{
 1372|  49.2k|    auto arg = ctx.arg(id);
 1373|  49.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.37k, False: 47.9k]
  |  |  ------------------
  ------------------
 1374|  1.37k|        handler.on_error("Failed to find argument with ID");
 1375|  1.37k|    }
 1376|  49.2k|    return arg;
 1377|  49.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  77.7k|    {
 1486|  77.7k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  77.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.54k, False: 75.2k]
  |  |  ------------------
  ------------------
 1487|  2.54k|            on_error({scan_error::invalid_format_string,
 1488|  2.54k|                      "Argument ID out-of-range"});
 1489|  2.54k|            return;
 1490|  2.54k|        }
 1491|       |
 1492|  75.2k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 75.1k]
  |  |  ------------------
  ------------------
 1493|     98|            on_error({scan_error::invalid_format_string,
 1494|     98|                      "Argument with this ID has already been scanned"});
 1495|     98|        }
 1496|       |
 1497|  75.2k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  75.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 75.2k, False: 0]
  |  |  ------------------
  ------------------
 1498|  75.2k|            visited_args_lower64 |= (1ull << id);
 1499|  75.2k|            return;
 1500|  75.2k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  75.2k|    {
 1470|  75.2k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.2k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  75.2k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  75.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 75.2k, False: 0]
  |  |  ------------------
  ------------------
 1477|  75.2k|            return (visited_args_lower64 >> id) & 1ull;
 1478|  75.2k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  75.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  5.77k|    {
 1651|  5.77k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 126, False: 5.65k]
  |  Branch (1651:13): [True: 126, False: 5.65k]
  |  Branch (1651:29): [True: 0, False: 5.65k]
  ------------------
 1652|    126|            SCN_UNLIKELY_ATTR
 1653|    126|            return;
 1654|    126|        }
 1655|       |
 1656|  5.65k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  5.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  5.65k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  5.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.90k, False: 1.74k]
  |  |  ------------------
  ------------------
 1658|  3.90k|            on_error(r.error());
 1659|  3.90k|        }
 1660|  1.74k|        else {
 1661|  1.74k|            get_ctx().advance_to(*r);
 1662|  1.74k|        }
 1663|  5.65k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  47.5k|    {
 1640|  47.5k|        return parse_ctx.next_arg_id();
 1641|  47.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1643|  1.76k|    {
 1644|  1.76k|        parse_ctx.check_arg_id(id);
 1645|  1.76k|        return id;
 1646|  1.76k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  43.5k|    {
 1680|  43.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  43.5k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  43.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 43.5k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  43.5k|        auto specs = detail::format_specs{};
 1693|  43.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  43.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  43.5k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  43.5k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  43.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 2.41k, False: 41.0k]
  |  Branch (1698:29): [True: 540, False: 40.5k]
  ------------------
 1699|  2.95k|            SCN_UNLIKELY_ATTR
 1700|  2.95k|            on_error({scan_error::invalid_format_string,
 1701|  2.95k|                      "Missing '}' in format string"});
 1702|  2.95k|            return parse_ctx.begin();
 1703|  2.95k|        }
 1704|  40.5k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 230, False: 40.3k]
  |  |  ------------------
  ------------------
 1705|    230|            return parse_ctx.begin();
 1706|    230|        }
 1707|  40.3k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  40.3k|        on_visit_scan_arg(
 1710|  40.3k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  40.3k|                                           get_ctx().locale()},
 1712|  40.3k|            arg);
 1713|  40.3k|        return parse_ctx.begin();
 1714|  40.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  43.5k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  43.5k|    {
 1391|  43.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  40.3k|    {
 1651|  40.3k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 96, False: 40.2k]
  |  Branch (1651:13): [True: 96, False: 40.2k]
  |  Branch (1651:29): [True: 0, False: 40.2k]
  ------------------
 1652|     96|            SCN_UNLIKELY_ATTR
 1653|     96|            return;
 1654|     96|        }
 1655|       |
 1656|  40.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  40.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  40.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.6k, False: 4.61k]
  |  |  ------------------
  ------------------
 1658|  35.6k|            on_error(r.error());
 1659|  35.6k|        }
 1660|  4.61k|        else {
 1661|  4.61k|            get_ctx().advance_to(*r);
 1662|  4.61k|        }
 1663|  40.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|   223k|    {
 1454|   223k|        SCN_UNLIKELY_ATTR
 1455|   223k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|   223k|                                              msg);
 1457|   223k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   236k|    {
 1419|   236k|        {
 1420|   236k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 236k]
  ------------------
 1421|   236k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 236k]
  ------------------
 1422|   236k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   236k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   236k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 161k, False: 75.1k]
  ------------------
 1426|   161k|                return on_error({scan_error::invalid_format_string,
 1427|   161k|                                 "Argument list not exhausted"});
 1428|   161k|            }
 1429|   236k|        }
 1430|       |
 1431|  75.1k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 75.1k, False: 0]
  ------------------
 1432|  75.1k|            return;
 1433|  75.1k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|   735k|    {
 1465|   735k|        return error;
 1466|   735k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  78.7k|{
 1749|  78.7k|    const auto argcount = args.size();
 1750|  78.7k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 78.7k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|  78.7k|    auto handler = format_handler<true, CharT>{
 1756|  78.7k|        ranges::subrange<const CharT*>{source.data(),
 1757|  78.7k|                                       source.data() + source.size()},
 1758|  78.7k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  78.7k|    return vscan_parse_format_string(format, handler);
 1760|  78.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   157k|{
 1749|   157k|    const auto argcount = args.size();
 1750|   157k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 157k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|   157k|    auto handler = format_handler<true, CharT>{
 1756|   157k|        ranges::subrange<const CharT*>{source.data(),
 1757|   157k|                                       source.data() + source.size()},
 1758|   157k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   157k|    return vscan_parse_format_string(format, handler);
 1760|   157k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   157k|{
 1317|   157k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 146k, False: 11.0k]
  ------------------
 1318|   146k|        return false;
 1319|   146k|    }
 1320|  11.0k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 10.9k]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|   157k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   157k|        : format_handler_base{argcount},
 1593|   157k|          parse_ctx{format},
 1594|   157k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   157k|    {
 1596|   157k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   157k|        : contiguous_ctx(source, args, loc)
 1544|   157k|    {
 1545|   157k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   157k|{
 1734|   157k|    const auto beg = handler.get_ctx().begin();
 1735|   157k|    detail::parse_format_string<false>(format, handler);
 1736|   157k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156k, False: 1.42k]
  |  |  ------------------
  ------------------
 1737|   156k|        return unexpected(err.error());
 1738|   156k|    }
 1739|  1.42k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   157k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   968M|    {
 1718|   968M|        return ctx.get();
 1719|   968M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   968M|    {
 1549|   968M|        return contiguous_ctx;
 1550|   968M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   162k|    {
 1600|   322M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 322M, False: 110k]
  ------------------
 1601|   322M|            auto it = get_ctx().begin();
 1602|   322M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 384, False: 322M]
  ------------------
 1603|    384|                SCN_UNLIKELY_ATTR
 1604|    384|                return on_error(
 1605|    384|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|    384|            }
 1607|       |
 1608|   322M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|   322M|                    detail::make_string_view_from_pointers(begin, end));
 1610|   322M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 50.8k, False: 322M]
  ------------------
 1611|  50.8k|                SCN_UNLIKELY_ATTR
 1612|  50.8k|                return on_error({scan_error::invalid_format_string,
 1613|  50.8k|                                 "Invalid encoding in format string"});
 1614|  50.8k|            }
 1615|   322M|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 1.70k, False: 322M]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  1.70k|                get_ctx().advance_to(
 1618|  1.70k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  1.70k|                auto begin_it = impl::read_while_classic_space(
 1621|  1.70k|                    detail::make_string_view_from_pointers(
 1622|  1.70k|                        detail::to_address(after_space_it),
 1623|  1.70k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  1.70k|                begin = detail::to_address(begin_it) - 1;
 1626|  1.70k|                continue;
 1627|  1.70k|            }
 1628|       |
 1629|   322M|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 566, False: 322M]
  ------------------
 1630|    566|                SCN_UNLIKELY_ATTR
 1631|    566|                return on_error({scan_error::invalid_literal,
 1632|    566|                                 "Unexpected literal character in source"});
 1633|    566|            }
 1634|   322M|            get_ctx().advance_to(ranges::next(it));
 1635|   322M|        }
 1636|   162k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1666|  4.23k|    {
 1667|  4.23k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  4.23k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  4.23k|        on_visit_scan_arg(
 1671|  4.23k|            impl::default_arg_reader<context_type>{
 1672|  4.23k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  4.23k|            arg);
 1674|  4.23k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  28.4k|{
 1372|  28.4k|    auto arg = ctx.arg(id);
 1373|  28.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.17k, False: 27.3k]
  |  |  ------------------
  ------------------
 1374|  1.17k|        handler.on_error("Failed to find argument with ID");
 1375|  1.17k|    }
 1376|  28.4k|    return arg;
 1377|  28.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  4.23k|    {
 1651|  4.23k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 112, False: 4.12k]
  |  Branch (1651:13): [True: 112, False: 4.12k]
  |  Branch (1651:29): [True: 0, False: 4.12k]
  ------------------
 1652|    112|            SCN_UNLIKELY_ATTR
 1653|    112|            return;
 1654|    112|        }
 1655|       |
 1656|  4.12k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  4.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  4.12k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 1.17k]
  |  |  ------------------
  ------------------
 1658|  2.94k|            on_error(r.error());
 1659|  2.94k|        }
 1660|  1.17k|        else {
 1661|  1.17k|            get_ctx().advance_to(*r);
 1662|  1.17k|        }
 1663|  4.12k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  28.2k|    {
 1640|  28.2k|        return parse_ctx.next_arg_id();
 1641|  28.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1643|    270|    {
 1644|    270|        parse_ctx.check_arg_id(id);
 1645|    270|        return id;
 1646|    270|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  24.2k|    {
 1680|  24.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  24.2k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  24.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 24.2k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  24.2k|        auto specs = detail::format_specs{};
 1693|  24.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  24.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  24.2k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  24.2k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  24.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 1.92k, False: 22.3k]
  |  Branch (1698:29): [True: 382, False: 21.9k]
  ------------------
 1699|  2.30k|            SCN_UNLIKELY_ATTR
 1700|  2.30k|            on_error({scan_error::invalid_format_string,
 1701|  2.30k|                      "Missing '}' in format string"});
 1702|  2.30k|            return parse_ctx.begin();
 1703|  2.30k|        }
 1704|  21.9k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 244, False: 21.7k]
  |  |  ------------------
  ------------------
 1705|    244|            return parse_ctx.begin();
 1706|    244|        }
 1707|  21.7k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  21.7k|        on_visit_scan_arg(
 1710|  21.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  21.7k|                                           get_ctx().locale()},
 1712|  21.7k|            arg);
 1713|  21.7k|        return parse_ctx.begin();
 1714|  21.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|  24.2k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  24.2k|    {
 1391|  24.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  21.7k|    {
 1651|  21.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 112, False: 21.5k]
  |  Branch (1651:13): [True: 112, False: 21.5k]
  |  Branch (1651:29): [True: 0, False: 21.5k]
  ------------------
 1652|    112|            SCN_UNLIKELY_ATTR
 1653|    112|            return;
 1654|    112|        }
 1655|       |
 1656|  21.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  21.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.3k, False: 2.22k]
  |  |  ------------------
  ------------------
 1658|  19.3k|            on_error(r.error());
 1659|  19.3k|        }
 1660|  2.22k|        else {
 1661|  2.22k|            get_ctx().advance_to(*r);
 1662|  2.22k|        }
 1663|  21.5k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  4.37k|{
 1462|  4.37k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  4.37k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  4.37k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  4.37k|            return transcode_to_string_impl_to32(src, dest);
 1473|  4.37k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  4.37k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  4.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  4.37k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  4.37k|{
 1355|  4.37k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  4.37k|    auto it = src.begin();
 1358|   450k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 445k, False: 4.37k]
  ------------------
 1359|   445k|        auto res = get_next_code_point(
 1360|   445k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   445k|                                                                 src.end()));
 1362|   445k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 435k]
  |  |  ------------------
  ------------------
 1363|  10.6k|            dest.push_back(DestCharT{0xfffd});
 1364|  10.6k|        }
 1365|   435k|        else {
 1366|   435k|            dest.push_back(res.value);
 1367|   435k|        }
 1368|   445k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   445k|    }
 1370|  4.37k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   549k|{
 1279|   549k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   549k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   549k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   549k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   549k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 539k]
  |  |  ------------------
  ------------------
 1283|  10.3k|        return {get_start_for_next_code_point(input),
 1284|  10.3k|                detail::invalid_code_point};
 1285|  10.3k|    }
 1286|   539k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   539k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 939, False: 538k]
  |  |  ------------------
  ------------------
 1287|    939|        return {input.end(), detail::invalid_code_point};
 1288|    939|    }
 1289|       |
 1290|   538k|    return {input.begin() + len,
 1291|   538k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   539k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  10.3k|{
 1265|  10.3k|    auto it = input.begin();
 1266|  34.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 33.3k, False: 1.34k]
  ------------------
 1267|  33.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 9.01k, False: 24.3k]
  ------------------
 1268|  9.01k|            break;
 1269|  9.01k|        }
 1270|  33.3k|    }
 1271|  10.3k|    return it;
 1272|  10.3k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  45.4k|    constexpr parse_error(code c) : m_code(c)
  808|  45.4k|    {
  809|  45.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  45.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  45.4k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  18.5k|    {
  823|  18.5k|        return a.m_code == b.m_code;
  824|  18.5k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.45k|    {
  827|  3.45k|        return !(a == b);
  828|  3.45k|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3034|  35.7k|    {
 3035|  35.7k|        SCN_UNLIKELY_ATTR
 3036|  35.7k|        m_msg = msg;
 3037|  35.7k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3039|  61.8k|    {
 3040|  61.8k|        return m_msg == nullptr;
 3041|  61.8k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3675|    948|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5019|   333k|    {
 5020|   333k|        on_charset_range(cp, cp + 1);
 5021|   333k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5024|   335k|    {
 5025|   335k|        if (end <= 127) {
  ------------------
  |  Branch (5025:13): [True: 168k, False: 167k]
  ------------------
 5026|   168k|            return;
 5027|   168k|        }
 5028|       |
 5029|  31.2M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5029:25): [True: 31.2M, False: 166k]
  ------------------
 5030|       |            // TODO: check for overlap
 5031|  31.2M|            if (elem.first == end) {
  ------------------
  |  Branch (5031:17): [True: 504, False: 31.2M]
  ------------------
 5032|    504|                elem.first = begin;
 5033|    504|                return;
 5034|    504|            }
 5035|       |
 5036|  31.2M|            if (elem.second == begin) {
  ------------------
  |  Branch (5036:17): [True: 1.04k, False: 31.2M]
  ------------------
 5037|  1.04k|                elem.second = end;
 5038|  1.04k|                return;
 5039|  1.04k|            }
 5040|  31.2M|        }
 5041|       |
 5042|   166k|        extra_ranges.push_back(std::make_pair(begin, end));
 5043|   166k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5046|    570|    {
 5047|       |        // no-op
 5048|    570|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5061|   341k|    {
 5062|   341k|        return err;
 5063|   341k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5375|  1.25k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  34.3k|{
  458|  34.3k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  34.3k|        static_cast<unsigned char>(ch))];
  460|  34.3k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   234k|{
  469|   234k|    return static_cast<unsigned char>(ch) <= 127;
  470|   234k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  1.63k|{
  474|  1.63k|#if WCHAR_MIN < 0
  475|  1.63k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.62k, False: 12]
  |  Branch (475:23): [True: 1.62k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.63k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   252k|{
  483|   252k|    return cp <= 127;
  484|   252k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  29.5k|{
  539|  29.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  29.5k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  44.3k|{
  784|  44.3k|    return e != eof_error::good;
  785|  44.3k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_input, "EOF"};
  800|    174|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    730|{
  845|    730|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|    730|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    730|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    730|    return parse_error::eof;
  847|    730|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.45k|{
  854|  3.45k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.45k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.45k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 82, False: 3.37k]
  ------------------
  859|     82|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|     82|    }
  861|       |
  862|  3.37k|    return detail::unexpected_scan_error(code, msg);
  863|  3.45k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.45k|{
  868|  3.45k|    return [code, msg](parse_error err) {
  869|  3.45k|        assert(err != parse_error::good);
  870|  3.45k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.45k|    };
  872|  3.45k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  3.66k|{
 2320|  3.66k|    unsigned char running_diff{0};
 2321|  12.7k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 9.12k, False: 3.66k]
  ------------------
 2322|  9.12k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  9.12k|    }
 2324|  3.66k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 0, False: 3.66k]
  |  Branch (2324:33): [True: 0, False: 3.66k]
  ------------------
 2325|  3.66k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2402|   100k|{
 2403|   100k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2403:9): [True: 20.8k, False: 79.4k]
  ------------------
 2404|   100k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2404:10): [True: 92, False: 20.7k]
  ------------------
 2405|  20.8k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2405:10): [True: 108, False: 20.6k]
  ------------------
 2406|  20.8k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2406:10): [True: 72, False: 20.5k]
  ------------------
 2407|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2408|  20.8k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2408:11): [True: 9.28k, False: 11.3k]
  |  Branch (2408:27): [True: 1.60k, False: 7.68k]
  |  Branch (2408:43): [True: 768, False: 834]
  ------------------
 2409|  20.8k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2409:11): [True: 7.68k, False: 12.1k]
  |  Branch (2409:27): [True: 68, False: 7.61k]
  ------------------
 2410|  20.8k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2410:11): [True: 7.59k, False: 12.1k]
  |  Branch (2410:27): [True: 42, False: 7.54k]
  ------------------
 2411|  20.8k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2411:11): [True: 7.54k, False: 12.1k]
  |  Branch (2411:27): [True: 462, False: 7.08k]
  ------------------
 2412|  20.8k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2412:11): [True: 7.08k, False: 12.1k]
  |  Branch (2412:27): [True: 82, False: 7.00k]
  ------------------
 2413|  20.8k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2413:11): [True: 7.00k, False: 12.1k]
  |  Branch (2413:27): [True: 206, False: 6.79k]
  ------------------
 2414|  20.8k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2414:11): [True: 6.79k, False: 12.1k]
  |  Branch (2414:27): [True: 80, False: 6.71k]
  ------------------
 2415|  20.8k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2415:11): [True: 6.53k, False: 12.3k]
  |  Branch (2415:28): [True: 222, False: 6.31k]
  ------------------
 2416|  20.8k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2416:11): [True: 6.31k, False: 12.3k]
  |  Branch (2416:28): [True: 446, False: 5.87k]
  ------------------
 2417|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2418|  20.8k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2418:11): [True: 6.02k, False: 12.1k]
  |  Branch (2418:28): [True: 78, False: 5.94k]
  ------------------
 2419|       |         // Supplemental Symbols and Pictographs:
 2420|  20.8k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2420:11): [True: 5.94k, False: 12.1k]
  |  Branch (2420:28): [True: 72, False: 5.87k]
  ------------------
 2421|  2.79k|        return 2;
 2422|  2.79k|    }
 2423|  97.5k|    return 1;
 2424|   100k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2427|  58.0k|{
 2428|  58.0k|    return calculate_text_width_for_fmt_v10(cp);
 2429|  58.0k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2442|    184|{
 2443|    184|    return calculate_text_width_for_fmt_v10(cp);
 2444|    184|}
_ZN3scn2v44impl11char_to_intEc:
 3228|  14.3k|{
 3229|  14.3k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3230|  14.3k|}
_ZN3scn2v44impl11char_to_intEw:
 3232|  6.30k|{
 3233|  6.30k|#if WCHAR_MIN < 0
 3234|  6.30k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3234:9): [True: 6.30k, False: 0]
  |  Branch (3234:20): [True: 6.30k, False: 0]
  ------------------
 3235|       |#else
 3236|       |    if (ch <= 255) {
 3237|       |#endif
 3238|  6.30k|        return char_to_int(static_cast<char>(ch));
 3239|  6.30k|    }
 3240|      0|    return 255;
 3241|  6.30k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4292|  12.6k|{
 4293|  12.6k|    std::regex_constants::syntax_option_type result{};
 4294|  12.6k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4294:9): [True: 306, False: 12.3k]
  ------------------
 4295|    306|#if SCN_HAS_STD_REGEX_MULTILINE
 4296|    306|        result |= std::regex_constants::multiline;
 4297|       |#else
 4298|       |        return detail::unexpected_scan_error(
 4299|       |            scan_error::invalid_format_string,
 4300|       |            "/m flag for regex isn't supported by regex backend");
 4301|       |#endif
 4302|    306|    }
 4303|  12.6k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4303:9): [True: 0, False: 12.6k]
  ------------------
 4304|  12.6k|        detail::regex_flags::none) {
 4305|      0|        return detail::unexpected_scan_error(
 4306|      0|            scan_error::invalid_format_string,
 4307|      0|            "/s flag for regex isn't supported by regex backend");
 4308|      0|    }
 4309|  12.6k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4309:9): [True: 1.00k, False: 11.6k]
  ------------------
 4310|  1.00k|        result |= std::regex_constants::icase;
 4311|  1.00k|    }
 4312|  12.6k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4312:9): [True: 12, False: 12.6k]
  ------------------
 4313|     12|        result |= std::regex_constants::nosubs;
 4314|     12|    }
 4315|  12.6k|    return result;
 4316|  12.6k|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4669|    402|{
 4670|    402|    std::string result{pattern};
 4671|  3.08k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4671:24): [True: 2.68k, False: 402]
  ------------------
 4672|  2.68k|        result.replace(n, 2, "/");
 4673|  2.68k|        ++n;
 4674|  2.68k|    }
 4675|    402|    return result;
 4676|    402|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4678|    150|{
 4679|    150|    std::wstring result{pattern};
 4680|  1.03k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4680:24): [True: 888, False: 150]
  ------------------
 4681|    888|        result.replace(n, 2, L"/");
 4682|    888|        ++n;
 4683|    888|    }
 4684|    150|    return result;
 4685|    150|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6034|  7.76k|{
 6035|  7.76k|    if (specs.width != 0) {
  ------------------
  |  Branch (6035:9): [True: 2.00k, False: 5.76k]
  ------------------
 6036|  2.00k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6036:13): [True: 928, False: 1.07k]
  ------------------
 6037|    928|            return detail::unexpected_scan_error(
 6038|    928|                scan_error::length_too_short,
 6039|    928|                "Scanned value too narrow, width did not exceed what "
 6040|    928|                "was specified in the format string");
 6041|    928|        }
 6042|  2.00k|    }
 6043|  6.84k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6043:9): [True: 1.73k, False: 5.11k]
  ------------------
 6044|       |        // Ensured by take_width_view
 6045|  1.73k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|  1.73k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6046|  1.73k|                   specs.precision);
 6047|  1.73k|    }
 6048|  6.84k|    return {};
 6049|  6.84k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  44.6k|    {
  304|  44.6k|        ranges::advance(x, n);
  305|  44.6k|        return x;
  306|  44.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  44.6k|    {
  268|  44.6k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  44.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  76.9k|    {
  151|  76.9k|        i += n;
  152|  76.9k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  56.6k|    {
  108|  56.6k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  56.6k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  56.6k|    {
   87|  56.6k|        return s - i;
   88|  56.6k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.69k|    {
  304|  5.69k|        ranges::advance(x, n);
  305|  5.69k|        return x;
  306|  5.69k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.69k|    {
  268|  5.69k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.69k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.69k|    {
  151|  5.69k|        i += n;
  152|  5.69k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.51k|    {
  108|  3.51k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.51k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.51k|    {
   87|  3.51k|        return s - i;
   88|  3.51k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2981|   167k|    {
 2982|   167k|        return m_current;
 2983|   167k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2981|   322M|    {
 2982|   322M|        return m_current;
 2983|   322M|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5650|  4.45k|    {
 5651|  4.45k|        reader_error_handler eh{};
 5652|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5653|       |            detail::check_code_point_type_specs(specs, eh);
 5654|       |        }
 5655|  4.45k|        else {
 5656|  4.45k|            detail::check_char_type_specs(specs, eh);
 5657|  4.45k|        }
 5658|  4.45k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.91k, False: 536]
  |  |  ------------------
  ------------------
 5659|  3.91k|            return detail::unexpected_scan_error(
 5660|  3.91k|                scan_error::invalid_format_string, eh.m_msg);
 5661|  3.91k|        }
 5662|    536|        return {};
 5663|  4.45k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  21.7k|    {
  763|  21.7k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  21.7k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.90k|        : m_fptr([](storage fn,
  743|  2.90k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.90k|              cvref<T> obj = *get<T>(fn);
  745|  2.90k|              if constexpr (std::is_void_v<R>) {
  746|  2.90k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.90k|              }
  748|  2.90k|              else {
  749|  2.90k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.90k|              }
  751|  2.90k|          }),
  752|  2.90k|          m_storage(std::addressof(f))
  753|  2.90k|    {
  754|  2.90k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.75k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.75k|              else {
  749|  6.75k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.75k|              }
  751|  6.75k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.75k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.75k|        else if constexpr (std::is_object_v<T>) {
  688|  6.75k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.75k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.90k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.90k|        {
  662|  2.90k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|   562k|    {
  763|   562k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   562k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  15.2k|        : m_fptr([](storage fn,
  743|  15.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.2k|              cvref<T> obj = *get<T>(fn);
  745|  15.2k|              if constexpr (std::is_void_v<R>) {
  746|  15.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.2k|              }
  748|  15.2k|              else {
  749|  15.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.2k|              }
  751|  15.2k|          }),
  752|  15.2k|          m_storage(std::addressof(f))
  753|  15.2k|    {
  754|  15.2k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   260k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   260k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   260k|              else {
  749|   260k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   260k|              }
  751|   260k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   260k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   260k|        else if constexpr (std::is_object_v<T>) {
  688|   260k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   260k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  15.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  15.2k|        {
  662|  15.2k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5645|  1.64k|    {
 5646|  1.64k|        return false;
 5647|  1.64k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.45k|    return [code, msg](parse_error err) {
  869|  3.45k|        assert(err != parse_error::good);
  870|  3.45k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.45k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|     58|    {
 1879|     58|        auto stdloc = loc.get<std::locale>();
 1880|     58|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     58|        grouping = numpunct.grouping();
 1882|     58|        thousands_sep =
 1883|     58|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 58]
  ------------------
 1884|     58|        decimal_point = numpunct.decimal_point();
 1885|     58|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|     78|{
 1816|     78|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 78, False: 0]
  ------------------
 1817|     78|        return std::use_facet<Facet>(stdloc);
 1818|     78|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     78|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  23.7k|{
 2449|  23.7k|    size_t count{0};
 2450|  23.7k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  23.7k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  23.7k|    });
 2453|  23.7k|    return count;
 2454|  23.7k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  23.7k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  23.7k|    auto it = input.begin();
 1547|  58.6k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 34.9k, False: 23.7k]
  ------------------
 1548|  34.9k|        auto res = get_next_code_point(
 1549|  34.9k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  34.9k|        cb(res.value);
 1551|  34.9k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  34.9k|    }
 1553|  23.7k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  42.1k|    {
  763|  42.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  42.1k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  23.7k|        : m_fptr([](storage fn,
  743|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.7k|              cvref<T> obj = *get<T>(fn);
  745|  23.7k|              if constexpr (std::is_void_v<R>) {
  746|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.7k|              }
  748|  23.7k|              else {
  749|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.7k|              }
  751|  23.7k|          }),
  752|  23.7k|          m_storage(std::addressof(f))
  753|  23.7k|    {
  754|  23.7k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|  34.9k|              if constexpr (std::is_void_v<R>) {
  746|  34.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  34.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  34.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.9k|        else if constexpr (std::is_object_v<T>) {
  688|  34.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.9k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  34.9k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  34.9k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  34.9k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  23.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  23.7k|        {
  662|  23.7k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  3.58k|    {
 1681|  3.58k|        return m_view;
 1682|  3.58k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  3.78k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2520|  3.51k|    {
 2521|  3.51k|        return m_multibyte_left;
 2522|  3.51k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2525|  93.6k|    {
 2526|  93.6k|        return *m_current;
 2527|  93.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2534|   108k|    {
 2535|   108k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|   108k|        _increment_current();
 2537|   108k|        return *this;
 2538|   108k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2767|   108k|    {
 2768|   108k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 58.2k, False: 50.0k]
  ------------------
 2769|  58.2k|            auto cplen = _get_cp_length_at_current();
 2770|  58.2k|            m_multibyte_left = cplen - 1;
 2771|  58.2k|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|  58.2k|        }
 2773|  50.0k|        else {
 2774|  50.0k|            --m_multibyte_left;
 2775|  50.0k|        }
 2776|       |
 2777|   108k|        ++m_current;
 2778|   108k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2738|  58.2k|    {
 2739|  58.2k|        return static_cast<difference_type>(
 2740|  58.2k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|  58.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2744|  58.2k|    {
 2745|  58.2k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 594, False: 57.6k]
  |  |  ------------------
  ------------------
 2746|    594|            return 0;
 2747|    594|        }
 2748|       |
 2749|  57.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 38.3k, False: 19.3k]
  ------------------
 2750|  38.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  38.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|  38.3k|            auto cp = static_cast<char32_t>(*m_current);
 2752|  38.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|  38.3k|        }
 2754|       |
 2755|  19.3k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|  19.3k|                                           cplen);
 2757|  19.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 310, False: 19.0k]
  |  |  ------------------
  ------------------
 2758|    310|            return 0;
 2759|    310|        }
 2760|       |
 2761|  19.0k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|  19.0k|        return static_cast<difference_type>(
 2763|  19.0k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|  19.3k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  21.7k|{
 1956|  21.7k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  21.7k|    if constexpr (ranges::sized_range<Range>) {
 1959|  21.7k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  21.7k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 418, False: 21.2k]
  ------------------
 1961|    418|            return unexpected(eof_error::eof);
 1962|    418|        }
 1963|       |
 1964|  21.2k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  21.7k|}
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2630|  64.1k|    {
 2631|  64.1k|        return !(a == b);
 2632|  64.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2622|  72.3k|    {
 2623|  72.3k|        return a.m_current == b.m_current;
 2624|  72.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2529|  8.35k|    {
 2530|  8.35k|        return *m_current;
 2531|  8.35k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.11k|    {
  268|  1.11k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.11k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.11k|    {
  161|  1.11k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.11k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.11k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.11k|        else {
  169|  1.11k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.11k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.11k|        }
  173|  1.11k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  18.7k|    {
 1989|  18.7k|        return !codepoint.empty();
 1990|  18.7k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|  1.47k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  1.47k|    else {
 1788|  1.47k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  1.47k|    }
 1790|  1.47k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|  1.47k|    {
 1636|  1.47k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  1.47k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|  1.47k|    {
 1720|  1.47k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|  1.47k|        else {
 1753|  1.47k|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|  1.47k|            if constexpr (ranges::common_range<Range>) {
 1758|  1.47k|                std::copy(ranges::begin(range), ranges::end(range),
 1759|  1.47k|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|  1.47k|            m_view = string_view_type{str};
 1768|  1.47k|        }
 1769|  1.47k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2480|  18.3k|        : m_current(x), m_end(s), m_count(n)
 2481|  18.3k|    {
 2482|  18.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2512|   104k|    {
 2513|   104k|        return m_current;
 2514|   104k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2931|  7.24k|    {
 2932|  7.24k|        return take_width_view{r, n};
 2933|  7.24k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2899|  7.24k|        : m_base(base), m_count(count)
 2900|  7.24k|    {
 2901|  7.24k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2813|  7.24k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5690|    266|    {
 5691|    266|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5691:13): [True: 234, False: 32]
  ------------------
 5692|    266|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5692:13): [True: 0, False: 32]
  ------------------
 5693|    234|            return read_default(range, value, loc);
 5694|    234|        }
 5695|       |
 5696|     32|        reader_impl_for_int<CharT> reader{};
 5697|     32|        signed char tmp_value{};
 5698|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5699|     32|        value = static_cast<signed char>(value);
 5700|     32|        return ret;
 5701|    266|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5672|    234|    {
 5673|    234|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    234|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5674|    234|        if constexpr (std::is_same_v<CharT, char>) {
 5675|    234|            return code_unit_reader<char>{}.read(range, value);
 5676|       |        }
 5677|       |        else {
 5678|       |            SCN_UNUSED(range);
 5679|       |            SCN_EXPECT(false);
 5680|       |            SCN_UNREACHABLE;
 5681|       |        }
 5682|    234|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5590|    234|    {
 5591|    234|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|    234|        ch = *range.begin();
 5593|    234|        return it;
 5594|    234|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  1.74k|{
 1945|  1.74k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.74k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  1.74k|    return ranges::next(range.begin());
 1950|  1.74k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|  1.74k|{
  951|  1.74k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.74k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  1.74k|    return eof_error::good;
  955|  1.74k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|  1.74k|{
  945|  1.74k|    return is_range_eof(r.begin(), r.end());
  946|  1.74k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  20.5k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  20.5k|    {
  938|  20.5k|        return begin == end;
  939|  20.5k|    }
  940|  20.5k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2869|  99.4k|        {
 2870|  99.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 3.51k, False: 95.9k]
  |  Branch (2870:39): [True: 826, False: 2.69k]
  ------------------
 2871|  99.4k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 942, False: 97.7k]
  ------------------
 2872|  99.4k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2915|  52.3k|    {
 2916|  52.3k|        return sentinel<true>{m_base.get().end()};
 2917|  52.3k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2816|  89.0k|    {
 2817|  89.0k|        return view;
 2818|  89.0k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2850|  52.3k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  52.3k|    static_cast<    \
  |  |  935|  52.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.77k|    {
  296|  1.77k|        ++x;
  297|  1.77k|        return x;
  298|  1.77k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2909|  18.3k|    {
 2910|  18.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|  18.3k|                                      m_count};
 2912|  18.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|     32|    {
 3579|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     32|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 32]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 32]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3605|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3365|    756|{
 3366|    756|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    756|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    756|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    756|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    756|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 756]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    756|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    756|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|    756|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|    756|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|    756|        parse_integer_base_prefix(
 3371|    756|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|    756|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 756]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|    756|    else {
 3383|    756|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 756]
  |  Branch (3383:13): [True: 756, False: 0]
  ------------------
 3384|    756|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 756, False: 0]
  ------------------
 3385|    756|            digits_begin_it = base_prefix_begin_it;
 3386|    756|        }
 3387|    756|    }
 3388|       |
 3389|    756|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 756, False: 0]
  ------------------
 3390|    756|        sign = sign_type::plus_sign;
 3391|    756|    }
 3392|    756|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|    756|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|    756|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3246|  1.00k|{
 3247|  1.00k|    auto r = read_one_of_code_unit(range, "+-");
 3248|  1.00k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 1.00k, False: 0]
  ------------------
 3249|  1.00k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 1.00k, False: 0]
  ------------------
 3250|  1.00k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|  1.00k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|  1.00k|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|  1.00k|{
 2372|  1.00k|    auto it = read_code_unit(range);
 2373|  1.00k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  2.00k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.00k, False: 1.00k]
  ------------------
 2378|  2.00k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 2.00k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  2.00k|    }
 2382|       |
 2383|  1.00k|    return unexpected(parse_error::error);
 2384|  1.00k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3332|    756|{
 3333|    756|    switch (base) {
 3334|     14|        case 2:
  ------------------
  |  Branch (3334:9): [True: 14, False: 742]
  ------------------
 3335|       |            // allow 0b/0B
 3336|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|     14|                    false};
 3338|       |
 3339|     14|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 14, False: 742]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|     14|            bool zero_parsed = false;
 3342|     14|            auto it = apply_opt(
 3343|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|     14|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|    242|        case 16:
  ------------------
  |  Branch (3347:9): [True: 242, False: 514]
  ------------------
 3348|       |            // allow 0x/0X
 3349|    242|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|    242|                    false};
 3351|       |
 3352|     20|        case 0:
  ------------------
  |  Branch (3352:9): [True: 20, False: 736]
  ------------------
 3353|       |            // detect base
 3354|     20|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|    466|        default:
  ------------------
  |  Branch (3356:9): [True: 466, False: 290]
  ------------------
 3357|       |            // no base prefix allowed
 3358|    466|            return {range.begin(), base, false};
 3359|    756|    }
 3360|    756|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    270|{
 2391|    270|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 270, False: 0]
  ------------------
 2392|    270|        return range.begin();
 2393|    270|    }
 2394|      0|    return *result;
 2395|    270|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3283|     34|{
 3284|     34|    return read_matching_string_classic_nocase(range, "0b");
 3285|     34|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|  1.05k|{
 2331|  1.05k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.05k|    else {
 2344|  1.05k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.05k|            if (ch < 'A' || ch > 'Z') {
 2346|  1.05k|                return ch;
 2347|  1.05k|            }
 2348|  1.05k|            return static_cast<char_type>(ch +
 2349|  1.05k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.05k|        };
 2351|       |
 2352|  1.05k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 182, False: 874]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    182|    }                                                  \
  |  |  |  | 3939|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    874|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    874|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    874|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    874|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 874, False: 0]
  |  |  ------------------
  ------------------
 2357|    874|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    874|                    return ascii_tolower(a) ==
 2359|    874|                           static_cast<detail::char_t<Range>>(b);
 2360|    874|                }))) {
 2361|    874|            return unexpected(parse_error::error);
 2362|    874|        }
 2363|       |
 2364|      0|        return it;
 2365|    874|    }
 2366|  1.05k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  4.05k|{
 1956|  4.05k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  4.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  4.05k|    else {
 1967|  4.05k|        auto it = range.begin();
 1968|  4.05k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 4.05k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  14.6k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 10.8k, False: 3.84k]
  ------------------
 1973|  10.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 210, False: 10.6k]
  ------------------
 1974|    210|                return unexpected(eof_error::eof);
 1975|    210|            }
 1976|  10.8k|        }
 1977|       |
 1978|  3.84k|        return it;
 1979|  4.05k|    }
 1980|  4.05k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  4.05k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  4.05k|    else {
 1116|  4.05k|        return 0;
 1117|  4.05k|    }
 1118|  4.05k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2344|    874|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    874|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 42, False: 832]
  |  Branch (2345:29): [True: 832, False: 0]
  ------------------
 2346|    874|                return ch;
 2347|    874|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    874|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3297|     34|{
 3298|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 34]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 0, False: 34]
  ------------------
 3303|      0|        zero_parsed = true;
 3304|      0|        return *r;
 3305|      0|    }
 3306|       |
 3307|     34|    return unexpected(parse_error::error);
 3308|     34|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     34|{
 2246|     34|    auto it = read_code_unit(range);
 2247|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2252|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     34|        return unexpected(parse_error::error);
 2254|     34|    }
 2255|       |
 2256|      0|    return *it;
 2257|     34|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     34|{
 1945|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     34|    return ranges::next(range.begin());
 1950|     34|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     34|{
  951|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     34|    return eof_error::good;
  955|     34|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  18.7k|{
  945|  18.7k|    return is_range_eof(r.begin(), r.end());
  946|  18.7k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3290|    262|{
 3291|    262|    return read_matching_string_classic_nocase(range, "0x");
 3292|    262|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3313|     20|{
 3314|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 20]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 20]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|     20|    {
 3321|     20|        bool zero_parsed{false};
 3322|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 0, False: 20]
  ------------------
 3323|      0|            return {*r, 8, zero_parsed};
 3324|      0|        }
 3325|     20|    }
 3326|     20|    return {range.begin(), 10, false};
 3327|     20|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3399|    736|{
 3400|    736|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|    736|    else {
 3411|    736|        return read_while1_code_unit(range,
 3412|    736|                                     [&](char_type ch) noexcept {
 3413|    736|                                         return char_to_int(ch) < base;
 3414|    736|                                     })
 3415|    736|            .transform_error(map_parse_error_to_scan_error(
 3416|    736|                scan_error::invalid_scanned_value,
 3417|    736|                "Failed to parse integer: No digits found"));
 3418|    736|    }
 3419|    736|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    984|{
 2095|    984|    auto it = read_while_code_unit(range, pred);
 2096|    984|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 984, False: 0]
  ------------------
 2097|    984|        return unexpected(parse_error::error);
 2098|    984|    }
 2099|      0|    return it;
 2100|    984|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    984|{
 2075|    984|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    984|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    984|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    984|    else {
 2060|    984|        auto first = range.begin();
 2061|    984|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 984, False: 0]
  ------------------
 2062|    984|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 984, False: 0]
  ------------------
 2063|    984|                return first;
 2064|    984|            }
 2065|    984|        }
 2066|      0|        return first;
 2067|    984|    }
 2068|    984|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2880|  52.5k|        {
 2881|  52.5k|            return !(y == x);
 2882|  52.5k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    736|        : m_fptr([](storage fn,
  743|    736|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    736|              cvref<T> obj = *get<T>(fn);
  745|    736|              if constexpr (std::is_void_v<R>) {
  746|    736|                  obj(static_cast<decltype(args)>(args)...);
  747|    736|              }
  748|    736|              else {
  749|    736|                  return obj(static_cast<decltype(args)>(args)...);
  750|    736|              }
  751|    736|          }),
  752|    736|          m_storage(std::addressof(f))
  753|    736|    {
  754|    736|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    736|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    736|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    736|              else {
  749|    736|                  return obj(static_cast<decltype(args)>(args)...);
  750|    736|              }
  751|    736|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    736|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    736|        else if constexpr (std::is_object_v<T>) {
  688|    736|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    736|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3412|    736|                                     [&](char_type ch) noexcept {
 3413|    736|                                         return char_to_int(ch) < base;
 3414|    736|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    736|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    736|        {
  662|    736|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3429|     20|{
 3430|     20|    std::basic_string<CharT> output;
 3431|     20|    std::string thsep_indices;
 3432|     20|    auto it = range.begin();
 3433|     20|    bool digit_matched = false;
 3434|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 20, False: 0]
  ------------------
 3435|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 20]
  ------------------
 3436|      0|            thsep_indices.push_back(
 3437|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|      0|        }
 3439|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 20, False: 0]
  ------------------
 3440|     20|            break;
 3441|     20|        }
 3442|      0|        else {
 3443|      0|            output.push_back(*it);
 3444|      0|            digit_matched = true;
 3445|      0|        }
 3446|     20|    }
 3447|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3448|     20|        return detail::unexpected_scan_error(
 3449|     20|            scan_error::invalid_scanned_value,
 3450|     20|            "Failed to parse integer: No digits found");
 3451|     20|    }
 3452|      0|    return std::tuple{it, output, thsep_indices};
 3453|     20|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2516|   101k|    {
 2517|   101k|        return m_count;
 2518|   101k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5690|    264|    {
 5691|    264|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5691:13): [True: 242, False: 22]
  ------------------
 5692|    264|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5692:13): [True: 0, False: 22]
  ------------------
 5693|    242|            return read_default(range, value, loc);
 5694|    242|        }
 5695|       |
 5696|     22|        reader_impl_for_int<CharT> reader{};
 5697|     22|        signed char tmp_value{};
 5698|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5699|     22|        value = static_cast<signed char>(value);
 5700|     22|        return ret;
 5701|    264|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5672|    872|    {
 5673|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5674|    872|        if constexpr (std::is_same_v<CharT, char>) {
 5675|    872|            return code_unit_reader<char>{}.read(range, value);
 5676|       |        }
 5677|       |        else {
 5678|       |            SCN_UNUSED(range);
 5679|       |            SCN_EXPECT(false);
 5680|       |            SCN_UNREACHABLE;
 5681|       |        }
 5682|    872|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5590|    872|    {
 5591|    872|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|    872|        ch = *range.begin();
 5593|    872|        return it;
 5594|    872|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.35k|{
 1945|  6.35k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.35k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.35k|    return ranges::next(range.begin());
 1950|  6.35k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  21.3k|{
  951|  21.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.3k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  21.3k|    return eof_error::good;
  955|  21.3k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   261k|{
  945|   261k|    return is_range_eof(r.begin(), r.end());
  946|   261k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   295k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   295k|    {
  938|   295k|        return begin == end;
  939|   295k|    }
  940|   295k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  30.1k|    {
  296|  30.1k|        ++x;
  297|  30.1k|        return x;
  298|  30.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|     22|    {
 3579|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     22|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 22]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 22]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3605|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|     22|                    parse_integer_digits_without_thsep(
 3607|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|     22|                        prefix_result.parsed_base));
 3609|       |
 3610|     22|            auto buf = make_contiguous_buffer(
 3611|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|     22|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|  2.71k|{
 3366|  2.71k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|  2.71k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|  2.71k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|  2.71k|        parse_integer_base_prefix(
 3371|  2.71k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|  2.71k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 2.71k]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|  2.71k|    else {
 3383|  2.71k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 2.71k]
  ------------------
 3384|  2.71k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 2.71k, False: 0]
  ------------------
 3385|  2.71k|            digits_begin_it = base_prefix_begin_it;
 3386|  2.71k|        }
 3387|  2.71k|    }
 3388|       |
 3389|  2.71k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 2.71k, False: 0]
  ------------------
 3390|  2.71k|        sign = sign_type::plus_sign;
 3391|  2.71k|    }
 3392|  2.71k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|  2.71k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|  2.71k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|  3.61k|{
 3247|  3.61k|    auto r = read_one_of_code_unit(range, "+-");
 3248|  3.61k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 3.61k, False: 0]
  ------------------
 3249|  3.61k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 3.61k, False: 0]
  ------------------
 3250|  3.61k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|  3.61k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|  3.61k|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.61k|{
 2372|  3.61k|    auto it = read_code_unit(range);
 2373|  3.61k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.61k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  7.23k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 7.23k, False: 3.61k]
  ------------------
 2378|  7.23k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 7.23k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  7.23k|    }
 2382|       |
 2383|  3.61k|    return unexpected(parse_error::error);
 2384|  3.61k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|  2.71k|{
 3333|  2.71k|    switch (base) {
 3334|      6|        case 2:
  ------------------
  |  Branch (3334:9): [True: 6, False: 2.70k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|      6|                    false};
 3338|       |
 3339|     30|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 30, False: 2.68k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|     30|            bool zero_parsed = false;
 3342|     30|            auto it = apply_opt(
 3343|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|     30|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|    888|        case 16:
  ------------------
  |  Branch (3347:9): [True: 888, False: 1.82k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|    888|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|    888|                    false};
 3351|       |
 3352|     16|        case 0:
  ------------------
  |  Branch (3352:9): [True: 16, False: 2.69k]
  ------------------
 3353|       |            // detect base
 3354|     16|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|  1.77k|        default:
  ------------------
  |  Branch (3356:9): [True: 1.77k, False: 940]
  ------------------
 3357|       |            // no base prefix allowed
 3358|  1.77k|            return {range.begin(), base, false};
 3359|  2.71k|    }
 3360|  2.71k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    924|{
 2391|    924|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 924, False: 0]
  ------------------
 2392|    924|        return range.begin();
 2393|    924|    }
 2394|      0|    return *result;
 2395|    924|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3283|     22|{
 3284|     22|    return read_matching_string_classic_nocase(range, "0b");
 3285|     22|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.66k|{
 2331|  3.66k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  3.66k|                  std::is_same_v<char_type, char>) {
 2335|  3.66k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 8, False: 3.66k]
  ------------------
 2336|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|      8|        }
 2338|  3.66k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 3.66k, False: 0]
  ------------------
 2339|  3.66k|            return unexpected(parse_error::error);
 2340|  3.66k|        }
 2341|      0|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  3.66k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3297|     46|{
 3298|     46|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 46]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|     46|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 0, False: 46]
  ------------------
 3303|      0|        zero_parsed = true;
 3304|      0|        return *r;
 3305|      0|    }
 3306|       |
 3307|     46|    return unexpected(parse_error::error);
 3308|     46|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.86k|{
 2246|  1.86k|    auto it = read_code_unit(range);
 2247|  1.86k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.86k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.86k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.86k, False: 0]
  |  |  ------------------
  ------------------
 2252|  1.86k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.86k|        return unexpected(parse_error::error);
 2254|  1.86k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  1.86k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|    904|{
 3291|    904|    return read_matching_string_classic_nocase(range, "0x");
 3292|    904|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3313|     16|{
 3314|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 16]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 16]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|     16|    {
 3321|     16|        bool zero_parsed{false};
 3322|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 0, False: 16]
  ------------------
 3323|      0|            return {*r, 8, zero_parsed};
 3324|      0|        }
 3325|     16|    }
 3326|     16|    return {range.begin(), 10, false};
 3327|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|  2.68k|{
 3400|  2.68k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|  2.68k|    if constexpr (ranges::contiguous_range<Range>) {
 3403|  2.68k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
 3404|      0|            return detail::unexpected_scan_error(
 3405|      0|                scan_error::invalid_scanned_value,
 3406|      0|                "Failed to parse integer: No digits found");
 3407|      0|        }
 3408|  2.68k|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|  2.68k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3429|     24|{
 3430|     24|    std::basic_string<CharT> output;
 3431|     24|    std::string thsep_indices;
 3432|     24|    auto it = range.begin();
 3433|     24|    bool digit_matched = false;
 3434|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 24, False: 0]
  ------------------
 3435|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 24]
  ------------------
 3436|      0|            thsep_indices.push_back(
 3437|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|      0|        }
 3439|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 24, False: 0]
  ------------------
 3440|     24|            break;
 3441|     24|        }
 3442|      0|        else {
 3443|      0|            output.push_back(*it);
 3444|      0|            digit_matched = true;
 3445|      0|        }
 3446|     24|    }
 3447|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3448|     24|        return detail::unexpected_scan_error(
 3449|     24|            scan_error::invalid_scanned_value,
 3450|     24|            "Failed to parse integer: No digits found");
 3451|     24|    }
 3452|      0|    return std::tuple{it, output, thsep_indices};
 3453|     24|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  13.0k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  13.0k|                  ranges::sized_range<Range>) {
 1785|  13.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  13.0k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  13.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  13.0k|    {
 1589|  13.0k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  59.9k|    {
 1602|  59.9k|        return sv;
 1603|  59.9k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5977|  1.55k|{
 5978|  1.55k|    using char_type = detail::char_t<Range>;
 5979|  1.55k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5980|       |
 5981|  1.55k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5981:9): [True: 1.17k, False: 386]
  ------------------
 5982|  1.17k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5983|  1.17k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5984|       |
 5985|  1.17k|        if (max_width == 0) {
  ------------------
  |  Branch (5985:13): [True: 1.06k, False: 104]
  ------------------
 5986|  1.06k|            auto it = read_while_code_unit(range, pred);
 5987|       |
 5988|  1.06k|            if (want_skipped_width) {
  ------------------
  |  Branch (5988:17): [True: 118, False: 950]
  ------------------
 5989|    118|                auto prefix_width =
 5990|    118|                    static_cast<std::ptrdiff_t>(
 5991|    118|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5992|    118|                    ranges::distance(range.begin(), it);
 5993|    118|                return result_type{it, prefix_width};
 5994|    118|            }
 5995|    950|            return result_type{it, 0};
 5996|  1.06k|        }
 5997|       |
 5998|    104|        auto max_width_view = take_width(range, max_width);
 5999|    104|        auto w_it = read_while_code_unit(max_width_view, pred);
 6000|       |
 6001|    104|        if (want_skipped_width) {
  ------------------
  |  Branch (6001:13): [True: 104, False: 0]
  ------------------
 6002|    104|            return result_type{w_it.base(), max_width - w_it.count()};
 6003|    104|        }
 6004|      0|        return result_type{w_it.base(), 0};
 6005|    104|    }
 6006|       |
 6007|    386|    const auto fill_chars = fill.template get_code_units<char_type>();
 6008|    386|    if (max_width == 0) {
  ------------------
  |  Branch (6008:9): [True: 206, False: 180]
  ------------------
 6009|    206|        auto it = read_while_code_units(range, fill_chars);
 6010|       |
 6011|    206|        if (want_skipped_width) {
  ------------------
  |  Branch (6011:13): [True: 52, False: 154]
  ------------------
 6012|     52|            auto prefix_width =
 6013|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6014|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6015|     52|            return result_type{it, prefix_width};
 6016|     52|        }
 6017|    154|        return result_type{it, 0};
 6018|    206|    }
 6019|       |
 6020|    180|    auto max_width_view = take_width(range, max_width);
 6021|    180|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6022|       |
 6023|    180|    if (want_skipped_width) {
  ------------------
  |  Branch (6023:9): [True: 180, False: 0]
  ------------------
 6024|    180|        return result_type{w_it.base(), max_width - w_it.count()};
 6025|    180|    }
 6026|      0|    return result_type{w_it.base(), 0};
 6027|    180|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  1.23k|{
 2075|  1.23k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.23k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  1.43k|{
 2056|  1.43k|    if constexpr (ranges::common_range<Range>) {
 2057|  1.43k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  1.43k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  1.17k|        : m_fptr([](storage fn,
  743|  1.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17k|              cvref<T> obj = *get<T>(fn);
  745|  1.17k|              if constexpr (std::is_void_v<R>) {
  746|  1.17k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.17k|              }
  748|  1.17k|              else {
  749|  1.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17k|              }
  751|  1.17k|          }),
  752|  1.17k|          m_storage(std::addressof(f))
  753|  1.17k|    {
  754|  1.17k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  1.59k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.59k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.59k|              else {
  749|  1.59k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.59k|              }
  751|  1.59k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.59k|    {
  684|  1.59k|        if constexpr (std::is_const_v<T>) {
  685|  1.59k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.59k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5983|  1.59k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  1.17k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.17k|        {
  667|  1.17k|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    260|{
 2075|    260|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    260|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    488|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    488|    else {
 2060|    488|        auto first = range.begin();
 2061|  7.68k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 7.43k, False: 250]
  ------------------
 2062|  7.43k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 238, False: 7.19k]
  ------------------
 2063|    238|                return first;
 2064|    238|            }
 2065|  7.43k|        }
 2066|    250|        return first;
 2067|    488|    }
 2068|    488|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2135|    206|{
 2136|    206|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    206|    auto it = range.begin();
 2139|    364|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 364, False: 0]
  ------------------
 2140|    364|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    364|                                           needle.size());
 2142|    364|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 6, False: 358]
  ------------------
 2143|      6|            return it;
 2144|      6|        }
 2145|    358|        static_assert(
 2146|    358|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    358|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 200, False: 158]
  ------------------
 2148|    200|            return it;
 2149|    200|        }
 2150|    158|        it = *r;
 2151|    158|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2135|    180|{
 2136|    180|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    180|    auto it = range.begin();
 2139|    326|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 296, False: 30]
  ------------------
 2140|    296|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    296|                                           needle.size());
 2142|    296|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 28, False: 268]
  ------------------
 2143|     28|            return it;
 2144|     28|        }
 2145|    268|        static_assert(
 2146|    268|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    268|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 122, False: 146]
  ------------------
 2148|    122|            return it;
 2149|    122|        }
 2150|    146|        it = *r;
 2151|    146|    }
 2152|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|     30|    return it;
 2154|     30|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3054|    442|{
 3055|    442|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 0, False: 442]
  ------------------
 3056|      0|        auto it = read_while_classic_space(range);
 3057|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|      0|        return it;
 3063|      0|    }
 3064|       |
 3065|    442|    return read_while_classic_space(range);
 3066|    442|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    442|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    442|    else {
 2225|    442|        auto it = range.begin();
 2226|       |
 2227|    442|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|    442|            auto seg = get_contiguous_beginning(range);
 2229|    442|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|    442|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 442]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|    442|            ranges::advance(it, seg.size());
 2234|    442|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    442|            return detail::is_cp_space(cp);
 2238|    442|        });
 2239|    442|    }
 2240|    442|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|  1.11k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.11k|    else {
 1059|  1.11k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.11k|    }
 1061|  1.11k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    622|{
 2181|    622|    return read_until_code_point(range, std::not_fn(pred));
 2182|    622|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|    784|{
 2160|    784|    auto it = range.begin();
 2161|  11.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 11.0k, False: 262]
  ------------------
 2162|  11.0k|        const auto val =
 2163|  11.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  11.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 10.2k, False: 802]
  |  |  ------------------
  ------------------
 2165|  10.2k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  10.2k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  10.2k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 522, False: 9.75k]
  ------------------
 2168|    522|                return it;
 2169|    522|            }
 2170|  10.2k|        }
 2171|  10.5k|        it = val.iterator;
 2172|  10.5k|    }
 2173|       |
 2174|    262|    return it;
 2175|    784|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  18.7k|{
 1998|  18.7k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  18.7k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  18.7k|    auto it = range.begin();
 2002|  18.7k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  18.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.84k, False: 16.8k]
  |  |  ------------------
  ------------------
 2005|  1.84k|        ++it;
 2006|  1.84k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.84k|        return {it, {}};
 2008|  1.84k|    }
 2009|       |
 2010|  16.8k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 14.0k, False: 2.79k]
  ------------------
 2011|  14.0k|        ++it;
 2012|  14.0k|        return {it, string_type(1, *range.begin())};
 2013|  14.0k|    }
 2014|       |
 2015|  2.79k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  2.79k|    return {it, string_type{range.begin(), it}};
 2017|  16.8k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  1.84k|{
 1265|  1.84k|    auto it = input.begin();
 1266|  2.43k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.29k, False: 138]
  ------------------
 1267|  2.29k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.70k, False: 586]
  ------------------
 1268|  1.70k|            break;
 1269|  1.70k|        }
 1270|  2.29k|    }
 1271|  1.84k|    return it;
 1272|  1.84k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  2.79k|    {
  283|  2.79k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  2.79k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  2.79k|    {
  227|  2.79k|        constexpr iter_difference_t<I> zero{0};
  228|  2.79k|        iter_difference_t<I> counter{0};
  229|       |
  230|  2.79k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 2.79k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  2.79k|        else {
  237|  9.34k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 6.63k, False: 2.71k]
  |  Branch (237:34): [True: 6.55k, False: 84]
  ------------------
  238|  6.55k|                ++i;
  239|  6.55k|                ++counter;
  240|  6.55k|            }
  241|  2.79k|        }
  242|       |
  243|  2.79k|        return counter;
  244|  2.79k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    442|        : m_fptr([](storage fn,
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
  752|    442|          m_storage(std::addressof(f))
  753|    442|    {
  754|    442|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.20k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.20k|              else {
  749|  1.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.20k|              }
  751|  1.20k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.20k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.20k|        else if constexpr (std::is_object_v<T>) {
  688|  1.20k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.20k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|  1.20k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.20k|            return detail::is_cp_space(cp);
 2238|  1.20k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    442|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    442|        {
  662|    442|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|  6.85k|{
 3055|  6.85k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 6.67k, False: 184]
  ------------------
 3056|  6.67k|        auto it = read_while_classic_space(range);
 3057|  6.67k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|  6.67k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.67k]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|  6.67k|        return it;
 3063|  6.67k|    }
 3064|       |
 3065|    184|    return read_while_classic_space(range);
 3066|  6.85k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  12.9k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  12.9k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  12.9k|        auto buf = make_contiguous_buffer(range);
 2220|  12.9k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  12.9k|        return ranges::next(range.begin(),
 2222|  12.9k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  12.9k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  15.7k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  15.7k|                  ranges::sized_range<Range>) {
 1785|  15.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  15.7k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  15.7k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  15.7k|    {
 1589|  15.7k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|  8.97k|    {
 3145|  8.97k|        reader_error_handler eh{};
 3146|  8.97k|        get_derived().check_specs_impl(specs, eh);
 3147|  8.97k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.86k, False: 1.11k]
  |  |  ------------------
  ------------------
 3148|  7.86k|            return detail::unexpected_scan_error(
 3149|  7.86k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  7.86k|        }
 3151|  1.11k|        return {};
 3152|  8.97k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3156|  8.97k|    {
 3157|  8.97k|        return static_cast<Derived&>(*this);
 3158|  8.97k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|  8.97k|    {
 3525|  8.97k|        detail::check_int_type_specs(specs, eh);
 3526|  8.97k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3139|  2.37k|    {
 3140|  2.37k|        return true;
 3141|  2.37k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|    252|    {
 3579|    252|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    252|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    252|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 252]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|    252|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 252]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    252|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 242, False: 10]
  |  |  ------------------
  ------------------
 3605|    242|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    242|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|     10|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     10|            localized_number_formatting_options<CharT>{loc};
 3626|     10|#endif
 3627|       |
 3628|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|    276|    {
 3579|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    276|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 276]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 276]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 264, False: 12]
  |  |  ------------------
  ------------------
 3605|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    264|                    parse_integer_digits_without_thsep(
 3607|    264|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    264|                        prefix_result.parsed_base));
 3609|       |
 3610|    264|            auto buf = make_contiguous_buffer(
 3611|    264|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    264|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|    264|        }
 3620|       |
 3621|     12|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     12|            localized_number_formatting_options<CharT>{loc};
 3626|     12|#endif
 3627|       |
 3628|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|    252|    {
 3579|    252|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    252|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    252|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 252]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|    252|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 252]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    252|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 242, False: 10]
  |  |  ------------------
  ------------------
 3605|    242|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    242|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|     10|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     10|            localized_number_formatting_options<CharT>{loc};
 3626|     10|#endif
 3627|       |
 3628|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|    276|    {
 3579|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    276|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 276]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 276]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 264, False: 12]
  |  |  ------------------
  ------------------
 3605|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    264|                    parse_integer_digits_without_thsep(
 3607|    264|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    264|                        prefix_result.parsed_base));
 3609|       |
 3610|    264|            auto buf = make_contiguous_buffer(
 3611|    264|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    264|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|    264|        }
 3620|       |
 3621|     12|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     12|            localized_number_formatting_options<CharT>{loc};
 3626|     12|#endif
 3627|       |
 3628|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|    220|    {
 3579|    220|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 220]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    220|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    220|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 220]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|    220|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 220]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    220|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    220|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 220, False: 0]
  |  |  ------------------
  ------------------
 3605|    220|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|    876|    {
 3579|    876|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    876|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    876|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    876|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 876]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|    876|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 876]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    876|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    876|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 876, False: 0]
  |  |  ------------------
  ------------------
 3605|    876|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    876|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    876|                    parse_integer_digits_without_thsep(
 3607|    876|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    876|                        prefix_result.parsed_base));
 3609|       |
 3610|    876|            auto buf = make_contiguous_buffer(
 3611|    876|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    876|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    876|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|    876|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|  4.48k|    {
 3145|  4.48k|        reader_error_handler eh{};
 3146|  4.48k|        get_derived().check_specs_impl(specs, eh);
 3147|  4.48k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.93k, False: 554]
  |  |  ------------------
  ------------------
 3148|  3.93k|            return detail::unexpected_scan_error(
 3149|  3.93k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  3.93k|        }
 3151|    554|        return {};
 3152|  4.48k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3156|  4.48k|    {
 3157|  4.48k|        return static_cast<Derived&>(*this);
 3158|  4.48k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4166|  4.48k|    {
 4167|  4.48k|        detail::check_float_type_specs(specs, eh);
 4168|  4.48k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3139|  1.18k|    {
 3140|  1.18k|        return true;
 3141|  1.18k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4238|    524|    {
 4239|    524|        unsigned options{};
 4240|    524|        if (specs.localized) {
  ------------------
  |  Branch (4240:13): [True: 14, False: 510]
  ------------------
 4241|     14|            options |= float_reader_base::allow_thsep;
 4242|     14|        }
 4243|       |
 4244|    524|        SCN_GCC_COMPAT_PUSH
 4245|    524|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4246|       |
 4247|    524|        switch (specs.type) {
 4248|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4248:13): [True: 28, False: 496]
  ------------------
 4249|     28|                return options | float_reader_base::allow_fixed;
 4250|       |
 4251|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4251:13): [True: 4, False: 520]
  ------------------
 4252|      4|                return options | float_reader_base::allow_scientific;
 4253|       |
 4254|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4254:13): [True: 12, False: 512]
  ------------------
 4255|     12|                return options | float_reader_base::allow_hex;
 4256|       |
 4257|      8|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4257:13): [True: 8, False: 516]
  ------------------
 4258|      8|                return options | float_reader_base::allow_scientific |
 4259|      8|                       float_reader_base::allow_fixed;
 4260|       |
 4261|    472|            case detail::presentation_type::none:
  ------------------
  |  Branch (4261:13): [True: 472, False: 52]
  ------------------
 4262|    472|                return options | float_reader_base::allow_scientific |
 4263|    472|                       float_reader_base::allow_fixed |
 4264|    472|                       float_reader_base::allow_hex;
 4265|       |
 4266|      0|            default:
  ------------------
  |  Branch (4266:13): [True: 0, False: 524]
  ------------------
 4267|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4268|    524|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4269|    524|        }
 4270|       |
 4271|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4272|    524|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3690|    524|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.15k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.30k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4078|    884|    {
 4079|    884|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4079:13): [True: 884, False: 0]
  ------------------
 4080|    884|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4080:13): [True: 884, False: 0]
  ------------------
 4081|    884|            return;
 4082|    884|        }
 4083|       |
 4084|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4085|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4085:13): [True: 0, False: 0]
  ------------------
 4086|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4086:27): [True: 0, False: 0]
  ------------------
 4087|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4087:21): [True: 0, False: 0]
  ------------------
 4088|      0|                    ch = CharT{'.'};
 4089|      0|                }
 4090|      0|            }
 4091|      0|        }
 4092|       |
 4093|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4093:13): [True: 0, False: 0]
  ------------------
 4094|      0|            return;
 4095|      0|        }
 4096|       |
 4097|      0|        auto first =
 4098|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4099|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4099:13): [True: 0, False: 0]
  ------------------
 4100|      0|            return;
 4101|      0|        }
 4102|       |
 4103|      0|        m_thsep_indices.push_back(
 4104|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4105|       |
 4106|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4106:31): [True: 0, False: 0]
  ------------------
 4107|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4107:17): [True: 0, False: 0]
  ------------------
 4108|      0|                *first++ = std::move(*it);
 4109|      0|            }
 4110|      0|            else {
 4111|      0|                m_thsep_indices.push_back(
 4112|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4113|      0|            }
 4114|      0|        }
 4115|       |
 4116|      0|        str.erase(first, str.end());
 4117|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|    688|    {
 1686|    688|        return m_storage.has_value();
 1687|    688|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|    344|    {
 1691|    344|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    344|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    344|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    344|        return *m_storage;
 1693|    344|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    248|    {
  763|    248|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    248|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3709|      8|    {
 3710|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|      8|        return read_source_impl(range);
 3716|      8|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3735|    248|    {
 3736|    248|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|    248|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|    248|        auto it = sign_result.first;
 3739|    248|        m_sign = sign_result.second;
 3740|       |
 3741|    248|        auto digits_begin = it;
 3742|    248|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|       |                      ranges::sized_range<Range>) {
 3745|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3746|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|       |                SCN_TRY_ASSIGN(
 3748|       |                    it,
 3749|       |                    do_read_source_impl(
 3750|       |                        r,
 3751|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|       |            }
 3754|       |            else {
 3755|       |                auto cb = [&](const auto& rr)
 3756|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|       |                    auto res = read_all(rr);
 3758|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|       |                        return detail::unexpected_scan_error(
 3760|       |                            scan_error::invalid_scanned_value,
 3761|       |                            "Invalid float value");
 3762|       |                    }
 3763|       |                    return res;
 3764|       |                };
 3765|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3766|       |            }
 3767|       |        }
 3768|    248|        else {
 3769|    248|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 248, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    248|    }                                                  \
  |  | 3939|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3770|      0|                it,
 3771|      0|                do_read_source_impl(
 3772|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|      0|        }
 3775|       |
 3776|    248|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 0, False: 0]
  |  Branch (3778:48): [True: 0, False: 0]
  ------------------
 3779|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 0, False: 0]
  ------------------
 3780|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 0, False: 0]
  ------------------
 3781|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|      0|        }
 3783|       |
 3784|      0|        handle_separators();
 3785|       |
 3786|      0|        return it;
 3787|    248|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4021|    248|    {
 4022|    248|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|    248|        const bool allowed_nonhex =
 4024|    248|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|    248|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|    248|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 248, False: 0]
  |  Branch (4027:45): [True: 0, False: 248]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|    248|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 248]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|    248|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 248, False: 0]
  |  Branch (4036:45): [True: 0, False: 248]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|    248|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 248]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|    248|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 230, False: 18]
  |  Branch (4043:28): [True: 4, False: 226]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|      4|            auto it = range.begin();
 4047|       |
 4048|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 4]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|      4|            else {
 4053|      4|                m_kind = float_kind::hex_without_prefix;
 4054|      4|            }
 4055|       |
 4056|      4|            return read_hex(ranges::subrange{it, range.end()});
 4057|      4|        }
 4058|    244|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 18, False: 226]
  |  Branch (4058:29): [True: 18, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|     18|            m_kind = float_kind::generic;
 4062|     18|            return read_regular_float(range);
 4063|     18|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|    226|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 226]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|    226|        m_kind = float_kind::generic;
 4074|    226|        return read_regular(range);
 4075|    226|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3829|    248|    {
 3830|    248|        auto it = range.begin();
 3831|    248|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 248, False: 0]
  ------------------
 3832|    248|            return unexpected(r.error());
 3833|    248|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3852|    248|    {
 3853|    248|        auto it = range.begin();
 3854|    248|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 248, False: 0]
  ------------------
 3855|    248|            return r.transform_error(map_parse_error_to_scan_error(
 3856|    248|                scan_error::invalid_scanned_value,
 3857|    248|                "Invalid floating-point NaN value"));
 3858|    248|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    230|    {
 3823|    230|        return read_matching_string_classic_nocase(range, "0x");
 3824|    230|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3923|      4|    {
 3924|      4|        auto it = range.begin();
 3925|       |
 3926|      4|        std::ptrdiff_t digits_count = 0;
 3927|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3928|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3929|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3930|      4|                scan_error::invalid_scanned_value,
 3931|      4|                "Invalid hexadecimal floating-point value"));
 3932|      4|        }
 3933|      0|        else {
 3934|      0|            digits_count += ranges::distance(it, *r);
 3935|      0|            it = *r;
 3936|      0|        }
 3937|       |
 3938|      0|        m_integral_part_length = digits_count;
 3939|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3939:18): [True: 0, False: 0]
  ------------------
 3940|      0|                                             m_locale_options.decimal_point)) {
 3941|      0|            it = *r;
 3942|      0|        }
 3943|       |
 3944|      0|        if (auto r =
  ------------------
  |  Branch (3944:18): [True: 0, False: 0]
  ------------------
 3945|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3951|      0|            return detail::unexpected_scan_error(
 3952|      0|                scan_error::invalid_scanned_value,
 3953|      0|                "No significand digits in hexfloat");
 3954|      0|        }
 3955|       |
 3956|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3957|       |
 3958|      0|        return it;
 3959|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3807|      4|    {
 3808|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 4]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3809|      4|                         thsep_allowed)) {
 3810|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3811|      0|                return char_to_int(ch) < 16 ||
 3812|      0|                       ch == m_locale_options.thousands_sep;
 3813|      0|            });
 3814|      0|        }
 3815|       |
 3816|      4|        return read_while1_code_unit(
 3817|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3818|      4|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  688|      4|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      4|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3817|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3964|    244|    {
 3965|    244|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|    244|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 230, False: 14]
  |  Branch (3966:50): [True: 0, False: 230]
  ------------------
 3967|       |
 3968|    244|        auto it = ranges::begin(range);
 3969|    244|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|    244|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|    244|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 3973|    244|            return r.transform_error(
 3974|    244|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|    244|                                              "Invalid floating-point value"));
 3976|    244|        }
 3977|      0|        else {
 3978|      0|            digits_count += ranges::distance(it, *r);
 3979|      0|            it = *r;
 3980|      0|        }
 3981|       |
 3982|      0|        m_integral_part_length = digits_count;
 3983|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 0, False: 0]
  ------------------
 3984|      0|                                             m_locale_options.decimal_point)) {
 3985|      0|            it = *r;
 3986|      0|        }
 3987|       |
 3988|      0|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 0, False: 0]
  ------------------
 3989|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|      0|            digits_count += ranges::distance(it, *r);
 3991|      0|            it = *r;
 3992|      0|        }
 3993|       |
 3994|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|      0|        auto beg_exp_it = it;
 4001|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 0]
  ------------------
 4002|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|      0|        }
 4004|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 0, False: 0]
  |  Branch (4004:29): [True: 0, False: 0]
  ------------------
 4005|      0|            return detail::unexpected_scan_error(
 4006|      0|                scan_error::invalid_scanned_value,
 4007|      0|                "No exponent given to scientific float");
 4008|      0|        }
 4009|       |
 4010|      0|        m_kind =
 4011|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 0, False: 0]
  ------------------
 4012|       |
 4013|      0|        return it;
 4014|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3792|    244|    {
 3793|    244|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 244]
  |  |  |  Branch (865:45): [True: 0, False: 244]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|    244|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|    244|        return read_while1_code_unit(
 3802|    244|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|    244|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    244|        : m_fptr([](storage fn,
  743|    244|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    244|              cvref<T> obj = *get<T>(fn);
  745|    244|              if constexpr (std::is_void_v<R>) {
  746|    244|                  obj(static_cast<decltype(args)>(args)...);
  747|    244|              }
  748|    244|              else {
  749|    244|                  return obj(static_cast<decltype(args)>(args)...);
  750|    244|              }
  751|    244|          }),
  752|    244|          m_storage(std::addressof(f))
  753|    244|    {
  754|    244|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    244|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    244|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    244|              else {
  749|    244|                  return obj(static_cast<decltype(args)>(args)...);
  750|    244|              }
  751|    244|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    244|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    244|        else if constexpr (std::is_object_v<T>) {
  688|    244|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    244|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3802|    244|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    244|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    244|        {
  662|    244|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3695|    240|    {
 3696|    240|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|    240|        return read_source_impl(range);
 3702|    240|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    906|    {
  763|    906|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    906|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3709|      6|    {
 3710|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|      6|        return read_source_impl(range);
 3716|      6|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3735|    906|    {
 3736|    906|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|    906|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|    906|        auto it = sign_result.first;
 3739|    906|        m_sign = sign_result.second;
 3740|       |
 3741|    906|        auto digits_begin = it;
 3742|    906|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|    906|                      ranges::sized_range<Range>) {
 3745|    906|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 906]
  |  |  |  Branch (865:45): [True: 0, False: 906]
  |  |  |  Branch (865:45): [True: 0, False: 906]
  |  |  ------------------
  ------------------
 3746|    906|                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3748|      0|                    it,
 3749|      0|                    do_read_source_impl(
 3750|      0|                        r,
 3751|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|      0|            }
 3754|    906|            else {
 3755|    906|                auto cb = [&](const auto& rr)
 3756|    906|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|    906|                    auto res = read_all(rr);
 3758|    906|                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|    906|                        return detail::unexpected_scan_error(
 3760|    906|                            scan_error::invalid_scanned_value,
 3761|    906|                            "Invalid float value");
 3762|    906|                    }
 3763|    906|                    return res;
 3764|    906|                };
 3765|    906|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 884]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3766|    884|            }
 3767|       |        }
 3768|       |        else {
 3769|       |            SCN_TRY_ASSIGN(
 3770|       |                it,
 3771|       |                do_read_source_impl(
 3772|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|       |        }
 3775|       |
 3776|    906|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|    884|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 884, False: 0]
  |  Branch (3778:48): [True: 884, False: 0]
  ------------------
 3779|    884|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 884, False: 0]
  ------------------
 3780|    884|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 884, False: 0]
  ------------------
 3781|    884|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|    884|        }
 3783|       |
 3784|    884|        handle_separators();
 3785|       |
 3786|    884|        return it;
 3787|    906|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3829|    906|    {
 3830|    906|        auto it = range.begin();
 3831|    906|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 906, False: 0]
  ------------------
 3832|    906|            return unexpected(r.error());
 3833|    906|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3852|    906|    {
 3853|    906|        auto it = range.begin();
 3854|    906|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 906, False: 0]
  ------------------
 3855|    906|            return r.transform_error(map_parse_error_to_scan_error(
 3856|    906|                scan_error::invalid_scanned_value,
 3857|    906|                "Invalid floating-point NaN value"));
 3858|    906|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    884|    {
 3823|    884|        return read_matching_string_classic_nocase(range, "0x");
 3824|    884|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|     22|{
 2095|     22|    auto it = read_while_code_unit(range, pred);
 2096|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 22, False: 0]
  ------------------
 2097|     22|        return unexpected(parse_error::error);
 2098|     22|    }
 2099|      0|    return it;
 2100|     22|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3964|     22|    {
 3965|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 8, False: 14]
  |  Branch (3966:50): [True: 4, False: 4]
  ------------------
 3967|       |
 3968|     22|        auto it = ranges::begin(range);
 3969|     22|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3973|     22|            return r.transform_error(
 3974|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|     22|                                              "Invalid floating-point value"));
 3976|     22|        }
 3977|      0|        else {
 3978|      0|            digits_count += ranges::distance(it, *r);
 3979|      0|            it = *r;
 3980|      0|        }
 3981|       |
 3982|      0|        m_integral_part_length = digits_count;
 3983|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 0, False: 0]
  ------------------
 3984|      0|                                             m_locale_options.decimal_point)) {
 3985|      0|            it = *r;
 3986|      0|        }
 3987|       |
 3988|      0|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 0, False: 0]
  ------------------
 3989|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|      0|            digits_count += ranges::distance(it, *r);
 3991|      0|            it = *r;
 3992|      0|        }
 3993|       |
 3994|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|      0|        auto beg_exp_it = it;
 4001|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 0]
  ------------------
 4002|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|      0|        }
 4004|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 0, False: 0]
  |  Branch (4004:29): [True: 0, False: 0]
  ------------------
 4005|      0|            return detail::unexpected_scan_error(
 4006|      0|                scan_error::invalid_scanned_value,
 4007|      0|                "No exponent given to scientific float");
 4008|      0|        }
 4009|       |
 4010|      0|        m_kind =
 4011|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 0, False: 0]
  ------------------
 4012|       |
 4013|      0|        return it;
 4014|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3792|     22|    {
 3793|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  Branch (865:45): [True: 0, False: 22]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|     22|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|     22|        return read_while1_code_unit(
 3802|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|     22|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3802|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4021|    906|    {
 4022|    906|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|    906|        const bool allowed_nonhex =
 4024|    906|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|    906|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|    906|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 906, False: 0]
  |  Branch (4027:45): [True: 0, False: 906]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|    906|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 906]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|    906|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 906, False: 0]
  |  Branch (4036:45): [True: 0, False: 906]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|    906|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 906]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|    906|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 884, False: 22]
  |  Branch (4043:28): [True: 8, False: 876]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|      8|            auto it = range.begin();
 4047|       |
 4048|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 8]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|      8|            else {
 4053|      8|                m_kind = float_kind::hex_without_prefix;
 4054|      8|            }
 4055|       |
 4056|      8|            return read_hex(ranges::subrange{it, range.end()});
 4057|      8|        }
 4058|    898|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 22, False: 876]
  |  Branch (4058:29): [True: 22, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|     22|            m_kind = float_kind::generic;
 4062|     22|            return read_regular_float(range);
 4063|     22|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|    876|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 876]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|    876|        m_kind = float_kind::generic;
 4074|    876|        return read_regular(range);
 4075|    876|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3756|    884|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|    884|                    auto res = read_all(rr);
 3758|    884|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
 3759|      0|                        return detail::unexpected_scan_error(
 3760|      0|                            scan_error::invalid_scanned_value,
 3761|      0|                            "Invalid float value");
 3762|      0|                    }
 3763|    884|                    return res;
 3764|    884|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    884|{
 1938|    884|    return ranges::next(range.begin(), range.end());
 1939|    884|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    884|    {
  313|    884|        ranges::advance(x, bound);
  314|    884|        return x;
  315|    884|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    884|    {
  275|    884|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    884|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    950|    {
  190|    950|        i = std::move(bound);
  191|    950|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    884|    {
 1676|    884|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    884|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|    884|    {
 1720|    884|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    884|                      ranges::sized_range<Range>) {
 1725|    884|            m_storage.reset();
 1726|    884|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    884|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3695|    900|    {
 3696|    900|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 900]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|    900|        return read_source_impl(range);
 3702|    900|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3721|    884|    {
 3722|    884|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|    884|        const std::ptrdiff_t sign_len =
 3725|    884|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 0, False: 884]
  ------------------
 3726|       |
 3727|    884|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    884|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|    884|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4191|    248|    {
 4192|    248|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|    248|#if !SCN_DISABLE_LOCALE
 4195|    248|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 8, False: 240]
  ------------------
 4196|      8|            return read_impl<Range>(
 4197|      8|                range, rd,
 4198|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      8|                },
 4201|      8|                value, loc);
 4202|      8|        }
 4203|    240|#endif
 4204|       |
 4205|    240|        return read_impl<Range>(
 4206|    240|            range, rd,
 4207|    240|            [](float_reader<CharT>& r, auto&&... args) {
 4208|    240|                return r.read_source(SCN_FWD(args)...);
 4209|    240|            },
 4210|    240|            value);
 4211|    248|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|    248|    {
 4228|    248|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|    248|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 248, False: 0]
  |  |  ------------------
  ------------------
 4230|    248|            return unexpected(r.error());
 4231|    248|        }
 4232|       |
 4233|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4198|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|      8|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    240|        : m_fptr([](storage fn,
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|    240|              if constexpr (std::is_void_v<R>) {
  746|    240|                  obj(static_cast<decltype(args)>(args)...);
  747|    240|              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
  752|    240|          m_storage(std::addressof(f))
  753|    240|    {
  754|    240|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    240|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    240|        else if constexpr (std::is_object_v<T>) {
  688|    240|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    240|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4207|    240|            [](float_reader<CharT>& r, auto&&... args) {
 4208|    240|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|    240|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    240|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    240|        {
  662|    240|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|    276|    {
 4192|    276|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|    276|#if !SCN_DISABLE_LOCALE
 4195|    276|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 6, False: 270]
  ------------------
 4196|      6|            return read_impl<Range>(
 4197|      6|                range, rd,
 4198|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      6|                },
 4201|      6|                value, loc);
 4202|      6|        }
 4203|    270|#endif
 4204|       |
 4205|    270|        return read_impl<Range>(
 4206|    270|            range, rd,
 4207|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4208|    270|                return r.read_source(SCN_FWD(args)...);
 4209|    270|            },
 4210|    270|            value);
 4211|    276|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|    906|    {
 4228|    906|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|    906|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 884]
  |  |  ------------------
  ------------------
 4230|     22|            return unexpected(r.error());
 4231|     22|        }
 4232|       |
 4233|    884|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    884|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|    884|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    270|        : m_fptr([](storage fn,
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|    270|              if constexpr (std::is_void_v<R>) {
  746|    270|                  obj(static_cast<decltype(args)>(args)...);
  747|    270|              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
  752|    270|          m_storage(std::addressof(f))
  753|    270|    {
  754|    270|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    270|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    270|        else if constexpr (std::is_object_v<T>) {
  688|    270|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    270|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4208|    270|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|    270|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    270|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    270|        {
  662|    270|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5837|  5.08k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|  5.08k|                       std::is_same_v<T, std::wstring>) {
 5856|  5.08k|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  5.08k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5231|  15.2k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|  13.3k|    {
 3145|  13.3k|        reader_error_handler eh{};
 3146|  13.3k|        get_derived().check_specs_impl(specs, eh);
 3147|  13.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 372, False: 12.9k]
  |  |  ------------------
  ------------------
 3148|    372|            return detail::unexpected_scan_error(
 3149|    372|                scan_error::invalid_format_string, eh.m_msg);
 3150|    372|        }
 3151|  12.9k|        return {};
 3152|  13.3k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3156|  13.3k|    {
 3157|  13.3k|        return static_cast<Derived&>(*this);
 3158|  13.3k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5235|  13.3k|    {
 5236|  13.3k|        detail::check_string_type_specs(specs, eh);
 5237|       |
 5238|  13.3k|        SCN_GCC_PUSH
 5239|  13.3k|        SCN_GCC_IGNORE("-Wswitch")
 5240|  13.3k|        SCN_GCC_IGNORE("-Wswitch-default")
 5241|       |
 5242|  13.3k|        SCN_CLANG_PUSH
 5243|  13.3k|        SCN_CLANG_IGNORE("-Wswitch")
 5244|  13.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5245|       |
 5246|  13.3k|        switch (specs.type) {
  ------------------
  |  Branch (5246:17): [True: 366, False: 12.9k]
  ------------------
 5247|  1.44k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5247:13): [True: 1.44k, False: 11.9k]
  ------------------
 5248|  1.44k|                m_type = reader_type::word;
 5249|  1.44k|                break;
 5250|       |
 5251|    576|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5251:13): [True: 576, False: 12.7k]
  ------------------
 5252|    576|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5252:21): [True: 120, False: 456]
  ------------------
 5253|    576|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5253:21): [True: 222, False: 234]
  ------------------
 5254|    342|                    m_type = reader_type::custom_word;
 5255|    342|                }
 5256|    234|                else {
 5257|    234|                    m_type = reader_type::word;
 5258|    234|                }
 5259|    576|                break;
 5260|      0|            }
 5261|       |
 5262|     96|            case detail::presentation_type::character:
  ------------------
  |  Branch (5262:13): [True: 96, False: 13.2k]
  ------------------
 5263|     96|                m_type = reader_type::character;
 5264|     96|                break;
 5265|       |
 5266|  3.09k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5266:13): [True: 3.09k, False: 10.2k]
  ------------------
 5267|  3.09k|                m_type = reader_type::character_set;
 5268|  3.09k|                break;
 5269|       |
 5270|  7.38k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5270:13): [True: 7.38k, False: 5.97k]
  ------------------
 5271|  7.38k|                m_type = reader_type::regex;
 5272|  7.38k|                break;
 5273|       |
 5274|    402|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5274:13): [True: 402, False: 12.9k]
  ------------------
 5275|    402|                m_type = reader_type::regex_escaped;
 5276|    402|                break;
 5277|  13.3k|        }
 5278|       |
 5279|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5280|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5281|  13.3k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5284|  18.3k|    {
 5285|  18.3k|        return m_type == reader_type::word;
 5286|  18.3k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  9.41k|{
 1242|  9.41k|    auto it = src.begin();
 1243|   401k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 394k, False: 7.60k]
  ------------------
 1244|   394k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   394k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 1.20k, False: 392k]
  ------------------
 1246|  1.20k|            return false;
 1247|  1.20k|        }
 1248|   392k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 234, False: 392k]
  ------------------
 1249|    234|            return false;
 1250|    234|        }
 1251|   392k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   392k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   392k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 372, False: 392k]
  ------------------
 1254|    372|            return false;
 1255|    372|        }
 1256|   392k|        it += len;
 1257|   392k|    }
 1258|  7.60k|    return true;
 1259|  9.41k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|    344|{
 3097|    344|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|    344|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3098:13): [True: 344, False: 0]
  ------------------
 3099|    344|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    344|    static_cast<    \
  |  |  935|    344|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3100|    344|        }
 3101|      0|        else {
 3102|      0|            dest.assign(source.view());
 3103|      0|        }
 3104|       |    }
 3105|       |    else {
 3106|       |        return transcode_impl(source.view(), dest);
 3107|       |    }
 3108|       |
 3109|    344|    return {};
 3110|    344|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5132|  3.09k|        {
 5133|  3.09k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5133:17): [True: 552, False: 2.53k]
  ------------------
 5134|    552|                return {};
 5135|    552|            }
 5136|       |
 5137|  2.53k|            auto charset_string = specs.charset_string<SourceCharT>();
 5138|  2.53k|            auto it = detail::to_address(charset_string.begin());
 5139|  2.53k|            auto set = detail::parse_presentation_set(
 5140|  2.53k|                it, detail::to_address(charset_string.end()), nonascii);
 5141|  2.53k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|  2.53k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.53k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5142|  2.53k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|  2.53k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5143|  2.53k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|  2.53k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5144|       |
 5145|  2.53k|            std::sort(nonascii.extra_ranges.begin(),
 5146|  2.53k|                      nonascii.extra_ranges.end());
 5147|  2.53k|            return {};
 5148|  2.53k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5165|   247k|        {
 5166|   247k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5166:17): [True: 33.7k, False: 213k]
  ------------------
 5167|  33.7k|                return helper.is_char_set_in_extra_literals(cp);
 5168|  33.7k|            }
 5169|       |
 5170|   213k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5171|   247k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5115|  33.7k|        {
 5116|       |            // TODO: binary search?
 5117|  33.7k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5117:17): [True: 0, False: 33.7k]
  ------------------
 5118|      0|                return false;
 5119|      0|            }
 5120|       |
 5121|  33.7k|            const auto cp_val = static_cast<uint32_t>(cp);
 5122|  33.7k|            return std::find_if(
 5123|  33.7k|                       nonascii.extra_ranges.begin(),
 5124|  33.7k|                       nonascii.extra_ranges.end(),
 5125|  33.7k|                       [cp_val](const auto& pair) noexcept {
 5126|  33.7k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5127|  33.7k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5128|  33.7k|                       }) != nonascii.extra_ranges.end();
 5129|  33.7k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5125|  6.95M|                       [cp_val](const auto& pair) noexcept {
 5126|  6.95M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5126:35): [True: 6.95M, False: 2.23k]
  ------------------
 5127|  6.95M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5127:35): [True: 32.6k, False: 6.92M]
  ------------------
 5128|  6.95M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5105|   220k|        {
 5106|   220k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5107|   220k|            const auto val =
 5108|   220k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5109|   220k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5110|   220k|                    (val % 8)) &
 5111|   220k|                   1u;
 5112|   220k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5156|  8.65k|        {
 5157|  8.65k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5157:17): [True: 1.62k, False: 7.02k]
  ------------------
 5158|  1.62k|                return false;
 5159|  1.62k|            }
 5160|       |
 5161|  7.02k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5162|  8.65k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5102|  3.09k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|    530|    {
 5303|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    530|        return read_impl(range, specs, value);
 5305|    530|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|    530|    {
 5321|    530|        SCN_CLANG_PUSH
 5322|    530|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    530|        switch (m_type) {
 5325|    224|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 224, False: 306]
  ------------------
 5326|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 58, False: 472]
  ------------------
 5329|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     58|                                                                   value);
 5331|       |
 5332|     30|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 30, False: 500]
  ------------------
 5333|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    212|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 212, False: 318]
  ------------------
 5336|    212|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    212|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      2|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2, False: 528]
  ------------------
 5341|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      2|                    range, specs.charset_string<SourceCharT>(),
 5343|      2|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 526]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 530]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    530|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    530|        }
 5357|       |
 5358|    530|        SCN_CLANG_POP
 5359|    530|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|    224|    {
 4850|    224|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|    224|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|    312|{
 4784|    312|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    312|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    312|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 114, False: 198]
  ------------------
 4788|    114|        return detail::unexpected_scan_error(
 4789|    114|            scan_error::invalid_scanned_value,
 4790|    114|            "Invalid encoding in scanned string");
 4791|    114|    }
 4792|       |
 4793|    198|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    198|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 198]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    198|    return SCN_MOVE(result);
  ------------------
  |  |  934|    198|    static_cast<    \
  |  |  935|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    198|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    672|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    672|    else {
 2196|    672|        auto it = range.begin();
 2197|       |
 2198|    672|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|    672|            auto seg = get_contiguous_beginning(range);
 2200|    672|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|    672|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 672]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|    672|            ranges::advance(it, seg.size());
 2205|    672|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|    672|            ranges::subrange{it, range.end()},
 2209|    672|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    672|    }
 2211|    672|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    672|{
 2160|    672|    auto it = range.begin();
 2161|  8.16k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 7.65k, False: 510]
  ------------------
 2162|  7.65k|        const auto val =
 2163|  7.65k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  7.65k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  7.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.61k, False: 1.04k]
  |  |  ------------------
  ------------------
 2165|  6.61k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  6.61k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  6.61k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 162, False: 6.45k]
  ------------------
 2168|    162|                return it;
 2169|    162|            }
 2170|  6.61k|        }
 2171|  7.49k|        it = val.iterator;
 2172|  7.49k|    }
 2173|       |
 2174|    510|    return it;
 2175|    672|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    672|        : m_fptr([](storage fn,
  743|    672|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    672|              cvref<T> obj = *get<T>(fn);
  745|    672|              if constexpr (std::is_void_v<R>) {
  746|    672|                  obj(static_cast<decltype(args)>(args)...);
  747|    672|              }
  748|    672|              else {
  749|    672|                  return obj(static_cast<decltype(args)>(args)...);
  750|    672|              }
  751|    672|          }),
  752|    672|          m_storage(std::addressof(f))
  753|    672|    {
  754|    672|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  6.61k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.61k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.61k|              else {
  749|  6.61k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.61k|              }
  751|  6.61k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  6.61k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.61k|        else if constexpr (std::is_object_v<T>) {
  688|  6.61k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.61k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  6.61k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    672|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    672|        {
  662|    672|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4870|     58|    {
 4871|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 30, False: 28]
  ------------------
 4872|     30|            return read_string_impl(
 4873|     30|                range,
 4874|     30|                read_until_code_unit(
 4875|     30|                    range,
 4876|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     30|                        SourceCharT ch) { return ch == until; }),
 4878|     30|                value);
 4879|     30|        }
 4880|     28|        return read_string_impl(
 4881|     28|            range,
 4882|     28|            read_until_code_units(
 4883|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|     28|            value);
 4885|     58|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    620|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    620|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    620|              else {
  749|    620|                  return obj(static_cast<decltype(args)>(args)...);
  750|    620|              }
  751|    620|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    620|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    620|        else if constexpr (std::is_object_v<T>) {
  688|    620|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    620|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4877|    620|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2105|     84|{
 2106|     84|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|       |    if constexpr (ranges::common_range<Range>) {
 2109|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2110|       |                           needle.end());
 2111|       |    }
 2112|     84|    else {
 2113|     84|        auto first = range.begin();
 2114|    732|        while (true) {
  ------------------
  |  Branch (2114:16): [Folded - Ignored]
  ------------------
 2115|    732|            auto it = first;
 2116|    918|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|    918|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2117:21): [True: 54, False: 864]
  ------------------
 2118|     54|                    return first;
 2119|     54|                }
 2120|    864|                if (it == range.end()) {
  ------------------
  |  Branch (2120:21): [True: 30, False: 834]
  ------------------
 2121|     30|                    return it;
 2122|     30|                }
 2123|    834|                if (*it != *needle_it) {
  ------------------
  |  Branch (2123:21): [True: 648, False: 186]
  ------------------
 2124|    648|                    break;
 2125|    648|                }
 2126|    834|            }
 2127|    648|            ++first;
 2128|    648|        }
 2129|     84|    }
 2130|     84|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4976|     30|    {
 4977|     30|        return read_impl(
 4978|     30|            range,
 4979|     30|            [&](const auto& rng) {
 4980|     30|                return read_string_impl(rng, read_all(rng), value);
 4981|     30|            },
 4982|     30|            detail::priority_tag<1>{});
 4983|     30|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|     30|    {
 5004|     30|        return read_cb(range);
 5005|     30|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4979|     30|            [&](const auto& rng) {
 4980|     30|                return read_string_impl(rng, read_all(rng), value);
 4981|     30|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     90|{
 1938|     90|    return ranges::next(range.begin(), range.end());
 1939|     90|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     90|    {
  313|     90|        ranges::advance(x, bound);
  314|     90|        return x;
  315|     90|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     90|    {
  275|     90|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     90|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     90|    {
  203|  1.93k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.84k, False: 90]
  ------------------
  204|  1.84k|            ++i;
  205|  1.84k|        }
  206|     90|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5077|    212|    {
 5078|    212|        auto it = read_source_impl(range, {specs});
 5079|    212|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 200]
  |  |  ------------------
  ------------------
 5080|     12|            return unexpected(it.error());
 5081|     12|        }
 5082|       |
 5083|    200|        return read_string_impl(range, *it, value);
 5084|    212|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5180|    636|    {
 5181|    636|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|    636|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|    636|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    636|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    636|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 636]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|    636|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|    636|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 342, False: 294]
  ------------------
 5189|    342|            const auto cb = [&](char32_t cp) {
 5190|    342|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|    342|            };
 5192|       |
 5193|    342|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 162, False: 180]
  ------------------
 5194|    162|                auto it = read_until_code_point(range, cb);
 5195|    162|                return check_nonempty(it, range);
 5196|    162|            }
 5197|    180|            auto it = read_while_code_point(range, cb);
 5198|    180|            return check_nonempty(it, range);
 5199|    342|        }
 5200|       |
 5201|    294|        const auto cb = [&](SourceCharT ch) {
 5202|    294|            return cb_wrapper.on_ascii_only(ch);
 5203|    294|        };
 5204|       |
 5205|    294|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 138, False: 156]
  ------------------
 5206|    138|            auto it = read_until_code_unit(range, cb);
 5207|    138|            return check_nonempty(it, range);
 5208|    138|        }
 5209|    156|        auto it = read_while_code_unit(range, cb);
 5210|    156|        return check_nonempty(it, range);
 5211|    294|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    342|        : m_fptr([](storage fn,
  743|    342|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    342|              cvref<T> obj = *get<T>(fn);
  745|    342|              if constexpr (std::is_void_v<R>) {
  746|    342|                  obj(static_cast<decltype(args)>(args)...);
  747|    342|              }
  748|    342|              else {
  749|    342|                  return obj(static_cast<decltype(args)>(args)...);
  750|    342|              }
  751|    342|          }),
  752|    342|          m_storage(std::addressof(f))
  753|    342|    {
  754|    342|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  9.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.07k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.07k|              else {
  749|  9.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.07k|              }
  751|  9.07k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  9.07k|    {
  684|  9.07k|        if constexpr (std::is_const_v<T>) {
  685|  9.07k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.07k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5189|  9.07k|            const auto cb = [&](char32_t cp) {
 5190|  9.07k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|  9.07k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    342|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    342|        {
  667|    342|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5216|    636|    {
 5217|    636|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 36, False: 600]
  ------------------
 5218|     36|            return detail::unexpected_scan_error(
 5219|     36|                scan_error::invalid_scanned_value,
 5220|     36|                "No characters matched in [character set]");
 5221|     36|        }
 5222|       |
 5223|    600|        return it;
 5224|    636|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    294|        : m_fptr([](storage fn,
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
  752|    294|          m_storage(std::addressof(f))
  753|    294|    {
  754|    294|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  5.28k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.28k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.28k|              else {
  749|  5.28k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.28k|              }
  751|  5.28k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.28k|    {
  684|  5.28k|        if constexpr (std::is_const_v<T>) {
  685|  5.28k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.28k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5201|  5.28k|        const auto cb = [&](SourceCharT ch) {
 5202|  5.28k|            return cb_wrapper.on_ascii_only(ch);
 5203|  5.28k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    294|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    294|        {
  667|    294|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4783|    200|{
 4784|    200|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    200|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    200|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 54, False: 146]
  ------------------
 4788|     54|        return detail::unexpected_scan_error(
 4789|     54|            scan_error::invalid_scanned_value,
 4790|     54|            "Invalid encoding in scanned string");
 4791|     54|    }
 4792|       |
 4793|    146|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    146|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 146]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    146|    return SCN_MOVE(result);
  ------------------
  |  |  934|    146|    static_cast<    \
  |  |  935|    146|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    146|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      6|    {
 4921|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      6|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4942|     18|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|     18|        else {
 4950|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 18, False: 0]
  ------------------
 4951|     18|                return detail::unexpected_scan_error(
 4952|     18|                    scan_error::invalid_format_string,
 4953|     18|                    "Cannot use regex with a non-contiguous source "
 4954|     18|                    "range");
 4955|     18|            }
 4956|       |
 4957|      0|            auto input = get_as_contiguous(range);
 4958|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|      0|            return ranges::next(range.begin(),
 4961|      0|                                ranges::distance(input.begin(), it));
 4962|      0|        }
 4963|     18|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|     18|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|     18|    else {
  975|     18|        return false;
  976|     18|    }
  977|     18|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|  3.77k|    {
 5303|  3.77k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  3.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  3.77k|        return read_impl(range, specs, value);
 5305|  3.77k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|  3.77k|    {
 5321|  3.77k|        SCN_CLANG_PUSH
 5322|  3.77k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  3.77k|        switch (m_type) {
 5325|    310|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 310, False: 3.46k]
  ------------------
 5326|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 56, False: 3.71k]
  ------------------
 5329|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     56|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 3.77k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    818|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 818, False: 2.95k]
  ------------------
 5336|    818|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    818|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  2.46k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2.46k, False: 1.31k]
  ------------------
 5341|  2.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  2.46k|                    range, specs.charset_string<SourceCharT>(),
 5343|  2.46k|                    specs.regexp_flags, value);
 5344|       |
 5345|    130|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 130, False: 3.64k]
  ------------------
 5346|    130|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|    130|                    range,
 5348|    130|                    get_unescaped_regex_pattern(
 5349|    130|                        specs.charset_string<SourceCharT>()),
 5350|    130|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 3.77k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  3.77k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  3.77k|        }
 5357|       |
 5358|  3.77k|        SCN_CLANG_POP
 5359|  3.77k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|    940|    {
 4850|    940|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|    940|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|    996|{
 4784|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 324, False: 672]
  ------------------
 4788|    324|        return detail::unexpected_scan_error(
 4789|    324|            scan_error::invalid_scanned_value,
 4790|    324|            "Invalid encoding in scanned string");
 4791|    324|    }
 4792|       |
 4793|    672|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    672|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 672]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    672|    return SCN_MOVE(result);
  ------------------
  |  |  934|    672|    static_cast<    \
  |  |  935|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    672|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|  1.55k|{
 3117|  1.55k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|  1.55k|        dest.assign(source.view());
 3119|       |    }
 3120|       |    else {
 3121|       |        return transcode_impl(source.view(), dest);
 3122|       |    }
 3123|       |
 3124|  1.55k|    return {};
 3125|  1.55k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.82k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|  2.82k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|  2.82k|        auto buf = make_contiguous_buffer(range);
 2191|  2.82k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|  2.82k|        return ranges::next(range.begin(),
 2193|  2.82k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|  2.82k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4870|     56|    {
 4871|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 28, False: 28]
  ------------------
 4872|     28|            return read_string_impl(
 4873|     28|                range,
 4874|     28|                read_until_code_unit(
 4875|     28|                    range,
 4876|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     28|                        SourceCharT ch) { return ch == until; }),
 4878|     28|                value);
 4879|     28|        }
 4880|     28|        return read_string_impl(
 4881|     28|            range,
 4882|     28|            read_until_code_units(
 4883|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|     28|            value);
 4885|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4877|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2105|     84|{
 2106|     84|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|     84|    if constexpr (ranges::common_range<Range>) {
 2109|     84|        return std::search(range.begin(), range.end(), needle.begin(),
 2110|     84|                           needle.end());
 2111|       |    }
 2112|       |    else {
 2113|       |        auto first = range.begin();
 2114|       |        while (true) {
 2115|       |            auto it = first;
 2116|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|       |                if (needle_it == needle.end()) {
 2118|       |                    return first;
 2119|       |                }
 2120|       |                if (it == range.end()) {
 2121|       |                    return it;
 2122|       |                }
 2123|       |                if (*it != *needle_it) {
 2124|       |                    break;
 2125|       |                }
 2126|       |            }
 2127|       |            ++first;
 2128|       |        }
 2129|       |    }
 2130|     84|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|    818|    {
 5078|    818|        auto it = read_source_impl(range, {specs});
 5079|    818|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 486]
  |  |  ------------------
  ------------------
 5080|    332|            return unexpected(it.error());
 5081|    332|        }
 5082|       |
 5083|    486|        return read_string_impl(range, *it, value);
 5084|    818|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5180|  2.45k|    {
 5181|  2.45k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|  2.45k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|  2.45k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.45k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.45k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|  2.45k|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|  2.45k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 2.19k, False: 258]
  ------------------
 5189|  2.19k|            const auto cb = [&](char32_t cp) {
 5190|  2.19k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|  2.19k|            };
 5192|       |
 5193|  2.19k|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 198, False: 1.99k]
  ------------------
 5194|    198|                auto it = read_until_code_point(range, cb);
 5195|    198|                return check_nonempty(it, range);
 5196|    198|            }
 5197|  1.99k|            auto it = read_while_code_point(range, cb);
 5198|  1.99k|            return check_nonempty(it, range);
 5199|  2.19k|        }
 5200|       |
 5201|    258|        const auto cb = [&](SourceCharT ch) {
 5202|    258|            return cb_wrapper.on_ascii_only(ch);
 5203|    258|        };
 5204|       |
 5205|    258|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 114, False: 144]
  ------------------
 5206|    114|            auto it = read_until_code_unit(range, cb);
 5207|    114|            return check_nonempty(it, range);
 5208|    114|        }
 5209|    144|        auto it = read_while_code_unit(range, cb);
 5210|    144|        return check_nonempty(it, range);
 5211|    258|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  2.19k|{
 2160|  2.19k|    auto it = range.begin();
 2161|   239k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 239k, False: 150]
  ------------------
 2162|   239k|        const auto val =
 2163|   239k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   239k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   239k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 238k, False: 954]
  |  |  ------------------
  ------------------
 2165|   238k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   238k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   238k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.04k, False: 236k]
  ------------------
 2168|  2.04k|                return it;
 2169|  2.04k|            }
 2170|   238k|        }
 2171|   237k|        it = val.iterator;
 2172|   237k|    }
 2173|       |
 2174|    150|    return it;
 2175|  2.19k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   239k|{
 1998|   239k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   239k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   239k|    auto it = range.begin();
 2002|   239k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   239k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 954, False: 238k]
  |  |  ------------------
  ------------------
 2005|    954|        ++it;
 2006|    954|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|    954|        return {it, {}};
 2008|    954|    }
 2009|       |
 2010|   238k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 206k, False: 32.3k]
  ------------------
 2011|   206k|        ++it;
 2012|   206k|        return {it, string_type(1, *range.begin())};
 2013|   206k|    }
 2014|       |
 2015|  32.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  32.3k|    return {it, string_type{range.begin(), it}};
 2017|   238k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1264|    954|{
 1265|    954|    auto it = input.begin();
 1266|  1.46k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.41k, False: 54]
  ------------------
 1267|  1.41k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 900, False: 510]
  ------------------
 1268|    900|            break;
 1269|    900|        }
 1270|  1.41k|    }
 1271|    954|    return it;
 1272|    954|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  32.3k|    {
  283|  32.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  32.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  32.3k|    {
  212|  32.3k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 66, False: 32.2k]
  ------------------
  213|     66|            auto dist = bound - i;
  214|     66|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     66|            return dist;
  216|     66|        }
  217|  32.2k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  32.2k|        return n;
  219|  32.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|  64.7k|    {
  132|  64.7k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 64.7k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  64.7k|        return t;
  136|  64.7k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   239k|    {
 1989|   239k|        return !codepoint.empty();
 1990|   239k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  2.19k|        : m_fptr([](storage fn,
  743|  2.19k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.19k|              cvref<T> obj = *get<T>(fn);
  745|  2.19k|              if constexpr (std::is_void_v<R>) {
  746|  2.19k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.19k|              }
  748|  2.19k|              else {
  749|  2.19k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.19k|              }
  751|  2.19k|          }),
  752|  2.19k|          m_storage(std::addressof(f))
  753|  2.19k|    {
  754|  2.19k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   238k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   238k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   238k|              else {
  749|   238k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   238k|              }
  751|   238k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   238k|    {
  684|   238k|        if constexpr (std::is_const_v<T>) {
  685|   238k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   238k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5189|   238k|            const auto cb = [&](char32_t cp) {
 5190|   238k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|   238k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  2.19k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.19k|        {
  667|  2.19k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5216|  2.45k|    {
 5217|  2.45k|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 996, False: 1.45k]
  ------------------
 5218|    996|            return detail::unexpected_scan_error(
 5219|    996|                scan_error::invalid_scanned_value,
 5220|    996|                "No characters matched in [character set]");
 5221|    996|        }
 5222|       |
 5223|  1.45k|        return it;
 5224|  2.45k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.99k|{
 2181|  1.99k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.99k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    258|        : m_fptr([](storage fn,
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|    258|              if constexpr (std::is_void_v<R>) {
  746|    258|                  obj(static_cast<decltype(args)>(args)...);
  747|    258|              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
  752|    258|          m_storage(std::addressof(f))
  753|    258|    {
  754|    258|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.37k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.37k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.37k|              else {
  749|  3.37k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.37k|              }
  751|  3.37k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.37k|    {
  684|  3.37k|        if constexpr (std::is_const_v<T>) {
  685|  3.37k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.37k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5201|  3.37k|        const auto cb = [&](SourceCharT ch) {
 5202|  3.37k|            return cb_wrapper.on_ascii_only(ch);
 5203|  3.37k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    258|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    258|        {
  667|    258|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    996|{
 4784|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 112, False: 884]
  ------------------
 4788|    112|        return detail::unexpected_scan_error(
 4789|    112|            scan_error::invalid_scanned_value,
 4790|    112|            "Invalid encoding in scanned string");
 4791|    112|    }
 4792|       |
 4793|    884|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    884|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 884]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    884|    return SCN_MOVE(result);
  ------------------
  |  |  934|    884|    static_cast<    \
  |  |  935|    884|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    884|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|  2.59k|    {
 4921|  2.59k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|  2.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|    510|        return read_string_impl(range, it, value);
 4923|  2.59k|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4942|  7.77k|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|  7.77k|        else {
 4950|  7.77k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 0, False: 7.77k]
  ------------------
 4951|      0|                return detail::unexpected_scan_error(
 4952|      0|                    scan_error::invalid_format_string,
 4953|      0|                    "Cannot use regex with a non-contiguous source "
 4954|      0|                    "range");
 4955|      0|            }
 4956|       |
 4957|  7.77k|            auto input = get_as_contiguous(range);
 4958|  7.77k|            SCN_TRY(it,
  ------------------
  |  | 3940|  7.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  7.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  7.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.24k, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.24k|    }                                                  \
  |  |  |  | 3939|  7.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|  1.53k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|  1.53k|            return ranges::next(range.begin(),
 4961|  1.53k|                                ranges::distance(input.begin(), it));
 4962|  7.77k|        }
 4963|  7.77k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|  7.77k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  7.77k|                  ranges::sized_range<Range>) {
  962|  7.77k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  7.77k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|  7.77k|{
 1066|  7.77k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  7.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  7.77k|                  ranges::sized_range<Range>) {
 1070|  7.77k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  7.77k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|  7.77k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  7.77k|                  ranges::sized_range<Range>) {
  984|  7.77k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  7.77k|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4367|  7.77k|{
 4368|  7.77k|    static_assert(ranges::contiguous_range<Input> &&
 4369|  7.77k|                  ranges::borrowed_range<Input> &&
 4370|  7.77k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4371|       |
 4372|  7.77k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4373|  7.77k|    std::basic_regex<CharT> re{};
 4374|  7.77k|    try {
 4375|  7.77k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  7.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  7.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  7.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  7.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4376|  7.77k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4377|  7.77k|                                     re_flags | std::regex_constants::nosubs};
 4378|  7.77k|    }
 4379|  7.77k|    catch (const std::regex_error& err) {
 4380|  3.70k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4381|  3.70k|                                             "Invalid regex");
 4382|  3.70k|    }
 4383|       |
 4384|  4.06k|    std::match_results<const CharT*> matches{};
 4385|  4.06k|    try {
 4386|  4.06k|        bool found = std::regex_search(input.data(),
 4387|  4.06k|                                       input.data() + input.size(), matches, re,
 4388|  4.06k|                                       std::regex_constants::match_continuous);
 4389|  4.06k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4389:13): [True: 2.53k, False: 1.53k]
  |  Branch (4389:23): [True: 0, False: 1.53k]
  ------------------
 4390|  2.40k|            return detail::unexpected_scan_error(
 4391|  2.40k|                scan_error::invalid_scanned_value,
 4392|  2.40k|                "Regular expression didn't match");
 4393|  2.40k|        }
 4394|  4.06k|    }
 4395|  4.06k|    catch (const std::regex_error& err) {
 4396|    132|        return detail::unexpected_scan_error(
 4397|    132|            scan_error::invalid_format_string,
 4398|    132|            "Regex matching failed with an error");
 4399|    132|    }
 4400|       |
 4401|  1.53k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4402|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4403|       |    auto re =
 4404|       |#if SCN_REGEX_BOOST_USE_ICU
 4405|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4406|       |                             make_regex_flags(flags) |
 4407|       |                                 boost::regex_constants::no_except |
 4408|       |                                 boost::regex_constants::nosubs);
 4409|       |#else
 4410|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4411|       |                                  make_regex_flags(flags) |
 4412|       |                                      boost::regex_constants::no_except |
 4413|       |                                      boost::regex_constants::nosubs};
 4414|       |#endif
 4415|       |    if (re.status() != 0) {
 4416|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4417|       |                                             "Invalid regex");
 4418|       |    }
 4419|       |
 4420|       |    boost::match_results<const CharT*> matches{};
 4421|       |    try {
 4422|       |        bool found =
 4423|       |#if SCN_REGEX_BOOST_USE_ICU
 4424|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4425|       |                                   matches, re,
 4426|       |                                   boost::regex_constants::match_continuous);
 4427|       |#else
 4428|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4429|       |                                matches, re,
 4430|       |                                boost::regex_constants::match_continuous);
 4431|       |#endif
 4432|       |        if (!found || matches.prefix().matched) {
 4433|       |            return detail::unexpected_scan_error(
 4434|       |                scan_error::invalid_scanned_value,
 4435|       |                "Regular expression didn't match");
 4436|       |        }
 4437|       |    }
 4438|       |    catch (const std::runtime_error& err) {
 4439|       |        return detail::unexpected_scan_error(
 4440|       |            scan_error::invalid_format_string,
 4441|       |            "Regex matching failed with an error");
 4442|       |    }
 4443|       |
 4444|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4445|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4446|       |    static_assert(std::is_same_v<CharT, char>);
 4447|       |    std::string flagged_pattern{};
 4448|       |    auto re = [&]() {
 4449|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4450|       |        opts.set_never_capture(true);
 4451|       |        if (flagstr.empty()) {
 4452|       |            return re2::RE2{pattern, opts};
 4453|       |        }
 4454|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4455|       |        flagged_pattern.append(flagstr);
 4456|       |        flagged_pattern.append(pattern);
 4457|       |        return re2::RE2{flagged_pattern, opts};
 4458|       |    }();
 4459|       |    if (!re.ok()) {
 4460|       |        return detail::unexpected_scan_error(
 4461|       |            scan_error::invalid_format_string,
 4462|       |            "Failed to parse regular expression");
 4463|       |    }
 4464|       |
 4465|       |    auto new_input = detail::make_string_view_from_pointers(
 4466|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4467|       |    bool found = re2::RE2::Consume(&new_input, re);
 4468|       |    if (!found) {
 4469|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4470|       |                                             "Regular expression didn't match");
 4471|       |    }
 4472|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4473|       |#endif  // SCN_REGEX_BACKEND == ...
 4474|  4.06k|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5837|  5.08k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|  5.08k|                       std::is_same_v<T, std::wstring>) {
 5856|  5.08k|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  5.08k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|    344|{
 3097|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|       |        if (source.stores_allocated_string()) {
 3099|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3100|       |        }
 3101|       |        else {
 3102|       |            dest.assign(source.view());
 3103|       |        }
 3104|       |    }
 3105|    344|    else {
 3106|    344|        return transcode_impl(source.view(), dest);
 3107|    344|    }
 3108|       |
 3109|      0|    return {};
 3110|    344|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3071|  1.90k|{
 3072|  1.90k|    dst.clear();
 3073|  1.90k|    transcode_valid_to_string(src, dst);
 3074|  1.90k|    return {};
 3075|  1.90k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.90k|{
 1502|  1.90k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.90k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|  1.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|  1.90k|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|  1.90k|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|  1.90k|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|  1.90k|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|  1.90k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.90k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|  1.90k|{
 1376|  1.90k|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|  1.90k|    auto it = src.begin();
 1379|  96.7k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 94.8k, False: 1.90k]
  ------------------
 1380|  94.8k|        auto res = get_next_code_point_valid(
 1381|  94.8k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|  94.8k|                                                                 src.end()));
 1383|  94.8k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  930|  94.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|  94.8k|        dest.push_back(res.value);
 1385|  94.8k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|  94.8k|    }
 1387|  1.90k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|  94.8k|{
 1299|  94.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  94.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|  94.8k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|  94.8k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  930|  94.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|  94.8k|    return {input.begin() + len,
 1305|  94.8k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|  94.8k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|    530|    {
 5303|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    530|        return read_impl(range, specs, value);
 5305|    530|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|    530|    {
 5321|    530|        SCN_CLANG_PUSH
 5322|    530|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    530|        switch (m_type) {
 5325|    224|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 224, False: 306]
  ------------------
 5326|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 58, False: 472]
  ------------------
 5329|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     58|                                                                   value);
 5331|       |
 5332|     30|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 30, False: 500]
  ------------------
 5333|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    212|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 212, False: 318]
  ------------------
 5336|    212|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    212|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      2|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2, False: 528]
  ------------------
 5341|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      2|                    range, specs.charset_string<SourceCharT>(),
 5343|      2|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 526]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 530]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    530|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    530|        }
 5357|       |
 5358|    530|        SCN_CLANG_POP
 5359|    530|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|    224|    {
 4850|    224|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|    224|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|    312|{
 4784|    312|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    312|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    312|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 114, False: 198]
  ------------------
 4788|    114|        return detail::unexpected_scan_error(
 4789|    114|            scan_error::invalid_scanned_value,
 4790|    114|            "Invalid encoding in scanned string");
 4791|    114|    }
 4792|       |
 4793|    198|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    198|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 198]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    198|    return SCN_MOVE(result);
  ------------------
  |  |  934|    198|    static_cast<    \
  |  |  935|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    198|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4870|     58|    {
 4871|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 30, False: 28]
  ------------------
 4872|     30|            return read_string_impl(
 4873|     30|                range,
 4874|     30|                read_until_code_unit(
 4875|     30|                    range,
 4876|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     30|                        SourceCharT ch) { return ch == until; }),
 4878|     30|                value);
 4879|     30|        }
 4880|     28|        return read_string_impl(
 4881|     28|            range,
 4882|     28|            read_until_code_units(
 4883|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|     28|            value);
 4885|     58|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    620|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    620|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    620|              else {
  749|    620|                  return obj(static_cast<decltype(args)>(args)...);
  750|    620|              }
  751|    620|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    620|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    620|        else if constexpr (std::is_object_v<T>) {
  688|    620|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    620|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4877|    620|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4976|     30|    {
 4977|     30|        return read_impl(
 4978|     30|            range,
 4979|     30|            [&](const auto& rng) {
 4980|     30|                return read_string_impl(rng, read_all(rng), value);
 4981|     30|            },
 4982|     30|            detail::priority_tag<1>{});
 4983|     30|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|     30|    {
 5004|     30|        return read_cb(range);
 5005|     30|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4979|     30|            [&](const auto& rng) {
 4980|     30|                return read_string_impl(rng, read_all(rng), value);
 4981|     30|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5077|    212|    {
 5078|    212|        auto it = read_source_impl(range, {specs});
 5079|    212|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 200]
  |  |  ------------------
  ------------------
 5080|     12|            return unexpected(it.error());
 5081|     12|        }
 5082|       |
 5083|    200|        return read_string_impl(range, *it, value);
 5084|    212|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4783|    200|{
 4784|    200|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    200|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    200|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 54, False: 146]
  ------------------
 4788|     54|        return detail::unexpected_scan_error(
 4789|     54|            scan_error::invalid_scanned_value,
 4790|     54|            "Invalid encoding in scanned string");
 4791|     54|    }
 4792|       |
 4793|    146|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    146|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 146]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    146|    return SCN_MOVE(result);
  ------------------
  |  |  934|    146|    static_cast<    \
  |  |  935|    146|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    146|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      6|    {
 4921|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      6|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|  3.77k|    {
 5303|  3.77k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  3.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  3.77k|        return read_impl(range, specs, value);
 5305|  3.77k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|  3.77k|    {
 5321|  3.77k|        SCN_CLANG_PUSH
 5322|  3.77k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  3.77k|        switch (m_type) {
 5325|    310|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 310, False: 3.46k]
  ------------------
 5326|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 56, False: 3.71k]
  ------------------
 5329|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     56|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 3.77k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    818|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 818, False: 2.95k]
  ------------------
 5336|    818|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    818|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  2.46k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2.46k, False: 1.31k]
  ------------------
 5341|  2.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  2.46k|                    range, specs.charset_string<SourceCharT>(),
 5343|  2.46k|                    specs.regexp_flags, value);
 5344|       |
 5345|    130|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 130, False: 3.64k]
  ------------------
 5346|    130|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|    130|                    range,
 5348|    130|                    get_unescaped_regex_pattern(
 5349|    130|                        specs.charset_string<SourceCharT>()),
 5350|    130|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 3.77k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  3.77k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  3.77k|        }
 5357|       |
 5358|  3.77k|        SCN_CLANG_POP
 5359|  3.77k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|    940|    {
 4850|    940|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|    940|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|    996|{
 4784|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 324, False: 672]
  ------------------
 4788|    324|        return detail::unexpected_scan_error(
 4789|    324|            scan_error::invalid_scanned_value,
 4790|    324|            "Invalid encoding in scanned string");
 4791|    324|    }
 4792|       |
 4793|    672|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    672|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 672]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    672|    return SCN_MOVE(result);
  ------------------
  |  |  934|    672|    static_cast<    \
  |  |  935|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    672|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|  1.55k|{
 3117|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|       |        dest.assign(source.view());
 3119|       |    }
 3120|  1.55k|    else {
 3121|  1.55k|        return transcode_impl(source.view(), dest);
 3122|  1.55k|    }
 3123|       |
 3124|      0|    return {};
 3125|  1.55k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4870|     56|    {
 4871|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 28, False: 28]
  ------------------
 4872|     28|            return read_string_impl(
 4873|     28|                range,
 4874|     28|                read_until_code_unit(
 4875|     28|                    range,
 4876|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     28|                        SourceCharT ch) { return ch == until; }),
 4878|     28|                value);
 4879|     28|        }
 4880|     28|        return read_string_impl(
 4881|     28|            range,
 4882|     28|            read_until_code_units(
 4883|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|     28|            value);
 4885|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4877|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|    818|    {
 5078|    818|        auto it = read_source_impl(range, {specs});
 5079|    818|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 486]
  |  |  ------------------
  ------------------
 5080|    332|            return unexpected(it.error());
 5081|    332|        }
 5082|       |
 5083|    486|        return read_string_impl(range, *it, value);
 5084|    818|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    996|{
 4784|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 112, False: 884]
  ------------------
 4788|    112|        return detail::unexpected_scan_error(
 4789|    112|            scan_error::invalid_scanned_value,
 4790|    112|            "Invalid encoding in scanned string");
 4791|    112|    }
 4792|       |
 4793|    884|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    884|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 884]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    884|    return SCN_MOVE(result);
  ------------------
  |  |  934|    884|    static_cast<    \
  |  |  935|    884|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    884|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|  2.59k|    {
 4921|  2.59k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|  2.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|    510|        return read_string_impl(range, it, value);
 4923|  2.59k|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5837|  5.08k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|  5.08k|                       std::is_same_v<T, std::wstring_view>) {
 5852|  5.08k|        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|       |                       std::is_same_v<T, std::wstring>) {
 5856|       |        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  5.08k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|    530|    {
 5303|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    530|        return read_impl(range, specs, value);
 5305|    530|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|    530|    {
 5321|    530|        SCN_CLANG_PUSH
 5322|    530|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    530|        switch (m_type) {
 5325|    224|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 224, False: 306]
  ------------------
 5326|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 58, False: 472]
  ------------------
 5329|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     58|                                                                   value);
 5331|       |
 5332|     30|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 30, False: 500]
  ------------------
 5333|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    212|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 212, False: 318]
  ------------------
 5336|    212|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    212|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      2|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2, False: 528]
  ------------------
 5341|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      2|                    range, specs.charset_string<SourceCharT>(),
 5343|      2|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 526]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 530]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    530|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    530|        }
 5357|       |
 5358|    530|        SCN_CLANG_POP
 5359|    530|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4856|    224|    {
 4857|    224|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|    224|                                     value);
 4859|    224|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4802|    312|{
 4803|    312|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    312|    auto src = [&]() {
 4806|    312|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    312|            return make_contiguous_buffer(
 4808|    312|                ranges::subrange{range.begin().base(), result.base()});
 4809|    312|        }
 4810|    312|        else {
 4811|    312|            return make_contiguous_buffer(
 4812|    312|                ranges::subrange{range.begin(), result});
 4813|    312|        }
 4814|    312|    }();
 4815|    312|    using src_type = decltype(src);
 4816|       |
 4817|    312|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    312|    else {
 4830|    312|        const auto view = src.view();
 4831|    312|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    312|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 114, False: 198]
  ------------------
 4834|    114|            return detail::unexpected_scan_error(
 4835|    114|                scan_error::invalid_scanned_value,
 4836|    114|                "Invalid encoding in scanned string_view");
 4837|    114|        }
 4838|       |
 4839|    198|        return SCN_MOVE(result);
  ------------------
  |  |  934|    198|    static_cast<    \
  |  |  935|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    312|    }
 4841|    312|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4805|    312|    auto src = [&]() {
 4806|    312|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    312|            return make_contiguous_buffer(
 4808|    312|                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|       |        else {
 4811|       |            return make_contiguous_buffer(
 4812|       |                ranges::subrange{range.begin(), result});
 4813|       |        }
 4814|    312|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4892|     58|    {
 4893|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4893:13): [True: 30, False: 28]
  ------------------
 4894|     30|            return read_string_view_impl(
 4895|     30|                range,
 4896|     30|                read_until_code_unit(
 4897|     30|                    range,
 4898|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4899|     30|                        SourceCharT ch) { return ch == until; }),
 4900|     30|                value);
 4901|     30|        }
 4902|     28|        return read_string_view_impl(
 4903|     28|            range,
 4904|     28|            read_until_code_units(
 4905|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4906|     28|            value);
 4907|     58|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    620|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    620|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    620|              else {
  749|    620|                  return obj(static_cast<decltype(args)>(args)...);
  750|    620|              }
  751|    620|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    620|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    620|        else if constexpr (std::is_object_v<T>) {
  688|    620|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    620|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4899|    620|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4988|     30|    {
 4989|     30|        return read_impl(
 4990|     30|            range,
 4991|     30|            [&](const auto& rng) {
 4992|     30|                return read_string_view_impl(rng, read_all(rng), value);
 4993|     30|            },
 4994|     30|            detail::priority_tag<1>{});
 4995|     30|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|     30|    {
 5004|     30|        return read_cb(range);
 5005|     30|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4991|     30|            [&](const auto& rng) {
 4992|     30|                return read_string_view_impl(rng, read_all(rng), value);
 4993|     30|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5091|    212|    {
 5092|    212|        auto it = read_source_impl(range, {specs});
 5093|    212|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 200]
  |  |  ------------------
  ------------------
 5094|     12|            return unexpected(it.error());
 5095|     12|        }
 5096|       |
 5097|    200|        return read_string_view_impl(range, *it, value);
 5098|    212|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4802|    200|{
 4803|    200|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    200|    auto src = [&]() {
 4806|    200|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    200|            return make_contiguous_buffer(
 4808|    200|                ranges::subrange{range.begin().base(), result.base()});
 4809|    200|        }
 4810|    200|        else {
 4811|    200|            return make_contiguous_buffer(
 4812|    200|                ranges::subrange{range.begin(), result});
 4813|    200|        }
 4814|    200|    }();
 4815|    200|    using src_type = decltype(src);
 4816|       |
 4817|    200|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    200|    else {
 4830|    200|        const auto view = src.view();
 4831|    200|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    200|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 54, False: 146]
  ------------------
 4834|     54|            return detail::unexpected_scan_error(
 4835|     54|                scan_error::invalid_scanned_value,
 4836|     54|                "Invalid encoding in scanned string_view");
 4837|     54|        }
 4838|       |
 4839|    146|        return SCN_MOVE(result);
  ------------------
  |  |  934|    146|    static_cast<    \
  |  |  935|    146|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    200|    }
 4841|    200|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4805|    200|    auto src = [&]() {
 4806|    200|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    200|            return make_contiguous_buffer(
 4808|    200|                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|       |        else {
 4811|       |            return make_contiguous_buffer(
 4812|       |                ranges::subrange{range.begin(), result});
 4813|       |        }
 4814|    200|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4931|      6|    {
 4932|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_view_impl(range, it, value);
 4934|      6|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5302|  3.77k|    {
 5303|  3.77k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  3.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  3.77k|        return read_impl(range, specs, value);
 5305|  3.77k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5320|  3.77k|    {
 5321|  3.77k|        SCN_CLANG_PUSH
 5322|  3.77k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  3.77k|        switch (m_type) {
 5325|    310|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 310, False: 3.46k]
  ------------------
 5326|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 56, False: 3.71k]
  ------------------
 5329|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     56|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 3.77k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    818|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 818, False: 2.95k]
  ------------------
 5336|    818|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    818|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  2.46k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2.46k, False: 1.31k]
  ------------------
 5341|  2.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  2.46k|                    range, specs.charset_string<SourceCharT>(),
 5343|  2.46k|                    specs.regexp_flags, value);
 5344|       |
 5345|    130|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 130, False: 3.64k]
  ------------------
 5346|    130|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|    130|                    range,
 5348|    130|                    get_unescaped_regex_pattern(
 5349|    130|                        specs.charset_string<SourceCharT>()),
 5350|    130|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 3.77k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  3.77k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  3.77k|        }
 5357|       |
 5358|  3.77k|        SCN_CLANG_POP
 5359|  3.77k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4856|    940|    {
 4857|    940|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|    940|                                     value);
 4859|    940|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4802|    996|{
 4803|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    996|    auto src = [&]() {
 4806|    996|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    996|            return make_contiguous_buffer(
 4808|    996|                ranges::subrange{range.begin().base(), result.base()});
 4809|    996|        }
 4810|    996|        else {
 4811|    996|            return make_contiguous_buffer(
 4812|    996|                ranges::subrange{range.begin(), result});
 4813|    996|        }
 4814|    996|    }();
 4815|    996|    using src_type = decltype(src);
 4816|       |
 4817|    996|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    996|    else {
 4830|    996|        const auto view = src.view();
 4831|    996|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    996|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 324, False: 672]
  ------------------
 4834|    324|            return detail::unexpected_scan_error(
 4835|    324|                scan_error::invalid_scanned_value,
 4836|    324|                "Invalid encoding in scanned string_view");
 4837|    324|        }
 4838|       |
 4839|    672|        return SCN_MOVE(result);
  ------------------
  |  |  934|    672|    static_cast<    \
  |  |  935|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    996|    }
 4841|    996|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4805|    996|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    996|        else {
 4811|    996|            return make_contiguous_buffer(
 4812|    996|                ranges::subrange{range.begin(), result});
 4813|    996|        }
 4814|    996|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4892|     56|    {
 4893|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4893:13): [True: 28, False: 28]
  ------------------
 4894|     28|            return read_string_view_impl(
 4895|     28|                range,
 4896|     28|                read_until_code_unit(
 4897|     28|                    range,
 4898|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4899|     28|                        SourceCharT ch) { return ch == until; }),
 4900|     28|                value);
 4901|     28|        }
 4902|     28|        return read_string_view_impl(
 4903|     28|            range,
 4904|     28|            read_until_code_units(
 4905|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4906|     28|            value);
 4907|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4899|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5091|    818|    {
 5092|    818|        auto it = read_source_impl(range, {specs});
 5093|    818|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 486]
  |  |  ------------------
  ------------------
 5094|    332|            return unexpected(it.error());
 5095|    332|        }
 5096|       |
 5097|    486|        return read_string_view_impl(range, *it, value);
 5098|    818|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4802|    996|{
 4803|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    996|    auto src = [&]() {
 4806|    996|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    996|            return make_contiguous_buffer(
 4808|    996|                ranges::subrange{range.begin().base(), result.base()});
 4809|    996|        }
 4810|    996|        else {
 4811|    996|            return make_contiguous_buffer(
 4812|    996|                ranges::subrange{range.begin(), result});
 4813|    996|        }
 4814|    996|    }();
 4815|    996|    using src_type = decltype(src);
 4816|       |
 4817|    996|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    996|    else {
 4830|    996|        const auto view = src.view();
 4831|    996|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    996|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 112, False: 884]
  ------------------
 4834|    112|            return detail::unexpected_scan_error(
 4835|    112|                scan_error::invalid_scanned_value,
 4836|    112|                "Invalid encoding in scanned string_view");
 4837|    112|        }
 4838|       |
 4839|    884|        return SCN_MOVE(result);
  ------------------
  |  |  934|    884|    static_cast<    \
  |  |  935|    884|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    996|    }
 4841|    996|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4805|    996|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    996|        else {
 4811|    996|            return make_contiguous_buffer(
 4812|    996|                ranges::subrange{range.begin(), result});
 4813|    996|        }
 4814|    996|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4931|  2.59k|    {
 4932|  2.59k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|  2.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|    510|        return read_string_view_impl(range, it, value);
 4934|  2.59k|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5650|  2.38k|    {
 5651|  2.38k|        reader_error_handler eh{};
 5652|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5653|       |            detail::check_code_point_type_specs(specs, eh);
 5654|       |        }
 5655|  2.38k|        else {
 5656|  2.38k|            detail::check_char_type_specs(specs, eh);
 5657|  2.38k|        }
 5658|  2.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.96k, False: 422]
  |  |  ------------------
  ------------------
 5659|  1.96k|            return detail::unexpected_scan_error(
 5660|  1.96k|                scan_error::invalid_format_string, eh.m_msg);
 5661|  1.96k|        }
 5662|    422|        return {};
 5663|  2.38k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  8.30k|    {
  763|  8.30k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.30k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.22k|        : m_fptr([](storage fn,
  743|  1.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.22k|              cvref<T> obj = *get<T>(fn);
  745|  1.22k|              if constexpr (std::is_void_v<R>) {
  746|  1.22k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.22k|              }
  748|  1.22k|              else {
  749|  1.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.22k|              }
  751|  1.22k|          }),
  752|  1.22k|          m_storage(std::addressof(f))
  753|  1.22k|    {
  754|  1.22k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.87k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.87k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.87k|              else {
  749|  2.87k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.87k|              }
  751|  2.87k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.87k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.87k|        else if constexpr (std::is_object_v<T>) {
  688|  2.87k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.87k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.22k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.22k|        {
  662|  1.22k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5645|  1.26k|    {
 5646|  1.26k|        return false;
 5647|  1.26k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|     78|    {
 1879|     78|        auto stdloc = loc.get<std::locale>();
 1880|     78|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     78|        grouping = numpunct.grouping();
 1882|     78|        thousands_sep =
 1883|     78|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 78]
  ------------------
 1884|     78|        decimal_point = numpunct.decimal_point();
 1885|     78|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|     94|{
 1816|     94|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 94, False: 0]
  ------------------
 1817|     94|        return std::use_facet<Facet>(stdloc);
 1818|     94|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     94|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  3.41k|{
 2449|  3.41k|    size_t count{0};
 2450|  3.41k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  3.41k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  3.41k|    });
 2453|  3.41k|    return count;
 2454|  3.41k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  3.41k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  3.41k|    auto it = input.begin();
 1547|  10.6k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 7.20k, False: 3.41k]
  ------------------
 1548|  7.20k|        auto res = get_next_code_point(
 1549|  7.20k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  7.20k|        cb(res.value);
 1551|  7.20k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  7.20k|    }
 1553|  3.41k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   322M|{
 1279|   322M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   322M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   322M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   322M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   322M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   322M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 322M]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|   322M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   322M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 322M]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|   322M|    return {input.begin() + len,
 1291|   322M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   322M|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.41k|        : m_fptr([](storage fn,
  743|  3.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.41k|              cvref<T> obj = *get<T>(fn);
  745|  3.41k|              if constexpr (std::is_void_v<R>) {
  746|  3.41k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.41k|              }
  748|  3.41k|              else {
  749|  3.41k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.41k|              }
  751|  3.41k|          }),
  752|  3.41k|          m_storage(std::addressof(f))
  753|  3.41k|    {
  754|  3.41k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  7.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.20k|              cvref<T> obj = *get<T>(fn);
  745|  7.20k|              if constexpr (std::is_void_v<R>) {
  746|  7.20k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  7.20k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.20k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.20k|        else if constexpr (std::is_object_v<T>) {
  688|  7.20k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.20k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  7.20k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  7.20k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  7.20k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.41k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.41k|        {
  662|  3.41k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  2.04k|    {
 1681|  2.04k|        return m_view;
 1682|  2.04k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.13k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2520|    420|    {
 2521|    420|        return m_multibyte_left;
 2522|    420|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2525|  21.9k|    {
 2526|  21.9k|        return *m_current;
 2527|  21.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2534|  16.1k|    {
 2535|  16.1k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|  16.1k|        _increment_current();
 2537|  16.1k|        return *this;
 2538|  16.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2767|  16.1k|    {
 2768|  16.1k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 16.1k, False: 0]
  ------------------
 2769|  16.1k|            auto cplen = _get_cp_length_at_current();
 2770|  16.1k|            m_multibyte_left = cplen - 1;
 2771|  16.1k|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|  16.1k|        }
 2773|      0|        else {
 2774|      0|            --m_multibyte_left;
 2775|      0|        }
 2776|       |
 2777|  16.1k|        ++m_current;
 2778|  16.1k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2738|  16.1k|    {
 2739|  16.1k|        return static_cast<difference_type>(
 2740|  16.1k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|  16.1k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2744|  16.1k|    {
 2745|  16.1k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 2746|      0|            return 0;
 2747|      0|        }
 2748|       |
 2749|  16.1k|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 16.1k, False: 0]
  ------------------
 2750|  16.1k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|  16.1k|            auto cp = static_cast<char32_t>(*m_current);
 2752|  16.1k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|  16.1k|        }
 2754|       |
 2755|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|      0|                                           cplen);
 2757|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2758|      0|            return 0;
 2759|      0|        }
 2760|       |
 2761|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|      0|        return static_cast<difference_type>(
 2763|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  4.81k|{
 1956|  4.81k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  4.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  4.81k|    if constexpr (ranges::sized_range<Range>) {
 1959|  4.81k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  4.81k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 126, False: 4.69k]
  ------------------
 1961|    126|            return unexpected(eof_error::eof);
 1962|    126|        }
 1963|       |
 1964|  4.69k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  4.81k|}
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2630|  5.63k|    {
 2631|  5.63k|        return !(a == b);
 2632|  5.63k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2622|  6.24k|    {
 2623|  6.24k|        return a.m_current == b.m_current;
 2624|  6.24k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2529|  1.46k|    {
 2530|  1.46k|        return *m_current;
 2531|  1.46k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  5.78k|    {
 1989|  5.78k|        return !codepoint.empty();
 1990|  5.78k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|    366|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|    366|    else {
 1788|    366|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|    366|    }
 1790|    366|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|    366|    {
 1636|    366|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|    366|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|    366|    {
 1720|    366|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|    366|        else {
 1753|    366|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|    366|            if constexpr (ranges::common_range<Range>) {
 1758|    366|                std::copy(ranges::begin(range), ranges::end(range),
 1759|    366|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|    366|            m_view = string_view_type{str};
 1768|    366|        }
 1769|    366|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2480|  7.13k|        : m_current(x), m_end(s), m_count(n)
 2481|  7.13k|    {
 2482|  7.13k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2512|  23.3k|    {
 2513|  23.3k|        return m_current;
 2514|  23.3k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  1.70k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.70k|    else {
 2225|  1.70k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.70k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.70k|            return detail::is_cp_space(cp);
 2238|  1.70k|        });
 2239|  1.70k|    }
 2240|  1.70k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2180|  1.70k|{
 2181|  1.70k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.70k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2159|  1.70k|{
 2160|  1.70k|    auto it = range.begin();
 2161|  2.75k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.76k, False: 986]
  ------------------
 2162|  1.76k|        const auto val =
 2163|  1.76k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.76k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.76k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.76k, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.76k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.76k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.76k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 716, False: 1.05k]
  ------------------
 2168|    716|                return it;
 2169|    716|            }
 2170|  1.76k|        }
 2171|  1.05k|        it = val.iterator;
 2172|  1.05k|    }
 2173|       |
 2174|    986|    return it;
 2175|  1.70k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  36.7k|{
 1998|  36.7k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  36.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  36.7k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  36.7k|    auto it = range.begin();
 2002|  36.7k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  36.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  36.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 36.7k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  36.7k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 36.7k, False: 0]
  ------------------
 2011|  36.7k|        ++it;
 2012|  36.7k|        return {it, string_type(1, *range.begin())};
 2013|  36.7k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  36.7k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  54.7k|{
  945|  54.7k|    return is_range_eof(r.begin(), r.end());
  946|  54.7k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   322M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   322M|    {
  938|   322M|        return begin == end;
  939|   322M|    }
  940|   322M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    776|    {
  190|    776|        i = std::move(bound);
  191|    776|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  36.7k|    {
 1989|  36.7k|        return !codepoint.empty();
 1990|  36.7k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  1.70k|        : m_fptr([](storage fn,
  743|  1.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.70k|              cvref<T> obj = *get<T>(fn);
  745|  1.70k|              if constexpr (std::is_void_v<R>) {
  746|  1.70k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.70k|              }
  748|  1.70k|              else {
  749|  1.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.70k|              }
  751|  1.70k|          }),
  752|  1.70k|          m_storage(std::addressof(f))
  753|  1.70k|    {
  754|  1.70k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.76k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.76k|              else {
  749|  1.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.76k|              }
  751|  1.76k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.76k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.76k|        else if constexpr (std::is_object_v<T>) {
  688|  1.76k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.76k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2236|  1.76k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.76k|            return detail::is_cp_space(cp);
 2238|  1.76k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  1.70k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.70k|        {
  662|  1.70k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  17.9k|{
  951|  17.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.9k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  17.9k|    return eof_error::good;
  955|  17.9k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2931|  2.74k|    {
 2932|  2.74k|        return take_width_view{r, n};
 2933|  2.74k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2899|  2.74k|        : m_base(base), m_count(count)
 2900|  2.74k|    {
 2901|  2.74k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2813|  2.74k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5726|    100|    {
 5727|    100|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5727:13): [True: 80, False: 20]
  ------------------
 5728|    100|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5728:13): [True: 0, False: 20]
  ------------------
 5729|     80|            return read_default(range, value, loc);
 5730|     80|        }
 5731|       |
 5732|     20|        reader_impl_for_int<CharT> reader{};
 5733|     20|        using integer_type =
 5734|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5735|     20|        integer_type tmp_value{};
 5736|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5737|     20|        value = static_cast<integer_type>(value);
 5738|     20|        return ret;
 5739|    100|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5710|     80|    {
 5711|     80|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     80|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5712|       |        if constexpr (std::is_same_v<CharT, char>) {
 5713|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5714|       |        }
 5715|     80|        else {
 5716|     80|            return code_unit_reader<wchar_t>{}.read(range, value);
 5717|     80|        }
 5718|     80|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5590|     80|    {
 5591|     80|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     80|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     80|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     80|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     80|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|     80|        ch = *range.begin();
 5593|     80|        return it;
 5594|     80|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|    756|{
 1945|    756|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    756|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 756]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|    756|    return ranges::next(range.begin());
 1950|    756|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|    756|{
  951|    756|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    756|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 756]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    756|    return eof_error::good;
  955|    756|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|    756|{
  945|    756|    return is_range_eof(r.begin(), r.end());
  946|    756|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  6.58k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.58k|    {
  938|  6.58k|        return begin == end;
  939|  6.58k|    }
  940|  6.58k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2869|  21.4k|        {
 2870|  21.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 420, False: 21.0k]
  |  Branch (2870:39): [True: 420, False: 0]
  ------------------
 2871|  21.4k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 180, False: 20.8k]
  ------------------
 2872|  21.4k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2915|  10.4k|    {
 2916|  10.4k|        return sentinel<true>{m_base.get().end()};
 2917|  10.4k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2816|  24.7k|    {
 2817|  24.7k|        return view;
 2818|  24.7k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2850|  10.4k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  10.4k|    static_cast<    \
  |  |  935|  10.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    800|    {
  296|    800|        ++x;
  297|    800|        return x;
  298|    800|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2909|  7.13k|    {
 2910|  7.13k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|  7.13k|                                      m_count};
 2912|  7.13k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|    138|    {
 3579|    138|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    138|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    138|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 138]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|    138|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 138]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    138|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    138|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 120, False: 18]
  |  |  ------------------
  ------------------
 3605|    120|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 120, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    120|    }                                                  \
  |  |  |  | 3939|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|     18|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     18|            localized_number_formatting_options<CharT>{loc};
 3626|     18|#endif
 3627|       |
 3628|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3365|    338|{
 3366|    338|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|    338|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|    338|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|    338|        parse_integer_base_prefix(
 3371|    338|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|    338|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 338]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|    338|    else {
 3383|    338|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 338]
  |  Branch (3383:13): [True: 338, False: 0]
  ------------------
 3384|    338|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 338, False: 0]
  ------------------
 3385|    338|            digits_begin_it = base_prefix_begin_it;
 3386|    338|        }
 3387|    338|    }
 3388|       |
 3389|    338|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 338, False: 0]
  ------------------
 3390|    338|        sign = sign_type::plus_sign;
 3391|    338|    }
 3392|    338|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|    338|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|    338|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3246|    440|{
 3247|    440|    auto r = read_one_of_code_unit(range, "+-");
 3248|    440|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 440, False: 0]
  ------------------
 3249|    440|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 440, False: 0]
  ------------------
 3250|    440|            return std::pair{range.begin(), sign_type::default_sign};
 3251|    440|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|    440|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|    440|{
 2372|    440|    auto it = read_code_unit(range);
 2373|    440|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    440|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 440]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|    880|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 880, False: 440]
  ------------------
 2378|    880|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 880]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|    880|    }
 2382|       |
 2383|    440|    return unexpected(parse_error::error);
 2384|    440|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3332|    338|{
 3333|    338|    switch (base) {
 3334|      6|        case 2:
  ------------------
  |  Branch (3334:9): [True: 6, False: 332]
  ------------------
 3335|       |            // allow 0b/0B
 3336|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|      6|                    false};
 3338|       |
 3339|     22|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 22, False: 316]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|     22|            bool zero_parsed = false;
 3342|     22|            auto it = apply_opt(
 3343|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|     22|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|     92|        case 16:
  ------------------
  |  Branch (3347:9): [True: 92, False: 246]
  ------------------
 3348|       |            // allow 0x/0X
 3349|     92|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|     92|                    false};
 3351|       |
 3352|     22|        case 0:
  ------------------
  |  Branch (3352:9): [True: 22, False: 316]
  ------------------
 3353|       |            // detect base
 3354|     22|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|    196|        default:
  ------------------
  |  Branch (3356:9): [True: 196, False: 142]
  ------------------
 3357|       |            // no base prefix allowed
 3358|    196|            return {range.begin(), base, false};
 3359|    338|    }
 3360|    338|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    120|{
 2391|    120|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 120, False: 0]
  ------------------
 2392|    120|        return range.begin();
 2393|    120|    }
 2394|      0|    return *result;
 2395|    120|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3283|     28|{
 3284|     28|    return read_matching_string_classic_nocase(range, "0b");
 3285|     28|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|    484|{
 2331|    484|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|    484|    else {
 2344|    484|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    484|            if (ch < 'A' || ch > 'Z') {
 2346|    484|                return ch;
 2347|    484|            }
 2348|    484|            return static_cast<char_type>(ch +
 2349|    484|                                          static_cast<char_type>('a' - 'A'));
 2350|    484|        };
 2351|       |
 2352|    484|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 104, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    104|    }                                                  \
  |  |  |  | 3939|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    380|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    380|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    380|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 380, False: 0]
  |  |  ------------------
  ------------------
 2357|    380|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    380|                    return ascii_tolower(a) ==
 2359|    380|                           static_cast<detail::char_t<Range>>(b);
 2360|    380|                }))) {
 2361|    380|            return unexpected(parse_error::error);
 2362|    380|        }
 2363|       |
 2364|      0|        return it;
 2365|    380|    }
 2366|    484|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|    484|{
 1956|    484|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    484|    else {
 1967|    484|        auto it = range.begin();
 1968|    484|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 484]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.53k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.15k, False: 380]
  ------------------
 1973|  1.15k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 104, False: 1.04k]
  ------------------
 1974|    104|                return unexpected(eof_error::eof);
 1975|    104|            }
 1976|  1.15k|        }
 1977|       |
 1978|    380|        return it;
 1979|    484|    }
 1980|    484|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|    484|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    484|    else {
 1116|    484|        return 0;
 1117|    484|    }
 1118|    484|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2344|    380|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    380|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 32, False: 348]
  |  Branch (2345:29): [True: 348, False: 0]
  ------------------
 2346|    380|                return ch;
 2347|    380|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    380|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3297|     44|{
 3298|     44|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 44]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|     44|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 0, False: 44]
  ------------------
 3303|      0|        zero_parsed = true;
 3304|      0|        return *r;
 3305|      0|    }
 3306|       |
 3307|     44|    return unexpected(parse_error::error);
 3308|     44|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     44|{
 2246|     44|    auto it = read_code_unit(range);
 2247|     44|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     44|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 2252|     44|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     44|        return unexpected(parse_error::error);
 2254|     44|    }
 2255|       |
 2256|      0|    return *it;
 2257|     44|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     44|{
 1945|     44|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     44|    return ranges::next(range.begin());
 1950|     44|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     44|{
  951|     44|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     44|    return eof_error::good;
  955|     44|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  5.83k|{
  945|  5.83k|    return is_range_eof(r.begin(), r.end());
  946|  5.83k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3290|    114|{
 3291|    114|    return read_matching_string_classic_nocase(range, "0x");
 3292|    114|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3313|     22|{
 3314|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 22]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 22]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|     22|    {
 3321|     22|        bool zero_parsed{false};
 3322|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 0, False: 22]
  ------------------
 3323|      0|            return {*r, 8, zero_parsed};
 3324|      0|        }
 3325|     22|    }
 3326|     22|    return {range.begin(), 10, false};
 3327|     22|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3399|    302|{
 3400|    302|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|    302|    else {
 3411|    302|        return read_while1_code_unit(range,
 3412|    302|                                     [&](char_type ch) noexcept {
 3413|    302|                                         return char_to_int(ch) < base;
 3414|    302|                                     })
 3415|    302|            .transform_error(map_parse_error_to_scan_error(
 3416|    302|                scan_error::invalid_scanned_value,
 3417|    302|                "Failed to parse integer: No digits found"));
 3418|    302|    }
 3419|    302|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    404|{
 2095|    404|    auto it = read_while_code_unit(range, pred);
 2096|    404|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 404, False: 0]
  ------------------
 2097|    404|        return unexpected(parse_error::error);
 2098|    404|    }
 2099|      0|    return it;
 2100|    404|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    404|{
 2075|    404|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    404|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    404|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    404|    else {
 2060|    404|        auto first = range.begin();
 2061|    404|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 404, False: 0]
  ------------------
 2062|    404|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 404, False: 0]
  ------------------
 2063|    404|                return first;
 2064|    404|            }
 2065|    404|        }
 2066|      0|        return first;
 2067|    404|    }
 2068|    404|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2880|  10.2k|        {
 2881|  10.2k|            return !(y == x);
 2882|  10.2k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    302|        : m_fptr([](storage fn,
  743|    302|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    302|              cvref<T> obj = *get<T>(fn);
  745|    302|              if constexpr (std::is_void_v<R>) {
  746|    302|                  obj(static_cast<decltype(args)>(args)...);
  747|    302|              }
  748|    302|              else {
  749|    302|                  return obj(static_cast<decltype(args)>(args)...);
  750|    302|              }
  751|    302|          }),
  752|    302|          m_storage(std::addressof(f))
  753|    302|    {
  754|    302|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    302|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    302|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    302|              else {
  749|    302|                  return obj(static_cast<decltype(args)>(args)...);
  750|    302|              }
  751|    302|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    302|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    302|        else if constexpr (std::is_object_v<T>) {
  688|    302|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    302|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3412|    302|                                     [&](char_type ch) noexcept {
 3413|    302|                                         return char_to_int(ch) < base;
 3414|    302|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    302|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    302|        {
  662|    302|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3429|     36|{
 3430|     36|    std::basic_string<CharT> output;
 3431|     36|    std::string thsep_indices;
 3432|     36|    auto it = range.begin();
 3433|     36|    bool digit_matched = false;
 3434|     36|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 36, False: 0]
  ------------------
 3435|     36|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 36]
  ------------------
 3436|      0|            thsep_indices.push_back(
 3437|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|      0|        }
 3439|     36|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 36, False: 0]
  ------------------
 3440|     36|            break;
 3441|     36|        }
 3442|      0|        else {
 3443|      0|            output.push_back(*it);
 3444|      0|            digit_matched = true;
 3445|      0|        }
 3446|     36|    }
 3447|     36|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3448|     36|        return detail::unexpected_scan_error(
 3449|     36|            scan_error::invalid_scanned_value,
 3450|     36|            "Failed to parse integer: No digits found");
 3451|     36|    }
 3452|      0|    return std::tuple{it, output, thsep_indices};
 3453|     36|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2516|  22.1k|    {
 2517|  22.1k|        return m_count;
 2518|  22.1k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5726|    320|    {
 5727|    320|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5727:13): [True: 300, False: 20]
  ------------------
 5728|    320|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5728:13): [True: 0, False: 20]
  ------------------
 5729|    300|            return read_default(range, value, loc);
 5730|    300|        }
 5731|       |
 5732|     20|        reader_impl_for_int<CharT> reader{};
 5733|     20|        using integer_type =
 5734|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5735|     20|        integer_type tmp_value{};
 5736|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5737|     20|        value = static_cast<integer_type>(value);
 5738|     20|        return ret;
 5739|    320|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5710|    760|    {
 5711|    760|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    760|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5712|       |        if constexpr (std::is_same_v<CharT, char>) {
 5713|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5714|       |        }
 5715|    760|        else {
 5716|    760|            return code_unit_reader<wchar_t>{}.read(range, value);
 5717|    760|        }
 5718|    760|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5590|    760|    {
 5591|    760|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    760|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    760|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    760|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    760|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 760]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    760|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    760|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|    760|        ch = *range.begin();
 5593|    760|        return it;
 5594|    760|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  5.53k|{
 1945|  5.53k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.53k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  5.53k|    return ranges::next(range.begin());
 1950|  5.53k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   322M|    {
  296|   322M|        ++x;
  297|   322M|        return x;
  298|   322M|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|    354|    {
 3579|    354|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    354|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    354|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 354]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|    354|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 354]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    354|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    354|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 340, False: 14]
  |  |  ------------------
  ------------------
 3605|    340|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    340|                    parse_integer_digits_without_thsep(
 3607|    340|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    340|                        prefix_result.parsed_base));
 3609|       |
 3610|    340|            auto buf = make_contiguous_buffer(
 3611|    340|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    340|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 340, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    340|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    340|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    340|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    340|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    340|    }                                                  \
  |  |  |  | 3939|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|    340|        }
 3620|       |
 3621|     14|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     14|            localized_number_formatting_options<CharT>{loc};
 3626|     14|#endif
 3627|       |
 3628|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|  2.37k|{
 3366|  2.37k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|  2.37k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|  2.37k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|  2.37k|        parse_integer_base_prefix(
 3371|  2.37k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|  2.37k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 2.37k]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|  2.37k|    else {
 3383|  2.37k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 2.37k]
  ------------------
 3384|  2.37k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 2.37k, False: 0]
  ------------------
 3385|  2.37k|            digits_begin_it = base_prefix_begin_it;
 3386|  2.37k|        }
 3387|  2.37k|    }
 3388|       |
 3389|  2.37k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 2.37k, False: 0]
  ------------------
 3390|  2.37k|        sign = sign_type::plus_sign;
 3391|  2.37k|    }
 3392|  2.37k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|  2.37k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|  2.37k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|  3.15k|{
 3247|  3.15k|    auto r = read_one_of_code_unit(range, "+-");
 3248|  3.15k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 3.15k, False: 0]
  ------------------
 3249|  3.15k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 3.15k, False: 0]
  ------------------
 3250|  3.15k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|  3.15k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|  3.15k|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.15k|{
 2372|  3.15k|    auto it = read_code_unit(range);
 2373|  3.15k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.15k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  6.30k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 6.30k, False: 3.15k]
  ------------------
 2378|  6.30k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 6.30k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  6.30k|    }
 2382|       |
 2383|  3.15k|    return unexpected(parse_error::error);
 2384|  3.15k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|  2.37k|{
 3333|  2.37k|    switch (base) {
 3334|     12|        case 2:
  ------------------
  |  Branch (3334:9): [True: 12, False: 2.35k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|     12|                    false};
 3338|       |
 3339|     10|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 10, False: 2.36k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|     10|            bool zero_parsed = false;
 3342|     10|            auto it = apply_opt(
 3343|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|     10|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|    778|        case 16:
  ------------------
  |  Branch (3347:9): [True: 778, False: 1.59k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|    778|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|    778|                    false};
 3351|       |
 3352|     16|        case 0:
  ------------------
  |  Branch (3352:9): [True: 16, False: 2.35k]
  ------------------
 3353|       |            // detect base
 3354|     16|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|  1.55k|        default:
  ------------------
  |  Branch (3356:9): [True: 1.55k, False: 816]
  ------------------
 3357|       |            // no base prefix allowed
 3358|  1.55k|            return {range.begin(), base, false};
 3359|  2.37k|    }
 3360|  2.37k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    800|{
 2391|    800|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 800, False: 0]
  ------------------
 2392|    800|        return range.begin();
 2393|    800|    }
 2394|      0|    return *result;
 2395|    800|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3283|     28|{
 3284|     28|    return read_matching_string_classic_nocase(range, "0b");
 3285|     28|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.18k|{
 2331|  3.18k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  3.18k|    else {
 2344|  3.18k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.18k|            if (ch < 'A' || ch > 'Z') {
 2346|  3.18k|                return ch;
 2347|  3.18k|            }
 2348|  3.18k|            return static_cast<char_type>(ch +
 2349|  3.18k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.18k|        };
 2351|       |
 2352|  3.18k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  3.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 3.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|  3.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  3.18k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  3.18k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  3.18k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
 2357|  3.18k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  3.18k|                    return ascii_tolower(a) ==
 2359|  3.18k|                           static_cast<detail::char_t<Range>>(b);
 2360|  3.18k|                }))) {
 2361|  3.18k|            return unexpected(parse_error::error);
 2362|  3.18k|        }
 2363|       |
 2364|      0|        return it;
 2365|  3.18k|    }
 2366|  3.18k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  3.18k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.18k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 44, False: 3.14k]
  |  Branch (2345:29): [True: 3.14k, False: 0]
  ------------------
 2346|  3.18k|                return ch;
 2347|  3.18k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.18k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3297|     26|{
 3298|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 26]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 0, False: 26]
  ------------------
 3303|      0|        zero_parsed = true;
 3304|      0|        return *r;
 3305|      0|    }
 3306|       |
 3307|     26|    return unexpected(parse_error::error);
 3308|     26|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.61k|{
 2246|  1.61k|    auto it = read_code_unit(range);
 2247|  1.61k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.61k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.61k, False: 0]
  |  |  ------------------
  ------------------
 2252|  1.61k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.61k|        return unexpected(parse_error::error);
 2254|  1.61k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  1.61k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|    794|{
 3291|    794|    return read_matching_string_classic_nocase(range, "0x");
 3292|    794|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3313|     16|{
 3314|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 16]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 16]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|     16|    {
 3321|     16|        bool zero_parsed{false};
 3322|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 0, False: 16]
  ------------------
 3323|      0|            return {*r, 8, zero_parsed};
 3324|      0|        }
 3325|     16|    }
 3326|     16|    return {range.begin(), 10, false};
 3327|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|  2.34k|{
 3400|  2.34k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|  2.34k|    if constexpr (ranges::contiguous_range<Range>) {
 3403|  2.34k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.34k]
  |  |  ------------------
  ------------------
 3404|      0|            return detail::unexpected_scan_error(
 3405|      0|                scan_error::invalid_scanned_value,
 3406|      0|                "Failed to parse integer: No digits found");
 3407|      0|        }
 3408|  2.34k|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|  2.34k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3429|     28|{
 3430|     28|    std::basic_string<CharT> output;
 3431|     28|    std::string thsep_indices;
 3432|     28|    auto it = range.begin();
 3433|     28|    bool digit_matched = false;
 3434|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 28, False: 0]
  ------------------
 3435|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 28]
  ------------------
 3436|      0|            thsep_indices.push_back(
 3437|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|      0|        }
 3439|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 28, False: 0]
  ------------------
 3440|     28|            break;
 3441|     28|        }
 3442|      0|        else {
 3443|      0|            output.push_back(*it);
 3444|      0|            digit_matched = true;
 3445|      0|        }
 3446|     28|    }
 3447|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3448|     28|        return detail::unexpected_scan_error(
 3449|     28|            scan_error::invalid_scanned_value,
 3450|     28|            "Failed to parse integer: No digits found");
 3451|     28|    }
 3452|      0|    return std::tuple{it, output, thsep_indices};
 3453|     28|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  9.73k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  9.73k|                  ranges::sized_range<Range>) {
 1785|  9.73k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  9.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  9.73k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  9.73k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  9.73k|    {
 1589|  9.73k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  11.5k|    {
 1602|  11.5k|        return sv;
 1603|  11.5k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5977|    490|{
 5978|    490|    using char_type = detail::char_t<Range>;
 5979|    490|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5980|       |
 5981|    490|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5981:9): [True: 490, False: 0]
  ------------------
 5982|    490|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5983|    490|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5984|       |
 5985|    490|        if (max_width == 0) {
  ------------------
  |  Branch (5985:13): [True: 432, False: 58]
  ------------------
 5986|    432|            auto it = read_while_code_unit(range, pred);
 5987|       |
 5988|    432|            if (want_skipped_width) {
  ------------------
  |  Branch (5988:17): [True: 66, False: 366]
  ------------------
 5989|     66|                auto prefix_width =
 5990|     66|                    static_cast<std::ptrdiff_t>(
 5991|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5992|     66|                    ranges::distance(range.begin(), it);
 5993|     66|                return result_type{it, prefix_width};
 5994|     66|            }
 5995|    366|            return result_type{it, 0};
 5996|    432|        }
 5997|       |
 5998|     58|        auto max_width_view = take_width(range, max_width);
 5999|     58|        auto w_it = read_while_code_unit(max_width_view, pred);
 6000|       |
 6001|     58|        if (want_skipped_width) {
  ------------------
  |  Branch (6001:13): [True: 58, False: 0]
  ------------------
 6002|     58|            return result_type{w_it.base(), max_width - w_it.count()};
 6003|     58|        }
 6004|      0|        return result_type{w_it.base(), 0};
 6005|     58|    }
 6006|       |
 6007|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6008|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 0]
  ------------------
 6009|      0|        auto it = read_while_code_units(range, fill_chars);
 6010|       |
 6011|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            auto prefix_width =
 6013|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6014|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6015|      0|            return result_type{it, prefix_width};
 6016|      0|        }
 6017|      0|        return result_type{it, 0};
 6018|      0|    }
 6019|       |
 6020|      0|    auto max_width_view = take_width(range, max_width);
 6021|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6022|       |
 6023|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6023:9): [True: 0, False: 0]
  ------------------
 6024|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6025|      0|    }
 6026|      0|    return result_type{w_it.base(), 0};
 6027|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    492|{
 2075|    492|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    492|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|    642|{
 2056|    642|    if constexpr (ranges::common_range<Range>) {
 2057|    642|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    642|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    490|        : m_fptr([](storage fn,
  743|    490|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    490|              cvref<T> obj = *get<T>(fn);
  745|    490|              if constexpr (std::is_void_v<R>) {
  746|    490|                  obj(static_cast<decltype(args)>(args)...);
  747|    490|              }
  748|    490|              else {
  749|    490|                  return obj(static_cast<decltype(args)>(args)...);
  750|    490|              }
  751|    490|          }),
  752|    490|          m_storage(std::addressof(f))
  753|    490|    {
  754|    490|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    938|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    938|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    938|              else {
  749|    938|                  return obj(static_cast<decltype(args)>(args)...);
  750|    938|              }
  751|    938|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    938|    {
  684|    938|        if constexpr (std::is_const_v<T>) {
  685|    938|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    938|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5983|    938|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    490|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    490|        {
  667|    490|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    100|{
 2075|    100|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    100|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    190|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    190|    else {
 2060|    190|        auto first = range.begin();
 2061|  1.43k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.32k, False: 104]
  ------------------
 2062|  1.32k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 86, False: 1.24k]
  ------------------
 2063|     86|                return first;
 2064|     86|            }
 2065|  1.32k|        }
 2066|    104|        return first;
 2067|    190|    }
 2068|    190|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3054|    166|{
 3055|    166|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 0, False: 166]
  ------------------
 3056|      0|        auto it = read_while_classic_space(range);
 3057|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|      0|        return it;
 3063|      0|    }
 3064|       |
 3065|    166|    return read_while_classic_space(range);
 3066|    166|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    166|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    166|    else {
 2225|    166|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    166|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    166|            return detail::is_cp_space(cp);
 2238|    166|        });
 2239|    166|    }
 2240|    166|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    208|{
 2181|    208|    return read_until_code_point(range, std::not_fn(pred));
 2182|    208|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|    286|{
 2160|    286|    auto it = range.begin();
 2161|  1.09k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.05k, False: 42]
  ------------------
 2162|  1.05k|        const auto val =
 2163|  1.05k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.05k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.05k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.05k, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.05k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.05k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.05k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 244, False: 810]
  ------------------
 2168|    244|                return it;
 2169|    244|            }
 2170|  1.05k|        }
 2171|    810|        it = val.iterator;
 2172|    810|    }
 2173|       |
 2174|     42|    return it;
 2175|    286|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  5.78k|{
 1998|  5.78k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  5.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  5.78k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  5.78k|    auto it = range.begin();
 2002|  5.78k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  5.78k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  5.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.78k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  5.78k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 5.78k, False: 0]
  ------------------
 2011|  5.78k|        ++it;
 2012|  5.78k|        return {it, string_type(1, *range.begin())};
 2013|  5.78k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  5.78k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    166|        : m_fptr([](storage fn,
  743|    166|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    166|              cvref<T> obj = *get<T>(fn);
  745|    166|              if constexpr (std::is_void_v<R>) {
  746|    166|                  obj(static_cast<decltype(args)>(args)...);
  747|    166|              }
  748|    166|              else {
  749|    166|                  return obj(static_cast<decltype(args)>(args)...);
  750|    166|              }
  751|    166|          }),
  752|    166|          m_storage(std::addressof(f))
  753|    166|    {
  754|    166|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    250|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    250|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    250|              else {
  749|    250|                  return obj(static_cast<decltype(args)>(args)...);
  750|    250|              }
  751|    250|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    250|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    250|        else if constexpr (std::is_object_v<T>) {
  688|    250|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    250|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|    250|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    250|            return detail::is_cp_space(cp);
 2238|    250|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    166|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    166|        {
  662|    166|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|  6.39k|{
 3055|  6.39k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 5.98k, False: 412]
  ------------------
 3056|  5.98k|        auto it = read_while_classic_space(range);
 3057|  5.98k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|  5.98k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.98k]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|  5.98k|        return it;
 3063|  5.98k|    }
 3064|       |
 3065|    412|    return read_while_classic_space(range);
 3066|  6.39k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  8.10k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  8.10k|    else {
 2225|  8.10k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  8.10k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  8.10k|            return detail::is_cp_space(cp);
 2238|  8.10k|        });
 2239|  8.10k|    }
 2240|  8.10k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  8.26k|{
 2181|  8.26k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  8.26k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  10.7k|{
 2160|  10.7k|    auto it = range.begin();
 2161|  37.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 35.0k, False: 2.58k]
  ------------------
 2162|  35.0k|        const auto val =
 2163|  35.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  35.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  35.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 35.0k, False: 0]
  |  |  ------------------
  ------------------
 2165|  35.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  35.0k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  35.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 8.13k, False: 26.8k]
  ------------------
 2168|  8.13k|                return it;
 2169|  8.13k|            }
 2170|  35.0k|        }
 2171|  26.8k|        it = val.iterator;
 2172|  26.8k|    }
 2173|       |
 2174|  2.58k|    return it;
 2175|  10.7k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  8.10k|        : m_fptr([](storage fn,
  743|  8.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.10k|              cvref<T> obj = *get<T>(fn);
  745|  8.10k|              if constexpr (std::is_void_v<R>) {
  746|  8.10k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.10k|              }
  748|  8.10k|              else {
  749|  8.10k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.10k|              }
  751|  8.10k|          }),
  752|  8.10k|          m_storage(std::addressof(f))
  753|  8.10k|    {
  754|  8.10k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  9.59k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.59k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.59k|              else {
  749|  9.59k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.59k|              }
  751|  9.59k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  9.59k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.59k|        else if constexpr (std::is_object_v<T>) {
  688|  9.59k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.59k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  9.59k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  9.59k|            return detail::is_cp_space(cp);
 2238|  9.59k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  8.10k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  8.10k|        {
  662|  8.10k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  4.84k|    {
 3145|  4.84k|        reader_error_handler eh{};
 3146|  4.84k|        get_derived().check_specs_impl(specs, eh);
 3147|  4.84k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.93k, False: 908]
  |  |  ------------------
  ------------------
 3148|  3.93k|            return detail::unexpected_scan_error(
 3149|  3.93k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  3.93k|        }
 3151|    908|        return {};
 3152|  4.84k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3156|  4.84k|    {
 3157|  4.84k|        return static_cast<Derived&>(*this);
 3158|  4.84k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|  4.84k|    {
 3525|  4.84k|        detail::check_int_type_specs(specs, eh);
 3526|  4.84k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3139|  1.82k|    {
 3140|  1.82k|        return true;
 3141|  1.82k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|    118|    {
 3579|    118|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    118|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    118|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 118]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|    118|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 118]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    118|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    118|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 100, False: 18]
  |  |  ------------------
  ------------------
 3605|    100|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    100|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    100|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    100|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 100, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    100|    }                                                  \
  |  |  |  | 3939|    100|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|     18|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     18|            localized_number_formatting_options<CharT>{loc};
 3626|     18|#endif
 3627|       |
 3628|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|    334|    {
 3579|    334|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    334|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    334|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 334]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|    334|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 334]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    334|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    334|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 320, False: 14]
  |  |  ------------------
  ------------------
 3605|    320|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    320|                    parse_integer_digits_without_thsep(
 3607|    320|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    320|                        prefix_result.parsed_base));
 3609|       |
 3610|    320|            auto buf = make_contiguous_buffer(
 3611|    320|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    320|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 320, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    320|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    320|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    320|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    320|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    320|    }                                                  \
  |  |  |  | 3939|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|    320|        }
 3620|       |
 3621|     14|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|     14|            localized_number_formatting_options<CharT>{loc};
 3626|     14|#endif
 3627|       |
 3628|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|     82|    {
 3579|     82|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     82|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     82|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     82|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     82|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     82|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     82|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     82|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 82]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|     82|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 82]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     82|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     82|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 82, False: 0]
  |  |  ------------------
  ------------------
 3605|     82|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     82|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     82|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     82|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 82, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     82|    }                                                  \
  |  |  |  | 3939|     82|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|    762|    {
 3579|    762|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    762|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    762|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    762|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 762]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    762|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    762|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|    762|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|    762|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 762]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|    762|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 762]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|    762|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    762|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 762, False: 0]
  |  |  ------------------
  ------------------
 3605|    762|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    762|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    762|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    762|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 762]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    762|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    762|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    762|                    parse_integer_digits_without_thsep(
 3607|    762|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    762|                        prefix_result.parsed_base));
 3609|       |
 3610|    762|            auto buf = make_contiguous_buffer(
 3611|    762|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    762|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    762|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    762|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    762|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 762, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    762|    }                                                  \
  |  |  |  | 3939|    762|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|    762|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  2.42k|    {
 3145|  2.42k|        reader_error_handler eh{};
 3146|  2.42k|        get_derived().check_specs_impl(specs, eh);
 3147|  2.42k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.99k, False: 428]
  |  |  ------------------
  ------------------
 3148|  1.99k|            return detail::unexpected_scan_error(
 3149|  1.99k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  1.99k|        }
 3151|    428|        return {};
 3152|  2.42k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3156|  2.42k|    {
 3157|  2.42k|        return static_cast<Derived&>(*this);
 3158|  2.42k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4166|  2.42k|    {
 4167|  2.42k|        detail::check_float_type_specs(specs, eh);
 4168|  2.42k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3139|    888|    {
 3140|    888|        return true;
 3141|    888|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4238|    424|    {
 4239|    424|        unsigned options{};
 4240|    424|        if (specs.localized) {
  ------------------
  |  Branch (4240:13): [True: 14, False: 410]
  ------------------
 4241|     14|            options |= float_reader_base::allow_thsep;
 4242|     14|        }
 4243|       |
 4244|    424|        SCN_GCC_COMPAT_PUSH
 4245|    424|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4246|       |
 4247|    424|        switch (specs.type) {
 4248|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4248:13): [True: 8, False: 416]
  ------------------
 4249|      8|                return options | float_reader_base::allow_fixed;
 4250|       |
 4251|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4251:13): [True: 4, False: 420]
  ------------------
 4252|      4|                return options | float_reader_base::allow_scientific;
 4253|       |
 4254|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4254:13): [True: 18, False: 406]
  ------------------
 4255|     18|                return options | float_reader_base::allow_hex;
 4256|       |
 4257|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4257:13): [True: 2, False: 422]
  ------------------
 4258|      2|                return options | float_reader_base::allow_scientific |
 4259|      2|                       float_reader_base::allow_fixed;
 4260|       |
 4261|    392|            case detail::presentation_type::none:
  ------------------
  |  Branch (4261:13): [True: 392, False: 32]
  ------------------
 4262|    392|                return options | float_reader_base::allow_scientific |
 4263|    392|                       float_reader_base::allow_fixed |
 4264|    392|                       float_reader_base::allow_hex;
 4265|       |
 4266|      0|            default:
  ------------------
  |  Branch (4266:13): [True: 0, False: 424]
  ------------------
 4267|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4268|    424|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4269|    424|        }
 4270|       |
 4271|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4272|    424|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3690|    424|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|    884|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  1.76k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4078|    776|    {
 4079|    776|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4079:13): [True: 776, False: 0]
  ------------------
 4080|    776|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4080:13): [True: 776, False: 0]
  ------------------
 4081|    776|            return;
 4082|    776|        }
 4083|       |
 4084|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4085|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4085:13): [True: 0, False: 0]
  ------------------
 4086|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4086:27): [True: 0, False: 0]
  ------------------
 4087|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4087:21): [True: 0, False: 0]
  ------------------
 4088|      0|                    ch = CharT{'.'};
 4089|      0|                }
 4090|      0|            }
 4091|      0|        }
 4092|       |
 4093|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4093:13): [True: 0, False: 0]
  ------------------
 4094|      0|            return;
 4095|      0|        }
 4096|       |
 4097|      0|        auto first =
 4098|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4099|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4099:13): [True: 0, False: 0]
  ------------------
 4100|      0|            return;
 4101|      0|        }
 4102|       |
 4103|      0|        m_thsep_indices.push_back(
 4104|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4105|       |
 4106|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4106:31): [True: 0, False: 0]
  ------------------
 4107|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4107:17): [True: 0, False: 0]
  ------------------
 4108|      0|                *first++ = std::move(*it);
 4109|      0|            }
 4110|      0|            else {
 4111|      0|                m_thsep_indices.push_back(
 4112|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4113|      0|            }
 4114|      0|        }
 4115|       |
 4116|      0|        str.erase(first, str.end());
 4117|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|    256|    {
 1686|    256|        return m_storage.has_value();
 1687|    256|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    128|    {
 1691|    128|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    128|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    128|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    128|        return *m_storage;
 1693|    128|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    102|    {
  763|    102|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    102|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3709|      8|    {
 3710|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|      8|        return read_source_impl(range);
 3716|      8|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3735|    102|    {
 3736|    102|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    102|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    102|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    102|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    102|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|    102|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|    102|        auto it = sign_result.first;
 3739|    102|        m_sign = sign_result.second;
 3740|       |
 3741|    102|        auto digits_begin = it;
 3742|    102|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|       |                      ranges::sized_range<Range>) {
 3745|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3746|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|       |                SCN_TRY_ASSIGN(
 3748|       |                    it,
 3749|       |                    do_read_source_impl(
 3750|       |                        r,
 3751|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|       |            }
 3754|       |            else {
 3755|       |                auto cb = [&](const auto& rr)
 3756|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|       |                    auto res = read_all(rr);
 3758|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|       |                        return detail::unexpected_scan_error(
 3760|       |                            scan_error::invalid_scanned_value,
 3761|       |                            "Invalid float value");
 3762|       |                    }
 3763|       |                    return res;
 3764|       |                };
 3765|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3766|       |            }
 3767|       |        }
 3768|    102|        else {
 3769|    102|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    102|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    102|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 102, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    102|    }                                                  \
  |  | 3939|    102|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3770|      0|                it,
 3771|      0|                do_read_source_impl(
 3772|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|      0|        }
 3775|       |
 3776|    102|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 0, False: 0]
  |  Branch (3778:48): [True: 0, False: 0]
  ------------------
 3779|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 0, False: 0]
  ------------------
 3780|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 0, False: 0]
  ------------------
 3781|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|      0|        }
 3783|       |
 3784|      0|        handle_separators();
 3785|       |
 3786|      0|        return it;
 3787|    102|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4021|    102|    {
 4022|    102|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|    102|        const bool allowed_nonhex =
 4024|    102|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|    102|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|    102|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 102, False: 0]
  |  Branch (4027:45): [True: 0, False: 102]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|    102|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 102]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|    102|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 102, False: 0]
  |  Branch (4036:45): [True: 0, False: 102]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|    102|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 102]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|    102|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 94, False: 8]
  |  Branch (4043:28): [True: 6, False: 88]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|      6|            auto it = range.begin();
 4047|       |
 4048|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 6]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|      6|            else {
 4053|      6|                m_kind = float_kind::hex_without_prefix;
 4054|      6|            }
 4055|       |
 4056|      6|            return read_hex(ranges::subrange{it, range.end()});
 4057|      6|        }
 4058|     96|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 8, False: 88]
  |  Branch (4058:29): [True: 8, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|      8|            m_kind = float_kind::generic;
 4062|      8|            return read_regular_float(range);
 4063|      8|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|     88|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 88]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|     88|        m_kind = float_kind::generic;
 4074|     88|        return read_regular(range);
 4075|     88|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3829|    102|    {
 3830|    102|        auto it = range.begin();
 3831|    102|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 102, False: 0]
  ------------------
 3832|    102|            return unexpected(r.error());
 3833|    102|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3852|    102|    {
 3853|    102|        auto it = range.begin();
 3854|    102|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 102, False: 0]
  ------------------
 3855|    102|            return r.transform_error(map_parse_error_to_scan_error(
 3856|    102|                scan_error::invalid_scanned_value,
 3857|    102|                "Invalid floating-point NaN value"));
 3858|    102|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|     94|    {
 3823|     94|        return read_matching_string_classic_nocase(range, "0x");
 3824|     94|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3923|      6|    {
 3924|      6|        auto it = range.begin();
 3925|       |
 3926|      6|        std::ptrdiff_t digits_count = 0;
 3927|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3928|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3929|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3930|      6|                scan_error::invalid_scanned_value,
 3931|      6|                "Invalid hexadecimal floating-point value"));
 3932|      6|        }
 3933|      0|        else {
 3934|      0|            digits_count += ranges::distance(it, *r);
 3935|      0|            it = *r;
 3936|      0|        }
 3937|       |
 3938|      0|        m_integral_part_length = digits_count;
 3939|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3939:18): [True: 0, False: 0]
  ------------------
 3940|      0|                                             m_locale_options.decimal_point)) {
 3941|      0|            it = *r;
 3942|      0|        }
 3943|       |
 3944|      0|        if (auto r =
  ------------------
  |  Branch (3944:18): [True: 0, False: 0]
  ------------------
 3945|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3951|      0|            return detail::unexpected_scan_error(
 3952|      0|                scan_error::invalid_scanned_value,
 3953|      0|                "No significand digits in hexfloat");
 3954|      0|        }
 3955|       |
 3956|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3957|       |
 3958|      0|        return it;
 3959|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3807|      6|    {
 3808|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3809|      6|                         thsep_allowed)) {
 3810|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3811|      0|                return char_to_int(ch) < 16 ||
 3812|      0|                       ch == m_locale_options.thousands_sep;
 3813|      0|            });
 3814|      0|        }
 3815|       |
 3816|      6|        return read_while1_code_unit(
 3817|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3818|      6|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3817|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3964|     96|    {
 3965|     96|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|     96|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 90, False: 6]
  |  Branch (3966:50): [True: 2, False: 88]
  ------------------
 3967|       |
 3968|     96|        auto it = ranges::begin(range);
 3969|     96|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|     96|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|     96|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 96, False: 0]
  |  |  ------------------
  ------------------
 3973|     96|            return r.transform_error(
 3974|     96|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|     96|                                              "Invalid floating-point value"));
 3976|     96|        }
 3977|      0|        else {
 3978|      0|            digits_count += ranges::distance(it, *r);
 3979|      0|            it = *r;
 3980|      0|        }
 3981|       |
 3982|      0|        m_integral_part_length = digits_count;
 3983|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 0, False: 0]
  ------------------
 3984|      0|                                             m_locale_options.decimal_point)) {
 3985|      0|            it = *r;
 3986|      0|        }
 3987|       |
 3988|      0|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 0, False: 0]
  ------------------
 3989|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|      0|            digits_count += ranges::distance(it, *r);
 3991|      0|            it = *r;
 3992|      0|        }
 3993|       |
 3994|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|      0|        auto beg_exp_it = it;
 4001|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 0]
  ------------------
 4002|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|      0|        }
 4004|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 0, False: 0]
  |  Branch (4004:29): [True: 0, False: 0]
  ------------------
 4005|      0|            return detail::unexpected_scan_error(
 4006|      0|                scan_error::invalid_scanned_value,
 4007|      0|                "No exponent given to scientific float");
 4008|      0|        }
 4009|       |
 4010|      0|        m_kind =
 4011|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 0, False: 0]
  ------------------
 4012|       |
 4013|      0|        return it;
 4014|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3792|     96|    {
 3793|     96|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96]
  |  |  |  Branch (865:45): [True: 0, False: 96]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|     96|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|     96|        return read_while1_code_unit(
 3802|     96|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|     96|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     96|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     96|        else if constexpr (std::is_object_v<T>) {
  688|     96|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     96|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3802|     96|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     96|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     96|        {
  662|     96|        }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3695|     94|    {
 3696|     94|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 94]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|     94|        return read_source_impl(range);
 3702|     94|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    782|    {
  763|    782|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    782|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    782|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3709|      6|    {
 3710|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|      6|        return read_source_impl(range);
 3716|      6|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3735|    782|    {
 3736|    782|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    782|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    782|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    782|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    782|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 782]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    782|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    782|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|    782|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|    782|        auto it = sign_result.first;
 3739|    782|        m_sign = sign_result.second;
 3740|       |
 3741|    782|        auto digits_begin = it;
 3742|    782|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|    782|                      ranges::sized_range<Range>) {
 3745|    782|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 782]
  |  |  |  Branch (865:45): [True: 0, False: 782]
  |  |  |  Branch (865:45): [True: 0, False: 782]
  |  |  ------------------
  ------------------
 3746|    782|                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3748|      0|                    it,
 3749|      0|                    do_read_source_impl(
 3750|      0|                        r,
 3751|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|      0|            }
 3754|    782|            else {
 3755|    782|                auto cb = [&](const auto& rr)
 3756|    782|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|    782|                    auto res = read_all(rr);
 3758|    782|                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|    782|                        return detail::unexpected_scan_error(
 3760|    782|                            scan_error::invalid_scanned_value,
 3761|    782|                            "Invalid float value");
 3762|    782|                    }
 3763|    782|                    return res;
 3764|    782|                };
 3765|    782|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|    782|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    782|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    782|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 776]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|    782|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    782|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3766|    776|            }
 3767|       |        }
 3768|       |        else {
 3769|       |            SCN_TRY_ASSIGN(
 3770|       |                it,
 3771|       |                do_read_source_impl(
 3772|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|       |        }
 3775|       |
 3776|    782|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    782|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    782|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|    776|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 776, False: 0]
  |  Branch (3778:48): [True: 776, False: 0]
  ------------------
 3779|    776|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 776, False: 0]
  ------------------
 3780|    776|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 776, False: 0]
  ------------------
 3781|    776|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|    776|        }
 3783|       |
 3784|    776|        handle_separators();
 3785|       |
 3786|    776|        return it;
 3787|    782|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3829|    782|    {
 3830|    782|        auto it = range.begin();
 3831|    782|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 782, False: 0]
  ------------------
 3832|    782|            return unexpected(r.error());
 3833|    782|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3852|    782|    {
 3853|    782|        auto it = range.begin();
 3854|    782|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 782, False: 0]
  ------------------
 3855|    782|            return r.transform_error(map_parse_error_to_scan_error(
 3856|    782|                scan_error::invalid_scanned_value,
 3857|    782|                "Invalid floating-point NaN value"));
 3858|    782|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    776|    {
 3823|    776|        return read_matching_string_classic_nocase(range, "0x");
 3824|    776|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|      6|{
 2095|      6|    auto it = read_while_code_unit(range, pred);
 2096|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 6, False: 0]
  ------------------
 2097|      6|        return unexpected(parse_error::error);
 2098|      6|    }
 2099|      0|    return it;
 2100|      6|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3964|      6|    {
 3965|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 4, False: 2]
  |  Branch (3966:50): [True: 2, False: 2]
  ------------------
 3967|       |
 3968|      6|        auto it = ranges::begin(range);
 3969|      6|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3973|      6|            return r.transform_error(
 3974|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|      6|                                              "Invalid floating-point value"));
 3976|      6|        }
 3977|      0|        else {
 3978|      0|            digits_count += ranges::distance(it, *r);
 3979|      0|            it = *r;
 3980|      0|        }
 3981|       |
 3982|      0|        m_integral_part_length = digits_count;
 3983|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 0, False: 0]
  ------------------
 3984|      0|                                             m_locale_options.decimal_point)) {
 3985|      0|            it = *r;
 3986|      0|        }
 3987|       |
 3988|      0|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 0, False: 0]
  ------------------
 3989|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|      0|            digits_count += ranges::distance(it, *r);
 3991|      0|            it = *r;
 3992|      0|        }
 3993|       |
 3994|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|      0|        auto beg_exp_it = it;
 4001|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 0]
  ------------------
 4002|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|      0|        }
 4004|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 0, False: 0]
  |  Branch (4004:29): [True: 0, False: 0]
  ------------------
 4005|      0|            return detail::unexpected_scan_error(
 4006|      0|                scan_error::invalid_scanned_value,
 4007|      0|                "No exponent given to scientific float");
 4008|      0|        }
 4009|       |
 4010|      0|        m_kind =
 4011|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 0, False: 0]
  ------------------
 4012|       |
 4013|      0|        return it;
 4014|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3792|      6|    {
 3793|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|      6|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|      6|        return read_while1_code_unit(
 3802|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|      6|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3802|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4021|    782|    {
 4022|    782|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|    782|        const bool allowed_nonhex =
 4024|    782|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|    782|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|    782|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 782, False: 0]
  |  Branch (4027:45): [True: 0, False: 782]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|    782|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 782]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|    782|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 782, False: 0]
  |  Branch (4036:45): [True: 0, False: 782]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|    782|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 782]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|    782|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 776, False: 6]
  |  Branch (4043:28): [True: 12, False: 764]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|     12|            auto it = range.begin();
 4047|       |
 4048|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 12]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|     12|            else {
 4053|     12|                m_kind = float_kind::hex_without_prefix;
 4054|     12|            }
 4055|       |
 4056|     12|            return read_hex(ranges::subrange{it, range.end()});
 4057|     12|        }
 4058|    770|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 6, False: 764]
  |  Branch (4058:29): [True: 6, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|      6|            m_kind = float_kind::generic;
 4062|      6|            return read_regular_float(range);
 4063|      6|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|    764|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 764]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|    764|        m_kind = float_kind::generic;
 4074|    764|        return read_regular(range);
 4075|    764|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3756|    776|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|    776|                    auto res = read_all(rr);
 3758|    776|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776]
  |  |  ------------------
  ------------------
 3759|      0|                        return detail::unexpected_scan_error(
 3760|      0|                            scan_error::invalid_scanned_value,
 3761|      0|                            "Invalid float value");
 3762|      0|                    }
 3763|    776|                    return res;
 3764|    776|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    776|{
 1938|    776|    return ranges::next(range.begin(), range.end());
 1939|    776|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    776|    {
  313|    776|        ranges::advance(x, bound);
  314|    776|        return x;
  315|    776|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    776|    {
  275|    776|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    776|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    776|    {
 1676|    776|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    776|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    776|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|    776|    {
 1720|    776|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    776|                      ranges::sized_range<Range>) {
 1725|    776|            m_storage.reset();
 1726|    776|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    776|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3695|    776|    {
 3696|    776|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|    776|        return read_source_impl(range);
 3702|    776|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3721|    776|    {
 3722|    776|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    776|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    776|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|    776|        const std::ptrdiff_t sign_len =
 3725|    776|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 0, False: 776]
  ------------------
 3726|       |
 3727|    776|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|    776|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    776|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    776|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 776, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    776|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    776|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    776|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    776|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    776|    }                                                  \
  |  |  |  | 3939|    776|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|    776|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4191|    102|    {
 4192|    102|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|    102|#if !SCN_DISABLE_LOCALE
 4195|    102|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 8, False: 94]
  ------------------
 4196|      8|            return read_impl<Range>(
 4197|      8|                range, rd,
 4198|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      8|                },
 4201|      8|                value, loc);
 4202|      8|        }
 4203|     94|#endif
 4204|       |
 4205|     94|        return read_impl<Range>(
 4206|     94|            range, rd,
 4207|     94|            [](float_reader<CharT>& r, auto&&... args) {
 4208|     94|                return r.read_source(SCN_FWD(args)...);
 4209|     94|            },
 4210|     94|            value);
 4211|    102|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|    102|    {
 4228|    102|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|    102|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 0]
  |  |  ------------------
  ------------------
 4230|    102|            return unexpected(r.error());
 4231|    102|        }
 4232|       |
 4233|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4198|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|      8|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     94|        : m_fptr([](storage fn,
  743|     94|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     94|              cvref<T> obj = *get<T>(fn);
  745|     94|              if constexpr (std::is_void_v<R>) {
  746|     94|                  obj(static_cast<decltype(args)>(args)...);
  747|     94|              }
  748|     94|              else {
  749|     94|                  return obj(static_cast<decltype(args)>(args)...);
  750|     94|              }
  751|     94|          }),
  752|     94|          m_storage(std::addressof(f))
  753|     94|    {
  754|     94|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     94|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     94|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     94|              else {
  749|     94|                  return obj(static_cast<decltype(args)>(args)...);
  750|     94|              }
  751|     94|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     94|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     94|        else if constexpr (std::is_object_v<T>) {
  688|     94|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     94|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4207|     94|            [](float_reader<CharT>& r, auto&&... args) {
 4208|     94|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|     94|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     94|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     94|        {
  662|     94|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|    322|    {
 4192|    322|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|    322|#if !SCN_DISABLE_LOCALE
 4195|    322|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 6, False: 316]
  ------------------
 4196|      6|            return read_impl<Range>(
 4197|      6|                range, rd,
 4198|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      6|                },
 4201|      6|                value, loc);
 4202|      6|        }
 4203|    316|#endif
 4204|       |
 4205|    316|        return read_impl<Range>(
 4206|    316|            range, rd,
 4207|    316|            [](float_reader<CharT>& r, auto&&... args) {
 4208|    316|                return r.read_source(SCN_FWD(args)...);
 4209|    316|            },
 4210|    316|            value);
 4211|    322|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|    782|    {
 4228|    782|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|    782|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    782|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 776]
  |  |  ------------------
  ------------------
 4230|      6|            return unexpected(r.error());
 4231|      6|        }
 4232|       |
 4233|    776|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|    776|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    776|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    776|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 776, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    776|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    776|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    776|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    776|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    776|    }                                                  \
  |  |  |  | 3939|    776|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|    776|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    316|        : m_fptr([](storage fn,
  743|    316|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    316|              cvref<T> obj = *get<T>(fn);
  745|    316|              if constexpr (std::is_void_v<R>) {
  746|    316|                  obj(static_cast<decltype(args)>(args)...);
  747|    316|              }
  748|    316|              else {
  749|    316|                  return obj(static_cast<decltype(args)>(args)...);
  750|    316|              }
  751|    316|          }),
  752|    316|          m_storage(std::addressof(f))
  753|    316|    {
  754|    316|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    316|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    316|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    316|              else {
  749|    316|                  return obj(static_cast<decltype(args)>(args)...);
  750|    316|              }
  751|    316|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    316|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    316|        else if constexpr (std::is_object_v<T>) {
  688|    316|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    316|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|    316|            [](float_reader<CharT>& r, auto&&... args) {
 4208|    316|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|    316|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    316|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    316|        {
  662|    316|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5837|  2.84k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|  2.84k|                       std::is_same_v<T, std::wstring>) {
 5856|  2.84k|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  2.84k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5231|  8.52k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  7.14k|    {
 3145|  7.14k|        reader_error_handler eh{};
 3146|  7.14k|        get_derived().check_specs_impl(specs, eh);
 3147|  7.14k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  7.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 234, False: 6.91k]
  |  |  ------------------
  ------------------
 3148|    234|            return detail::unexpected_scan_error(
 3149|    234|                scan_error::invalid_format_string, eh.m_msg);
 3150|    234|        }
 3151|  6.91k|        return {};
 3152|  7.14k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3156|  7.14k|    {
 3157|  7.14k|        return static_cast<Derived&>(*this);
 3158|  7.14k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5235|  7.14k|    {
 5236|  7.14k|        detail::check_string_type_specs(specs, eh);
 5237|       |
 5238|  7.14k|        SCN_GCC_PUSH
 5239|  7.14k|        SCN_GCC_IGNORE("-Wswitch")
 5240|  7.14k|        SCN_GCC_IGNORE("-Wswitch-default")
 5241|       |
 5242|  7.14k|        SCN_CLANG_PUSH
 5243|  7.14k|        SCN_CLANG_IGNORE("-Wswitch")
 5244|  7.14k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5245|       |
 5246|  7.14k|        switch (specs.type) {
  ------------------
  |  Branch (5246:17): [True: 228, False: 6.91k]
  ------------------
 5247|  1.14k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5247:13): [True: 1.14k, False: 6.00k]
  ------------------
 5248|  1.14k|                m_type = reader_type::word;
 5249|  1.14k|                break;
 5250|       |
 5251|    210|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5251:13): [True: 210, False: 6.93k]
  ------------------
 5252|    210|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5252:21): [True: 66, False: 144]
  ------------------
 5253|    210|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5253:21): [True: 96, False: 48]
  ------------------
 5254|    162|                    m_type = reader_type::custom_word;
 5255|    162|                }
 5256|     48|                else {
 5257|     48|                    m_type = reader_type::word;
 5258|     48|                }
 5259|    210|                break;
 5260|      0|            }
 5261|       |
 5262|     66|            case detail::presentation_type::character:
  ------------------
  |  Branch (5262:13): [True: 66, False: 7.08k]
  ------------------
 5263|     66|                m_type = reader_type::character;
 5264|     66|                break;
 5265|       |
 5266|    600|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5266:13): [True: 600, False: 6.54k]
  ------------------
 5267|    600|                m_type = reader_type::character_set;
 5268|    600|                break;
 5269|       |
 5270|  4.74k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5270:13): [True: 4.74k, False: 2.40k]
  ------------------
 5271|  4.74k|                m_type = reader_type::regex;
 5272|  4.74k|                break;
 5273|       |
 5274|    150|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5274:13): [True: 150, False: 6.99k]
  ------------------
 5275|    150|                m_type = reader_type::regex_escaped;
 5276|    150|                break;
 5277|  7.14k|        }
 5278|       |
 5279|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5280|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5281|  7.14k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5284|  9.80k|    {
 5285|  9.80k|        return m_type == reader_type::word;
 5286|  9.80k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  5.34k|{
 1242|  5.34k|    auto it = src.begin();
 1243|  43.7k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 39.6k, False: 4.08k]
  ------------------
 1244|  39.6k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  39.6k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 39.6k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  39.6k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 39.6k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  39.6k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  39.6k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  39.6k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 1.26k, False: 38.4k]
  ------------------
 1254|  1.26k|            return false;
 1255|  1.26k|        }
 1256|  38.4k|        it += len;
 1257|  38.4k|    }
 1258|  4.08k|    return true;
 1259|  5.34k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|    128|{
 3097|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|       |        if (source.stores_allocated_string()) {
 3099|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3100|       |        }
 3101|       |        else {
 3102|       |            dest.assign(source.view());
 3103|       |        }
 3104|       |    }
 3105|    128|    else {
 3106|    128|        return transcode_impl(source.view(), dest);
 3107|    128|    }
 3108|       |
 3109|      0|    return {};
 3110|    128|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3071|  1.02k|{
 3072|  1.02k|    dst.clear();
 3073|  1.02k|    transcode_valid_to_string(src, dst);
 3074|  1.02k|    return {};
 3075|  1.02k|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.02k|{
 1502|  1.02k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.02k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|  1.02k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|  1.02k|        if constexpr (sizeof(DestCharT) == 1) {
 1530|  1.02k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|  1.02k|    }
 1536|       |
 1537|  1.02k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.02k|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|  1.02k|{
 1393|  1.02k|    static_assert(sizeof(SourceCharT) == 4);
 1394|  1.02k|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  7.67k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 7.67k, False: 1.02k]
  ------------------
 1397|  7.67k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  7.67k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  7.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [Folded - Ignored]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  7.67k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 6.44k, False: 1.22k]
  ------------------
 1405|  6.44k|            dest.push_back(static_cast<char>(cp));
 1406|  6.44k|        }
 1407|  1.22k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 74, False: 1.15k]
  ------------------
 1408|     74|            dest.push_back(
 1409|     74|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|     74|            dest.push_back(
 1411|     74|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|     74|        }
 1413|  1.15k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 820, False: 334]
  ------------------
 1414|    820|            dest.push_back(
 1415|    820|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|    820|            dest.push_back(static_cast<char>(
 1417|    820|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|    820|            dest.push_back(
 1419|    820|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|    820|        }
 1421|    334|        else {
 1422|    334|            dest.push_back(
 1423|    334|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    334|            dest.push_back(static_cast<char>(
 1425|    334|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    334|            dest.push_back(static_cast<char>(
 1427|    334|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    334|            dest.push_back(
 1429|    334|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    334|        }
 1431|  7.67k|    }
 1432|  1.02k|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5132|    600|        {
 5133|    600|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5133:17): [True: 180, False: 420]
  ------------------
 5134|    180|                return {};
 5135|    180|            }
 5136|       |
 5137|    420|            auto charset_string = specs.charset_string<SourceCharT>();
 5138|    420|            auto it = detail::to_address(charset_string.begin());
 5139|    420|            auto set = detail::parse_presentation_set(
 5140|    420|                it, detail::to_address(charset_string.end()), nonascii);
 5141|    420|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|    420|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 420]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5142|    420|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|    420|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    420|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5143|    420|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|    420|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    420|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5144|       |
 5145|    420|            std::sort(nonascii.extra_ranges.begin(),
 5146|    420|                      nonascii.extra_ranges.end());
 5147|    420|            return {};
 5148|    420|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5165|  4.66k|        {
 5166|  4.66k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5166:17): [True: 1.11k, False: 3.55k]
  ------------------
 5167|  1.11k|                return helper.is_char_set_in_extra_literals(cp);
 5168|  1.11k|            }
 5169|       |
 5170|  3.55k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5171|  4.66k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5115|  1.11k|        {
 5116|       |            // TODO: binary search?
 5117|  1.11k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5117:17): [True: 0, False: 1.11k]
  ------------------
 5118|      0|                return false;
 5119|      0|            }
 5120|       |
 5121|  1.11k|            const auto cp_val = static_cast<uint32_t>(cp);
 5122|  1.11k|            return std::find_if(
 5123|  1.11k|                       nonascii.extra_ranges.begin(),
 5124|  1.11k|                       nonascii.extra_ranges.end(),
 5125|  1.11k|                       [cp_val](const auto& pair) noexcept {
 5126|  1.11k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5127|  1.11k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5128|  1.11k|                       }) != nonascii.extra_ranges.end();
 5129|  1.11k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5125|  8.75k|                       [cp_val](const auto& pair) noexcept {
 5126|  8.75k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5126:35): [True: 8.61k, False: 144]
  ------------------
 5127|  8.75k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5127:35): [True: 1.05k, False: 7.56k]
  ------------------
 5128|  8.75k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5105|  5.17k|        {
 5106|  5.17k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  5.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5107|  5.17k|            const auto val =
 5108|  5.17k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5109|  5.17k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5110|  5.17k|                    (val % 8)) &
 5111|  5.17k|                   1u;
 5112|  5.17k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5156|  1.63k|        {
 5157|  1.63k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5157:17): [True: 12, False: 1.62k]
  ------------------
 5158|     12|                return false;
 5159|     12|            }
 5160|       |
 5161|  1.62k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5162|  1.63k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5102|    600|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|    194|    {
 5303|    194|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    194|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    194|        return read_impl(range, specs, value);
 5305|    194|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|    194|    {
 5321|    194|        SCN_CLANG_PUSH
 5322|    194|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    194|        switch (m_type) {
 5325|     84|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 84, False: 110]
  ------------------
 5326|     84|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     16|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 16, False: 178]
  ------------------
 5329|     16|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     16|                                                                   value);
 5331|       |
 5332|     20|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 20, False: 174]
  ------------------
 5333|     20|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     68|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 68, False: 126]
  ------------------
 5336|     68|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     68|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      2|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2, False: 192]
  ------------------
 5341|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      2|                    range, specs.charset_string<SourceCharT>(),
 5343|      2|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 190]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 194]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    194|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    194|        }
 5357|       |
 5358|    194|        SCN_CLANG_POP
 5359|    194|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|     84|    {
 4850|     84|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     84|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|    120|{
 4784|    120|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    120|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    120|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 52, False: 68]
  ------------------
 4788|     52|        return detail::unexpected_scan_error(
 4789|     52|            scan_error::invalid_scanned_value,
 4790|     52|            "Invalid encoding in scanned string");
 4791|     52|    }
 4792|       |
 4793|     68|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     68|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 68]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     68|    return SCN_MOVE(result);
  ------------------
  |  |  934|     68|    static_cast<    \
  |  |  935|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     68|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    252|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    252|    else {
 2196|    252|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|    252|        return read_until_code_point(
 2208|    252|            ranges::subrange{it, range.end()},
 2209|    252|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    252|    }
 2211|    252|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    252|{
 2160|    252|    auto it = range.begin();
 2161|  4.95k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 4.73k, False: 216]
  ------------------
 2162|  4.73k|        const auto val =
 2163|  4.73k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  4.73k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  4.73k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.73k, False: 0]
  |  |  ------------------
  ------------------
 2165|  4.73k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  4.73k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  4.73k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 36, False: 4.69k]
  ------------------
 2168|     36|                return it;
 2169|     36|            }
 2170|  4.73k|        }
 2171|  4.69k|        it = val.iterator;
 2172|  4.69k|    }
 2173|       |
 2174|    216|    return it;
 2175|    252|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    252|        : m_fptr([](storage fn,
  743|    252|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    252|              cvref<T> obj = *get<T>(fn);
  745|    252|              if constexpr (std::is_void_v<R>) {
  746|    252|                  obj(static_cast<decltype(args)>(args)...);
  747|    252|              }
  748|    252|              else {
  749|    252|                  return obj(static_cast<decltype(args)>(args)...);
  750|    252|              }
  751|    252|          }),
  752|    252|          m_storage(std::addressof(f))
  753|    252|    {
  754|    252|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  4.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.73k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.73k|              else {
  749|  4.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.73k|              }
  751|  4.73k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  4.73k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.73k|        else if constexpr (std::is_object_v<T>) {
  688|  4.73k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.73k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  4.73k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    252|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    252|        {
  662|    252|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4870|     16|    {
 4871|     16|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 16, False: 0]
  ------------------
 4872|     16|            return read_string_impl(
 4873|     16|                range,
 4874|     16|                read_until_code_unit(
 4875|     16|                    range,
 4876|     16|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     16|                        SourceCharT ch) { return ch == until; }),
 4878|     16|                value);
 4879|     16|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|     16|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    240|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    240|        else if constexpr (std::is_object_v<T>) {
  688|    240|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    240|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4877|    240|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4976|     20|    {
 4977|     20|        return read_impl(
 4978|     20|            range,
 4979|     20|            [&](const auto& rng) {
 4980|     20|                return read_string_impl(rng, read_all(rng), value);
 4981|     20|            },
 4982|     20|            detail::priority_tag<1>{});
 4983|     20|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|     20|    {
 5004|     20|        return read_cb(range);
 5005|     20|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4979|     20|            [&](const auto& rng) {
 4980|     20|                return read_string_impl(rng, read_all(rng), value);
 4981|     20|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     60|{
 1938|     60|    return ranges::next(range.begin(), range.end());
 1939|     60|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     60|    {
  313|     60|        ranges::advance(x, bound);
  314|     60|        return x;
  315|     60|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     60|    {
  275|     60|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     60|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     60|    {
  203|    900|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 840, False: 60]
  ------------------
  204|    840|            ++i;
  205|    840|        }
  206|     60|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5077|     68|    {
 5078|     68|        auto it = read_source_impl(range, {specs});
 5079|     68|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 60]
  |  |  ------------------
  ------------------
 5080|      8|            return unexpected(it.error());
 5081|      8|        }
 5082|       |
 5083|     60|        return read_string_impl(range, *it, value);
 5084|     68|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5180|    204|    {
 5181|    204|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|    204|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|    204|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    204|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 204]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|    204|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|    204|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 120, False: 84]
  ------------------
 5189|    120|            const auto cb = [&](char32_t cp) {
 5190|    120|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|    120|            };
 5192|       |
 5193|    120|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 78, False: 42]
  ------------------
 5194|     78|                auto it = read_until_code_point(range, cb);
 5195|     78|                return check_nonempty(it, range);
 5196|     78|            }
 5197|     42|            auto it = read_while_code_point(range, cb);
 5198|     42|            return check_nonempty(it, range);
 5199|    120|        }
 5200|       |
 5201|     84|        const auto cb = [&](SourceCharT ch) {
 5202|     84|            return cb_wrapper.on_ascii_only(ch);
 5203|     84|        };
 5204|       |
 5205|     84|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 42, False: 42]
  ------------------
 5206|     42|            auto it = read_until_code_unit(range, cb);
 5207|     42|            return check_nonempty(it, range);
 5208|     42|        }
 5209|     42|        auto it = read_while_code_unit(range, cb);
 5210|     42|        return check_nonempty(it, range);
 5211|     84|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    120|        : m_fptr([](storage fn,
  743|    120|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    120|              cvref<T> obj = *get<T>(fn);
  745|    120|              if constexpr (std::is_void_v<R>) {
  746|    120|                  obj(static_cast<decltype(args)>(args)...);
  747|    120|              }
  748|    120|              else {
  749|    120|                  return obj(static_cast<decltype(args)>(args)...);
  750|    120|              }
  751|    120|          }),
  752|    120|          m_storage(std::addressof(f))
  753|    120|    {
  754|    120|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|    804|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    804|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    804|              else {
  749|    804|                  return obj(static_cast<decltype(args)>(args)...);
  750|    804|              }
  751|    804|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|    804|    {
  684|    804|        if constexpr (std::is_const_v<T>) {
  685|    804|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    804|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5189|    804|            const auto cb = [&](char32_t cp) {
 5190|    804|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|    804|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    120|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    120|        {
  667|    120|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5216|    204|    {
 5217|    204|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 24, False: 180]
  ------------------
 5218|     24|            return detail::unexpected_scan_error(
 5219|     24|                scan_error::invalid_scanned_value,
 5220|     24|                "No characters matched in [character set]");
 5221|     24|        }
 5222|       |
 5223|    180|        return it;
 5224|    204|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     84|        : m_fptr([](storage fn,
  743|     84|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     84|              cvref<T> obj = *get<T>(fn);
  745|     84|              if constexpr (std::is_void_v<R>) {
  746|     84|                  obj(static_cast<decltype(args)>(args)...);
  747|     84|              }
  748|     84|              else {
  749|     84|                  return obj(static_cast<decltype(args)>(args)...);
  750|     84|              }
  751|     84|          }),
  752|     84|          m_storage(std::addressof(f))
  753|     84|    {
  754|     84|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    360|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    360|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    360|              else {
  749|    360|                  return obj(static_cast<decltype(args)>(args)...);
  750|    360|              }
  751|    360|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    360|    {
  684|    360|        if constexpr (std::is_const_v<T>) {
  685|    360|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    360|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5201|    360|        const auto cb = [&](SourceCharT ch) {
 5202|    360|            return cb_wrapper.on_ascii_only(ch);
 5203|    360|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|     84|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     84|        {
  667|     84|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4783|     60|{
 4784|     60|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     60|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     60|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 60]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|     60|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     60|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 60]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     60|    return SCN_MOVE(result);
  ------------------
  |  |  934|     60|    static_cast<    \
  |  |  935|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     60|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      6|    {
 4921|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      6|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4942|     18|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|     18|        else {
 4950|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 18, False: 0]
  ------------------
 4951|     18|                return detail::unexpected_scan_error(
 4952|     18|                    scan_error::invalid_format_string,
 4953|     18|                    "Cannot use regex with a non-contiguous source "
 4954|     18|                    "range");
 4955|     18|            }
 4956|       |
 4957|      0|            auto input = get_as_contiguous(range);
 4958|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|      0|            return ranges::next(range.begin(),
 4961|      0|                                ranges::distance(input.begin(), it));
 4962|      0|        }
 4963|     18|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  959|     18|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|     18|    else {
  975|     18|        return false;
  976|     18|    }
  977|     18|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|  2.10k|    {
 5303|  2.10k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  2.10k|        return read_impl(range, specs, value);
 5305|  2.10k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|  2.10k|    {
 5321|  2.10k|        SCN_CLANG_PUSH
 5322|  2.10k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  2.10k|        switch (m_type) {
 5325|    312|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 312, False: 1.79k]
  ------------------
 5326|    312|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 36, False: 2.06k]
  ------------------
 5329|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     36|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 2.10k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 132, False: 1.97k]
  ------------------
 5336|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    132|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  1.57k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 1.57k, False: 526]
  ------------------
 5341|  1.57k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  1.57k|                    range, specs.charset_string<SourceCharT>(),
 5343|  1.57k|                    specs.regexp_flags, value);
 5344|       |
 5345|     46|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 46, False: 2.05k]
  ------------------
 5346|     46|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     46|                    range,
 5348|     46|                    get_unescaped_regex_pattern(
 5349|     46|                        specs.charset_string<SourceCharT>()),
 5350|     46|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 2.10k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  2.10k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  2.10k|        }
 5357|       |
 5358|  2.10k|        SCN_CLANG_POP
 5359|  2.10k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|    772|    {
 4850|    772|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|    772|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|    808|{
 4784|    808|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    808|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    808|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 254, False: 554]
  ------------------
 4788|    254|        return detail::unexpected_scan_error(
 4789|    254|            scan_error::invalid_scanned_value,
 4790|    254|            "Invalid encoding in scanned string");
 4791|    254|    }
 4792|       |
 4793|    554|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    554|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 554]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    554|    return SCN_MOVE(result);
  ------------------
  |  |  934|    554|    static_cast<    \
  |  |  935|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    554|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|    892|{
 3117|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|       |        dest.assign(source.view());
 3119|       |    }
 3120|    892|    else {
 3121|    892|        return transcode_impl(source.view(), dest);
 3122|    892|    }
 3123|       |
 3124|      0|    return {};
 3125|    892|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.31k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  2.31k|    else {
 2196|  2.31k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  2.31k|        return read_until_code_point(
 2208|  2.31k|            ranges::subrange{it, range.end()},
 2209|  2.31k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  2.31k|    }
 2211|  2.31k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.31k|        : m_fptr([](storage fn,
  743|  2.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.31k|              cvref<T> obj = *get<T>(fn);
  745|  2.31k|              if constexpr (std::is_void_v<R>) {
  746|  2.31k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.31k|              }
  748|  2.31k|              else {
  749|  2.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.31k|              }
  751|  2.31k|          }),
  752|  2.31k|          m_storage(std::addressof(f))
  753|  2.31k|    {
  754|  2.31k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  21.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.5k|              else {
  749|  21.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.5k|              }
  751|  21.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  21.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.5k|        else if constexpr (std::is_object_v<T>) {
  688|  21.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.5k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  21.5k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.31k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.31k|        {
  662|  2.31k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4870|     36|    {
 4871|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 36, False: 0]
  ------------------
 4872|     36|            return read_string_impl(
 4873|     36|                range,
 4874|     36|                read_until_code_unit(
 4875|     36|                    range,
 4876|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     36|                        SourceCharT ch) { return ch == until; }),
 4878|     36|                value);
 4879|     36|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|     36|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4877|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|    132|    {
 5078|    132|        auto it = read_source_impl(range, {specs});
 5079|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 116]
  |  |  ------------------
  ------------------
 5080|     16|            return unexpected(it.error());
 5081|     16|        }
 5082|       |
 5083|    116|        return read_string_impl(range, *it, value);
 5084|    132|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5180|    396|    {
 5181|    396|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|    396|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|    396|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    396|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 396]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|    396|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|    396|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 300, False: 96]
  ------------------
 5189|    300|            const auto cb = [&](char32_t cp) {
 5190|    300|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|    300|            };
 5192|       |
 5193|    300|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 132, False: 168]
  ------------------
 5194|    132|                auto it = read_until_code_point(range, cb);
 5195|    132|                return check_nonempty(it, range);
 5196|    132|            }
 5197|    168|            auto it = read_while_code_point(range, cb);
 5198|    168|            return check_nonempty(it, range);
 5199|    300|        }
 5200|       |
 5201|     96|        const auto cb = [&](SourceCharT ch) {
 5202|     96|            return cb_wrapper.on_ascii_only(ch);
 5203|     96|        };
 5204|       |
 5205|     96|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 42, False: 54]
  ------------------
 5206|     42|            auto it = read_until_code_unit(range, cb);
 5207|     42|            return check_nonempty(it, range);
 5208|     42|        }
 5209|     54|        auto it = read_while_code_unit(range, cb);
 5210|     54|        return check_nonempty(it, range);
 5211|     96|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    300|        : m_fptr([](storage fn,
  743|    300|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    300|              cvref<T> obj = *get<T>(fn);
  745|    300|              if constexpr (std::is_void_v<R>) {
  746|    300|                  obj(static_cast<decltype(args)>(args)...);
  747|    300|              }
  748|    300|              else {
  749|    300|                  return obj(static_cast<decltype(args)>(args)...);
  750|    300|              }
  751|    300|          }),
  752|    300|          m_storage(std::addressof(f))
  753|    300|    {
  754|    300|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  3.86k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.86k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.86k|              else {
  749|  3.86k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.86k|              }
  751|  3.86k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  3.86k|    {
  684|  3.86k|        if constexpr (std::is_const_v<T>) {
  685|  3.86k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.86k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5189|  3.86k|            const auto cb = [&](char32_t cp) {
 5190|  3.86k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|  3.86k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    300|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    300|        {
  667|    300|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5216|    396|    {
 5217|    396|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 48, False: 348]
  ------------------
 5218|     48|            return detail::unexpected_scan_error(
 5219|     48|                scan_error::invalid_scanned_value,
 5220|     48|                "No characters matched in [character set]");
 5221|     48|        }
 5222|       |
 5223|    348|        return it;
 5224|    396|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5201|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5202|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5203|  1.27k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    452|{
 4784|    452|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    452|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    452|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 114, False: 338]
  ------------------
 4788|    114|        return detail::unexpected_scan_error(
 4789|    114|            scan_error::invalid_scanned_value,
 4790|    114|            "Invalid encoding in scanned string");
 4791|    114|    }
 4792|       |
 4793|    338|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    338|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    338|    return SCN_MOVE(result);
  ------------------
  |  |  934|    338|    static_cast<    \
  |  |  935|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    338|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|  1.62k|    {
 4921|  1.62k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.28k|    }                                                  \
  |  |  |  | 3939|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|    336|        return read_string_impl(range, it, value);
 4923|  1.62k|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4942|  4.87k|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|  4.87k|        else {
 4950|  4.87k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 0, False: 4.87k]
  ------------------
 4951|      0|                return detail::unexpected_scan_error(
 4952|      0|                    scan_error::invalid_format_string,
 4953|      0|                    "Cannot use regex with a non-contiguous source "
 4954|      0|                    "range");
 4955|      0|            }
 4956|       |
 4957|  4.87k|            auto input = get_as_contiguous(range);
 4958|  4.87k|            SCN_TRY(it,
  ------------------
  |  | 3940|  4.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.86k, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.86k|    }                                                  \
  |  |  |  | 3939|  4.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|  1.00k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|  1.00k|            return ranges::next(range.begin(),
 4961|  1.00k|                                ranges::distance(input.begin(), it));
 4962|  4.87k|        }
 4963|  4.87k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  959|  4.87k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  4.87k|                  ranges::sized_range<Range>) {
  962|  4.87k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  4.87k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1065|  4.87k|{
 1066|  4.87k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  4.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  4.87k|                  ranges::sized_range<Range>) {
 1070|  4.87k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  4.87k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  981|  4.87k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  4.87k|                  ranges::sized_range<Range>) {
  984|  4.87k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  4.87k|}
_ZN3scn2v44impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4367|  4.87k|{
 4368|  4.87k|    static_assert(ranges::contiguous_range<Input> &&
 4369|  4.87k|                  ranges::borrowed_range<Input> &&
 4370|  4.87k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4371|       |
 4372|  4.87k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4373|  4.87k|    std::basic_regex<CharT> re{};
 4374|  4.87k|    try {
 4375|  4.87k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  4.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4376|  4.87k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4377|  4.87k|                                     re_flags | std::regex_constants::nosubs};
 4378|  4.87k|    }
 4379|  4.87k|    catch (const std::regex_error& err) {
 4380|  2.05k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4381|  2.05k|                                             "Invalid regex");
 4382|  2.05k|    }
 4383|       |
 4384|  2.82k|    std::match_results<const CharT*> matches{};
 4385|  2.82k|    try {
 4386|  2.82k|        bool found = std::regex_search(input.data(),
 4387|  2.82k|                                       input.data() + input.size(), matches, re,
 4388|  2.82k|                                       std::regex_constants::match_continuous);
 4389|  2.82k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4389:13): [True: 1.81k, False: 1.00k]
  |  Branch (4389:23): [True: 0, False: 1.00k]
  ------------------
 4390|  1.77k|            return detail::unexpected_scan_error(
 4391|  1.77k|                scan_error::invalid_scanned_value,
 4392|  1.77k|                "Regular expression didn't match");
 4393|  1.77k|        }
 4394|  2.82k|    }
 4395|  2.82k|    catch (const std::regex_error& err) {
 4396|     36|        return detail::unexpected_scan_error(
 4397|     36|            scan_error::invalid_format_string,
 4398|     36|            "Regex matching failed with an error");
 4399|     36|    }
 4400|       |
 4401|  1.00k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4402|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4403|       |    auto re =
 4404|       |#if SCN_REGEX_BOOST_USE_ICU
 4405|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4406|       |                             make_regex_flags(flags) |
 4407|       |                                 boost::regex_constants::no_except |
 4408|       |                                 boost::regex_constants::nosubs);
 4409|       |#else
 4410|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4411|       |                                  make_regex_flags(flags) |
 4412|       |                                      boost::regex_constants::no_except |
 4413|       |                                      boost::regex_constants::nosubs};
 4414|       |#endif
 4415|       |    if (re.status() != 0) {
 4416|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4417|       |                                             "Invalid regex");
 4418|       |    }
 4419|       |
 4420|       |    boost::match_results<const CharT*> matches{};
 4421|       |    try {
 4422|       |        bool found =
 4423|       |#if SCN_REGEX_BOOST_USE_ICU
 4424|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4425|       |                                   matches, re,
 4426|       |                                   boost::regex_constants::match_continuous);
 4427|       |#else
 4428|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4429|       |                                matches, re,
 4430|       |                                boost::regex_constants::match_continuous);
 4431|       |#endif
 4432|       |        if (!found || matches.prefix().matched) {
 4433|       |            return detail::unexpected_scan_error(
 4434|       |                scan_error::invalid_scanned_value,
 4435|       |                "Regular expression didn't match");
 4436|       |        }
 4437|       |    }
 4438|       |    catch (const std::runtime_error& err) {
 4439|       |        return detail::unexpected_scan_error(
 4440|       |            scan_error::invalid_format_string,
 4441|       |            "Regex matching failed with an error");
 4442|       |    }
 4443|       |
 4444|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4445|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4446|       |    static_assert(std::is_same_v<CharT, char>);
 4447|       |    std::string flagged_pattern{};
 4448|       |    auto re = [&]() {
 4449|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4450|       |        opts.set_never_capture(true);
 4451|       |        if (flagstr.empty()) {
 4452|       |            return re2::RE2{pattern, opts};
 4453|       |        }
 4454|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4455|       |        flagged_pattern.append(flagstr);
 4456|       |        flagged_pattern.append(pattern);
 4457|       |        return re2::RE2{flagged_pattern, opts};
 4458|       |    }();
 4459|       |    if (!re.ok()) {
 4460|       |        return detail::unexpected_scan_error(
 4461|       |            scan_error::invalid_format_string,
 4462|       |            "Failed to parse regular expression");
 4463|       |    }
 4464|       |
 4465|       |    auto new_input = detail::make_string_view_from_pointers(
 4466|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4467|       |    bool found = re2::RE2::Consume(&new_input, re);
 4468|       |    if (!found) {
 4469|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4470|       |                                             "Regular expression didn't match");
 4471|       |    }
 4472|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4473|       |#endif  // SCN_REGEX_BACKEND == ...
 4474|  2.82k|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5837|  2.84k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|  2.84k|                       std::is_same_v<T, std::wstring>) {
 5856|  2.84k|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  2.84k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|    128|{
 3097|    128|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|    128|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3098:13): [True: 128, False: 0]
  ------------------
 3099|    128|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    128|    static_cast<    \
  |  |  935|    128|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3100|    128|        }
 3101|      0|        else {
 3102|      0|            dest.assign(source.view());
 3103|      0|        }
 3104|       |    }
 3105|       |    else {
 3106|       |        return transcode_impl(source.view(), dest);
 3107|       |    }
 3108|       |
 3109|    128|    return {};
 3110|    128|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|    194|    {
 5303|    194|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    194|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    194|        return read_impl(range, specs, value);
 5305|    194|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|    194|    {
 5321|    194|        SCN_CLANG_PUSH
 5322|    194|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    194|        switch (m_type) {
 5325|     84|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 84, False: 110]
  ------------------
 5326|     84|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     16|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 16, False: 178]
  ------------------
 5329|     16|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     16|                                                                   value);
 5331|       |
 5332|     20|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 20, False: 174]
  ------------------
 5333|     20|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     68|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 68, False: 126]
  ------------------
 5336|     68|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     68|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      2|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2, False: 192]
  ------------------
 5341|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      2|                    range, specs.charset_string<SourceCharT>(),
 5343|      2|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 190]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 194]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    194|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    194|        }
 5357|       |
 5358|    194|        SCN_CLANG_POP
 5359|    194|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|     84|    {
 4850|     84|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     84|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|    120|{
 4784|    120|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    120|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    120|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 52, False: 68]
  ------------------
 4788|     52|        return detail::unexpected_scan_error(
 4789|     52|            scan_error::invalid_scanned_value,
 4790|     52|            "Invalid encoding in scanned string");
 4791|     52|    }
 4792|       |
 4793|     68|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     68|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 68]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     68|    return SCN_MOVE(result);
  ------------------
  |  |  934|     68|    static_cast<    \
  |  |  935|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     68|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4870|     16|    {
 4871|     16|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 16, False: 0]
  ------------------
 4872|     16|            return read_string_impl(
 4873|     16|                range,
 4874|     16|                read_until_code_unit(
 4875|     16|                    range,
 4876|     16|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     16|                        SourceCharT ch) { return ch == until; }),
 4878|     16|                value);
 4879|     16|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|     16|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    240|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    240|        else if constexpr (std::is_object_v<T>) {
  688|    240|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    240|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4877|    240|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4976|     20|    {
 4977|     20|        return read_impl(
 4978|     20|            range,
 4979|     20|            [&](const auto& rng) {
 4980|     20|                return read_string_impl(rng, read_all(rng), value);
 4981|     20|            },
 4982|     20|            detail::priority_tag<1>{});
 4983|     20|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|     20|    {
 5004|     20|        return read_cb(range);
 5005|     20|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4979|     20|            [&](const auto& rng) {
 4980|     20|                return read_string_impl(rng, read_all(rng), value);
 4981|     20|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5077|     68|    {
 5078|     68|        auto it = read_source_impl(range, {specs});
 5079|     68|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 60]
  |  |  ------------------
  ------------------
 5080|      8|            return unexpected(it.error());
 5081|      8|        }
 5082|       |
 5083|     60|        return read_string_impl(range, *it, value);
 5084|     68|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4783|     60|{
 4784|     60|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     60|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     60|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 60]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|     60|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     60|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 60]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     60|    return SCN_MOVE(result);
  ------------------
  |  |  934|     60|    static_cast<    \
  |  |  935|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     60|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      6|    {
 4921|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      6|    }
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|  2.10k|    {
 5303|  2.10k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  2.10k|        return read_impl(range, specs, value);
 5305|  2.10k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|  2.10k|    {
 5321|  2.10k|        SCN_CLANG_PUSH
 5322|  2.10k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  2.10k|        switch (m_type) {
 5325|    312|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 312, False: 1.79k]
  ------------------
 5326|    312|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 36, False: 2.06k]
  ------------------
 5329|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     36|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 2.10k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 132, False: 1.97k]
  ------------------
 5336|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    132|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  1.57k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 1.57k, False: 526]
  ------------------
 5341|  1.57k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  1.57k|                    range, specs.charset_string<SourceCharT>(),
 5343|  1.57k|                    specs.regexp_flags, value);
 5344|       |
 5345|     46|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 46, False: 2.05k]
  ------------------
 5346|     46|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     46|                    range,
 5348|     46|                    get_unescaped_regex_pattern(
 5349|     46|                        specs.charset_string<SourceCharT>()),
 5350|     46|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 2.10k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  2.10k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  2.10k|        }
 5357|       |
 5358|  2.10k|        SCN_CLANG_POP
 5359|  2.10k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|    772|    {
 4850|    772|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|    772|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|    808|{
 4784|    808|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    808|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    808|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 254, False: 554]
  ------------------
 4788|    254|        return detail::unexpected_scan_error(
 4789|    254|            scan_error::invalid_scanned_value,
 4790|    254|            "Invalid encoding in scanned string");
 4791|    254|    }
 4792|       |
 4793|    554|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    554|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 554]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    554|    return SCN_MOVE(result);
  ------------------
  |  |  934|    554|    static_cast<    \
  |  |  935|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    554|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|    892|{
 3117|    892|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|    892|        dest.assign(source.view());
 3119|       |    }
 3120|       |    else {
 3121|       |        return transcode_impl(source.view(), dest);
 3122|       |    }
 3123|       |
 3124|    892|    return {};
 3125|    892|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4870|     36|    {
 4871|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 36, False: 0]
  ------------------
 4872|     36|            return read_string_impl(
 4873|     36|                range,
 4874|     36|                read_until_code_unit(
 4875|     36|                    range,
 4876|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|     36|                        SourceCharT ch) { return ch == until; }),
 4878|     36|                value);
 4879|     36|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|     36|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4877|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|    132|    {
 5078|    132|        auto it = read_source_impl(range, {specs});
 5079|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 116]
  |  |  ------------------
  ------------------
 5080|     16|            return unexpected(it.error());
 5081|     16|        }
 5082|       |
 5083|    116|        return read_string_impl(range, *it, value);
 5084|    132|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    452|{
 4784|    452|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    452|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    452|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 114, False: 338]
  ------------------
 4788|    114|        return detail::unexpected_scan_error(
 4789|    114|            scan_error::invalid_scanned_value,
 4790|    114|            "Invalid encoding in scanned string");
 4791|    114|    }
 4792|       |
 4793|    338|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    338|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    338|    return SCN_MOVE(result);
  ------------------
  |  |  934|    338|    static_cast<    \
  |  |  935|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    338|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|  1.62k|    {
 4921|  1.62k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.28k|    }                                                  \
  |  |  |  | 3939|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|    336|        return read_string_impl(range, it, value);
 4923|  1.62k|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5837|  2.84k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|  2.84k|                       std::is_same_v<T, std::wstring_view>) {
 5852|  2.84k|        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|       |                       std::is_same_v<T, std::wstring>) {
 5856|       |        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  2.84k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|    194|    {
 5303|    194|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    194|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    194|        return read_impl(range, specs, value);
 5305|    194|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|    194|    {
 5321|    194|        SCN_CLANG_PUSH
 5322|    194|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    194|        switch (m_type) {
 5325|     84|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 84, False: 110]
  ------------------
 5326|     84|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     16|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 16, False: 178]
  ------------------
 5329|     16|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     16|                                                                   value);
 5331|       |
 5332|     20|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 20, False: 174]
  ------------------
 5333|     20|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     68|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 68, False: 126]
  ------------------
 5336|     68|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     68|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      2|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2, False: 192]
  ------------------
 5341|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      2|                    range, specs.charset_string<SourceCharT>(),
 5343|      2|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 190]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 194]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    194|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    194|        }
 5357|       |
 5358|    194|        SCN_CLANG_POP
 5359|    194|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4856|     84|    {
 4857|     84|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|     84|                                     value);
 4859|     84|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4802|    120|{
 4803|    120|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    120|    auto src = [&]() {
 4806|    120|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    120|            return make_contiguous_buffer(
 4808|    120|                ranges::subrange{range.begin().base(), result.base()});
 4809|    120|        }
 4810|    120|        else {
 4811|    120|            return make_contiguous_buffer(
 4812|    120|                ranges::subrange{range.begin(), result});
 4813|    120|        }
 4814|    120|    }();
 4815|    120|    using src_type = decltype(src);
 4816|       |
 4817|    120|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    120|    else {
 4830|    120|        const auto view = src.view();
 4831|    120|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    120|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 52, False: 68]
  ------------------
 4834|     52|            return detail::unexpected_scan_error(
 4835|     52|                scan_error::invalid_scanned_value,
 4836|     52|                "Invalid encoding in scanned string_view");
 4837|     52|        }
 4838|       |
 4839|     68|        return SCN_MOVE(result);
  ------------------
  |  |  934|     68|    static_cast<    \
  |  |  935|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    120|    }
 4841|    120|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4805|    120|    auto src = [&]() {
 4806|    120|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    120|            return make_contiguous_buffer(
 4808|    120|                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|       |        else {
 4811|       |            return make_contiguous_buffer(
 4812|       |                ranges::subrange{range.begin(), result});
 4813|       |        }
 4814|    120|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4892|     16|    {
 4893|     16|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4893:13): [True: 16, False: 0]
  ------------------
 4894|     16|            return read_string_view_impl(
 4895|     16|                range,
 4896|     16|                read_until_code_unit(
 4897|     16|                    range,
 4898|     16|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4899|     16|                        SourceCharT ch) { return ch == until; }),
 4900|     16|                value);
 4901|     16|        }
 4902|      0|        return read_string_view_impl(
 4903|      0|            range,
 4904|      0|            read_until_code_units(
 4905|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4906|      0|            value);
 4907|     16|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    240|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    240|        else if constexpr (std::is_object_v<T>) {
  688|    240|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    240|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4899|    240|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4988|     20|    {
 4989|     20|        return read_impl(
 4990|     20|            range,
 4991|     20|            [&](const auto& rng) {
 4992|     20|                return read_string_view_impl(rng, read_all(rng), value);
 4993|     20|            },
 4994|     20|            detail::priority_tag<1>{});
 4995|     20|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|     20|    {
 5004|     20|        return read_cb(range);
 5005|     20|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4991|     20|            [&](const auto& rng) {
 4992|     20|                return read_string_view_impl(rng, read_all(rng), value);
 4993|     20|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5091|     68|    {
 5092|     68|        auto it = read_source_impl(range, {specs});
 5093|     68|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 60]
  |  |  ------------------
  ------------------
 5094|      8|            return unexpected(it.error());
 5095|      8|        }
 5096|       |
 5097|     60|        return read_string_view_impl(range, *it, value);
 5098|     68|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4802|     60|{
 4803|     60|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|     60|    auto src = [&]() {
 4806|     60|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     60|            return make_contiguous_buffer(
 4808|     60|                ranges::subrange{range.begin().base(), result.base()});
 4809|     60|        }
 4810|     60|        else {
 4811|     60|            return make_contiguous_buffer(
 4812|     60|                ranges::subrange{range.begin(), result});
 4813|     60|        }
 4814|     60|    }();
 4815|     60|    using src_type = decltype(src);
 4816|       |
 4817|     60|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|     60|    else {
 4830|     60|        const auto view = src.view();
 4831|     60|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|     60|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 0, False: 60]
  ------------------
 4834|      0|            return detail::unexpected_scan_error(
 4835|      0|                scan_error::invalid_scanned_value,
 4836|      0|                "Invalid encoding in scanned string_view");
 4837|      0|        }
 4838|       |
 4839|     60|        return SCN_MOVE(result);
  ------------------
  |  |  934|     60|    static_cast<    \
  |  |  935|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|     60|    }
 4841|     60|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4805|     60|    auto src = [&]() {
 4806|     60|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     60|            return make_contiguous_buffer(
 4808|     60|                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|       |        else {
 4811|       |            return make_contiguous_buffer(
 4812|       |                ranges::subrange{range.begin(), result});
 4813|       |        }
 4814|     60|    }();
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4931|      6|    {
 4932|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_view_impl(range, it, value);
 4934|      6|    }
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5302|  2.10k|    {
 5303|  2.10k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  2.10k|        return read_impl(range, specs, value);
 5305|  2.10k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5320|  2.10k|    {
 5321|  2.10k|        SCN_CLANG_PUSH
 5322|  2.10k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  2.10k|        switch (m_type) {
 5325|    312|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 312, False: 1.79k]
  ------------------
 5326|    312|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 36, False: 2.06k]
  ------------------
 5329|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|     36|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 2.10k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 132, False: 1.97k]
  ------------------
 5336|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    132|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  1.57k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 1.57k, False: 526]
  ------------------
 5341|  1.57k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  1.57k|                    range, specs.charset_string<SourceCharT>(),
 5343|  1.57k|                    specs.regexp_flags, value);
 5344|       |
 5345|     46|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 46, False: 2.05k]
  ------------------
 5346|     46|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     46|                    range,
 5348|     46|                    get_unescaped_regex_pattern(
 5349|     46|                        specs.charset_string<SourceCharT>()),
 5350|     46|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 2.10k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  2.10k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  2.10k|        }
 5357|       |
 5358|  2.10k|        SCN_CLANG_POP
 5359|  2.10k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4856|    772|    {
 4857|    772|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|    772|                                     value);
 4859|    772|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4802|    808|{
 4803|    808|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    808|    auto src = [&]() {
 4806|    808|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    808|            return make_contiguous_buffer(
 4808|    808|                ranges::subrange{range.begin().base(), result.base()});
 4809|    808|        }
 4810|    808|        else {
 4811|    808|            return make_contiguous_buffer(
 4812|    808|                ranges::subrange{range.begin(), result});
 4813|    808|        }
 4814|    808|    }();
 4815|    808|    using src_type = decltype(src);
 4816|       |
 4817|    808|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    808|    else {
 4830|    808|        const auto view = src.view();
 4831|    808|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    808|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 254, False: 554]
  ------------------
 4834|    254|            return detail::unexpected_scan_error(
 4835|    254|                scan_error::invalid_scanned_value,
 4836|    254|                "Invalid encoding in scanned string_view");
 4837|    254|        }
 4838|       |
 4839|    554|        return SCN_MOVE(result);
  ------------------
  |  |  934|    554|    static_cast<    \
  |  |  935|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    808|    }
 4841|    808|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4805|    808|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    808|        else {
 4811|    808|            return make_contiguous_buffer(
 4812|    808|                ranges::subrange{range.begin(), result});
 4813|    808|        }
 4814|    808|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4892|     36|    {
 4893|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4893:13): [True: 36, False: 0]
  ------------------
 4894|     36|            return read_string_view_impl(
 4895|     36|                range,
 4896|     36|                read_until_code_unit(
 4897|     36|                    range,
 4898|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4899|     36|                        SourceCharT ch) { return ch == until; }),
 4900|     36|                value);
 4901|     36|        }
 4902|      0|        return read_string_view_impl(
 4903|      0|            range,
 4904|      0|            read_until_code_units(
 4905|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4906|      0|            value);
 4907|     36|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4899|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5091|    132|    {
 5092|    132|        auto it = read_source_impl(range, {specs});
 5093|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 116]
  |  |  ------------------
  ------------------
 5094|     16|            return unexpected(it.error());
 5095|     16|        }
 5096|       |
 5097|    116|        return read_string_view_impl(range, *it, value);
 5098|    132|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4802|    452|{
 4803|    452|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    452|    auto src = [&]() {
 4806|    452|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    452|            return make_contiguous_buffer(
 4808|    452|                ranges::subrange{range.begin().base(), result.base()});
 4809|    452|        }
 4810|    452|        else {
 4811|    452|            return make_contiguous_buffer(
 4812|    452|                ranges::subrange{range.begin(), result});
 4813|    452|        }
 4814|    452|    }();
 4815|    452|    using src_type = decltype(src);
 4816|       |
 4817|    452|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    452|    else {
 4830|    452|        const auto view = src.view();
 4831|    452|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    452|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 114, False: 338]
  ------------------
 4834|    114|            return detail::unexpected_scan_error(
 4835|    114|                scan_error::invalid_scanned_value,
 4836|    114|                "Invalid encoding in scanned string_view");
 4837|    114|        }
 4838|       |
 4839|    338|        return SCN_MOVE(result);
  ------------------
  |  |  934|    338|    static_cast<    \
  |  |  935|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    452|    }
 4841|    452|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4805|    452|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    452|        else {
 4811|    452|            return make_contiguous_buffer(
 4812|    452|                ranges::subrange{range.begin(), result});
 4813|    452|        }
 4814|    452|    }();
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4931|  1.62k|    {
 4932|  1.62k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.28k|    }                                                  \
  |  |  |  | 3939|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|    336|        return read_string_view_impl(range, it, value);
 4934|  1.62k|    }
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  6.10k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  6.10k|                  ranges::sized_range<Range>) {
 1785|  6.10k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  6.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  6.10k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  6.10k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  6.10k|    {
 1589|  6.10k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|  5.67k|{
 5824|  5.67k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 5825|      0|        return unexpected(e);
 5826|      0|    }
 5827|       |
 5828|  5.67k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 630, False: 5.04k]
  ------------------
 5829|    630|        return range.begin();
 5830|    630|    }
 5831|       |
 5832|  5.04k|    return skip_classic_whitespace(range);
 5833|  5.67k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|    630|    {
 3568|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|    630|        return read_default_with_base(range, value, 10);
 3570|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|    630|    {
 3568|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|    630|        return read_default_with_base(range, value, 10);
 3570|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5775|  1.11k|    {
 5776|  1.11k|        return true;
 5777|  1.11k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5793|    876|    {
 5794|    876|        detail::format_specs specs{};
 5795|    876|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|    876|        std::uintptr_t intvalue{};
 5798|    876|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    876|    }                                                  \
  |  |  |  | 3939|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|    876|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3139|  1.39k|    {
 3140|  1.39k|        return true;
 3141|  1.39k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5530|    630|    {
 5531|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5532|       |
 5533|    630|        return bool_reader<CharT>{}.read_classic(range, value);
 5534|    630|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5374|  1.09k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5380|  1.01k|    {
 5381|  1.01k|        scan_error err{scan_error::invalid_scanned_value,
 5382|  1.01k|                       "Failed to read boolean"};
 5383|       |
 5384|  1.01k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 894, False: 124]
  ------------------
 5385|    894|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 894]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|    894|            else {
 5389|    894|                err = r.error();
 5390|    894|            }
 5391|    894|        }
 5392|       |
 5393|  1.01k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 996, False: 22]
  ------------------
 5394|    996|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 996]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|    996|            else {
 5398|    996|                err = r.error();
 5399|    996|            }
 5400|    996|        }
 5401|       |
 5402|  1.01k|        return unexpected(err);
 5403|  1.01k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5409|    908|    {
 5410|    908|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 908]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|    908|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 908]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|    908|        return detail::unexpected_scan_error(
 5420|    908|            scan_error::invalid_scanned_value,
 5421|    908|            "Failed to read numeric boolean value: No match");
 5422|    908|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5427|    996|    {
 5428|    996|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 996]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|    996|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 996]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|    996|        return detail::unexpected_scan_error(
 5438|    996|            scan_error::invalid_scanned_value,
 5439|    996|            "Failed to read textual boolean value: No match");
 5440|    996|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  1.99k|{
 2294|  1.99k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 100, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    100|    }                                                  \
  |  |  |  | 3939|  1.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.89k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.89k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|  1.89k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|  1.89k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|  1.89k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.89k, False: 0]
  |  |  ------------------
  ------------------
 2301|  1.89k|            return unexpected(parse_error::error);
 2302|  1.89k|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|  1.89k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3688|    630|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3674|  1.09k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|    630|    {
 4174|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|    630|        float_reader<CharT> rd{};
 4177|    630|        return read_impl<Range>(
 4178|    630|            range, rd,
 4179|    630|            [](float_reader<CharT>& r, auto&&... args) {
 4180|    630|                return r.read_source(SCN_FWD(args)...);
 4181|    630|            },
 4182|    630|            value);
 4183|    630|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    630|        : m_fptr([](storage fn,
  743|    630|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    630|              cvref<T> obj = *get<T>(fn);
  745|    630|              if constexpr (std::is_void_v<R>) {
  746|    630|                  obj(static_cast<decltype(args)>(args)...);
  747|    630|              }
  748|    630|              else {
  749|    630|                  return obj(static_cast<decltype(args)>(args)...);
  750|    630|              }
  751|    630|          }),
  752|    630|          m_storage(std::addressof(f))
  753|    630|    {
  754|    630|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    630|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    630|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    630|              else {
  749|    630|                  return obj(static_cast<decltype(args)>(args)...);
  750|    630|              }
  751|    630|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    630|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    630|        else if constexpr (std::is_object_v<T>) {
  688|    630|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    630|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|    630|            [](float_reader<CharT>& r, auto&&... args) {
 4180|    630|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|    630|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    630|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    630|        {
  662|    630|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5291|    630|    {
 5292|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|    630|    {
 5292|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|    630|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    630|                          basic_contiguous_scan_context<char_type>>) {
 5904|    630|            auto rd = make_reader<T, char_type>();
 5905|    630|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    630|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|    630|    {
 5892|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    630|                        .transform_error(make_eof_scan_error));
 5894|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    630|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|    630|    {
 5292|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|    630|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2974|  78.7k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|  78.7k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|  78.7k|          m_current(m_range.begin())
 2977|  78.7k|    {
 2978|  78.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2986|   122k|    {
 2987|   122k|        return m_range.end();
 2988|   122k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  33.0k|{
 1319|       |    // TODO: optimize
 1320|  33.0k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  33.0k|    auto res = get_next_code_point(str);
 1322|  33.0k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  33.0k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3001|  36.3k|    {
 3002|  36.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|  36.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|  36.3k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 36.3k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|  36.3k|        }
 3008|  36.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  36.3k|    static_cast<    \
  |  |  935|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|  36.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2991|  52.1k|    {
 2992|  52.1k|        return ranges::subrange{begin(), end()};
 2993|  52.1k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  6.10k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  6.10k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  6.10k|        auto buf = make_contiguous_buffer(range);
 2220|  6.10k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  6.10k|        return ranges::next(range.begin(),
 2222|  6.10k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  6.10k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6062|  3.37k|    {
 6063|  3.37k|        const bool need_skipped_width =
 6064|  3.37k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 46, False: 3.32k]
  |  Branch (6064:33): [True: 3.32k, False: 0]
  ------------------
 6065|  3.37k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  3.37k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 166, False: 3.20k]
  ------------------
 6069|  3.37k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 504, False: 2.70k]
  ------------------
 6070|    670|            return skip_fill(rng, specs.precision, specs.fill,
 6071|    670|                             need_skipped_width);
 6072|    670|        }
 6073|  2.70k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 2.61k, False: 94]
  |  Branch (6073:56): [True: 1.78k, False: 830]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|  1.78k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 1.78k, False: 0]
  ------------------
 6077|  1.78k|                auto max_width_view = take_width(rng, specs.precision);
 6078|  1.78k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|  1.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 174, False: 1.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    174|    }                                                  \
  |  |  |  | 3939|  1.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|  1.60k|                                  .transform_error(make_eof_scan_error));
 6080|  1.60k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|  1.78k|            }
 6082|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|      0|                            make_eof_scan_error));
 6084|       |
 6085|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|      0|            return result_type{it, 0};
 6093|      0|        }
 6094|       |
 6095|    924|        return result_type{rng.begin(), 0};
 6096|  2.70k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5977|    670|{
 5978|    670|    using char_type = detail::char_t<Range>;
 5979|    670|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5980|       |
 5981|    670|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5981:9): [True: 424, False: 246]
  ------------------
 5982|    424|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5983|    424|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5984|       |
 5985|    424|        if (max_width == 0) {
  ------------------
  |  Branch (5985:13): [True: 0, False: 424]
  ------------------
 5986|      0|            auto it = read_while_code_unit(range, pred);
 5987|       |
 5988|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5988:17): [True: 0, False: 0]
  ------------------
 5989|      0|                auto prefix_width =
 5990|      0|                    static_cast<std::ptrdiff_t>(
 5991|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5992|      0|                    ranges::distance(range.begin(), it);
 5993|      0|                return result_type{it, prefix_width};
 5994|      0|            }
 5995|      0|            return result_type{it, 0};
 5996|      0|        }
 5997|       |
 5998|    424|        auto max_width_view = take_width(range, max_width);
 5999|    424|        auto w_it = read_while_code_unit(max_width_view, pred);
 6000|       |
 6001|    424|        if (want_skipped_width) {
  ------------------
  |  Branch (6001:13): [True: 424, False: 0]
  ------------------
 6002|    424|            return result_type{w_it.base(), max_width - w_it.count()};
 6003|    424|        }
 6004|      0|        return result_type{w_it.base(), 0};
 6005|    424|    }
 6006|       |
 6007|    246|    const auto fill_chars = fill.template get_code_units<char_type>();
 6008|    246|    if (max_width == 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 246]
  ------------------
 6009|      0|        auto it = read_while_code_units(range, fill_chars);
 6010|       |
 6011|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            auto prefix_width =
 6013|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6014|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6015|      0|            return result_type{it, prefix_width};
 6016|      0|        }
 6017|      0|        return result_type{it, 0};
 6018|      0|    }
 6019|       |
 6020|    246|    auto max_width_view = take_width(range, max_width);
 6021|    246|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6022|       |
 6023|    246|    if (want_skipped_width) {
  ------------------
  |  Branch (6023:9): [True: 246, False: 0]
  ------------------
 6024|    246|        return result_type{w_it.base(), max_width - w_it.count()};
 6025|    246|    }
 6026|      0|    return result_type{w_it.base(), 0};
 6027|    246|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    424|        : m_fptr([](storage fn,
  743|    424|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    424|              cvref<T> obj = *get<T>(fn);
  745|    424|              if constexpr (std::is_void_v<R>) {
  746|    424|                  obj(static_cast<decltype(args)>(args)...);
  747|    424|              }
  748|    424|              else {
  749|    424|                  return obj(static_cast<decltype(args)>(args)...);
  750|    424|              }
  751|    424|          }),
  752|    424|          m_storage(std::addressof(f))
  753|    424|    {
  754|    424|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    606|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    606|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    606|              else {
  749|    606|                  return obj(static_cast<decltype(args)>(args)...);
  750|    606|              }
  751|    606|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    606|    {
  684|    606|        if constexpr (std::is_const_v<T>) {
  685|    606|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    606|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5983|    606|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    424|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    424|        {
  667|    424|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    424|{
 2075|    424|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    424|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    424|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    424|    else {
 2060|    424|        auto first = range.begin();
 2061|    660|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 606, False: 54]
  ------------------
 2062|    606|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 370, False: 236]
  ------------------
 2063|    370|                return first;
 2064|    370|            }
 2065|    606|        }
 2066|     54|        return first;
 2067|    424|    }
 2068|    424|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2909|  4.23k|    {
 2910|  4.23k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|  4.23k|                                      m_count};
 2912|  4.23k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2816|  17.5k|    {
 2817|  17.5k|        return view;
 2818|  17.5k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  4.23k|        : m_current(x), m_end(s), m_count(n)
 2481|  4.23k|    {
 2482|  4.23k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2880|  6.42k|        {
 2881|  6.42k|            return !(y == x);
 2882|  6.42k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2869|  12.0k|        {
 2870|  12.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 784, False: 11.2k]
  |  Branch (2870:39): [True: 454, False: 330]
  ------------------
 2871|  12.0k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 0, False: 11.5k]
  ------------------
 2872|  12.0k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|    784|    {
 2521|    784|        return m_multibyte_left;
 2522|    784|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2915|  9.10k|    {
 2916|  9.10k|        return sentinel<true>{m_base.get().end()};
 2917|  9.10k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2850|  9.10k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  9.10k|    static_cast<    \
  |  |  935|  9.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2525|  8.28k|    {
 2526|  8.28k|        return *m_current;
 2527|  8.28k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2534|  10.1k|    {
 2535|  10.1k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|  10.1k|        _increment_current();
 2537|  10.1k|        return *this;
 2538|  10.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2767|  10.1k|    {
 2768|  10.1k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 5.52k, False: 4.63k]
  ------------------
 2769|  5.52k|            auto cplen = _get_cp_length_at_current();
 2770|  5.52k|            m_multibyte_left = cplen - 1;
 2771|  5.52k|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|  5.52k|        }
 2773|  4.63k|        else {
 2774|  4.63k|            --m_multibyte_left;
 2775|  4.63k|        }
 2776|       |
 2777|  10.1k|        ++m_current;
 2778|  10.1k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2738|  5.52k|    {
 2739|  5.52k|        return static_cast<difference_type>(
 2740|  5.52k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|  5.52k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2744|  5.52k|    {
 2745|  5.52k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.52k]
  |  |  ------------------
  ------------------
 2746|      0|            return 0;
 2747|      0|        }
 2748|       |
 2749|  5.52k|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 2.82k, False: 2.70k]
  ------------------
 2750|  2.82k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  2.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|  2.82k|            auto cp = static_cast<char32_t>(*m_current);
 2752|  2.82k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|  2.82k|        }
 2754|       |
 2755|  2.70k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|  2.70k|                                           cplen);
 2757|  2.70k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  2.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.70k]
  |  |  ------------------
  ------------------
 2758|      0|            return 0;
 2759|      0|        }
 2760|       |
 2761|  2.70k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|  2.70k|        return static_cast<difference_type>(
 2763|  2.70k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|  2.70k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2135|    246|{
 2136|    246|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    246|    auto it = range.begin();
 2139|    246|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 246, False: 0]
  ------------------
 2140|    246|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    246|                                           needle.size());
 2142|    246|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 52, False: 194]
  ------------------
 2143|     52|            return it;
 2144|     52|        }
 2145|    194|        static_assert(
 2146|    194|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    194|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 194, False: 0]
  ------------------
 2148|    194|            return it;
 2149|    194|        }
 2150|      0|        it = *r;
 2151|      0|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1955|    246|{
 1956|    246|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    246|    else {
 1967|    246|        auto it = range.begin();
 1968|    246|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 246]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|    996|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 802, False: 194]
  ------------------
 1973|    802|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 52, False: 750]
  ------------------
 1974|     52|                return unexpected(eof_error::eof);
 1975|     52|            }
 1976|    802|        }
 1977|       |
 1978|    194|        return it;
 1979|    246|    }
 1980|    246|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1095|    246|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    246|    else {
 1116|    246|        return 0;
 1117|    246|    }
 1118|    246|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  1.78k|    {
  268|  1.78k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.78k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.78k|    {
  161|  1.78k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.78k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.78k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.78k|        else {
  169|  1.78k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.78k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.78k|        }
  173|  1.78k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2630|  6.58k|    {
 2631|  6.58k|        return !(a == b);
 2632|  6.58k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2622|  6.58k|    {
 2623|  6.58k|        return a.m_current == b.m_current;
 2624|  6.58k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2931|  2.45k|    {
 2932|  2.45k|        return take_width_view{r, n};
 2933|  2.45k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2899|  2.45k|        : m_base(base), m_count(count)
 2900|  2.45k|    {
 2901|  2.45k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2813|  2.45k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|  1.78k|{
 3055|  1.78k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 1.78k, False: 0]
  ------------------
 3056|  1.78k|        auto it = read_while_classic_space(range);
 3057|  1.78k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|  1.78k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 174, False: 1.60k]
  |  |  ------------------
  ------------------
 3059|    174|            return unexpected(e);
 3060|    174|        }
 3061|       |
 3062|  1.60k|        return it;
 3063|  1.78k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|  1.78k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.78k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.78k|    else {
 2225|  1.78k|        auto it = range.begin();
 2226|       |
 2227|  1.78k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.78k|            auto seg = get_contiguous_beginning(range);
 2229|  1.78k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.78k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 1.78k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  1.78k|            ranges::advance(it, seg.size());
 2234|  1.78k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.78k|            return detail::is_cp_space(cp);
 2238|  1.78k|        });
 2239|  1.78k|    }
 2240|  1.78k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|  1.78k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.78k|    else {
 1059|  1.78k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.78k|    }
 1061|  1.78k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  1.78k|{
 2181|  1.78k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.78k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.78k|{
 2160|  1.78k|    auto it = range.begin();
 2161|  3.17k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 2.99k, False: 174]
  ------------------
 2162|  2.99k|        const auto val =
 2163|  2.99k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  2.99k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  2.99k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.99k, False: 0]
  |  |  ------------------
  ------------------
 2165|  2.99k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  2.99k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  2.99k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.60k, False: 1.39k]
  ------------------
 2168|  1.60k|                return it;
 2169|  1.60k|            }
 2170|  2.99k|        }
 2171|  1.39k|        it = val.iterator;
 2172|  1.39k|    }
 2173|       |
 2174|    174|    return it;
 2175|  1.78k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  2.99k|{
 1998|  2.99k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  2.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  2.99k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  2.99k|    auto it = range.begin();
 2002|  2.99k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  2.99k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.99k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  2.99k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.14k, False: 852]
  ------------------
 2011|  2.14k|        ++it;
 2012|  2.14k|        return {it, string_type(1, *range.begin())};
 2013|  2.14k|    }
 2014|       |
 2015|    852|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|    852|    return {it, string_type{range.begin(), it}};
 2017|  2.99k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  4.77k|{
  945|  4.77k|    return is_range_eof(r.begin(), r.end());
  946|  4.77k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  4.77k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  4.77k|    {
  938|  4.77k|        return begin == end;
  939|  4.77k|    }
  940|  4.77k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    852|    {
  283|    852|        return n - fn::impl_i_n_s(i, n, bound);
  284|    852|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    852|    {
  227|    852|        constexpr iter_difference_t<I> zero{0};
  228|    852|        iter_difference_t<I> counter{0};
  229|       |
  230|    852|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 852]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    852|        else {
  237|  3.19k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.34k, False: 852]
  |  Branch (237:34): [True: 2.34k, False: 0]
  ------------------
  238|  2.34k|                ++i;
  239|  2.34k|                ++counter;
  240|  2.34k|            }
  241|    852|        }
  242|       |
  243|    852|        return counter;
  244|    852|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|  2.99k|    {
 1989|  2.99k|        return !codepoint.empty();
 1990|  2.99k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.78k|        : m_fptr([](storage fn,
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|  1.78k|              if constexpr (std::is_void_v<R>) {
  746|  1.78k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.78k|              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
  752|  1.78k|          m_storage(std::addressof(f))
  753|  1.78k|    {
  754|  1.78k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.99k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.99k|              else {
  749|  2.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.99k|              }
  751|  2.99k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.99k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.99k|        else if constexpr (std::is_object_v<T>) {
  688|  2.99k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.99k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  2.99k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  2.99k|            return detail::is_cp_space(cp);
 2238|  2.99k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.78k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.78k|        {
  662|  1.78k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  1.78k|{
  951|  1.78k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 174, False: 1.60k]
  |  |  ------------------
  ------------------
  952|    174|        return eof_error::eof;
  953|    174|    }
  954|  1.60k|    return eof_error::good;
  955|  1.78k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  13.8k|    {
 2513|  13.8k|        return m_current;
 2514|  13.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  14.2k|    {
 2517|  14.2k|        return m_count;
 2518|  14.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|  13.0k|    {
 6063|  13.0k|        const bool need_skipped_width =
 6064|  13.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 1.83k, False: 11.2k]
  |  Branch (6064:33): [True: 0, False: 11.2k]
  ------------------
 6065|  13.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  13.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 128, False: 12.9k]
  ------------------
 6069|  13.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 924, False: 12.0k]
  ------------------
 6070|  1.05k|            return skip_fill(rng, specs.precision, specs.fill,
 6071|  1.05k|                             need_skipped_width);
 6072|  1.05k|        }
 6073|  12.0k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 11.2k, False: 726]
  |  Branch (6073:56): [True: 1.63k, False: 9.66k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|  1.63k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 1.63k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|  3.26k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|  3.26k|                            make_eof_scan_error));
 6084|       |
 6085|  3.26k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 1.01k, False: 614]
  ------------------
 6086|  1.01k|                return result_type{
 6087|  1.01k|                    it,
 6088|  1.01k|                    calculate_text_width(make_contiguous_buffer(
 6089|  1.01k|                                             ranges::subrange{rng.begin(), it})
 6090|  1.01k|                                             .view())};
 6091|  1.01k|            }
 6092|    614|            return result_type{it, 0};
 6093|  3.26k|        }
 6094|       |
 6095|  10.3k|        return result_type{rng.begin(), 0};
 6096|  12.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|  3.93k|    {
 6105|  3.93k|        const bool need_skipped_width =
 6106|  3.93k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 454, False: 3.47k]
  |  Branch (6106:33): [True: 1.03k, False: 2.44k]
  ------------------
 6107|  3.93k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  3.93k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 294, False: 3.63k]
  ------------------
 6110|  3.93k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 304, False: 3.33k]
  ------------------
 6111|    598|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 218, False: 380]
  ------------------
 6112|    598|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 92, False: 126]
  ------------------
 6113|     92|                return result_type{rng.begin(), 0};
 6114|     92|            }
 6115|    506|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|    506|                             specs.fill, need_skipped_width);
 6117|    598|        }
 6118|  3.33k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 3.21k, False: 122]
  ------------------
 6119|  3.33k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 2.91k, False: 300]
  ------------------
 6120|  3.33k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 214, False: 2.69k]
  |  Branch (6120:35): [True: 184, False: 30]
  ------------------
 6121|  2.91k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 542, False: 2.18k]
  ------------------
 6122|  2.72k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 442, False: 100]
  ------------------
 6123|    626|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 442, False: 184]
  ------------------
 6124|    442|                const auto initial_width =
 6125|    442|                    specs.precision - prefix_width - value_width;
 6126|    442|                auto max_width_view = take_width(rng, initial_width);
 6127|    442|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    442|                                  .transform_error(make_eof_scan_error));
 6129|    442|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|    442|            }
 6131|    368|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|    368|                            make_eof_scan_error));
 6133|       |
 6134|    368|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 184, False: 0]
  ------------------
 6135|    184|                return result_type{
 6136|    184|                    it,
 6137|    184|                    calculate_text_width(make_contiguous_buffer(
 6138|    184|                                             ranges::subrange{rng.begin(), it})
 6139|    184|                                             .view())};
 6140|    184|            }
 6141|      0|            return result_type{it, 0};
 6142|    368|        }
 6143|  2.70k|        return result_type{rng.begin(), 0};
 6144|  3.33k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|  4.48k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.48k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.48k|            auto rd = make_reader<T, char_type>();
 6220|  4.48k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.48k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.93k, False: 558]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.93k|    }
  ------------------
 6221|    558|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    558|    {
 6150|    558|        const bool need_skipped_width =
 6151|    558|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 186, False: 372]
  |  Branch (6151:33): [True: 280, False: 92]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    558|        auto it = rng.begin();
 6155|    558|        std::ptrdiff_t prefix_width = 0;
 6156|    558|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 282, False: 276]
  ------------------
 6157|    282|            auto max_width_view = take_width(rng, specs.precision);
 6158|    282|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    258|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    258|            it = prefix_result.first.base();
 6161|    258|            prefix_width = prefix_result.second;
 6162|    258|        }
 6163|    276|        else {
 6164|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    276|            std::tie(it, prefix_width) = prefix_result;
 6166|    276|        }
 6167|    534|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    534|        std::ptrdiff_t value_width = 0;
 6171|    534|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 258, False: 276]
  ------------------
 6172|    258|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 252]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    252|            const auto initial_width = specs.precision - prefix_width;
 6180|    252|            auto max_width_view =
 6181|    252|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    252|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    252|    }                                                  \
  |  |  |  | 3939|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    276|        else {
 6187|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    276|    }                                                  \
  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|  4.48k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.48k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.48k|            auto rd = make_reader<T, char_type>();
 6220|  4.48k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.48k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.93k, False: 558]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.93k|    }
  ------------------
 6221|    558|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    558|    {
 6150|    558|        const bool need_skipped_width =
 6151|    558|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 186, False: 372]
  |  Branch (6151:33): [True: 280, False: 92]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    558|        auto it = rng.begin();
 6155|    558|        std::ptrdiff_t prefix_width = 0;
 6156|    558|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 282, False: 276]
  ------------------
 6157|    282|            auto max_width_view = take_width(rng, specs.precision);
 6158|    282|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    258|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    258|            it = prefix_result.first.base();
 6161|    258|            prefix_width = prefix_result.second;
 6162|    258|        }
 6163|    276|        else {
 6164|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    276|            std::tie(it, prefix_width) = prefix_result;
 6166|    276|        }
 6167|    534|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    534|        std::ptrdiff_t value_width = 0;
 6171|    534|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 258, False: 276]
  ------------------
 6172|    258|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 252]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    252|            const auto initial_width = specs.precision - prefix_width;
 6180|    252|            auto max_width_view =
 6181|    252|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    252|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    252|    }                                                  \
  |  |  |  | 3939|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    276|        else {
 6187|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    276|    }                                                  \
  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6214|  4.45k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.45k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.45k|            auto rd = make_reader<T, char_type>();
 6220|  4.45k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.45k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.96k, False: 486]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.96k|    }
  ------------------
 6221|    486|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.45k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5780|  4.45k|    {
 5781|  4.45k|        reader_error_handler eh{};
 5782|  4.45k|        detail::check_pointer_type_specs(specs, eh);
 5783|  4.45k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.96k, False: 486]
  |  |  ------------------
  ------------------
 5784|  3.96k|            return detail::unexpected_scan_error(
 5785|  3.96k|                scan_error::invalid_format_string, eh.m_msg);
 5786|  3.96k|        }
 5787|    486|        return {};
 5788|  4.45k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6149|    486|    {
 6150|    486|        const bool need_skipped_width =
 6151|    486|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 180, False: 306]
  |  Branch (6151:33): [True: 238, False: 68]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    486|        auto it = rng.begin();
 6155|    486|        std::ptrdiff_t prefix_width = 0;
 6156|    486|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 240, False: 246]
  ------------------
 6157|    240|            auto max_width_view = take_width(rng, specs.precision);
 6158|    240|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 224]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    224|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    224|            it = prefix_result.first.base();
 6161|    224|            prefix_width = prefix_result.second;
 6162|    224|        }
 6163|    246|        else {
 6164|    246|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    246|            std::tie(it, prefix_width) = prefix_result;
 6166|    246|        }
 6167|    470|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    470|        std::ptrdiff_t value_width = 0;
 6171|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 224, False: 246]
  ------------------
 6172|    224|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 4, False: 220]
  ------------------
 6173|      4|                return detail::unexpected_scan_error(
 6174|      4|                    scan_error::invalid_fill,
 6175|      4|                    "Too many fill characters before value, "
 6176|      4|                    "precision exceeded before reading value");
 6177|      4|            }
 6178|       |
 6179|    220|            const auto initial_width = specs.precision - prefix_width;
 6180|    220|            auto max_width_view =
 6181|    220|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    220|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    246|        else {
 6187|    246|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 246, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    246|    }                                                  \
  |  | 3939|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5810|    220|    {
 5811|    220|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    220|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|    220|        return read_default(range, value, loc);
 5813|    220|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5793|    220|    {
 5794|    220|        detail::format_specs specs{};
 5795|    220|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|    220|        std::uintptr_t intvalue{};
 5798|    220|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|    220|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5810|    246|    {
 5811|    246|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    246|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|    246|        return read_default(range, value, loc);
 5813|    246|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6214|  4.48k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.48k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.48k|            auto rd = make_reader<T, char_type>();
 6220|  4.48k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.48k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.72k, False: 760]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.72k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.72k|    }
  ------------------
 6221|    760|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.48k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|  4.48k|    {
 3145|  4.48k|        reader_error_handler eh{};
 3146|  4.48k|        get_derived().check_specs_impl(specs, eh);
 3147|  4.48k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.72k, False: 760]
  |  |  ------------------
  ------------------
 3148|  3.72k|            return detail::unexpected_scan_error(
 3149|  3.72k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  3.72k|        }
 3151|    760|        return {};
 3152|  4.48k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3156|  4.48k|    {
 3157|  4.48k|        return static_cast<Derived&>(*this);
 3158|  4.48k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5523|  4.48k|    {
 5524|  4.48k|        detail::check_bool_type_specs(specs, eh);
 5525|  4.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    760|    {
 6150|    760|        const bool need_skipped_width =
 6151|    760|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 196, False: 564]
  |  Branch (6151:33): [True: 348, False: 216]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    760|        auto it = rng.begin();
 6155|    760|        std::ptrdiff_t prefix_width = 0;
 6156|    760|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 352, False: 408]
  ------------------
 6157|    352|            auto max_width_view = take_width(rng, specs.precision);
 6158|    352|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    324|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    324|            it = prefix_result.first.base();
 6161|    324|            prefix_width = prefix_result.second;
 6162|    324|        }
 6163|    408|        else {
 6164|    408|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    408|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    408|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    408|            std::tie(it, prefix_width) = prefix_result;
 6166|    408|        }
 6167|    732|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    732|        std::ptrdiff_t value_width = 0;
 6171|    732|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 324, False: 408]
  ------------------
 6172|    324|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 318]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    318|            const auto initial_width = specs.precision - prefix_width;
 6180|    318|            auto max_width_view =
 6181|    318|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    318|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 318, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    318|    }                                                  \
  |  |  |  | 3939|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    408|        else {
 6187|    408|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 408, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    408|    }                                                  \
  |  | 3939|    408|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5542|    318|    {
 5543|    318|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|    318|#if !SCN_DISABLE_LOCALE
 5546|    318|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 12, False: 306]
  ------------------
 5547|     12|            return rd.read_localized(range, loc, value);
 5548|     12|        }
 5549|    306|#endif
 5550|       |
 5551|    306|        return rd.read_classic(range, value);
 5552|    318|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5555|    726|    {
 5556|    726|        SCN_GCC_COMPAT_PUSH
 5557|    726|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5558|       |
 5559|    726|        switch (specs.type) {
 5560|    196|            case detail::presentation_type::string:
  ------------------
  |  Branch (5560:13): [True: 196, False: 530]
  ------------------
 5561|    196|                return bool_reader_base::allow_text;
 5562|       |
 5563|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5563:13): [True: 12, False: 714]
  ------------------
 5564|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5564:13): [True: 8, False: 718]
  ------------------
 5565|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5565:13): [True: 6, False: 720]
  ------------------
 5566|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5566:13): [True: 12, False: 714]
  ------------------
 5567|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5567:13): [True: 16, False: 710]
  ------------------
 5568|     58|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5568:13): [True: 4, False: 722]
  ------------------
 5569|     58|                return bool_reader_base::allow_numeric;
 5570|       |
 5571|    472|            default:
  ------------------
  |  Branch (5571:13): [True: 472, False: 254]
  ------------------
 5572|    472|                return bool_reader_base::allow_text |
 5573|    472|                       bool_reader_base::allow_numeric;
 5574|    726|        }
 5575|       |
 5576|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5577|    726|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5453|     12|    {
 5454|     12|        scan_error err{scan_error::invalid_scanned_value,
 5455|     12|                       "Failed to read boolean"};
 5456|       |
 5457|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5457:13): [True: 10, False: 2]
  ------------------
 5458|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5458:22): [True: 0, False: 10]
  ------------------
 5459|      0|                return *r;
 5460|      0|            }
 5461|     10|            else {
 5462|     10|                err = r.error();
 5463|     10|            }
 5464|     10|        }
 5465|       |
 5466|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5466:13): [True: 10, False: 2]
  ------------------
 5467|     10|            auto stdloc = loc.get<std::locale>();
 5468|     10|            const auto& numpunct =
 5469|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5470|     10|            const auto truename = numpunct.truename();
 5471|     10|            const auto falsename = numpunct.falsename();
 5472|       |
 5473|     10|            if (auto r =
  ------------------
  |  Branch (5473:22): [True: 0, False: 10]
  ------------------
 5474|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5475|      0|                return *r;
 5476|      0|            }
 5477|     10|            else {
 5478|     10|                err = r.error();
 5479|     10|            }
 5480|     10|        }
 5481|       |
 5482|     12|        return unexpected(err);
 5483|     12|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5409|    252|    {
 5410|    252|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 252]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|    252|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 252]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|    252|        return detail::unexpected_scan_error(
 5420|    252|            scan_error::invalid_scanned_value,
 5421|    252|            "Failed to read numeric boolean value: No match");
 5422|    252|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    504|{
 2246|    504|    auto it = read_code_unit(range);
 2247|    504|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 504]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    504|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 504, False: 0]
  |  |  ------------------
  ------------------
 2252|    504|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    504|        return unexpected(parse_error::error);
 2254|    504|    }
 2255|       |
 2256|      0|    return *it;
 2257|    504|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5493|     10|    {
 5494|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5495|     10|        const auto shorter = std::pair{
 5496|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5496:13): [True: 10, False: 0]
  ------------------
 5497|     10|        const auto longer = std::pair{
 5498|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5498:13): [True: 0, False: 10]
  ------------------
 5499|       |
 5500|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 10]
  ------------------
 5501|      0|            value = shorter.second;
 5502|      0|            return *r;
 5503|      0|        }
 5504|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5504:18): [True: 0, False: 10]
  ------------------
 5505|      0|            value = longer.second;
 5506|      0|            return *r;
 5507|      0|        }
 5508|       |
 5509|     10|        return detail::unexpected_scan_error(
 5510|     10|            scan_error::invalid_scanned_value,
 5511|     10|            "Failed to read textual boolean: No match");
 5512|     10|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     20|{
 2279|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     10|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2285|     10|        return unexpected(parse_error::error);
 2286|     10|    }
 2287|      0|    return it;
 2288|     10|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    584|{
 1956|    584|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    584|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    584|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    584|    else {
 1967|    584|        auto it = range.begin();
 1968|    584|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 584]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  2.86k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 2.41k, False: 450]
  ------------------
 1973|  2.41k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 134, False: 2.28k]
  ------------------
 1974|    134|                return unexpected(eof_error::eof);
 1975|    134|            }
 1976|  2.41k|        }
 1977|       |
 1978|    450|        return it;
 1979|    584|    }
 1980|    584|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|    584|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    584|    else {
 1116|    584|        return 0;
 1117|    584|    }
 1118|    584|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5380|    306|    {
 5381|    306|        scan_error err{scan_error::invalid_scanned_value,
 5382|    306|                       "Failed to read boolean"};
 5383|       |
 5384|    306|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 242, False: 64]
  ------------------
 5385|    242|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 242]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|    242|            else {
 5389|    242|                err = r.error();
 5390|    242|            }
 5391|    242|        }
 5392|       |
 5393|    306|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 282, False: 24]
  ------------------
 5394|    282|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 282]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|    282|            else {
 5398|    282|                err = r.error();
 5399|    282|            }
 5400|    282|        }
 5401|       |
 5402|    306|        return unexpected(err);
 5403|    306|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5427|    282|    {
 5428|    282|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 282]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|    282|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 282]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|    282|        return detail::unexpected_scan_error(
 5438|    282|            scan_error::invalid_scanned_value,
 5439|    282|            "Failed to read textual boolean value: No match");
 5440|    282|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    564|{
 2294|    564|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 124, False: 440]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    124|    }                                                  \
  |  |  |  | 3939|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    440|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    440|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    440|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|    440|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|    440|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|    440|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|    440|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 440, False: 0]
  |  |  ------------------
  ------------------
 2301|    440|            return unexpected(parse_error::error);
 2302|    440|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|    440|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5542|    408|    {
 5543|    408|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|    408|#if !SCN_DISABLE_LOCALE
 5546|    408|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 20, False: 388]
  ------------------
 5547|     20|            return rd.read_localized(range, loc, value);
 5548|     20|        }
 5549|    388|#endif
 5550|       |
 5551|    388|        return rd.read_classic(range, value);
 5552|    408|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5453|     20|    {
 5454|     20|        scan_error err{scan_error::invalid_scanned_value,
 5455|     20|                       "Failed to read boolean"};
 5456|       |
 5457|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5457:13): [True: 14, False: 6]
  ------------------
 5458|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5458:22): [True: 0, False: 14]
  ------------------
 5459|      0|                return *r;
 5460|      0|            }
 5461|     14|            else {
 5462|     14|                err = r.error();
 5463|     14|            }
 5464|     14|        }
 5465|       |
 5466|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5466:13): [True: 10, False: 10]
  ------------------
 5467|     10|            auto stdloc = loc.get<std::locale>();
 5468|     10|            const auto& numpunct =
 5469|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5470|     10|            const auto truename = numpunct.truename();
 5471|     10|            const auto falsename = numpunct.falsename();
 5472|       |
 5473|     10|            if (auto r =
  ------------------
  |  Branch (5473:22): [True: 0, False: 10]
  ------------------
 5474|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5475|      0|                return *r;
 5476|      0|            }
 5477|     10|            else {
 5478|     10|                err = r.error();
 5479|     10|            }
 5480|     10|        }
 5481|       |
 5482|     20|        return unexpected(err);
 5483|     20|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5493|     10|    {
 5494|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5495|     10|        const auto shorter = std::pair{
 5496|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5496:13): [True: 10, False: 0]
  ------------------
 5497|     10|        const auto longer = std::pair{
 5498|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5498:13): [True: 0, False: 10]
  ------------------
 5499|       |
 5500|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 10]
  ------------------
 5501|      0|            value = shorter.second;
 5502|      0|            return *r;
 5503|      0|        }
 5504|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5504:18): [True: 0, False: 10]
  ------------------
 5505|      0|            value = longer.second;
 5506|      0|            return *r;
 5507|      0|        }
 5508|       |
 5509|     10|        return detail::unexpected_scan_error(
 5510|     10|            scan_error::invalid_scanned_value,
 5511|     10|            "Failed to read textual boolean: No match");
 5512|     10|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     20|{
 2279|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     18|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     18|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     18|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 2285|     18|        return unexpected(parse_error::error);
 2286|     18|    }
 2287|      0|    return it;
 2288|     18|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6214|  4.45k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.45k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.45k|            auto rd = make_reader<T, char_type>();
 6220|  4.45k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.45k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.91k, False: 536]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.91k|    }
  ------------------
 6221|    536|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.45k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    536|    {
 6150|    536|        const bool need_skipped_width =
 6151|    536|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 182, False: 354]
  |  Branch (6151:33): [True: 270, False: 84]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    536|        auto it = rng.begin();
 6155|    536|        std::ptrdiff_t prefix_width = 0;
 6156|    536|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 272, False: 264]
  ------------------
 6157|    272|            auto max_width_view = take_width(rng, specs.precision);
 6158|    272|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    272|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    272|            it = prefix_result.first.base();
 6161|    272|            prefix_width = prefix_result.second;
 6162|    272|        }
 6163|    264|        else {
 6164|    264|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    264|            std::tie(it, prefix_width) = prefix_result;
 6166|    264|        }
 6167|    536|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    536|        std::ptrdiff_t value_width = 0;
 6171|    536|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 272, False: 264]
  ------------------
 6172|    272|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 266]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    266|            const auto initial_width = specs.precision - prefix_width;
 6180|    266|            auto max_width_view =
 6181|    266|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    266|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|    234|            it = w_it.base();
 6184|    234|            value_width = initial_width - w_it.count();
 6185|    234|        }
 6186|    264|        else {
 6187|    264|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 242]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    242|                                             specs, value, loc));
 6189|       |
 6190|    242|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 176, False: 66]
  ------------------
 6191|    176|                value_width = calculate_text_width(
 6192|    176|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    176|                        .view());
 6194|    176|            }
 6195|    242|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    476|        std::ptrdiff_t postfix_width = 0;
 6199|    476|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 476, False: 0]
  ------------------
 6200|    476|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    476|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    476|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    476|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 476]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    476|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    476|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    476|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    476|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    476|                                 value_width));
 6204|    476|            std::tie(it, postfix_width) = postfix_result;
 6205|    476|        }
 6206|       |
 6207|    476|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    476|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 156, False: 320]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    156|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    156|    }
  ------------------
 6208|    476|            specs, prefix_width, value_width, postfix_width));
 6209|    320|        return it;
 6210|    476|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6214|  4.48k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.48k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.48k|            auto rd = make_reader<T, char_type>();
 6220|  4.48k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.48k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.93k, False: 554]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.93k|    }
  ------------------
 6221|    554|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    554|    {
 6150|    554|        const bool need_skipped_width =
 6151|    554|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 188, False: 366]
  |  Branch (6151:33): [True: 274, False: 92]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    554|        auto it = rng.begin();
 6155|    554|        std::ptrdiff_t prefix_width = 0;
 6156|    554|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 278, False: 276]
  ------------------
 6157|    278|            auto max_width_view = take_width(rng, specs.precision);
 6158|    278|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    256|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    256|            it = prefix_result.first.base();
 6161|    256|            prefix_width = prefix_result.second;
 6162|    256|        }
 6163|    276|        else {
 6164|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    276|            std::tie(it, prefix_width) = prefix_result;
 6166|    276|        }
 6167|    532|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    532|        std::ptrdiff_t value_width = 0;
 6171|    532|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 256, False: 276]
  ------------------
 6172|    256|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 8, False: 248]
  ------------------
 6173|      8|                return detail::unexpected_scan_error(
 6174|      8|                    scan_error::invalid_fill,
 6175|      8|                    "Too many fill characters before value, "
 6176|      8|                    "precision exceeded before reading value");
 6177|      8|            }
 6178|       |
 6179|    248|            const auto initial_width = specs.precision - prefix_width;
 6180|    248|            auto max_width_view =
 6181|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    248|    }                                                  \
  |  |  |  | 3939|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    276|        else {
 6187|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    276|    }                                                  \
  |  | 3939|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  4.45k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.45k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.45k|            auto rd = make_reader<T, char_type>();
 6220|  4.45k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.45k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 124, False: 4.33k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    124|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    124|    }
  ------------------
 6221|  4.33k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.45k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6149|  4.33k|    {
 6150|  4.33k|        const bool need_skipped_width =
 6151|  4.33k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 254, False: 4.07k]
  |  Branch (6151:33): [True: 546, False: 3.53k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  4.33k|        auto it = rng.begin();
 6155|  4.33k|        std::ptrdiff_t prefix_width = 0;
 6156|  4.33k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 556, False: 3.77k]
  ------------------
 6157|    556|            auto max_width_view = take_width(rng, specs.precision);
 6158|    556|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    556|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    556|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    556|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    556|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    556|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    536|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    536|            it = prefix_result.first.base();
 6161|    536|            prefix_width = prefix_result.second;
 6162|    536|        }
 6163|  3.77k|        else {
 6164|  3.77k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  3.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  3.77k|            std::tie(it, prefix_width) = prefix_result;
 6166|  3.77k|        }
 6167|  4.31k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  4.31k|        std::ptrdiff_t value_width = 0;
 6171|  4.31k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 536, False: 3.77k]
  ------------------
 6172|    536|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 530]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    530|            const auto initial_width = specs.precision - prefix_width;
 6180|    530|            auto max_width_view =
 6181|    530|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    530|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 186, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    186|    }                                                  \
  |  |  |  | 3939|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|    344|            it = w_it.base();
 6184|    344|            value_width = initial_width - w_it.count();
 6185|    344|        }
 6186|  3.77k|        else {
 6187|  3.77k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  3.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  3.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.59k, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.59k|    }                                                  \
  |  | 3939|  3.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  3.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  1.18k|                                             specs, value, loc));
 6189|       |
 6190|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 208, False: 974]
  ------------------
 6191|    208|                value_width = calculate_text_width(
 6192|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    208|                        .view());
 6194|    208|            }
 6195|  1.18k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6199|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 1.15k, False: 374]
  ------------------
 6200|  1.15k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  1.15k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  1.15k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  1.15k|                                 value_width));
 6204|  1.15k|            std::tie(it, postfix_width) = postfix_result;
 6205|  1.15k|        }
 6206|       |
 6207|  1.52k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 94, False: 1.43k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     94|    }
  ------------------
 6208|  1.52k|            specs, prefix_width, value_width, postfix_width));
 6209|  1.43k|        return it;
 6210|  1.52k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  4.45k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.45k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.45k|            auto rd = make_reader<T, char_type>();
 6220|  4.45k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.45k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 124, False: 4.33k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    124|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    124|    }
  ------------------
 6221|  4.33k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.45k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|  4.33k|    {
 6150|  4.33k|        const bool need_skipped_width =
 6151|  4.33k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 254, False: 4.07k]
  |  Branch (6151:33): [True: 546, False: 3.53k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  4.33k|        auto it = rng.begin();
 6155|  4.33k|        std::ptrdiff_t prefix_width = 0;
 6156|  4.33k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 556, False: 3.77k]
  ------------------
 6157|    556|            auto max_width_view = take_width(rng, specs.precision);
 6158|    556|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    556|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    556|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    556|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    556|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    556|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    536|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    536|            it = prefix_result.first.base();
 6161|    536|            prefix_width = prefix_result.second;
 6162|    536|        }
 6163|  3.77k|        else {
 6164|  3.77k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  3.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  3.77k|            std::tie(it, prefix_width) = prefix_result;
 6166|  3.77k|        }
 6167|  4.31k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  4.31k|        std::ptrdiff_t value_width = 0;
 6171|  4.31k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 536, False: 3.77k]
  ------------------
 6172|    536|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 530]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    530|            const auto initial_width = specs.precision - prefix_width;
 6180|    530|            auto max_width_view =
 6181|    530|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    530|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 186, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    186|    }                                                  \
  |  |  |  | 3939|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|    344|            it = w_it.base();
 6184|    344|            value_width = initial_width - w_it.count();
 6185|    344|        }
 6186|  3.77k|        else {
 6187|  3.77k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  3.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  3.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.59k, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.59k|    }                                                  \
  |  | 3939|  3.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  3.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  1.18k|                                             specs, value, loc));
 6189|       |
 6190|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 208, False: 974]
  ------------------
 6191|    208|                value_width = calculate_text_width(
 6192|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    208|                        .view());
 6194|    208|            }
 6195|  1.18k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6199|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 1.15k, False: 374]
  ------------------
 6200|  1.15k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  1.15k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  1.15k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  1.15k|                                 value_width));
 6204|  1.15k|            std::tie(it, postfix_width) = postfix_result;
 6205|  1.15k|        }
 6206|       |
 6207|  1.52k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 94, False: 1.43k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     94|    }
  ------------------
 6208|  1.52k|            specs, prefix_width, value_width, postfix_width));
 6209|  1.43k|        return it;
 6210|  1.52k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  4.45k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  4.45k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  4.45k|            auto rd = make_reader<T, char_type>();
 6220|  4.45k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.45k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 124, False: 4.33k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    124|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    124|    }
  ------------------
 6221|  4.33k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  4.45k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|  4.33k|    {
 6150|  4.33k|        const bool need_skipped_width =
 6151|  4.33k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 254, False: 4.07k]
  |  Branch (6151:33): [True: 546, False: 3.53k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  4.33k|        auto it = rng.begin();
 6155|  4.33k|        std::ptrdiff_t prefix_width = 0;
 6156|  4.33k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 556, False: 3.77k]
  ------------------
 6157|    556|            auto max_width_view = take_width(rng, specs.precision);
 6158|    556|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    556|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    556|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    556|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    556|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    556|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    536|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    536|            it = prefix_result.first.base();
 6161|    536|            prefix_width = prefix_result.second;
 6162|    536|        }
 6163|  3.77k|        else {
 6164|  3.77k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  3.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  3.77k|            std::tie(it, prefix_width) = prefix_result;
 6166|  3.77k|        }
 6167|  4.31k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  4.31k|        std::ptrdiff_t value_width = 0;
 6171|  4.31k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 536, False: 3.77k]
  ------------------
 6172|    536|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 530]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    530|            const auto initial_width = specs.precision - prefix_width;
 6180|    530|            auto max_width_view =
 6181|    530|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    530|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 186, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    186|    }                                                  \
  |  |  |  | 3939|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|    344|            it = w_it.base();
 6184|    344|            value_width = initial_width - w_it.count();
 6185|    344|        }
 6186|  3.77k|        else {
 6187|  3.77k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  3.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  3.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.59k, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.59k|    }                                                  \
  |  | 3939|  3.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  3.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  1.18k|                                             specs, value, loc));
 6189|       |
 6190|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 208, False: 974]
  ------------------
 6191|    208|                value_width = calculate_text_width(
 6192|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    208|                        .view());
 6194|    208|            }
 6195|  1.18k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6199|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 1.15k, False: 374]
  ------------------
 6200|  1.15k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  1.15k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  1.15k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  1.15k|                                 value_width));
 6204|  1.15k|            std::tie(it, postfix_width) = postfix_result;
 6205|  1.15k|        }
 6206|       |
 6207|  1.52k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 94, False: 1.43k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     94|    }
  ------------------
 6208|  1.52k|            specs, prefix_width, value_width, postfix_width));
 6209|  1.43k|        return it;
 6210|  1.52k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|  4.14k|{
 5824|  4.14k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.14k]
  |  |  ------------------
  ------------------
 5825|      0|        return unexpected(e);
 5826|      0|    }
 5827|       |
 5828|  4.14k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 460, False: 3.68k]
  ------------------
 5829|    460|        return range.begin();
 5830|    460|    }
 5831|       |
 5832|  3.68k|    return skip_classic_whitespace(range);
 5833|  4.14k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|    460|    {
 3568|    460|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    460|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|    460|        return read_default_with_base(range, value, 10);
 3570|    460|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|    460|    {
 3532|    460|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|    460|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|    460|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 460]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|    920|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|    920|                parse_integer_digits_without_thsep(
 3551|    920|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|    920|                    prefix_result.parsed_base));
 3553|       |
 3554|    920|        auto buf = make_contiguous_buffer(
 3555|    920|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|    920|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 460, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    460|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    460|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    460|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    460|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    460|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|    920|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|    460|    {
 3568|    460|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    460|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|    460|        return read_default_with_base(range, value, 10);
 3570|    460|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|    460|    {
 3532|    460|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|    460|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|    460|        if constexpr (!std::is_signed_v<T>) {
 3536|    460|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 0, False: 460]
  ------------------
 3537|      0|                return detail::unexpected_scan_error(
 3538|      0|                    scan_error::invalid_scanned_value,
 3539|      0|                    "Unexpected '-' sign when parsing an "
 3540|      0|                    "unsigned value");
 3541|      0|            }
 3542|    460|        }
 3543|       |
 3544|    460|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 460]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|    920|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|    920|                parse_integer_digits_without_thsep(
 3551|    920|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|    920|                    prefix_result.parsed_base));
 3553|       |
 3554|    920|        auto buf = make_contiguous_buffer(
 3555|    920|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|    920|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 460, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    460|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    460|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    460|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    460|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    460|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|    920|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5775|    846|    {
 5776|    846|        return true;
 5777|    846|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5793|    762|    {
 5794|    762|        detail::format_specs specs{};
 5795|    762|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|    762|        std::uintptr_t intvalue{};
 5798|    762|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    762|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    762|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    762|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 762, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    762|    }                                                  \
  |  |  |  | 3939|    762|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|    762|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3139|    990|    {
 3140|    990|        return true;
 3141|    990|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5530|    460|    {
 5531|    460|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    460|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5532|       |
 5533|    460|        return bool_reader<CharT>{}.read_classic(range, value);
 5534|    460|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5380|    828|    {
 5381|    828|        scan_error err{scan_error::invalid_scanned_value,
 5382|    828|                       "Failed to read boolean"};
 5383|       |
 5384|    828|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 780, False: 48]
  ------------------
 5385|    780|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 780]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|    780|            else {
 5389|    780|                err = r.error();
 5390|    780|            }
 5391|    780|        }
 5392|       |
 5393|    828|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 808, False: 20]
  ------------------
 5394|    808|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 808]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|    808|            else {
 5398|    808|                err = r.error();
 5399|    808|            }
 5400|    808|        }
 5401|       |
 5402|    828|        return unexpected(err);
 5403|    828|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5409|    796|    {
 5410|    796|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 796]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|    796|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 796]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|    796|        return detail::unexpected_scan_error(
 5420|    796|            scan_error::invalid_scanned_value,
 5421|    796|            "Failed to read numeric boolean value: No match");
 5422|    796|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5427|    808|    {
 5428|    808|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 808]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|    808|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 808]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|    808|        return detail::unexpected_scan_error(
 5438|    808|            scan_error::invalid_scanned_value,
 5439|    808|            "Failed to read textual boolean value: No match");
 5440|    808|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  1.61k|{
 2294|  1.61k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 120, False: 1.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    120|    }                                                  \
  |  |  |  | 3939|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.49k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.49k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|  1.49k|    else {
 2306|  1.49k|        auto range_it = range.begin();
 2307|  1.49k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 1.49k, False: 0]
  ------------------
 2308|  1.49k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.49k, False: 0]
  |  |  ------------------
  ------------------
 2309|  1.49k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|  1.49k|                return unexpected(parse_error::error);
 2311|  1.49k|            }
 2312|  1.49k|        }
 2313|      0|        return it;
 2314|  1.49k|    }
 2315|  1.49k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3688|    460|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|    460|    {
 4174|    460|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    460|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|    460|        float_reader<CharT> rd{};
 4177|    460|        return read_impl<Range>(
 4178|    460|            range, rd,
 4179|    460|            [](float_reader<CharT>& r, auto&&... args) {
 4180|    460|                return r.read_source(SCN_FWD(args)...);
 4181|    460|            },
 4182|    460|            value);
 4183|    460|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    460|        : m_fptr([](storage fn,
  743|    460|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    460|              cvref<T> obj = *get<T>(fn);
  745|    460|              if constexpr (std::is_void_v<R>) {
  746|    460|                  obj(static_cast<decltype(args)>(args)...);
  747|    460|              }
  748|    460|              else {
  749|    460|                  return obj(static_cast<decltype(args)>(args)...);
  750|    460|              }
  751|    460|          }),
  752|    460|          m_storage(std::addressof(f))
  753|    460|    {
  754|    460|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    460|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    460|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    460|              else {
  749|    460|                  return obj(static_cast<decltype(args)>(args)...);
  750|    460|              }
  751|    460|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    460|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    460|        else if constexpr (std::is_object_v<T>) {
  688|    460|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    460|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|    460|            [](float_reader<CharT>& r, auto&&... args) {
 4180|    460|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|    460|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    460|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    460|        {
  662|    460|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|    460|    {
 5292|    460|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    460|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|    460|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5291|    460|    {
 5292|    460|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    460|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|    460|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|    460|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|    460|                          basic_contiguous_scan_context<char_type>>) {
 5904|    460|            auto rd = make_reader<T, char_type>();
 5905|    460|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|    460|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|    460|    {
 5892|    460|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|    460|                        .transform_error(make_eof_scan_error));
 5894|    460|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|    460|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|    460|    {
 5292|    460|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    460|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|    460|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|    460|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2974|   157k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   157k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   157k|          m_current(m_range.begin())
 2977|   157k|    {
 2978|   157k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2986|   645M|    {
 2987|   645M|        return m_range.end();
 2988|   645M|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|   322M|{
 1319|       |    // TODO: optimize
 1320|   322M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|   322M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   322M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|   322M|    auto res = get_next_code_point(str);
 1322|   322M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|   322M|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3001|   322M|    {
 3002|   322M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   322M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   322M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|   322M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|   322M|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 322M]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|   322M|        }
 3008|   322M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   322M|    static_cast<    \
  |  |  935|   322M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|   322M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2991|  27.6k|    {
 2992|  27.6k|        return ranges::subrange{begin(), end()};
 2993|  27.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6062|  1.27k|    {
 6063|  1.27k|        const bool need_skipped_width =
 6064|  1.27k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 34, False: 1.24k]
  |  Branch (6064:33): [True: 1.24k, False: 0]
  ------------------
 6065|  1.27k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  1.27k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 36, False: 1.24k]
  ------------------
 6069|  1.27k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 190, False: 1.05k]
  ------------------
 6070|    226|            return skip_fill(rng, specs.precision, specs.fill,
 6071|    226|                             need_skipped_width);
 6072|    226|        }
 6073|  1.05k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 1.00k, False: 44]
  |  Branch (6073:56): [True: 650, False: 356]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|    650|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 650, False: 0]
  ------------------
 6077|    650|                auto max_width_view = take_width(rng, specs.precision);
 6078|    650|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|    650|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    650|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    650|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 650]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    650|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    650|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|    650|                                  .transform_error(make_eof_scan_error));
 6080|    650|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|    650|            }
 6082|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|      0|                            make_eof_scan_error));
 6084|       |
 6085|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|      0|            return result_type{it, 0};
 6093|      0|        }
 6094|       |
 6095|    400|        return result_type{rng.begin(), 0};
 6096|  1.05k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5977|    226|{
 5978|    226|    using char_type = detail::char_t<Range>;
 5979|    226|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5980|       |
 5981|    226|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5981:9): [True: 226, False: 0]
  ------------------
 5982|    226|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5983|    226|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5984|       |
 5985|    226|        if (max_width == 0) {
  ------------------
  |  Branch (5985:13): [True: 0, False: 226]
  ------------------
 5986|      0|            auto it = read_while_code_unit(range, pred);
 5987|       |
 5988|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5988:17): [True: 0, False: 0]
  ------------------
 5989|      0|                auto prefix_width =
 5990|      0|                    static_cast<std::ptrdiff_t>(
 5991|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5992|      0|                    ranges::distance(range.begin(), it);
 5993|      0|                return result_type{it, prefix_width};
 5994|      0|            }
 5995|      0|            return result_type{it, 0};
 5996|      0|        }
 5997|       |
 5998|    226|        auto max_width_view = take_width(range, max_width);
 5999|    226|        auto w_it = read_while_code_unit(max_width_view, pred);
 6000|       |
 6001|    226|        if (want_skipped_width) {
  ------------------
  |  Branch (6001:13): [True: 226, False: 0]
  ------------------
 6002|    226|            return result_type{w_it.base(), max_width - w_it.count()};
 6003|    226|        }
 6004|      0|        return result_type{w_it.base(), 0};
 6005|    226|    }
 6006|       |
 6007|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6008|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 0]
  ------------------
 6009|      0|        auto it = read_while_code_units(range, fill_chars);
 6010|       |
 6011|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            auto prefix_width =
 6013|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6014|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6015|      0|            return result_type{it, prefix_width};
 6016|      0|        }
 6017|      0|        return result_type{it, 0};
 6018|      0|    }
 6019|       |
 6020|      0|    auto max_width_view = take_width(range, max_width);
 6021|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6022|       |
 6023|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6023:9): [True: 0, False: 0]
  ------------------
 6024|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6025|      0|    }
 6026|      0|    return result_type{w_it.base(), 0};
 6027|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    226|        : m_fptr([](storage fn,
  743|    226|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    226|              cvref<T> obj = *get<T>(fn);
  745|    226|              if constexpr (std::is_void_v<R>) {
  746|    226|                  obj(static_cast<decltype(args)>(args)...);
  747|    226|              }
  748|    226|              else {
  749|    226|                  return obj(static_cast<decltype(args)>(args)...);
  750|    226|              }
  751|    226|          }),
  752|    226|          m_storage(std::addressof(f))
  753|    226|    {
  754|    226|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    272|    {
  684|    272|        if constexpr (std::is_const_v<T>) {
  685|    272|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    272|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5983|    272|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    226|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    226|        {
  667|    226|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    226|{
 2075|    226|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    226|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    226|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    226|    else {
 2060|    226|        auto first = range.begin();
 2061|    306|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 272, False: 34]
  ------------------
 2062|    272|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 192, False: 80]
  ------------------
 2063|    192|                return first;
 2064|    192|            }
 2065|    272|        }
 2066|     34|        return first;
 2067|    226|    }
 2068|    226|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2909|  1.52k|    {
 2910|  1.52k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|  1.52k|                                      m_count};
 2912|  1.52k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2816|  5.30k|    {
 2817|  5.30k|        return view;
 2818|  5.30k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  1.52k|        : m_current(x), m_end(s), m_count(n)
 2481|  1.52k|    {
 2482|  1.52k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2880|    956|        {
 2881|    956|            return !(y == x);
 2882|    956|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2869|  2.25k|        {
 2870|  2.25k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 34, False: 2.22k]
  |  Branch (2870:39): [True: 34, False: 0]
  ------------------
 2871|  2.25k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 0, False: 2.22k]
  ------------------
 2872|  2.25k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|     34|    {
 2521|     34|        return m_multibyte_left;
 2522|     34|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2915|  2.25k|    {
 2916|  2.25k|        return sentinel<true>{m_base.get().end()};
 2917|  2.25k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2850|  2.25k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  2.25k|    static_cast<    \
  |  |  935|  2.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2525|  1.57k|    {
 2526|  1.57k|        return *m_current;
 2527|  1.57k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2534|    730|    {
 2535|    730|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    730|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    730|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|    730|        _increment_current();
 2537|    730|        return *this;
 2538|    730|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2767|    730|    {
 2768|    730|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 730, False: 0]
  ------------------
 2769|    730|            auto cplen = _get_cp_length_at_current();
 2770|    730|            m_multibyte_left = cplen - 1;
 2771|    730|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|    730|        }
 2773|      0|        else {
 2774|      0|            --m_multibyte_left;
 2775|      0|        }
 2776|       |
 2777|    730|        ++m_current;
 2778|    730|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2738|    730|    {
 2739|    730|        return static_cast<difference_type>(
 2740|    730|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|    730|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2744|    730|    {
 2745|    730|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|    730|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 730]
  |  |  ------------------
  ------------------
 2746|      0|            return 0;
 2747|      0|        }
 2748|       |
 2749|    730|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 730, False: 0]
  ------------------
 2750|    730|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    730|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    730|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|    730|            auto cp = static_cast<char32_t>(*m_current);
 2752|    730|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|    730|        }
 2754|       |
 2755|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|      0|                                           cplen);
 2757|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2758|      0|            return 0;
 2759|      0|        }
 2760|       |
 2761|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|      0|        return static_cast<difference_type>(
 2763|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|      0|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2931|    876|    {
 2932|    876|        return take_width_view{r, n};
 2933|    876|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2899|    876|        : m_base(base), m_count(count)
 2900|    876|    {
 2901|    876|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2813|    876|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|    650|{
 3055|    650|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 650, False: 0]
  ------------------
 3056|    650|        auto it = read_while_classic_space(range);
 3057|    650|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|    650|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 650]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|    650|        return it;
 3063|    650|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|    650|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|    650|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    650|    else {
 2225|    650|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    650|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    650|            return detail::is_cp_space(cp);
 2238|    650|        });
 2239|    650|    }
 2240|    650|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|    650|{
 2181|    650|    return read_until_code_point(range, std::not_fn(pred));
 2182|    650|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|    650|{
 2160|    650|    auto it = range.begin();
 2161|    650|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 650, False: 0]
  ------------------
 2162|    650|        const auto val =
 2163|    650|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|    650|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    650|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 650, False: 0]
  |  |  ------------------
  ------------------
 2165|    650|            const auto cp = detail::decode_code_point_exhaustive(
 2166|    650|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|    650|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 650, False: 0]
  ------------------
 2168|    650|                return it;
 2169|    650|            }
 2170|    650|        }
 2171|      0|        it = val.iterator;
 2172|      0|    }
 2173|       |
 2174|      0|    return it;
 2175|    650|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|    650|{
 1998|    650|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|    650|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    650|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|    650|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|    650|    auto it = range.begin();
 2002|    650|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|    650|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 650]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|    650|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 650, False: 0]
  ------------------
 2011|    650|        ++it;
 2012|    650|        return {it, string_type(1, *range.begin())};
 2013|    650|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|    650|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  1.30k|{
  945|  1.30k|    return is_range_eof(r.begin(), r.end());
  946|  1.30k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  1.30k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.30k|    {
  938|  1.30k|        return begin == end;
  939|  1.30k|    }
  940|  1.30k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|    650|    {
 1989|    650|        return !codepoint.empty();
 1990|    650|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|    650|        : m_fptr([](storage fn,
  743|    650|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    650|              cvref<T> obj = *get<T>(fn);
  745|    650|              if constexpr (std::is_void_v<R>) {
  746|    650|                  obj(static_cast<decltype(args)>(args)...);
  747|    650|              }
  748|    650|              else {
  749|    650|                  return obj(static_cast<decltype(args)>(args)...);
  750|    650|              }
  751|    650|          }),
  752|    650|          m_storage(std::addressof(f))
  753|    650|    {
  754|    650|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|    650|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    650|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    650|              else {
  749|    650|                  return obj(static_cast<decltype(args)>(args)...);
  750|    650|              }
  751|    650|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    650|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    650|        else if constexpr (std::is_object_v<T>) {
  688|    650|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    650|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|    650|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    650|            return detail::is_cp_space(cp);
 2238|    650|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    650|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    650|        {
  662|    650|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    650|{
  951|    650|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 650]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    650|    return eof_error::good;
  955|    650|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  3.09k|    {
 2513|  3.09k|        return m_current;
 2514|  3.09k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  3.13k|    {
 2517|  3.13k|        return m_count;
 2518|  3.13k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|  8.31k|    {
 6063|  8.31k|        const bool need_skipped_width =
 6064|  8.31k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 3.49k, False: 4.81k]
  |  Branch (6064:33): [True: 0, False: 4.81k]
  ------------------
 6065|  8.31k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  8.31k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 54, False: 8.25k]
  ------------------
 6069|  8.31k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 258, False: 7.99k]
  ------------------
 6070|    312|            return skip_fill(rng, specs.precision, specs.fill,
 6071|    312|                             need_skipped_width);
 6072|    312|        }
 6073|  7.99k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 7.73k, False: 262]
  |  Branch (6073:56): [True: 2.30k, False: 5.43k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|  2.30k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 2.30k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|  4.61k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  2.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|  4.61k|                            make_eof_scan_error));
 6084|       |
 6085|  4.61k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 1.84k, False: 458]
  ------------------
 6086|  1.84k|                return result_type{
 6087|  1.84k|                    it,
 6088|  1.84k|                    calculate_text_width(make_contiguous_buffer(
 6089|  1.84k|                                             ranges::subrange{rng.begin(), it})
 6090|  1.84k|                                             .view())};
 6091|  1.84k|            }
 6092|    458|            return result_type{it, 0};
 6093|  4.61k|        }
 6094|       |
 6095|  5.69k|        return result_type{rng.begin(), 0};
 6096|  7.99k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|  1.89k|    {
 6105|  1.89k|        const bool need_skipped_width =
 6106|  1.89k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 602, False: 1.29k]
  |  Branch (6106:33): [True: 384, False: 906]
  ------------------
 6107|  1.89k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  1.89k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 80, False: 1.81k]
  ------------------
 6110|  1.89k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 142, False: 1.67k]
  ------------------
 6111|    222|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 66, False: 156]
  ------------------
 6112|    222|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 44, False: 22]
  ------------------
 6113|     44|                return result_type{rng.begin(), 0};
 6114|     44|            }
 6115|    178|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|    178|                             specs.fill, need_skipped_width);
 6117|    222|        }
 6118|  1.67k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 1.65k, False: 18]
  ------------------
 6119|  1.67k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 1.41k, False: 234]
  ------------------
 6120|  1.67k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 434, False: 984]
  |  Branch (6120:35): [True: 412, False: 22]
  ------------------
 6121|  1.41k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 264, False: 742]
  ------------------
 6122|  1.00k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 166, False: 98]
  ------------------
 6123|    578|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 166, False: 412]
  ------------------
 6124|    166|                const auto initial_width =
 6125|    166|                    specs.precision - prefix_width - value_width;
 6126|    166|                auto max_width_view = take_width(rng, initial_width);
 6127|    166|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    166|                                  .transform_error(make_eof_scan_error));
 6129|    166|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|    166|            }
 6131|    824|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 412]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    412|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|    824|                            make_eof_scan_error));
 6133|       |
 6134|    824|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 412, False: 0]
  ------------------
 6135|    412|                return result_type{
 6136|    412|                    it,
 6137|    412|                    calculate_text_width(make_contiguous_buffer(
 6138|    412|                                             ranges::subrange{rng.begin(), it})
 6139|    412|                                             .view())};
 6140|    412|            }
 6141|      0|            return result_type{it, 0};
 6142|    824|        }
 6143|  1.09k|        return result_type{rng.begin(), 0};
 6144|  1.67k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|  2.42k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.42k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.42k|            auto rd = make_reader<T, char_type>();
 6220|  2.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.96k, False: 454]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.96k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.96k|    }
  ------------------
 6221|    454|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    454|    {
 6150|    454|        const bool need_skipped_width =
 6151|    454|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 240, False: 214]
  |  Branch (6151:33): [True: 118, False: 96]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    454|        auto it = rng.begin();
 6155|    454|        std::ptrdiff_t prefix_width = 0;
 6156|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 120, False: 334]
  ------------------
 6157|    120|            auto max_width_view = take_width(rng, specs.precision);
 6158|    120|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    120|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    120|            it = prefix_result.first.base();
 6161|    120|            prefix_width = prefix_result.second;
 6162|    120|        }
 6163|    334|        else {
 6164|    334|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    334|            std::tie(it, prefix_width) = prefix_result;
 6166|    334|        }
 6167|    454|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    454|        std::ptrdiff_t value_width = 0;
 6171|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 120, False: 334]
  ------------------
 6172|    120|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 2, False: 118]
  ------------------
 6173|      2|                return detail::unexpected_scan_error(
 6174|      2|                    scan_error::invalid_fill,
 6175|      2|                    "Too many fill characters before value, "
 6176|      2|                    "precision exceeded before reading value");
 6177|      2|            }
 6178|       |
 6179|    118|            const auto initial_width = specs.precision - prefix_width;
 6180|    118|            auto max_width_view =
 6181|    118|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    118|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 118, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    118|    }                                                  \
  |  |  |  | 3939|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    334|        else {
 6187|    334|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 334, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    334|    }                                                  \
  |  | 3939|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|  2.42k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.42k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.42k|            auto rd = make_reader<T, char_type>();
 6220|  2.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.96k, False: 454]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.96k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.96k|    }
  ------------------
 6221|    454|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    454|    {
 6150|    454|        const bool need_skipped_width =
 6151|    454|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 240, False: 214]
  |  Branch (6151:33): [True: 118, False: 96]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    454|        auto it = rng.begin();
 6155|    454|        std::ptrdiff_t prefix_width = 0;
 6156|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 120, False: 334]
  ------------------
 6157|    120|            auto max_width_view = take_width(rng, specs.precision);
 6158|    120|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    120|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    120|            it = prefix_result.first.base();
 6161|    120|            prefix_width = prefix_result.second;
 6162|    120|        }
 6163|    334|        else {
 6164|    334|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    334|            std::tie(it, prefix_width) = prefix_result;
 6166|    334|        }
 6167|    454|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    454|        std::ptrdiff_t value_width = 0;
 6171|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 120, False: 334]
  ------------------
 6172|    120|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 2, False: 118]
  ------------------
 6173|      2|                return detail::unexpected_scan_error(
 6174|      2|                    scan_error::invalid_fill,
 6175|      2|                    "Too many fill characters before value, "
 6176|      2|                    "precision exceeded before reading value");
 6177|      2|            }
 6178|       |
 6179|    118|            const auto initial_width = specs.precision - prefix_width;
 6180|    118|            auto max_width_view =
 6181|    118|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    118|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 118, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    118|    }                                                  \
  |  |  |  | 3939|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    334|        else {
 6187|    334|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 334, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    334|    }                                                  \
  |  | 3939|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6214|  2.38k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.38k|            auto rd = make_reader<T, char_type>();
 6220|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.99k, False: 386]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.99k|    }
  ------------------
 6221|    386|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.38k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5780|  2.38k|    {
 5781|  2.38k|        reader_error_handler eh{};
 5782|  2.38k|        detail::check_pointer_type_specs(specs, eh);
 5783|  2.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.99k, False: 386]
  |  |  ------------------
  ------------------
 5784|  1.99k|            return detail::unexpected_scan_error(
 5785|  1.99k|                scan_error::invalid_format_string, eh.m_msg);
 5786|  1.99k|        }
 5787|    386|        return {};
 5788|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6149|    386|    {
 6150|    386|        const bool need_skipped_width =
 6151|    386|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 236, False: 150]
  |  Branch (6151:33): [True: 82, False: 68]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    386|        auto it = rng.begin();
 6155|    386|        std::ptrdiff_t prefix_width = 0;
 6156|    386|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 84, False: 302]
  ------------------
 6157|     84|            auto max_width_view = take_width(rng, specs.precision);
 6158|     84|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     84|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     84|            it = prefix_result.first.base();
 6161|     84|            prefix_width = prefix_result.second;
 6162|     84|        }
 6163|    302|        else {
 6164|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    302|            std::tie(it, prefix_width) = prefix_result;
 6166|    302|        }
 6167|    386|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    386|        std::ptrdiff_t value_width = 0;
 6171|    386|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 84, False: 302]
  ------------------
 6172|     84|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 2, False: 82]
  ------------------
 6173|      2|                return detail::unexpected_scan_error(
 6174|      2|                    scan_error::invalid_fill,
 6175|      2|                    "Too many fill characters before value, "
 6176|      2|                    "precision exceeded before reading value");
 6177|      2|            }
 6178|       |
 6179|     82|            const auto initial_width = specs.precision - prefix_width;
 6180|     82|            auto max_width_view =
 6181|     82|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     82|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     82|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     82|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     82|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 82, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     82|    }                                                  \
  |  |  |  | 3939|     82|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    302|        else {
 6187|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    302|    }                                                  \
  |  | 3939|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5810|     82|    {
 5811|     82|        SCN_UNUSED(specs);
  ------------------
  |  |  915|     82|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|     82|        return read_default(range, value, loc);
 5813|     82|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5793|     82|    {
 5794|     82|        detail::format_specs specs{};
 5795|     82|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|     82|        std::uintptr_t intvalue{};
 5798|     82|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     82|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     82|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     82|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 82, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     82|    }                                                  \
  |  |  |  | 3939|     82|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|     82|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5810|    302|    {
 5811|    302|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    302|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|    302|        return read_default(range, value, loc);
 5813|    302|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6214|  2.42k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.42k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.42k|            auto rd = make_reader<T, char_type>();
 6220|  2.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.89k, False: 530]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.89k|    }
  ------------------
 6221|    530|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.42k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  2.42k|    {
 3145|  2.42k|        reader_error_handler eh{};
 3146|  2.42k|        get_derived().check_specs_impl(specs, eh);
 3147|  2.42k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.89k, False: 530]
  |  |  ------------------
  ------------------
 3148|  1.89k|            return detail::unexpected_scan_error(
 3149|  1.89k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  1.89k|        }
 3151|    530|        return {};
 3152|  2.42k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3156|  2.42k|    {
 3157|  2.42k|        return static_cast<Derived&>(*this);
 3158|  2.42k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5523|  2.42k|    {
 5524|  2.42k|        detail::check_bool_type_specs(specs, eh);
 5525|  2.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    530|    {
 6150|    530|        const bool need_skipped_width =
 6151|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 254, False: 276]
  |  Branch (6151:33): [True: 140, False: 136]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    530|        auto it = rng.begin();
 6155|    530|        std::ptrdiff_t prefix_width = 0;
 6156|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 144, False: 386]
  ------------------
 6157|    144|            auto max_width_view = take_width(rng, specs.precision);
 6158|    144|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    144|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    144|            it = prefix_result.first.base();
 6161|    144|            prefix_width = prefix_result.second;
 6162|    144|        }
 6163|    386|        else {
 6164|    386|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    386|            std::tie(it, prefix_width) = prefix_result;
 6166|    386|        }
 6167|    530|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    530|        std::ptrdiff_t value_width = 0;
 6171|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 144, False: 386]
  ------------------
 6172|    144|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 4, False: 140]
  ------------------
 6173|      4|                return detail::unexpected_scan_error(
 6174|      4|                    scan_error::invalid_fill,
 6175|      4|                    "Too many fill characters before value, "
 6176|      4|                    "precision exceeded before reading value");
 6177|      4|            }
 6178|       |
 6179|    140|            const auto initial_width = specs.precision - prefix_width;
 6180|    140|            auto max_width_view =
 6181|    140|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    140|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 140, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    140|    }                                                  \
  |  |  |  | 3939|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    386|        else {
 6187|    386|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 386, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    386|    }                                                  \
  |  | 3939|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5542|    140|    {
 5543|    140|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|    140|#if !SCN_DISABLE_LOCALE
 5546|    140|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 20, False: 120]
  ------------------
 5547|     20|            return rd.read_localized(range, loc, value);
 5548|     20|        }
 5549|    120|#endif
 5550|       |
 5551|    120|        return rd.read_classic(range, value);
 5552|    140|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5555|    526|    {
 5556|    526|        SCN_GCC_COMPAT_PUSH
 5557|    526|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5558|       |
 5559|    526|        switch (specs.type) {
 5560|     72|            case detail::presentation_type::string:
  ------------------
  |  Branch (5560:13): [True: 72, False: 454]
  ------------------
 5561|     72|                return bool_reader_base::allow_text;
 5562|       |
 5563|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5563:13): [True: 14, False: 512]
  ------------------
 5564|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5564:13): [True: 8, False: 518]
  ------------------
 5565|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5565:13): [True: 8, False: 518]
  ------------------
 5566|     40|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5566:13): [True: 10, False: 516]
  ------------------
 5567|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5567:13): [True: 12, False: 514]
  ------------------
 5568|     62|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5568:13): [True: 10, False: 516]
  ------------------
 5569|     62|                return bool_reader_base::allow_numeric;
 5570|       |
 5571|    392|            default:
  ------------------
  |  Branch (5571:13): [True: 392, False: 134]
  ------------------
 5572|    392|                return bool_reader_base::allow_text |
 5573|    392|                       bool_reader_base::allow_numeric;
 5574|    526|        }
 5575|       |
 5576|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5577|    526|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5453|     20|    {
 5454|     20|        scan_error err{scan_error::invalid_scanned_value,
 5455|     20|                       "Failed to read boolean"};
 5456|       |
 5457|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5457:13): [True: 18, False: 2]
  ------------------
 5458|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5458:22): [True: 0, False: 18]
  ------------------
 5459|      0|                return *r;
 5460|      0|            }
 5461|     18|            else {
 5462|     18|                err = r.error();
 5463|     18|            }
 5464|     18|        }
 5465|       |
 5466|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5466:13): [True: 10, False: 10]
  ------------------
 5467|     10|            auto stdloc = loc.get<std::locale>();
 5468|     10|            const auto& numpunct =
 5469|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5470|     10|            const auto truename = numpunct.truename();
 5471|     10|            const auto falsename = numpunct.falsename();
 5472|       |
 5473|     10|            if (auto r =
  ------------------
  |  Branch (5473:22): [True: 0, False: 10]
  ------------------
 5474|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5475|      0|                return *r;
 5476|      0|            }
 5477|     10|            else {
 5478|     10|                err = r.error();
 5479|     10|            }
 5480|     10|        }
 5481|       |
 5482|     20|        return unexpected(err);
 5483|     20|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5409|    118|    {
 5410|    118|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 118]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|    118|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 118]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|    118|        return detail::unexpected_scan_error(
 5420|    118|            scan_error::invalid_scanned_value,
 5421|    118|            "Failed to read numeric boolean value: No match");
 5422|    118|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    236|{
 2246|    236|    auto it = read_code_unit(range);
 2247|    236|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 236]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    236|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 236, False: 0]
  |  |  ------------------
  ------------------
 2252|    236|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    236|        return unexpected(parse_error::error);
 2254|    236|    }
 2255|       |
 2256|      0|    return *it;
 2257|    236|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5493|     10|    {
 5494|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5495|     10|        const auto shorter = std::pair{
 5496|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5496:13): [True: 10, False: 0]
  ------------------
 5497|     10|        const auto longer = std::pair{
 5498|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5498:13): [True: 0, False: 10]
  ------------------
 5499|       |
 5500|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 10]
  ------------------
 5501|      0|            value = shorter.second;
 5502|      0|            return *r;
 5503|      0|        }
 5504|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5504:18): [True: 0, False: 10]
  ------------------
 5505|      0|            value = longer.second;
 5506|      0|            return *r;
 5507|      0|        }
 5508|       |
 5509|     10|        return detail::unexpected_scan_error(
 5510|     10|            scan_error::invalid_scanned_value,
 5511|     10|            "Failed to read textual boolean: No match");
 5512|     10|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     20|{
 2279|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|      6|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2285|      6|        return unexpected(parse_error::error);
 2286|      6|    }
 2287|      0|    return it;
 2288|      6|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    220|{
 1956|    220|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    220|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    220|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    220|    else {
 1967|    220|        auto it = range.begin();
 1968|    220|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 220]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.02k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 880, False: 146]
  ------------------
 1973|    880|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 74, False: 806]
  ------------------
 1974|     74|                return unexpected(eof_error::eof);
 1975|     74|            }
 1976|    880|        }
 1977|       |
 1978|    146|        return it;
 1979|    220|    }
 1980|    220|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|    220|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    220|    else {
 1116|    220|        return 0;
 1117|    220|    }
 1118|    220|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5380|    120|    {
 5381|    120|        scan_error err{scan_error::invalid_scanned_value,
 5382|    120|                       "Failed to read boolean"};
 5383|       |
 5384|    120|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 100, False: 20]
  ------------------
 5385|    100|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 100]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|    100|            else {
 5389|    100|                err = r.error();
 5390|    100|            }
 5391|    100|        }
 5392|       |
 5393|    120|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 100, False: 20]
  ------------------
 5394|    100|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 100]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|    100|            else {
 5398|    100|                err = r.error();
 5399|    100|            }
 5400|    100|        }
 5401|       |
 5402|    120|        return unexpected(err);
 5403|    120|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5427|    100|    {
 5428|    100|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 100]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|    100|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 100]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|    100|        return detail::unexpected_scan_error(
 5438|    100|            scan_error::invalid_scanned_value,
 5439|    100|            "Failed to read textual boolean value: No match");
 5440|    100|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    200|{
 2294|    200|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    140|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    140|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|    140|    else {
 2306|    140|        auto range_it = range.begin();
 2307|    140|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 140, False: 0]
  ------------------
 2308|    140|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 140, False: 0]
  |  |  ------------------
  ------------------
 2309|    140|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|    140|                return unexpected(parse_error::error);
 2311|    140|            }
 2312|    140|        }
 2313|      0|        return it;
 2314|    140|    }
 2315|    140|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5542|    386|    {
 5543|    386|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|    386|#if !SCN_DISABLE_LOCALE
 5546|    386|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 18, False: 368]
  ------------------
 5547|     18|            return rd.read_localized(range, loc, value);
 5548|     18|        }
 5549|    368|#endif
 5550|       |
 5551|    368|        return rd.read_classic(range, value);
 5552|    386|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5453|     18|    {
 5454|     18|        scan_error err{scan_error::invalid_scanned_value,
 5455|     18|                       "Failed to read boolean"};
 5456|       |
 5457|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5457:13): [True: 16, False: 2]
  ------------------
 5458|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5458:22): [True: 0, False: 16]
  ------------------
 5459|      0|                return *r;
 5460|      0|            }
 5461|     16|            else {
 5462|     16|                err = r.error();
 5463|     16|            }
 5464|     16|        }
 5465|       |
 5466|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5466:13): [True: 6, False: 12]
  ------------------
 5467|      6|            auto stdloc = loc.get<std::locale>();
 5468|      6|            const auto& numpunct =
 5469|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5470|      6|            const auto truename = numpunct.truename();
 5471|      6|            const auto falsename = numpunct.falsename();
 5472|       |
 5473|      6|            if (auto r =
  ------------------
  |  Branch (5473:22): [True: 0, False: 6]
  ------------------
 5474|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5475|      0|                return *r;
 5476|      0|            }
 5477|      6|            else {
 5478|      6|                err = r.error();
 5479|      6|            }
 5480|      6|        }
 5481|       |
 5482|     18|        return unexpected(err);
 5483|     18|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5493|      6|    {
 5494|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5495|      6|        const auto shorter = std::pair{
 5496|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5496:13): [True: 6, False: 0]
  ------------------
 5497|      6|        const auto longer = std::pair{
 5498|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5498:13): [True: 0, False: 6]
  ------------------
 5499|       |
 5500|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 6]
  ------------------
 5501|      0|            value = shorter.second;
 5502|      0|            return *r;
 5503|      0|        }
 5504|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5504:18): [True: 0, False: 6]
  ------------------
 5505|      0|            value = longer.second;
 5506|      0|            return *r;
 5507|      0|        }
 5508|       |
 5509|      6|        return detail::unexpected_scan_error(
 5510|      6|            scan_error::invalid_scanned_value,
 5511|      6|            "Failed to read textual boolean: No match");
 5512|      6|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     12|{
 2279|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     10|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2285|     10|        return unexpected(parse_error::error);
 2286|     10|    }
 2287|      0|    return it;
 2288|     10|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6214|  2.38k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.38k|            auto rd = make_reader<T, char_type>();
 6220|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.96k, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.96k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.96k|    }
  ------------------
 6221|    422|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    422|    {
 6150|    422|        const bool need_skipped_width =
 6151|    422|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 238, False: 184]
  |  Branch (6151:33): [True: 100, False: 84]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    422|        auto it = rng.begin();
 6155|    422|        std::ptrdiff_t prefix_width = 0;
 6156|    422|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 102, False: 320]
  ------------------
 6157|    102|            auto max_width_view = take_width(rng, specs.precision);
 6158|    102|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    102|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    102|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    102|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    102|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    102|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    102|            it = prefix_result.first.base();
 6161|    102|            prefix_width = prefix_result.second;
 6162|    102|        }
 6163|    320|        else {
 6164|    320|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    320|            std::tie(it, prefix_width) = prefix_result;
 6166|    320|        }
 6167|    422|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    422|        std::ptrdiff_t value_width = 0;
 6171|    422|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 102, False: 320]
  ------------------
 6172|    102|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 2, False: 100]
  ------------------
 6173|      2|                return detail::unexpected_scan_error(
 6174|      2|                    scan_error::invalid_fill,
 6175|      2|                    "Too many fill characters before value, "
 6176|      2|                    "precision exceeded before reading value");
 6177|      2|            }
 6178|       |
 6179|    100|            const auto initial_width = specs.precision - prefix_width;
 6180|    100|            auto max_width_view =
 6181|    100|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    100|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    100|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    100|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    100|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    100|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|     80|            it = w_it.base();
 6184|     80|            value_width = initial_width - w_it.count();
 6185|     80|        }
 6186|    320|        else {
 6187|    320|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 20, False: 300]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     20|    }                                                  \
  |  | 3939|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    300|                                             specs, value, loc));
 6189|       |
 6190|    300|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 234, False: 66]
  ------------------
 6191|    234|                value_width = calculate_text_width(
 6192|    234|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    234|                        .view());
 6194|    234|            }
 6195|    300|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    380|        std::ptrdiff_t postfix_width = 0;
 6199|    380|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 380, False: 0]
  ------------------
 6200|    380|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    380|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    380|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    380|                                 value_width));
 6204|    380|            std::tie(it, postfix_width) = postfix_result;
 6205|    380|        }
 6206|       |
 6207|    380|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    380|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 232, False: 148]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    232|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    232|    }
  ------------------
 6208|    380|            specs, prefix_width, value_width, postfix_width));
 6209|    148|        return it;
 6210|    380|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6214|  2.42k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.42k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.42k|            auto rd = make_reader<T, char_type>();
 6220|  2.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.99k, False: 428]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.99k|    }
  ------------------
 6221|    428|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|    428|    {
 6150|    428|        const bool need_skipped_width =
 6151|    428|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 244, False: 184]
  |  Branch (6151:33): [True: 102, False: 82]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    428|        auto it = rng.begin();
 6155|    428|        std::ptrdiff_t prefix_width = 0;
 6156|    428|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 106, False: 322]
  ------------------
 6157|    106|            auto max_width_view = take_width(rng, specs.precision);
 6158|    106|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    106|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    106|            it = prefix_result.first.base();
 6161|    106|            prefix_width = prefix_result.second;
 6162|    106|        }
 6163|    322|        else {
 6164|    322|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    322|            std::tie(it, prefix_width) = prefix_result;
 6166|    322|        }
 6167|    428|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    428|        std::ptrdiff_t value_width = 0;
 6171|    428|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 106, False: 322]
  ------------------
 6172|    106|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 4, False: 102]
  ------------------
 6173|      4|                return detail::unexpected_scan_error(
 6174|      4|                    scan_error::invalid_fill,
 6175|      4|                    "Too many fill characters before value, "
 6176|      4|                    "precision exceeded before reading value");
 6177|      4|            }
 6178|       |
 6179|    102|            const auto initial_width = specs.precision - prefix_width;
 6180|    102|            auto max_width_view =
 6181|    102|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    102|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    102|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    102|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    102|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 102, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    102|    }                                                  \
  |  |  |  | 3939|    102|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|    322|        else {
 6187|    322|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 322, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    322|    }                                                  \
  |  | 3939|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  2.38k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.38k|            auto rd = make_reader<T, char_type>();
 6220|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 2.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6221|  2.30k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|  2.30k|    {
 6150|  2.30k|        const bool need_skipped_width =
 6151|  2.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 692, False: 1.61k]
  |  Branch (6151:33): [True: 194, False: 1.41k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  2.30k|        auto it = rng.begin();
 6155|  2.30k|        std::ptrdiff_t prefix_width = 0;
 6156|  2.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 200, False: 2.10k]
  ------------------
 6157|    200|            auto max_width_view = take_width(rng, specs.precision);
 6158|    200|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    200|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    200|            it = prefix_result.first.base();
 6161|    200|            prefix_width = prefix_result.second;
 6162|    200|        }
 6163|  2.10k|        else {
 6164|  2.10k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  2.10k|            std::tie(it, prefix_width) = prefix_result;
 6166|  2.10k|        }
 6167|  2.30k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  2.30k|        std::ptrdiff_t value_width = 0;
 6171|  2.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 200, False: 2.10k]
  ------------------
 6172|    200|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 194]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    194|            const auto initial_width = specs.precision - prefix_width;
 6180|    194|            auto max_width_view =
 6181|    194|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    194|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    194|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    194|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    194|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    194|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|    194|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|    128|            it = w_it.base();
 6184|    128|            value_width = initial_width - w_it.count();
 6185|    128|        }
 6186|  2.10k|        else {
 6187|  2.10k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.45k, False: 650]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.45k|    }                                                  \
  |  | 3939|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    650|                                             specs, value, loc));
 6189|       |
 6190|    650|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 308, False: 342]
  ------------------
 6191|    308|                value_width = calculate_text_width(
 6192|    308|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    308|                        .view());
 6194|    308|            }
 6195|    650|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    778|        std::ptrdiff_t postfix_width = 0;
 6199|    778|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 504, False: 274]
  ------------------
 6200|    504|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    504|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    504|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    504|                                 value_width));
 6204|    504|            std::tie(it, postfix_width) = postfix_result;
 6205|    504|        }
 6206|       |
 6207|    778|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    778|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    778|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 86, False: 692]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     86|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     86|    }
  ------------------
 6208|    778|            specs, prefix_width, value_width, postfix_width));
 6209|    692|        return it;
 6210|    778|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  2.38k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.38k|            auto rd = make_reader<T, char_type>();
 6220|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 2.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6221|  2.30k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6149|  2.30k|    {
 6150|  2.30k|        const bool need_skipped_width =
 6151|  2.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 692, False: 1.61k]
  |  Branch (6151:33): [True: 194, False: 1.41k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  2.30k|        auto it = rng.begin();
 6155|  2.30k|        std::ptrdiff_t prefix_width = 0;
 6156|  2.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 200, False: 2.10k]
  ------------------
 6157|    200|            auto max_width_view = take_width(rng, specs.precision);
 6158|    200|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    200|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    200|            it = prefix_result.first.base();
 6161|    200|            prefix_width = prefix_result.second;
 6162|    200|        }
 6163|  2.10k|        else {
 6164|  2.10k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  2.10k|            std::tie(it, prefix_width) = prefix_result;
 6166|  2.10k|        }
 6167|  2.30k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  2.30k|        std::ptrdiff_t value_width = 0;
 6171|  2.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 200, False: 2.10k]
  ------------------
 6172|    200|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 194]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    194|            const auto initial_width = specs.precision - prefix_width;
 6180|    194|            auto max_width_view =
 6181|    194|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    194|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    194|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    194|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    194|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    194|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|    194|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|    128|            it = w_it.base();
 6184|    128|            value_width = initial_width - w_it.count();
 6185|    128|        }
 6186|  2.10k|        else {
 6187|  2.10k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.45k, False: 650]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.45k|    }                                                  \
  |  | 3939|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    650|                                             specs, value, loc));
 6189|       |
 6190|    650|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 308, False: 342]
  ------------------
 6191|    308|                value_width = calculate_text_width(
 6192|    308|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    308|                        .view());
 6194|    308|            }
 6195|    650|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    778|        std::ptrdiff_t postfix_width = 0;
 6199|    778|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 504, False: 274]
  ------------------
 6200|    504|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    504|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    504|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    504|                                 value_width));
 6204|    504|            std::tie(it, postfix_width) = postfix_result;
 6205|    504|        }
 6206|       |
 6207|    778|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    778|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    778|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 86, False: 692]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     86|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     86|    }
  ------------------
 6208|    778|            specs, prefix_width, value_width, postfix_width));
 6209|    692|        return it;
 6210|    778|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  2.38k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.38k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.38k|            auto rd = make_reader<T, char_type>();
 6220|  2.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 2.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6221|  2.30k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|  2.30k|    {
 6150|  2.30k|        const bool need_skipped_width =
 6151|  2.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 692, False: 1.61k]
  |  Branch (6151:33): [True: 194, False: 1.41k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  2.30k|        auto it = rng.begin();
 6155|  2.30k|        std::ptrdiff_t prefix_width = 0;
 6156|  2.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 200, False: 2.10k]
  ------------------
 6157|    200|            auto max_width_view = take_width(rng, specs.precision);
 6158|    200|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|    200|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|    200|            it = prefix_result.first.base();
 6161|    200|            prefix_width = prefix_result.second;
 6162|    200|        }
 6163|  2.10k|        else {
 6164|  2.10k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  2.10k|            std::tie(it, prefix_width) = prefix_result;
 6166|  2.10k|        }
 6167|  2.30k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  2.30k|        std::ptrdiff_t value_width = 0;
 6171|  2.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 200, False: 2.10k]
  ------------------
 6172|    200|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 6, False: 194]
  ------------------
 6173|      6|                return detail::unexpected_scan_error(
 6174|      6|                    scan_error::invalid_fill,
 6175|      6|                    "Too many fill characters before value, "
 6176|      6|                    "precision exceeded before reading value");
 6177|      6|            }
 6178|       |
 6179|    194|            const auto initial_width = specs.precision - prefix_width;
 6180|    194|            auto max_width_view =
 6181|    194|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|    194|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    194|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    194|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    194|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    194|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|    194|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|    128|            it = w_it.base();
 6184|    128|            value_width = initial_width - w_it.count();
 6185|    128|        }
 6186|  2.10k|        else {
 6187|  2.10k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.45k, False: 650]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.45k|    }                                                  \
  |  | 3939|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    650|                                             specs, value, loc));
 6189|       |
 6190|    650|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 308, False: 342]
  ------------------
 6191|    308|                value_width = calculate_text_width(
 6192|    308|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|    308|                        .view());
 6194|    308|            }
 6195|    650|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    778|        std::ptrdiff_t postfix_width = 0;
 6199|    778|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 504, False: 274]
  ------------------
 6200|    504|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    504|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    504|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    504|                                 value_width));
 6204|    504|            std::tie(it, postfix_width) = postfix_result;
 6205|    504|        }
 6206|       |
 6207|    778|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    778|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    778|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 86, False: 692]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     86|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     86|    }
  ------------------
 6208|    778|            specs, prefix_width, value_width, postfix_width));
 6209|    692|        return it;
 6210|    778|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|    630|    {
 3532|    630|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|    630|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|    630|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 630]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  1.26k|                parse_integer_digits_without_thsep(
 3551|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  1.26k|                    prefix_result.parsed_base));
 3553|       |
 3554|  1.26k|        auto buf = make_contiguous_buffer(
 3555|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 630, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    630|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|  1.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|    630|    {
 3532|    630|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|    630|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|    630|        if constexpr (!std::is_signed_v<T>) {
 3536|    630|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 0, False: 630]
  ------------------
 3537|      0|                return detail::unexpected_scan_error(
 3538|      0|                    scan_error::invalid_scanned_value,
 3539|      0|                    "Unexpected '-' sign when parsing an "
 3540|      0|                    "unsigned value");
 3541|      0|            }
 3542|    630|        }
 3543|       |
 3544|    630|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 630]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  1.26k|                parse_integer_digits_without_thsep(
 3551|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  1.26k|                    prefix_result.parsed_base));
 3553|       |
 3554|  1.26k|        auto buf = make_contiguous_buffer(
 3555|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 630, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    630|    }                                                  \
  |  |  |  | 3939|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  4.37k|{
   69|  4.37k|    scn::fuzz::run(data, size);
   70|  4.37k|    return 0;
   71|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.37k|{
   52|  4.37k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.37k]
  |  Branch (52:35): [True: 0, False: 4.37k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.37k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.37k|    run_for_source(sv);
   59|  4.37k|    run_for_source(wsv_reinterpret);
   60|  4.37k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.37k, False: 0]
  ------------------
   61|  4.37k|        run_for_source(wsv_transcode);
   62|  4.37k|    }
   63|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.37k|{
   37|  4.37k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.37k|    run_for_type<char_type>(source);
   40|  4.37k|    run_for_type<int>(source);
   41|  4.37k|    run_for_type<unsigned>(source);
   42|  4.37k|    run_for_type<double>(source);
   43|  4.37k|    run_for_type<bool>(source);
   44|  4.37k|    run_for_type<void*>(source);
   45|  4.37k|    run_for_type<std::string>(source);
   46|  4.37k|    run_for_type<std::wstring>(source);
   47|  4.37k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.37k|{
   25|  4.37k|    {
   26|  4.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.37k|    }
   28|  4.37k|    {
   29|  4.37k|        auto _ =
   30|  4.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.37k|    }
   32|  4.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.75k|{
   37|  8.75k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.75k|    run_for_type<char_type>(source);
   40|  8.75k|    run_for_type<int>(source);
   41|  8.75k|    run_for_type<unsigned>(source);
   42|  8.75k|    run_for_type<double>(source);
   43|  8.75k|    run_for_type<bool>(source);
   44|  8.75k|    run_for_type<void*>(source);
   45|  8.75k|    run_for_type<std::string>(source);
   46|  8.75k|    run_for_type<std::wstring>(source);
   47|  8.75k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.75k|{
   25|  8.75k|    {
   26|  8.75k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.75k|    }
   28|  8.75k|    {
   29|  8.75k|        auto _ =
   30|  8.75k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.75k|    }
   32|  8.75k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.37k|{
   52|  4.37k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  4.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.37k|    string_buffer.resize(size);
   56|  4.37k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.37k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.37k|    const auto wsv_reinterpret_size =
   61|  4.37k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 91, False: 4.28k]
  ------------------
   62|  4.37k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.37k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.37k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.37k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.37k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.37k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.37k|}

