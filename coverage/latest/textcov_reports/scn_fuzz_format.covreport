_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    606|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  5.83M|{
 3807|  5.83M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  5.83M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  5.83M|    }
 3810|  5.83M|    else if constexpr (sizeof(U) == 2) {
 3811|  5.83M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  5.83M|    }
 3813|  5.83M|    else {
 3814|       |        // utf-32
 3815|  5.83M|        static_assert(sizeof(U) == 4);
 3816|  5.83M|        SCN_UNUSED(ch);
 3817|  5.83M|        return 1;
 3818|  5.83M|    }
 3819|  5.83M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  5.83M|{
 3771|  5.83M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  5.83M|    SCN_GCC_COMPAT_PUSH
 3774|  5.83M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  5.83M|    constexpr char lengths[] =
 3776|  5.83M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  5.83M|        "\1\1\1\1\1\1\1\1"
 3778|  5.83M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  5.83M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  5.83M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  5.83M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  5.83M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  5.83M|    SCN_GCC_COMPAT_POP
 3785|  5.83M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  5.28M|{
 4013|  5.28M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  5.28M|        return decode_utf8_code_point_exhaustive(input);
 4015|  5.28M|    }
 4016|  5.28M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  5.28M|        return decode_utf16_code_point_exhaustive(input);
 4018|  5.28M|    }
 4019|  5.28M|    else {
 4020|  5.28M|        SCN_EXPECT(input.size() == 1);
 4021|  5.28M|        auto cp = static_cast<char32_t>(input.front());
 4022|  5.28M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  5.28M|            return invalid_code_point;
 4024|  5.28M|        }
 4025|  5.28M|        return cp;
 4026|  5.28M|    }
 4027|  5.28M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  5.28M|{
 3826|  5.28M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  5.28M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  5.28M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  5.28M|    };
 3831|       |
 3832|  5.28M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 4.72M, False: 559k]
  ------------------
 3833|  4.72M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 84, False: 4.72M]
  ------------------
 3834|     84|            SCN_UNLIKELY_ATTR
 3835|     84|            return invalid_code_point;
 3836|     84|        }
 3837|  4.72M|        return static_cast<char32_t>(input[0]);
 3838|  4.72M|    }
 3839|       |
 3840|   559k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 527k, False: 32.3k]
  ------------------
 3841|   527k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 30, False: 527k]
  ------------------
 3842|     30|            SCN_UNLIKELY_ATTR
 3843|     30|            return invalid_code_point;
 3844|     30|        }
 3845|   527k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 7.89k, False: 519k]
  ------------------
 3846|  7.89k|            SCN_UNLIKELY_ATTR
 3847|  7.89k|            return invalid_code_point;
 3848|  7.89k|        }
 3849|       |
 3850|   519k|        char32_t cp{};
 3851|   519k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   519k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   519k|        return cp;
 3854|   527k|    }
 3855|       |
 3856|  32.3k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 22.6k, False: 9.64k]
  ------------------
 3857|  22.6k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 6, False: 22.6k]
  ------------------
 3858|      6|            SCN_UNLIKELY_ATTR
 3859|      6|            return invalid_code_point;
 3860|      6|        }
 3861|  22.6k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 5.42k, False: 17.2k]
  ------------------
 3862|  22.6k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 737, False: 16.5k]
  ------------------
 3863|  6.16k|            SCN_UNLIKELY_ATTR
 3864|  6.16k|            return invalid_code_point;
 3865|  6.16k|        }
 3866|       |
 3867|  16.5k|        char32_t cp{};
 3868|  16.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  16.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  16.5k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  16.5k|        return cp;
 3872|  22.6k|    }
 3873|       |
 3874|  9.64k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 9.64k, False: 0]
  ------------------
 3875|  9.64k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 9.64k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  9.64k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 5.01k, False: 4.62k]
  ------------------
 3880|  5.01k|            SCN_UNLIKELY_ATTR
 3881|  5.01k|            return invalid_code_point;
 3882|  5.01k|        }
 3883|  4.62k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 1.07k, False: 3.55k]
  ------------------
 3884|  4.62k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 419, False: 3.13k]
  ------------------
 3885|  4.62k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 308, False: 2.82k]
  ------------------
 3886|  1.79k|            SCN_UNLIKELY_ATTR
 3887|  1.79k|            return invalid_code_point;
 3888|  1.79k|        }
 3889|       |
 3890|  2.82k|        char32_t cp{};
 3891|  2.82k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  2.82k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  2.82k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  2.82k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  2.82k|        return cp;
 3896|  4.62k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   578k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   578k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   578k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  2.30M|{
 3699|  2.30M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  2.30M|                                          decltype(first), decltype(last)> &&
 3701|  2.30M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  2.30M|        return {first, last};
 3703|  2.30M|    }
 3704|  2.30M|    else {
 3705|  2.30M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  2.30M|                                       to_address(first), to_address(last)))};
 3707|  2.30M|    }
 3708|  2.30M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  6.98M|{
  326|  6.98M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  6.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  6.98M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  6.99M|{
  304|  6.99M|    return p;
  305|  6.99M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  1.55M|{
 3730|  1.55M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  1.55M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  1.55M|                      decltype(it)> &&
 3733|  1.55M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  1.55M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.55M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  1.55M|        return it;
 3736|  1.55M|    }
 3737|  1.55M|    else {
 3738|  1.55M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  1.55M|    }
 3740|  1.55M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  11.7k|{
 5135|  11.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  11.7k|                  "Scan argument types must be default constructible");
 5137|  11.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  11.7k|                  "Scan argument types must be Destructible");
 5139|  11.7k|    static_assert(
 5140|  11.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  11.7k|        "Scan argument types must not be references");
 5142|  11.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  11.7k|    {
 4988|  11.7k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  11.7k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  11.7k|            return val;
 4991|  11.7k|        }
 4992|  11.7k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  11.7k|            return unscannable_disabled{val};
 4994|  11.7k|        }
 4995|  11.7k|        else {
 4996|  11.7k|            SCN_UNUSED(val);
 4997|  11.7k|            return unscannable_char{};
 4998|  11.7k|        }
 4999|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  11.7k|{
 5089|  11.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  11.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  11.7k|    constexpr bool scannable_char =
 5093|  11.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  11.7k|    static_assert(scannable_char,
 5095|  11.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  11.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  11.7k|    constexpr bool scannable_const =
 5099|  11.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  11.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  11.7k|    constexpr bool scannable_disabled =
 5103|  11.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  11.7k|    static_assert(scannable_disabled,
 5105|  11.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  11.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  11.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  11.7k|    static_assert(
 5110|  11.7k|        scannable,
 5111|  11.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  11.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  11.7k|    return arg_value{arg};
 5115|  11.7k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  11.7k|    {
 4902|  11.7k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  52.6k|{
 8654|  52.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  52.6k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  52.6k|{
 8591|  52.6k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  52.6k|    auto result = vscan_impl(buffer, format, args);
 8594|  52.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 1.32k]
  |  |  ------------------
  ------------------
 8595|  51.3k|        return unexpected(result.error());
 8596|  51.3k|    }
 8597|  1.32k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  52.6k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   105k|{
 4720|   105k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   105k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   105k|                  "\n"
 4724|   105k|                  "Unsupported range type given as input to a scanning "
 4725|   105k|                  "function.\n"
 4726|   105k|                  "A range needs to have a character type (value type) "
 4727|   105k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   105k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   105k|                  "to be included.\n"
 4730|   105k|                  "See the scnlib documentation for more details.");
 4731|   105k|    static_assert(
 4732|   105k|        !std::is_same_v<T, custom_char_traits>,
 4733|   105k|        "\n"
 4734|   105k|        "Unsupported range type given as input to a scanning "
 4735|   105k|        "function.\n"
 4736|   105k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   105k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   105k|        "not supported.");
 4739|   105k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   105k|                  "\n"
 4741|   105k|                  "Unsupported range type given as input to a scanning "
 4742|   105k|                  "function.\n"
 4743|   105k|                  "file_marker_found cannot be used as an "
 4744|   105k|                  "source range type to scn::scan.\n"
 4745|   105k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   105k|                  "and do not provide an explicit source range, "
 4747|   105k|                  "or use scn::scan with a FILE* directly.");
 4748|   105k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   105k|                  "\n"
 4750|   105k|                  "Unsupported range type given as input to a scanning "
 4751|   105k|                  "function.\n"
 4752|   105k|                  "In order to be scannable, a range needs to satisfy "
 4753|   105k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   105k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   105k|                  "\n"
 4756|   105k|                  "Unsupported range type given as input to a scanning "
 4757|   105k|                  "function.\n"
 4758|   105k|                  "A range needs to model forward_range and have a valid "
 4759|   105k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   105k|                  "Examples of scannable ranges are std::string, "
 4761|   105k|                  "std::string_view, "
 4762|   105k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   105k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   105k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   105k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   105k|{
 4612|   105k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   105k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   105k|    }
 4616|   105k|    else {
 4617|   105k|        return invalid_char_type{};
 4618|   105k|    }
 4619|   105k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   342k|    {
 1598|   342k|        return has_value();
 1599|   342k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   685k|    {
  485|   685k|        return m_has_value;
  486|   685k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   339k|    {
 1604|   339k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   339k|        return this->get_unexpected().error();
 1606|   339k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   339k|    {
  468|   339k|        return m_unexpected;
  469|   339k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  2.19M|    {
  361|  2.19M|        return m_unexpected;
  362|  2.19M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  1.15M|    {
  347|  1.15M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.15M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.15M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   102k|    {
 1476|   102k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   102k|    {
  447|   102k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  1.27M|    {
  356|  1.27M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.27M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   105k|    {
 1177|   105k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  2.64k|{
 5923|  2.64k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.64k|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.64k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.64k|    }
 5927|  2.64k|    else {
 5928|  2.64k|        auto it = ranges::begin(source);
 5929|  2.64k|        while (n > 0) {
 5930|  2.64k|            --n;
 5931|  2.64k|            ++it;
 5932|  2.64k|        }
 5933|  2.64k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.64k|    }
 5935|  2.64k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.64k|    {
 2724|  2.64k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.64k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.64k|    {
 2705|  2.64k|        return decay_copy(t.begin());
 2706|  2.64k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  50.9k|{
 1949|  50.9k|    return SCN_FWD(t);
  ------------------
  |  |  930|  50.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  50.9k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  2.64k|{
 5910|  2.64k|    return ranges::end(source);
 5911|  2.64k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.64k|    {
 2781|  2.64k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.64k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.64k|    {
 2763|  2.64k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.64k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|   734k|    {
 3316|   734k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.30k|    {
 1653|  3.30k|        return value();
 1654|  3.30k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  3.30k|    {
 1627|  3.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.30k|        return this->get_value();
 1629|  3.30k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.30k|    {
  451|  3.30k|        return m_value;
  452|  3.30k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.64k|    {
 1430|  2.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.64k|    {
  437|  2.64k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   105k|    {
 5478|   105k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 172]
  |  |  ------------------
  ------------------
 8821|  11.5k|        return unexpected(result.error());
 8822|  11.5k|    }
 8823|    172|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   105k|    {
 1598|   105k|        return has_value();
 1599|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   210k|    {
  485|   210k|        return m_has_value;
  486|   210k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   102k|    {
 1604|   102k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   102k|        return this->get_unexpected().error();
 1606|   102k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   102k|    {
  468|   102k|        return m_unexpected;
  469|   102k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  11.5k|    {
 1476|  11.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  11.5k|    {
  447|  11.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.64k|    {
 1653|  2.64k|        return value();
 1654|  2.64k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.64k|    {
 1627|  2.64k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.64k|        return this->get_value();
 1629|  2.64k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.64k|    {
  451|  2.64k|        return m_value;
  452|  2.64k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    172|    {
 5830|    172|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.64k|    {
 5681|  2.64k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    172|    {
 5616|    172|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    172|    {
 1430|    172|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    172|    {
  437|    172|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   105k|{
 7691|   105k|    return s;
 7692|   105k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   105k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  52.6k|{
 8672|  52.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  52.6k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  52.6k|{
 8607|  52.6k|#if !SCN_DISABLE_LOCALE
 8608|  52.6k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  52.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  52.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  52.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  52.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 1.32k]
  |  |  ------------------
  ------------------
 8615|  51.3k|        return unexpected(result.error());
 8616|  51.3k|    }
 8617|  1.32k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  52.6k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  35.1k|{
 5135|  35.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  35.1k|                  "Scan argument types must be default constructible");
 5137|  35.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  35.1k|                  "Scan argument types must be Destructible");
 5139|  35.1k|    static_assert(
 5140|  35.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  35.1k|        "Scan argument types must not be references");
 5142|  35.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  35.1k|{
 5089|  35.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  35.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  35.1k|    constexpr bool scannable_char =
 5093|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  35.1k|    static_assert(scannable_char,
 5095|  35.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  35.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  35.1k|    constexpr bool scannable_const =
 5099|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  35.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  35.1k|    constexpr bool scannable_disabled =
 5103|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  35.1k|    static_assert(scannable_disabled,
 5105|  35.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  35.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  35.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  35.1k|    static_assert(
 5110|  35.1k|        scannable,
 5111|  35.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  35.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  35.1k|    return arg_value{arg};
 5115|  35.1k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  35.1k|    {
 4902|  35.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  11.7k|        return unexpected(result.error());
 8822|  11.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  11.7k|    {
  447|  11.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  35.1k|{
 5135|  35.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  35.1k|                  "Scan argument types must be default constructible");
 5137|  35.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  35.1k|                  "Scan argument types must be Destructible");
 5139|  35.1k|    static_assert(
 5140|  35.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  35.1k|        "Scan argument types must not be references");
 5142|  35.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  35.1k|{
 5089|  35.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  35.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  35.1k|    constexpr bool scannable_char =
 5093|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  35.1k|    static_assert(scannable_char,
 5095|  35.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  35.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  35.1k|    constexpr bool scannable_const =
 5099|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  35.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  35.1k|    constexpr bool scannable_disabled =
 5103|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  35.1k|    static_assert(scannable_disabled,
 5105|  35.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  35.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  35.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  35.1k|    static_assert(
 5110|  35.1k|        scannable,
 5111|  35.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  35.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  35.1k|    return arg_value{arg};
 5115|  35.1k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  35.1k|    {
 4902|  35.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  11.7k|        return unexpected(result.error());
 8822|  11.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  11.7k|    {
  447|  11.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  35.1k|{
 5135|  35.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  35.1k|                  "Scan argument types must be default constructible");
 5137|  35.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  35.1k|                  "Scan argument types must be Destructible");
 5139|  35.1k|    static_assert(
 5140|  35.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  35.1k|        "Scan argument types must not be references");
 5142|  35.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  35.1k|{
 5089|  35.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  35.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  35.1k|    constexpr bool scannable_char =
 5093|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  35.1k|    static_assert(scannable_char,
 5095|  35.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  35.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  35.1k|    constexpr bool scannable_const =
 5099|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  35.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  35.1k|    constexpr bool scannable_disabled =
 5103|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  35.1k|    static_assert(scannable_disabled,
 5105|  35.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  35.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  35.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  35.1k|    static_assert(
 5110|  35.1k|        scannable,
 5111|  35.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  35.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  35.1k|    return arg_value{arg};
 5115|  35.1k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  35.1k|    {
 4902|  35.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  11.7k|        return unexpected(result.error());
 8822|  11.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  11.7k|    {
  447|  11.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  35.1k|{
 5135|  35.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  35.1k|                  "Scan argument types must be default constructible");
 5137|  35.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  35.1k|                  "Scan argument types must be Destructible");
 5139|  35.1k|    static_assert(
 5140|  35.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  35.1k|        "Scan argument types must not be references");
 5142|  35.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  35.1k|{
 5089|  35.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  35.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  35.1k|    constexpr bool scannable_char =
 5093|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  35.1k|    static_assert(scannable_char,
 5095|  35.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  35.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  35.1k|    constexpr bool scannable_const =
 5099|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  35.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  35.1k|    constexpr bool scannable_disabled =
 5103|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  35.1k|    static_assert(scannable_disabled,
 5105|  35.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  35.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  35.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  35.1k|    static_assert(
 5110|  35.1k|        scannable,
 5111|  35.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  35.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  35.1k|    return arg_value{arg};
 5115|  35.1k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  35.1k|    {
 4902|  35.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  11.7k|        return unexpected(result.error());
 8822|  11.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  11.7k|    {
  447|  11.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  35.1k|{
 5135|  35.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  35.1k|                  "Scan argument types must be default constructible");
 5137|  35.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  35.1k|                  "Scan argument types must be Destructible");
 5139|  35.1k|    static_assert(
 5140|  35.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  35.1k|        "Scan argument types must not be references");
 5142|  35.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  35.1k|{
 5089|  35.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  35.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  35.1k|    constexpr bool scannable_char =
 5093|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  35.1k|    static_assert(scannable_char,
 5095|  35.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  35.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  35.1k|    constexpr bool scannable_const =
 5099|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  35.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  35.1k|    constexpr bool scannable_disabled =
 5103|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  35.1k|    static_assert(scannable_disabled,
 5105|  35.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  35.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  35.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  35.1k|    static_assert(
 5110|  35.1k|        scannable,
 5111|  35.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  35.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  35.1k|    return arg_value{arg};
 5115|  35.1k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  35.1k|    {
 4902|  35.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  11.7k|        return unexpected(result.error());
 8822|  11.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  11.7k|    {
  447|  11.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  35.1k|{
 5135|  35.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  35.1k|                  "Scan argument types must be default constructible");
 5137|  35.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  35.1k|                  "Scan argument types must be Destructible");
 5139|  35.1k|    static_assert(
 5140|  35.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  35.1k|        "Scan argument types must not be references");
 5142|  35.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  35.1k|{
 5089|  35.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  35.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  35.1k|    constexpr bool scannable_char =
 5093|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  35.1k|    static_assert(scannable_char,
 5095|  35.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  35.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  35.1k|    constexpr bool scannable_const =
 5099|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  35.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  35.1k|    constexpr bool scannable_disabled =
 5103|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  35.1k|    static_assert(scannable_disabled,
 5105|  35.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  35.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  35.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  35.1k|    static_assert(
 5110|  35.1k|        scannable,
 5111|  35.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  35.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  35.1k|    return arg_value{arg};
 5115|  35.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  35.1k|    {
 4902|  35.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 824]
  |  |  ------------------
  ------------------
 8821|  10.8k|        return unexpected(result.error());
 8822|  10.8k|    }
 8823|    824|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    824|    static_cast<    \
  |  |  929|    824|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    824|    static_cast<    \
  |  |  929|    824|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  10.8k|    {
 1476|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  10.8k|    {
  626|  10.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  10.8k|    {
  689|  10.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  10.8k|                                  std::forward<Args>(args)...);
  691|  10.8k|        m_has_value = false;
  692|  10.8k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  68.3k|{
  392|  68.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  68.3k|        T(std::forward<Args>(args)...);
  394|  68.3k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  21.7k|    {
  718|  21.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  21.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  21.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  21.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    824|    {
 5830|    824|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.01k|    {
 5616|  1.01k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    824|    {
 1430|    824|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    824|    {
  616|    824|        construct(std::forward<Args>(args)...);
  617|    824|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    824|    {
  682|    824|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    824|        m_has_value = true;
  684|    824|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    824|{
  392|    824|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    824|        T(std::forward<Args>(args)...);
  394|    824|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    824|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.64k|    {
  706|  1.64k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.64k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.64k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  1.64k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  11.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  11.7k|    {
  631|  11.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 824, False: 10.8k]
  ------------------
  632|    824|            destroy_value();
  633|    824|        }
  634|  10.8k|        else {
  635|  10.8k|            destroy_unexpected();
  636|  10.8k|        }
  637|  11.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  11.7k|    {
  675|  11.7k|        return m_has_value;
  676|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    824|    {
  696|    824|        scn::detail::destroy_at(value_ptr());
  697|    824|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    824|{
  398|    824|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    824|        for (auto& elem : *p) {
  400|    824|            scn::detail::destroy_at(&elem);
  401|    824|        }
  402|    824|    }
  403|    824|    else {
  404|    824|        p->~T();
  405|    824|    }
  406|    824|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  10.8k|    {
  700|  10.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  10.8k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  68.3k|{
  398|  68.3k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  68.3k|        for (auto& elem : *p) {
  400|  68.3k|            scn::detail::destroy_at(&elem);
  401|  68.3k|        }
  402|  68.3k|    }
  403|  68.3k|    else {
  404|  68.3k|        p->~T();
  405|  68.3k|    }
  406|  68.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  35.1k|{
 5135|  35.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  35.1k|                  "Scan argument types must be default constructible");
 5137|  35.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  35.1k|                  "Scan argument types must be Destructible");
 5139|  35.1k|    static_assert(
 5140|  35.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  35.1k|        "Scan argument types must not be references");
 5142|  35.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  35.1k|{
 5089|  35.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  35.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  35.1k|    constexpr bool scannable_char =
 5093|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  35.1k|    static_assert(scannable_char,
 5095|  35.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  35.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  35.1k|    constexpr bool scannable_const =
 5099|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  35.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  35.1k|    constexpr bool scannable_disabled =
 5103|  35.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  35.1k|    static_assert(scannable_disabled,
 5105|  35.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  35.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  35.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  35.1k|    static_assert(
 5110|  35.1k|        scannable,
 5111|  35.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  35.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  35.1k|    return arg_value{arg};
 5115|  35.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  35.1k|    {
 4902|  35.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 824]
  |  |  ------------------
  ------------------
 8821|  10.8k|        return unexpected(result.error());
 8822|  10.8k|    }
 8823|    824|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    824|    static_cast<    \
  |  |  929|    824|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    824|    static_cast<    \
  |  |  929|    824|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  10.8k|    {
 1476|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  10.8k|    {
  626|  10.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  10.8k|    {
  689|  10.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  10.8k|                                  std::forward<Args>(args)...);
  691|  10.8k|        m_has_value = false;
  692|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  21.7k|    {
  718|  21.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  21.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  21.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  21.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    824|    {
 5830|    824|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.01k|    {
 5616|  1.01k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    824|    {
 1430|    824|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    824|    {
  616|    824|        construct(std::forward<Args>(args)...);
  617|    824|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    824|    {
  682|    824|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    824|        m_has_value = true;
  684|    824|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    824|{
  392|    824|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    824|        T(std::forward<Args>(args)...);
  394|    824|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    824|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.64k|    {
  706|  1.64k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.64k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.64k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.64k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  11.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  11.7k|    {
  631|  11.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 824, False: 10.8k]
  ------------------
  632|    824|            destroy_value();
  633|    824|        }
  634|  10.8k|        else {
  635|  10.8k|            destroy_unexpected();
  636|  10.8k|        }
  637|  11.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  11.7k|    {
  675|  11.7k|        return m_has_value;
  676|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    824|    {
  696|    824|        scn::detail::destroy_at(value_ptr());
  697|    824|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    824|{
  398|    824|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    824|        for (auto& elem : *p) {
  400|    824|            scn::detail::destroy_at(&elem);
  401|    824|        }
  402|    824|    }
  403|    824|    else {
  404|    824|        p->~T();
  405|    824|    }
  406|    824|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  10.8k|    {
  700|  10.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  10.8k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.85k|{
 8867|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.85k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  11.7k|{
 5396|  11.7k|    detail::check_scan_arg_types<Args...>();
 5397|  11.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  11.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  11.7k|{
 5135|  11.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  11.7k|                  "Scan argument types must be default constructible");
 5137|  11.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  11.7k|                  "Scan argument types must be Destructible");
 5139|  11.7k|    static_assert(
 5140|  11.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  11.7k|        "Scan argument types must not be references");
 5142|  11.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  11.7k|    {
 5349|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  11.7k|    {
 5360|  11.7k|        return {detail::make_arg<
 5361|  11.7k|            kind, Context,
 5362|  11.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  11.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  11.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  11.7k|{
 5170|  11.7k|    return make_value<Context>(value).ref_value;
 5171|  11.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  11.7k|{
 5120|  11.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  11.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  11.7k|                                  needs_context_tag>) {
 5124|  11.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  11.7k|    }
 5126|  11.7k|    else {
 5127|  11.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  11.7k|            value, context_tag<Context>{}));
 5129|  11.7k|    }
 5130|  11.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  11.7k|    {                                                                        \
 4959|  11.7k|        return val;                                                          \
 4960|  11.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  11.7k|{
 5089|  11.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  11.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  11.7k|    constexpr bool scannable_char =
 5093|  11.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  11.7k|    static_assert(scannable_char,
 5095|  11.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  11.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  11.7k|    constexpr bool scannable_const =
 5099|  11.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  11.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  11.7k|    constexpr bool scannable_disabled =
 5103|  11.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  11.7k|    static_assert(scannable_disabled,
 5105|  11.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  11.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  11.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  11.7k|    static_assert(
 5110|  11.7k|        scannable,
 5111|  11.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  11.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  11.7k|    return arg_value{arg};
 5115|  11.7k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  11.7k|    {
 4902|  11.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  11.7k|    {
 7975|  11.7k|        return m_str;
 7976|  11.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  11.7k|    {
 5426|  11.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  11.7k|    {
 5379|  11.7k|        return m_argptrs;
 5380|  11.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  11.7k|{
 8820|  11.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 824]
  |  |  ------------------
  ------------------
 8821|  10.8k|        return unexpected(result.error());
 8822|  10.8k|    }
 8823|    824|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    824|    static_cast<    \
  |  |  929|    824|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    824|    static_cast<    \
  |  |  929|    824|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  11.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  10.8k|    {
 1476|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  10.8k|    {
  447|  10.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.7k|    {
 1177|  11.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    824|    {
 5830|    824|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    824|    {
 5616|    824|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    824|    {
 1430|    824|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    824|    {
  437|    824|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  11.7k|    {
 5374|  11.7k|        return m_args;
 5375|  11.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  11.7k|    {
 7971|  11.7k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.85k|{
 8934|  5.85k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.85k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.85k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.85k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  23.4k|{
 5135|  23.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  23.4k|                  "Scan argument types must be default constructible");
 5137|  23.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  23.4k|                  "Scan argument types must be Destructible");
 5139|  23.4k|    static_assert(
 5140|  23.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  23.4k|        "Scan argument types must not be references");
 5142|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  23.4k|{
 5089|  23.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  23.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  23.4k|    constexpr bool scannable_char =
 5093|  23.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  23.4k|    static_assert(scannable_char,
 5095|  23.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  23.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  23.4k|    constexpr bool scannable_const =
 5099|  23.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  23.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  23.4k|    constexpr bool scannable_disabled =
 5103|  23.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  23.4k|    static_assert(scannable_disabled,
 5105|  23.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  23.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  23.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  23.4k|    static_assert(
 5110|  23.4k|        scannable,
 5111|  23.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  23.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  23.4k|    return arg_value{arg};
 5115|  23.4k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  23.4k|    {
 4902|  23.4k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   105k|{
 8591|   105k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   105k|    auto result = vscan_impl(buffer, format, args);
 8594|   105k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 328]
  |  |  ------------------
  ------------------
 8595|   105k|        return unexpected(result.error());
 8596|   105k|    }
 8597|    328|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   105k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   210k|{
 4720|   210k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   210k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   210k|                  "\n"
 4724|   210k|                  "Unsupported range type given as input to a scanning "
 4725|   210k|                  "function.\n"
 4726|   210k|                  "A range needs to have a character type (value type) "
 4727|   210k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   210k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   210k|                  "to be included.\n"
 4730|   210k|                  "See the scnlib documentation for more details.");
 4731|   210k|    static_assert(
 4732|   210k|        !std::is_same_v<T, custom_char_traits>,
 4733|   210k|        "\n"
 4734|   210k|        "Unsupported range type given as input to a scanning "
 4735|   210k|        "function.\n"
 4736|   210k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   210k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   210k|        "not supported.");
 4739|   210k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   210k|                  "\n"
 4741|   210k|                  "Unsupported range type given as input to a scanning "
 4742|   210k|                  "function.\n"
 4743|   210k|                  "file_marker_found cannot be used as an "
 4744|   210k|                  "source range type to scn::scan.\n"
 4745|   210k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   210k|                  "and do not provide an explicit source range, "
 4747|   210k|                  "or use scn::scan with a FILE* directly.");
 4748|   210k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   210k|                  "\n"
 4750|   210k|                  "Unsupported range type given as input to a scanning "
 4751|   210k|                  "function.\n"
 4752|   210k|                  "In order to be scannable, a range needs to satisfy "
 4753|   210k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   210k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   210k|                  "\n"
 4756|   210k|                  "Unsupported range type given as input to a scanning "
 4757|   210k|                  "function.\n"
 4758|   210k|                  "A range needs to model forward_range and have a valid "
 4759|   210k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   210k|                  "Examples of scannable ranges are std::string, "
 4761|   210k|                  "std::string_view, "
 4762|   210k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   210k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   210k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   210k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   210k|{
 4612|   210k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   210k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   210k|    }
 4616|   210k|    else {
 4617|   210k|        return invalid_char_type{};
 4618|   210k|    }
 4619|   210k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   210k|    {
 1476|   210k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   210k|    {
  447|   210k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   210k|    {
 1177|   210k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|    656|{
 5923|    656|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|    656|                      ranges::iterator_t<SourceRange>>) {
 5925|    656|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|    656|    }
 5927|    656|    else {
 5928|    656|        auto it = ranges::begin(source);
 5929|    656|        while (n > 0) {
 5930|    656|            --n;
 5931|    656|            ++it;
 5932|    656|        }
 5933|    656|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|    656|    }
 5935|    656|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    656|    {
 2724|    656|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    656|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    656|    {
 2705|    656|        return decay_copy(t.begin());
 2706|    656|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   100k|{
 1949|   100k|    return SCN_FWD(t);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   100k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|    656|{
 5910|    656|    return ranges::end(source);
 5911|    656|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    656|    {
 2781|    656|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    656|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    656|    {
 2763|    656|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    656|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.37M|    {
 3316|  1.37M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    656|    {
 1430|    656|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|    656|    {
  437|    656|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   210k|    {
 5478|   210k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.3k, False: 98]
  |  |  ------------------
  ------------------
 8821|  23.3k|        return unexpected(result.error());
 8822|  23.3k|    }
 8823|     98|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   210k|    {
 1598|   210k|        return has_value();
 1599|   210k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   421k|    {
  485|   421k|        return m_has_value;
  486|   421k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   210k|    {
 1604|   210k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   210k|        return this->get_unexpected().error();
 1606|   210k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   210k|    {
  468|   210k|        return m_unexpected;
  469|   210k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.3k|    {
 1476|  23.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.3k|    {
  447|  23.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|    656|    {
 1653|    656|        return value();
 1654|    656|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    656|    {
 1627|    656|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    656|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    656|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    656|        return this->get_value();
 1629|    656|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    656|    {
  451|    656|        return m_value;
  452|    656|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|     98|    {
 5830|     98|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|    656|    {
 5681|    656|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|     98|    {
 5616|     98|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|     98|    {
 1430|     98|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|     98|    {
  437|     98|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   210k|{
 7696|   210k|    return s;
 7697|   210k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   210k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   105k|{
 8607|   105k|#if !SCN_DISABLE_LOCALE
 8608|   105k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   105k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   105k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   105k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   105k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 328]
  |  |  ------------------
  ------------------
 8615|   105k|        return unexpected(result.error());
 8616|   105k|    }
 8617|    328|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   105k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.4k|        return unexpected(result.error());
 8822|  23.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.4k|        return unexpected(result.error());
 8822|  23.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.4k|        return unexpected(result.error());
 8822|  23.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.4k|        return unexpected(result.error());
 8822|  23.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.4k|        return unexpected(result.error());
 8822|  23.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.2k, False: 186]
  |  |  ------------------
  ------------------
 8821|  23.2k|        return unexpected(result.error());
 8822|  23.2k|    }
 8823|    186|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  23.2k|    {
 1476|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  23.2k|    {
  626|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  23.2k|    {
  689|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  23.2k|                                  std::forward<Args>(args)...);
  691|  23.2k|        m_has_value = false;
  692|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  46.4k|    {
  718|  46.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  46.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  46.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  46.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    186|    {
 5830|    186|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    186|    {
 1430|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    186|    {
  616|    186|        construct(std::forward<Args>(args)...);
  617|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    186|    {
  682|    186|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    186|        m_has_value = true;
  684|    186|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    186|{
  392|    186|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    186|        T(std::forward<Args>(args)...);
  394|    186|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    186|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    372|    {
  706|    372|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    372|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    372|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    372|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  23.4k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  23.4k|    {
  631|  23.4k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 186, False: 23.2k]
  ------------------
  632|    186|            destroy_value();
  633|    186|        }
  634|  23.2k|        else {
  635|  23.2k|            destroy_unexpected();
  636|  23.2k|        }
  637|  23.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  23.4k|    {
  675|  23.4k|        return m_has_value;
  676|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    186|    {
  696|    186|        scn::detail::destroy_at(value_ptr());
  697|    186|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    186|{
  398|    186|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    186|        for (auto& elem : *p) {
  400|    186|            scn::detail::destroy_at(&elem);
  401|    186|        }
  402|    186|    }
  403|    186|    else {
  404|    186|        p->~T();
  405|    186|    }
  406|    186|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  23.2k|    {
  700|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  23.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.2k, False: 186]
  |  |  ------------------
  ------------------
 8821|  23.2k|        return unexpected(result.error());
 8822|  23.2k|    }
 8823|    186|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  23.2k|    {
 1476|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  23.2k|    {
  626|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  23.2k|    {
  689|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  23.2k|                                  std::forward<Args>(args)...);
  691|  23.2k|        m_has_value = false;
  692|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  46.4k|    {
  718|  46.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  46.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  46.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  46.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    186|    {
 5830|    186|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    186|    {
 1430|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    186|    {
  616|    186|        construct(std::forward<Args>(args)...);
  617|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    186|    {
  682|    186|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    186|        m_has_value = true;
  684|    186|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    186|{
  392|    186|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    186|        T(std::forward<Args>(args)...);
  394|    186|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    186|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    372|    {
  706|    372|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    372|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    372|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    372|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  23.4k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  23.4k|    {
  631|  23.4k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 186, False: 23.2k]
  ------------------
  632|    186|            destroy_value();
  633|    186|        }
  634|  23.2k|        else {
  635|  23.2k|            destroy_unexpected();
  636|  23.2k|        }
  637|  23.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  23.4k|    {
  675|  23.4k|        return m_has_value;
  676|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    186|    {
  696|    186|        scn::detail::destroy_at(value_ptr());
  697|    186|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    186|{
  398|    186|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    186|        for (auto& elem : *p) {
  400|    186|            scn::detail::destroy_at(&elem);
  401|    186|        }
  402|    186|    }
  403|    186|    else {
  404|    186|        p->~T();
  405|    186|    }
  406|    186|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  23.2k|    {
  700|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  23.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  23.4k|{
 5396|  23.4k|    detail::check_scan_arg_types<Args...>();
 5397|  23.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.4k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  23.4k|{
 5135|  23.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  23.4k|                  "Scan argument types must be default constructible");
 5137|  23.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  23.4k|                  "Scan argument types must be Destructible");
 5139|  23.4k|    static_assert(
 5140|  23.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  23.4k|        "Scan argument types must not be references");
 5142|  23.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  23.4k|    {
 5349|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  23.4k|    {
 5360|  23.4k|        return {detail::make_arg<
 5361|  23.4k|            kind, Context,
 5362|  23.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  23.4k|{
 5170|  23.4k|    return make_value<Context>(value).ref_value;
 5171|  23.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  23.4k|{
 5120|  23.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.4k|                                  needs_context_tag>) {
 5124|  23.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.4k|    }
 5126|  23.4k|    else {
 5127|  23.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.4k|            value, context_tag<Context>{}));
 5129|  23.4k|    }
 5130|  23.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  23.4k|    {                                                                        \
 4959|  23.4k|        return val;                                                          \
 4960|  23.4k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  23.4k|{
 5089|  23.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  23.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  23.4k|    constexpr bool scannable_char =
 5093|  23.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  23.4k|    static_assert(scannable_char,
 5095|  23.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  23.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  23.4k|    constexpr bool scannable_const =
 5099|  23.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  23.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  23.4k|    constexpr bool scannable_disabled =
 5103|  23.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  23.4k|    static_assert(scannable_disabled,
 5105|  23.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  23.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  23.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  23.4k|    static_assert(
 5110|  23.4k|        scannable,
 5111|  23.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  23.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  23.4k|    return arg_value{arg};
 5115|  23.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  23.4k|    {
 4902|  23.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  23.4k|    {
 7975|  23.4k|        return m_str;
 7976|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.4k|    {
 5426|  23.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  23.4k|    {
 5379|  23.4k|        return m_argptrs;
 5380|  23.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  23.4k|{
 8820|  23.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.2k, False: 186]
  |  |  ------------------
  ------------------
 8821|  23.2k|        return unexpected(result.error());
 8822|  23.2k|    }
 8823|    186|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  23.2k|    {
 1476|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  23.2k|    {
  447|  23.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.4k|    {
 1177|  23.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    186|    {
 5830|    186|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    186|    {
 5616|    186|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    186|    {
 1430|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    186|    {
  437|    186|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  23.4k|    {
 5374|  23.4k|        return m_args;
 5375|  23.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  23.4k|    {
 7971|  23.4k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   590k|    {
 3568|   590k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   590k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   590k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  3.69M|    {
 3574|  3.69M|        return m_code == good;
 3575|  3.69M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   145k|    {
 3585|   145k|        return m_code;
 3586|   145k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  4.46k|    {
 6181|  4.46k|        return m_size;
 6182|  4.46k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  16.0k|    {
 6222|  16.0k|        SCN_GCC_COMPAT_PUSH
 6223|  16.0k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  16.0k|        switch (type) {
 6225|  1.90k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 1.90k, False: 14.1k]
  ------------------
 6226|  1.90k|                return 10;
 6227|     54|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 54, False: 15.9k]
  ------------------
 6228|     54|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 16.0k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     32|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 32, False: 15.9k]
  ------------------
 6233|     32|                return 2;
 6234|     86|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 86, False: 15.9k]
  ------------------
 6235|     86|                return 8;
 6236|     30|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 30, False: 16.0k]
  ------------------
 6237|     88|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 58, False: 15.9k]
  ------------------
 6238|     88|                return 10;
 6239|  13.8k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 13.8k, False: 2.16k]
  ------------------
 6240|  13.8k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 16.0k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  16.0k|        }
 6246|  16.0k|        SCN_GCC_COMPAT_POP
 6247|  16.0k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  93.4k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  10.4k|    {
 6263|  10.4k|        m_specs.align = align;
 6264|  10.4k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    360|    {
 6272|    360|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    360|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    360|            m_specs.localized = true;
 6274|    360|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    360|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  27.5k|    {
 6282|  27.5k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 27.5k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  27.5k|        m_specs.width = width;
 6289|  27.5k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  12.1k|    {
 6292|  12.1k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 74, False: 12.0k]
  ------------------
 6293|       |            // clang-format off
 6294|     74|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     74|        }
 6297|       |
 6298|  12.0k|        m_specs.precision = prec;
 6299|  12.0k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   116k|    {
 6303|   116k|        m_specs.type = type;
 6304|   116k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  1.97M|    {
 6308|  1.97M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  1.97M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.71M, False: 255k]
  |  |  ------------------
  ------------------
 6310|  1.71M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  1.71M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  1.71M|        }
 6313|   255k|        else {
 6314|   255k|            m_specs.charset_has_nonascii = true;
 6315|   255k|        }
 6316|  1.97M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  11.7k|    {
 6320|  11.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  11.7k|        const auto end_value = static_cast<unsigned>(end);
 6322|  11.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  11.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  11.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.25k, False: 5.44k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  6.25k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  6.25k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   380k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 373k, False: 6.25k]
  ------------------
 6329|   373k|                m_specs.charset_literals[v / 8] |=
 6330|   373k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   373k|            }
 6332|  6.25k|        }
 6333|  5.44k|        else {
 6334|  5.44k|            m_specs.charset_has_nonascii = true;
 6335|  5.44k|        }
 6336|  11.7k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  2.29k|    {
 6340|  2.29k|        m_specs.charset_is_inverted = true;
 6341|  2.29k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|  60.8k|    {
 6359|  60.8k|        m_specs.regexp_flags = flags;
 6360|  60.8k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  11.2k|    {
 6365|  11.2k|        SCN_UNLIKELY_ATTR
 6366|  11.2k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  11.2k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.08M|    {
 6376|  2.08M|        return static_cast<bool>(m_error);
 6377|  2.08M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   145k|{
 3609|   145k|    return a.code() == b;
 3610|   145k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   145k|{
 3613|   145k|    return !(a == b);
 3614|   145k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   177k|{
 3908|   177k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   177k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   177k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   177k|    };
 3913|       |
 3914|   177k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 157k, False: 20.4k]
  ------------------
 3915|   157k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   157k|        return static_cast<char32_t>(input[0]);
 3917|   157k|    }
 3918|       |
 3919|  20.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 19.7k, False: 694]
  ------------------
 3920|  19.7k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  19.7k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  19.7k|        char32_t cp{};
 3924|  19.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  19.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  19.7k|        return cp;
 3927|  19.7k|    }
 3928|       |
 3929|    694|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 564, False: 130]
  ------------------
 3930|    564|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    564|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    564|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|    564|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    564|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    564|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|    564|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    564|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    564|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|    564|        char32_t cp{};
 3935|    564|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|    564|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|    564|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|    564|        return cp;
 3939|    564|    }
 3940|       |
 3941|    130|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 130, False: 0]
  ------------------
 3942|    130|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    130|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    130|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    130|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    130|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    130|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    130|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    130|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    130|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    130|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    130|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    130|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    130|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    130|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    130|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    130|        char32_t cp{};
 3949|    130|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    130|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    130|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    130|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    130|        return cp;
 3954|    130|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|  86.1k|{
 6111|  86.1k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|  86.1k|                                    static_cast<unsigned>(b));
 6113|  86.1k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  8.68k|{
 6116|  8.68k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  8.68k|                                    static_cast<unsigned>(b));
 6118|  8.68k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  8.68k|{
 6131|  8.68k|    return a = a | b;
 6132|  8.68k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|    916|{
 7063|    916|    switch (type) {
 7064|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 100, False: 816]
  ------------------
 7065|    100|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 916]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 916]
  ------------------
 7069|     90|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 90, False: 826]
  ------------------
 7070|     90|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 916]
  ------------------
 7071|     90|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 916]
  ------------------
 7072|     90|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 916]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 916]
  ------------------
 7076|     90|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 90, False: 826]
  ------------------
 7077|     90|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 916]
  ------------------
 7078|     90|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 916]
  ------------------
 7079|     90|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|     90|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 90, False: 826]
  ------------------
 7082|     90|            return arg_type_category::pointer;
 7083|     90|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 90, False: 826]
  ------------------
 7084|     90|            return arg_type_category::boolean;
 7085|     54|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 54, False: 862]
  ------------------
 7086|     90|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 36, False: 880]
  ------------------
 7087|     90|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 916]
  ------------------
 7088|     90|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 916]
  ------------------
 7091|     90|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 90, False: 826]
  ------------------
 7092|     90|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 916]
  ------------------
 7093|     90|            return arg_type_category::floating;
 7094|       |
 7095|     54|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 54, False: 862]
  ------------------
 7096|    146|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 92, False: 824]
  ------------------
 7097|    184|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 38, False: 878]
  ------------------
 7098|    276|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 92, False: 824]
  ------------------
 7099|    276|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 916]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 916]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|    916|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|    916|            SCN_CLANG_POP
 7110|    916|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|    916|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.10k|{
 3654|  1.10k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.10k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  19.2k|{
 7149|  19.2k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.1k, False: 2.18k]
  |  |  ------------------
  ------------------
 7150|  17.1k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  17.1k|    }
 7152|  2.18k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 108, False: 2.07k]
  ------------------
 7153|    108|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 96]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|     12|            return;
 7158|     12|        }
 7159|     96|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|     96|    }
 7165|  2.18k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.62k|{
 3654|  2.62k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.62k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  9.64k|{
 7193|  9.64k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 8.68k, False: 966]
  ------------------
 7194|  9.64k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 126, False: 8.55k]
  ------------------
 7195|  8.68k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 8.43k, False: 120]
  ------------------
 7196|  8.56k|        SCN_UNLIKELY_ATTR
 7197|  8.56k|        return handler.on_error("Invalid type specifier for float type");
 7198|  8.56k|    }
 7199|  9.64k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  38.6k|    {
  485|  38.6k|        return m_has_value;
  486|  38.6k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  19.3k|    {
 1598|  19.3k|        return has_value();
 1599|  19.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  19.3k|    {
  451|  19.3k|        return m_value;
  452|  19.3k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  19.3k|    {
 1627|  19.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.3k|        return this->get_value();
 1629|  19.3k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  19.3k|    {
 1663|  19.3k|        return std::move(value());
 1664|  19.3k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  9.84k|{
 3654|  9.84k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  9.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  9.84k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  6.60k|{
 3654|  6.60k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  6.60k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    216|{
 3654|    216|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    216|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|    882|{
 3654|    882|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    882|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.31k|{
 3654|  1.31k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.31k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  28.7k|{
 7205|  28.7k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 2.83k, False: 25.8k]
  ------------------
 7206|  28.7k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 714, False: 25.1k]
  ------------------
 7207|  28.7k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 4.14k, False: 21.0k]
  ------------------
 7208|  28.7k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 18.2k, False: 2.73k]
  ------------------
 7209|  28.7k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 1.93k, False: 798]
  ------------------
 7210|  27.9k|        return;
 7211|  27.9k|    }
 7212|    798|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 168, False: 630]
  ------------------
 7213|    168|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 156]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    156|        return;
 7219|    168|    }
 7220|    630|    SCN_UNLIKELY_ATTR
 7221|    630|    handler.on_error("Invalid type specifier for string");
 7222|    630|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  27.9k|{
 3654|  27.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  27.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     28|{
 3654|     28|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     28|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     28|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  9.64k|{
 7239|  9.64k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 8.68k, False: 966]
  ------------------
 7240|  9.64k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 8.43k, False: 244]
  ------------------
 7241|  9.64k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 8.41k, False: 22]
  ------------------
 7242|  9.64k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 8.39k, False: 20]
  ------------------
 7243|  9.64k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 8.37k, False: 18]
  ------------------
 7244|  9.64k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 8.35k, False: 20]
  ------------------
 7245|  9.64k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 8.32k, False: 34]
  ------------------
 7246|  9.64k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 8.31k, False: 12]
  ------------------
 7247|  8.31k|        SCN_UNLIKELY_ATTR
 7248|  8.31k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  8.31k|    }
 7250|  9.64k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  9.57k|{
 7171|  9.57k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 8.53k, False: 1.03k]
  ------------------
 7172|  9.57k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.03k]
  ------------------
 7173|  8.53k|        SCN_UNLIKELY_ATTR
 7174|  8.53k|        return handler.on_error("Invalid type specifier for character type");
 7175|  8.53k|    }
 7176|  9.57k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  9.57k|{
 7228|  9.57k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 8.62k, False: 944]
  ------------------
 7229|  9.57k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 8.61k, False: 12]
  ------------------
 7230|  8.61k|        SCN_UNLIKELY_ATTR
 7231|  8.61k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  8.61k|    }
 7233|  9.57k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|     90|{
 3654|     90|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     90|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  94.0k|{
 3715|  94.0k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  94.0k|                                          const CharT*, const CharT*>) {
 3717|  94.0k|        return {first, last};
 3718|  94.0k|    }
 3719|  94.0k|    else {
 3720|  94.0k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  94.0k|    }
 3722|  94.0k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   432M|{
 3715|   432M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   432M|                                          const CharT*, const CharT*>) {
 3717|   432M|        return {first, last};
 3718|   432M|    }
 3719|   432M|    else {
 3720|   432M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   432M|    }
 3722|   432M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  1.72M|    {
 3330|  1.72M|        return m_iterator;
 3331|  1.72M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.89M|    {
 3334|  1.89M|        return m_sentinel;
 3335|  1.89M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  3.18M|    {
 3330|  3.18M|        return m_iterator;
 3331|  3.18M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   866M|    {
 3334|   866M|        return m_sentinel;
 3335|   866M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   176k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    112|{
 1211|    112|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    112|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.10k|    {
  361|  2.10k|        return m_unexpected;
  362|  2.10k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  40.2k|{
 3654|  40.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  40.2k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   104k|    {
  347|   104k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   104k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  96.4k|    {
 1476|  96.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  97.4k|    {
  447|  97.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   127k|    {
 1177|   127k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  28.4k|    {
 1430|  28.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  28.4k|    {
  437|  28.4k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   255k|    {
  485|   255k|        return m_has_value;
  486|   255k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  96.4k|    {
 1604|  96.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  96.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  96.4k|        return this->get_unexpected().error();
 1606|  96.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  96.4k|    {
  468|  96.4k|        return m_unexpected;
  469|  96.4k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  20.3k|    {
 1663|  20.3k|        return std::move(value());
 1664|  20.3k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  29.6k|    {
 1627|  29.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  29.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  29.6k|        return this->get_value();
 1629|  29.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  29.6k|    {
  451|  29.6k|        return m_value;
  452|  29.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   186k|    {
 1476|   186k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   198k|    {
  447|   198k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   440k|    {
 1177|   440k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   241k|    {
 1430|   241k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   241k|    {
  437|   241k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   452k|    {
 1598|   452k|        return has_value();
 1599|   452k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   867k|    {
  485|   867k|        return m_has_value;
  486|   867k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   186k|    {
 1604|   186k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   186k|        return this->get_unexpected().error();
 1606|   186k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   186k|    {
  468|   186k|        return m_unexpected;
  469|   186k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   179k|    {
 1663|   179k|        return std::move(value());
 1664|   179k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   229k|    {
 1627|   229k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   229k|        return this->get_value();
 1629|   229k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   229k|    {
  451|   229k|        return m_value;
  452|   229k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.82k|    {
 1837|  8.82k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.82k|                                            std::forward<F>(f));
 1839|  8.82k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.82k|{
 1323|  8.82k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.82k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.82k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.82k|            return result(*std::forward<Exp>(exp));
 1327|  8.82k|        }
 1328|       |
 1329|  8.82k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.82k|        return result(unexpect, monostate{});
 1331|  8.82k|    }
 1332|  8.82k|    else {
 1333|  8.82k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.82k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.82k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.82k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.82k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.82k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.82k|    }
 1340|  8.82k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  86.0k|    {
  485|  86.0k|        return m_has_value;
  486|  86.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  10.7k|    {
 1663|  10.7k|        return std::move(value());
 1664|  10.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  39.9k|    {
 1627|  39.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  39.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  39.9k|        return this->get_value();
 1629|  39.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  39.9k|    {
  451|  39.9k|        return m_value;
  452|  39.9k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    964|    {
 1486|    964|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   488k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  3.07k|    {
 6187|  3.07k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  3.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  3.07k|        CharT r{};
 6189|  3.07k|        std::memcpy(&r, m_data, m_size);
 6190|  3.07k|        return r;
 6191|  3.07k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.17k|    {
  347|  1.17k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.17k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.28k|    {
  356|  1.28k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.28k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    572|    {
 6196|    572|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    572|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    112|    {
  347|    112|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    112|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    112|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|   100k|    {
  361|   100k|        return m_unexpected;
  362|   100k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  15.3k|    {
  356|  15.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  15.3k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|   169k|    {
  347|   169k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   169k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   169k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|   169k|    {
  361|   169k|        return m_unexpected;
  362|   169k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|   169k|    {
  356|   169k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   169k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   169k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    700|{
 1211|    700|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    700|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  14.6k|    {
  347|  14.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.6k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.38k|{
 1211|  1.38k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.38k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  9.45k|{
  326|  9.45k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  9.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  9.45k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  71.8k|    {
 3346|  71.8k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  71.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    470|    {
 1476|    470|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    470|    {
  447|    470|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  45.9k|    {
 1177|  45.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  45.5k|    {
 1430|  45.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  45.5k|    {
  437|  45.5k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  35.1k|    {
 1598|  35.1k|        return has_value();
 1599|  35.1k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  29.2k|    {
 1653|  29.2k|        return value();
 1654|  29.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  5.50k|    {
 1430|  5.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  5.50k|    {
  437|  5.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.86k|    {
 1177|  5.86k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    358|    {
 1476|    358|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    358|    {
  447|    358|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  3.13k|    {
 1598|  3.13k|        return has_value();
 1599|  3.13k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  9.88k|    {
  485|  9.88k|        return m_has_value;
  486|  9.88k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.28k|    {
 1653|  1.28k|        return value();
 1654|  1.28k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  3.69k|    {
 1627|  3.69k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.69k|        return this->get_value();
 1629|  3.69k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.69k|    {
  451|  3.69k|        return m_value;
  452|  3.69k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    112|    {
 1476|    112|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.76k|    {
 1177|  4.76k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  4.65k|    {
 1430|  4.65k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  4.65k|    {
  437|  4.65k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    778|    {
 1837|    778|        return detail::transform_error_impl(std::move(*this),
 1838|    778|                                            std::forward<F>(f));
 1839|    778|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    778|{
 1323|    778|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    778|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    778|        if (SCN_LIKELY(exp.has_value())) {
 1326|    778|            return result(*std::forward<Exp>(exp));
 1327|    778|        }
 1328|       |
 1329|    778|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    778|        return result(unexpect, monostate{});
 1331|    778|    }
 1332|    778|    else {
 1333|    778|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    778|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    778|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 778, False: 0]
  |  |  ------------------
  ------------------
 1335|    778|                   ? result(*std::forward<Exp>(exp))
 1336|    778|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    778|    }
 1340|    778|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.40k|    {
 1663|  2.40k|        return std::move(value());
 1664|  2.40k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  2.18k|    {
 1430|  2.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.18k|    {
  437|  2.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.71k|    {
 1177|  9.71k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    328|    {
 1614|    328|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    328|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    328|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    328|        return std::move(this->get_unexpected().error());
 1616|    328|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    328|    {
  468|    328|        return m_unexpected;
  469|    328|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.50k|    {
 1486|  1.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  6.78k|    {
  447|  6.78k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.78k|    {
 2724|  1.78k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.78k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.78k|    {
 2705|  1.78k|        return decay_copy(t.begin());
 2706|  1.78k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.86k|{
 1949|  3.86k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.86k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  1.78k|    {
 3330|  1.78k|        return m_iterator;
 3331|  1.78k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.78k|    {
 2781|  1.78k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.78k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.78k|    {
 2763|  1.78k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.78k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  1.78k|    {
 3334|  1.78k|        return m_sentinel;
 3335|  1.78k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  1.78k|    {
 3316|  1.78k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  4.76k|    {
 1598|  4.76k|        return has_value();
 1599|  4.76k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.53k|    {
  485|  9.53k|        return m_has_value;
  486|  9.53k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  4.65k|    {
 1663|  4.65k|        return std::move(value());
 1664|  4.65k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  4.65k|    {
 1627|  4.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.65k|        return this->get_value();
 1629|  4.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.65k|    {
  451|  4.65k|        return m_value;
  452|  4.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  22.2k|    {
 1177|  22.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  22.2k|    {
 1430|  22.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  22.2k|    {
  437|  22.2k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  22.2k|    {
 1598|  22.2k|        return has_value();
 1599|  22.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  44.4k|    {
  485|  44.4k|        return m_has_value;
  486|  44.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  22.2k|    {
 1663|  22.2k|        return std::move(value());
 1664|  22.2k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  22.2k|    {
 1627|  22.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  22.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  22.2k|        return this->get_value();
 1629|  22.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  22.2k|    {
  451|  22.2k|        return m_value;
  452|  22.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  5.28k|    {
 1476|  5.28k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    630|    {
 1476|    630|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    958|    {
  447|    958|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.30k|    {
 1177|  7.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  4.72k|    {
 1476|  4.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.72k|    {
  447|  4.72k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  6.71k|    {
 1598|  6.71k|        return has_value();
 1599|  6.71k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  13.1k|    {
  485|  13.1k|        return m_has_value;
  486|  13.1k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.45k|    {
 1604|  2.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.45k|        return this->get_unexpected().error();
 1606|  2.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.34k|    {
  468|  3.34k|        return m_unexpected;
  469|  3.34k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.21k|    {
 1430|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.21k|    {
  437|  1.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.21k|    {
 1177|  1.21k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.62k|    {
 1627|  1.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.62k|        return this->get_value();
 1629|  1.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.62k|    {
  451|  1.62k|        return m_value;
  452|  1.62k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    914|    {
 1598|    914|        return has_value();
 1599|    914|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.43k|    {
  485|  2.43k|        return m_has_value;
  486|  2.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    914|    {
 1177|    914|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.21k|    {
 1663|  1.21k|        return std::move(value());
 1664|  1.21k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.21k|    {
 1627|  1.21k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.21k|        return this->get_value();
 1629|  1.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.21k|    {
  451|  1.21k|        return m_value;
  452|  1.21k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   133k|    {
 3334|   133k|        return m_sentinel;
 3335|   133k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.95k|    {
 1837|  1.95k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.95k|                                            std::forward<F>(f));
 1839|  1.95k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.95k|{
 1323|  1.95k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.95k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.95k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.95k|            return result(*std::forward<Exp>(exp));
 1327|  1.95k|        }
 1328|       |
 1329|  1.95k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.95k|        return result(unexpect, monostate{});
 1331|  1.95k|    }
 1332|  1.95k|    else {
 1333|  1.95k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.95k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.62k, False: 328]
  |  |  ------------------
  ------------------
 1335|  1.95k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.95k|                   : result(unexpect,
 1337|    328|                            trivial_invoke(std::forward<F>(f),
 1338|    328|                                           std::forward<Exp>(exp).error()));
 1339|  1.95k|    }
 1340|  1.95k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.62k|    {
 1430|  1.62k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.62k|    {
  437|  1.62k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    328|    {
 1486|    328|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.62k|    {
 1663|  1.62k|        return std::move(value());
 1664|  1.62k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   238k|    {
 3330|   238k|        return m_iterator;
 3331|   238k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    914|    {
 1430|    914|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    914|    {
  437|    914|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    914|    {
 1837|    914|        return detail::transform_error_impl(std::move(*this),
 1838|    914|                                            std::forward<F>(f));
 1839|    914|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    914|{
 1323|    914|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    914|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    914|        if (SCN_LIKELY(exp.has_value())) {
 1326|    914|            return result(*std::forward<Exp>(exp));
 1327|    914|        }
 1328|       |
 1329|    914|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    914|        return result(unexpect, monostate{});
 1331|    914|    }
 1332|    914|    else {
 1333|    914|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    914|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    914|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 914, False: 0]
  |  |  ------------------
  ------------------
 1335|    914|                   ? result(*std::forward<Exp>(exp))
 1336|    914|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    914|    }
 1340|    914|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.82k|    {
  485|  1.82k|        return m_has_value;
  486|  1.82k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    914|    {
 1663|    914|        return std::move(value());
 1664|    914|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    914|    {
 1627|    914|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    914|        return this->get_value();
 1629|    914|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    914|    {
  451|    914|        return m_value;
  452|    914|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    914|    {
 1430|    914|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    914|    {
  437|    914|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    914|    {
 1177|    914|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    914|    {
 1598|    914|        return has_value();
 1599|    914|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.82k|    {
  485|  1.82k|        return m_has_value;
  486|  1.82k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    914|    {
 1663|    914|        return std::move(value());
 1664|    914|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    914|    {
 1627|    914|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    914|        return this->get_value();
 1629|    914|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    914|    {
  451|    914|        return m_value;
  452|    914|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    898|    {
 1837|    898|        return detail::transform_error_impl(std::move(*this),
 1838|    898|                                            std::forward<F>(f));
 1839|    898|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    898|{
 1323|    898|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    898|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    898|        if (SCN_LIKELY(exp.has_value())) {
 1326|    898|            return result(*std::forward<Exp>(exp));
 1327|    898|        }
 1328|       |
 1329|    898|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    898|        return result(unexpect, monostate{});
 1331|    898|    }
 1332|    898|    else {
 1333|    898|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    898|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    898|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 898]
  |  |  ------------------
  ------------------
 1335|    898|                   ? result(*std::forward<Exp>(exp))
 1336|    898|                   : result(unexpect,
 1337|    898|                            trivial_invoke(std::forward<F>(f),
 1338|    898|                                           std::forward<Exp>(exp).error()));
 1339|    898|    }
 1340|    898|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    898|    {
 1614|    898|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    898|        return std::move(this->get_unexpected().error());
 1616|    898|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.50k|    {
 3648|  1.50k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  85.1k|    {
 3316|  85.1k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     16|    {
 1476|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     16|    {
  626|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     16|    {
  689|     16|        scn::detail::construct_at(unexpected_ptr(),
  690|     16|                                  std::forward<Args>(args)...);
  691|     16|        m_has_value = false;
  692|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     48|    {
  718|     48|        return reinterpret_cast<unexpected<E>*>(
  719|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     16|    {
 1177|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     16|    {
 1598|     16|        return has_value();
 1599|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     48|    {
  675|     48|        return m_has_value;
  676|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     16|    {
 1604|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     16|        return this->get_unexpected().error();
 1606|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     16|    {
  658|     16|        return *unexpected_ptr();
  659|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     16|    {
  631|     16|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 16]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     16|        else {
  635|     16|            destroy_unexpected();
  636|     16|        }
  637|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     16|    {
  700|     16|        scn::detail::destroy_at(unexpected_ptr());
  701|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  10.0k|    {
 1598|  10.0k|        return has_value();
 1599|  10.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  19.4k|    {
  485|  19.4k|        return m_has_value;
  486|  19.4k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  6.48k|    {
 1604|  6.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.48k|        return this->get_unexpected().error();
 1606|  6.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  6.48k|    {
  468|  6.48k|        return m_unexpected;
  469|  6.48k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.18k|    {
 1663|  2.18k|        return std::move(value());
 1664|  2.18k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  2.93k|    {
 1627|  2.93k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.93k|        return this->get_value();
 1629|  2.93k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.93k|    {
  451|  2.93k|        return m_value;
  452|  2.93k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.04k|    {
 1476|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.15k|    {
  447|  1.15k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.3k|    {
 1177|  14.3k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  11.3k|    {
 1476|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  11.3k|    {
  447|  11.3k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  15.3k|    {
 1598|  15.3k|        return has_value();
 1599|  15.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  23.9k|    {
  485|  23.9k|        return m_has_value;
  486|  23.9k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.69k|    {
 1604|  5.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.69k|        return this->get_unexpected().error();
 1606|  5.69k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.69k|    {
  468|  5.69k|        return m_unexpected;
  469|  5.69k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.69k|    {
 1430|  3.69k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.69k|    {
  437|  3.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.69k|    {
 1177|  3.69k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.91k|    {
 1627|  1.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.91k|        return this->get_value();
 1629|  1.91k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.91k|    {
  451|  1.91k|        return m_value;
  452|  1.91k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.75k|    {
 1598|  2.75k|        return has_value();
 1599|  2.75k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.38k|    {
  485|  7.38k|        return m_has_value;
  486|  7.38k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.75k|    {
 1177|  2.75k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.69k|    {
 1663|  3.69k|        return std::move(value());
 1664|  3.69k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.69k|    {
 1627|  3.69k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.69k|        return this->get_value();
 1629|  3.69k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.69k|    {
  451|  3.69k|        return m_value;
  452|  3.69k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  47.2k|    {
 3221|  47.2k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 1.64k, False: 45.6k]
  ------------------
 3222|  47.2k|                   ? nullptr
 3223|  47.2k|                   : std::addressof(*ranges::begin(derived()));
 3224|  47.2k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  47.2k|    {
 3005|  47.2k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  47.2k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  47.2k|    {
 2978|  47.2k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  47.2k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  47.2k|    {
 3339|  47.2k|        return m_iterator == m_sentinel;
 3340|  47.2k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  92.8k|    {
 3180|  92.8k|        return static_cast<D&>(*this);
 3181|  92.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  45.6k|    {
 2724|  45.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  45.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  45.6k|    {
 2705|  45.6k|        return decay_copy(t.begin());
 2706|  45.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.91k|    {
 1430|  1.91k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.91k|    {
  437|  1.91k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.75k|    {
 1430|  2.75k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.75k|    {
  437|  2.75k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.75k|    {
 1837|  2.75k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.75k|                                            std::forward<F>(f));
 1839|  2.75k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.75k|{
 1323|  2.75k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.75k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.75k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.75k|            return result(*std::forward<Exp>(exp));
 1327|  2.75k|        }
 1328|       |
 1329|  2.75k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.75k|        return result(unexpect, monostate{});
 1331|  2.75k|    }
 1332|  2.75k|    else {
 1333|  2.75k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.75k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.75k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.75k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.75k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.75k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.75k|    }
 1340|  2.75k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.50k|    {
  485|  5.50k|        return m_has_value;
  486|  5.50k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.75k|    {
 1663|  2.75k|        return std::move(value());
 1664|  2.75k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.75k|    {
 1627|  2.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.75k|        return this->get_value();
 1629|  2.75k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.75k|    {
  451|  2.75k|        return m_value;
  452|  2.75k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.75k|    {
 1430|  2.75k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.75k|    {
  437|  2.75k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.75k|    {
 1177|  2.75k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.75k|    {
 1598|  2.75k|        return has_value();
 1599|  2.75k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.50k|    {
  485|  5.50k|        return m_has_value;
  486|  5.50k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.75k|    {
 1663|  2.75k|        return std::move(value());
 1664|  2.75k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.75k|    {
 1627|  2.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.75k|        return this->get_value();
 1629|  2.75k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.75k|    {
  451|  2.75k|        return m_value;
  452|  2.75k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     32|    {
 1476|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     32|    {
  626|     32|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     32|    {
  689|     32|        scn::detail::construct_at(unexpected_ptr(),
  690|     32|                                  std::forward<Args>(args)...);
  691|     32|        m_has_value = false;
  692|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     96|    {
  718|     96|        return reinterpret_cast<unexpected<E>*>(
  719|     96|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     96|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     96|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     32|    {
 1177|     32|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     32|    {
 1598|     32|        return has_value();
 1599|     32|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     96|    {
  675|     96|        return m_has_value;
  676|     96|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     32|    {
 1604|     32|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     32|        return this->get_unexpected().error();
 1606|     32|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     32|    {
  658|     32|        return *unexpected_ptr();
  659|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     32|    {
  631|     32|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 32]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     32|        else {
  635|     32|            destroy_unexpected();
  636|     32|        }
  637|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     32|    {
  700|     32|        scn::detail::destroy_at(unexpected_ptr());
  701|     32|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  31.3k|    {
 2855|  31.3k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  31.3k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  31.3k|    {
 2836|  31.3k|        return t.data();
 2837|  31.3k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   339k|    {
 1476|   339k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   339k|    {
  447|   339k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   342k|    {
 1177|   342k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  3.30k|    {
 1430|  3.30k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  3.30k|    {
  437|  3.30k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  14.4k|{
 1211|  14.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  14.4k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    302|    {
 1837|    302|        return detail::transform_error_impl(std::move(*this),
 1838|    302|                                            std::forward<F>(f));
 1839|    302|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    302|{
 1323|    302|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    302|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    302|        if (SCN_LIKELY(exp.has_value())) {
 1326|    302|            return result(*std::forward<Exp>(exp));
 1327|    302|        }
 1328|       |
 1329|    302|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    302|        return result(unexpect, monostate{});
 1331|    302|    }
 1332|    302|    else {
 1333|    302|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    302|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 302, False: 0]
  |  |  ------------------
  ------------------
 1335|    302|                   ? result(*std::forward<Exp>(exp))
 1336|    302|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    302|    }
 1340|    302|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    302|    {
 1430|    302|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    302|    {
  437|    302|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    302|    {
 1177|    302|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    302|    {
 1598|    302|        return has_value();
 1599|    302|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    604|    {
  485|    604|        return m_has_value;
  486|    604|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    302|    {
 1663|    302|        return std::move(value());
 1664|    302|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    302|    {
 1627|    302|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    302|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    302|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    302|        return this->get_value();
 1629|    302|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    302|    {
  451|    302|        return m_value;
  452|    302|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    604|    {
 1823|    604|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    604|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    604|{
 1323|    604|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    604|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    604|        if (SCN_LIKELY(exp.has_value())) {
 1326|    604|            return result(*std::forward<Exp>(exp));
 1327|    604|        }
 1328|       |
 1329|    604|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    604|        return result(unexpect, monostate{});
 1331|    604|    }
 1332|    604|    else {
 1333|    604|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    604|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    604|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 604]
  |  |  ------------------
  ------------------
 1335|    604|                   ? result(*std::forward<Exp>(exp))
 1336|    604|                   : result(unexpect,
 1337|    604|                            trivial_invoke(std::forward<F>(f),
 1338|    604|                                           std::forward<Exp>(exp).error()));
 1339|    604|    }
 1340|    604|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|    756|    {
 1653|    756|        return value();
 1654|    756|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    296|    {
 2724|    296|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    296|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    296|    {
 2705|    296|        return decay_copy(t.begin());
 2706|    296|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    938|    {
 1837|    938|        return detail::transform_error_impl(std::move(*this),
 1838|    938|                                            std::forward<F>(f));
 1839|    938|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    938|{
 1323|    938|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    938|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    938|        if (SCN_LIKELY(exp.has_value())) {
 1326|    938|            return result(*std::forward<Exp>(exp));
 1327|    938|        }
 1328|       |
 1329|    938|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    938|        return result(unexpect, monostate{});
 1331|    938|    }
 1332|    938|    else {
 1333|    938|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    938|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    938|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 938, False: 0]
  |  |  ------------------
  ------------------
 1335|    938|                   ? result(*std::forward<Exp>(exp))
 1336|    938|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    938|    }
 1340|    938|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    938|    {
 1430|    938|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    938|    {
  437|    938|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    938|    {
 1177|    938|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    938|    {
 1598|    938|        return has_value();
 1599|    938|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.87k|    {
  485|  1.87k|        return m_has_value;
  486|  1.87k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    938|    {
 1663|    938|        return std::move(value());
 1664|    938|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    938|    {
 1627|    938|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    938|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    938|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    938|        return this->get_value();
 1629|    938|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    938|    {
  451|    938|        return m_value;
  452|    938|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    964|    {
 1823|    964|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    964|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    964|{
 1323|    964|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    964|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    964|        if (SCN_LIKELY(exp.has_value())) {
 1326|    964|            return result(*std::forward<Exp>(exp));
 1327|    964|        }
 1328|       |
 1329|    964|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    964|        return result(unexpect, monostate{});
 1331|    964|    }
 1332|    964|    else {
 1333|    964|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    964|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    964|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 964]
  |  |  ------------------
  ------------------
 1335|    964|                   ? result(*std::forward<Exp>(exp))
 1336|    964|                   : result(unexpect,
 1337|    964|                            trivial_invoke(std::forward<F>(f),
 1338|    964|                                           std::forward<Exp>(exp).error()));
 1339|    964|    }
 1340|    964|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    964|    {
 3648|    964|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  9.26k|    {
 1653|  9.26k|        return value();
 1654|  9.26k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  3.15k|{
 6697|  3.15k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  3.15k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  3.15k|    auto start = begin;
 6701|  3.15k|    ++begin;
 6702|       |
 6703|  3.15k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  3.15k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 366, False: 2.78k]
  ------------------
 6710|    366|        handler.on_charset_inverted();
 6711|    366|        ++begin;
 6712|    366|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    366|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 360]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    366|    }
 6723|  2.78k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.78k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|   656k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 656k, False: 0]
  ------------------
 6728|   656k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 656k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|   656k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.15k, False: 653k]
  ------------------
 6733|  3.15k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.15k|        }
 6735|       |
 6736|   653k|        parse_presentation_set_literal(begin, end, handler);
 6737|   653k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  3.15k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|   653k|{
 6661|   653k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   653k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   653k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|   653k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|   653k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   653k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 653k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|   653k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 653k, False: 0]
  |  Branch (6668:25): [True: 3.54k, False: 650k]
  |  Branch (6668:49): [True: 3.54k, False: 0]
  ------------------
 6669|   653k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 3.45k, False: 90]
  ------------------
 6670|  3.45k|        ++begin;
 6671|       |
 6672|  3.45k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  3.45k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  3.45k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  3.45k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  3.45k|        return;
 6686|  3.45k|    }
 6687|       |
 6688|   650k|    handler.on_charset_single(cp_first);
 6689|   650k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|   657k|{
 6637|   657k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   657k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   657k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|   657k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|   657k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 657k]
  |  |  |  Branch (859:45): [True: 0, False: 657k]
  |  |  |  Branch (859:45): [True: 0, False: 657k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|   657k|    const auto cp =
 6646|   657k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|   657k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   657k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 657k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|   657k|    begin += len;
 6653|   657k|    return cp;
 6654|   657k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.3k|    {
 1177|  19.3k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  19.3k|    {
 1430|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  19.3k|    {
  437|  19.3k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  15.9k|    {
 6252|  15.9k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  15.9k|                charset_string_size};
 6254|  15.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|    756|    {
 1430|    756|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|    756|    {
  437|    756|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  2.09k|    {
 1430|  2.09k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.09k|    {
  437|  2.09k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   177k|{
 4033|   177k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   177k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   177k|    }
 4036|   177k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   177k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   177k|    }
 4039|   177k|    else {
 4040|   177k|        SCN_EXPECT(input.size() == 1);
 4041|   177k|        return static_cast<char32_t>(input.front());
 4042|   177k|    }
 4043|   177k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  21.2k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  21.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  21.2k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|    824|    {
 6187|    824|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|    824|        CharT r{};
 6189|    824|        std::memcpy(&r, m_data, m_size);
 6190|    824|        return r;
 6191|    824|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   432M|{
 3807|   432M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   432M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   432M|    }
 3810|   432M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   432M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   432M|    }
 3813|   432M|    else {
 3814|       |        // utf-32
 3815|   432M|        static_assert(sizeof(U) == 4);
 3816|   432M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   432M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   432M|        return 1;
 3818|   432M|    }
 3819|   432M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   432M|{
 4013|   432M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   432M|        return decode_utf8_code_point_exhaustive(input);
 4015|   432M|    }
 4016|   432M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   432M|        return decode_utf16_code_point_exhaustive(input);
 4018|   432M|    }
 4019|   432M|    else {
 4020|   432M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   432M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   432M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   432M|        auto cp = static_cast<char32_t>(input.front());
 4022|   432M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   432M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106k, False: 432M]
  |  |  ------------------
  ------------------
 4023|   106k|            return invalid_code_point;
 4024|   106k|        }
 4025|   432M|        return cp;
 4026|   432M|    }
 4027|   432M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|   136k|{
 3699|   136k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|   136k|                                          decltype(first), decltype(last)> &&
 3701|   136k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   136k|        return {first, last};
 3703|   136k|    }
 3704|   136k|    else {
 3705|   136k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|   136k|                                       to_address(first), to_address(last)))};
 3707|   136k|    }
 3708|   136k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   682k|{
  326|   682k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   682k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   682k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   682k|{
  304|   682k|    return p;
  305|   682k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  5.39k|{
 3730|  5.39k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  5.39k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  5.39k|                      decltype(it)> &&
 3733|  5.39k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  5.39k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  5.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  5.39k|        return it;
 3736|  5.39k|    }
 3737|  5.39k|    else {
 3738|  5.39k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  5.39k|    }
 3740|  5.39k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|    666|{
  326|    666|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|    666|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|    666|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|   172k|    {
 3346|   172k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   172k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    142|    {
 1476|    142|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    142|    {
  447|    142|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   275k|    {
 1177|   275k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   275k|    {
 1430|   275k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   275k|    {
  437|   275k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  75.2k|    {
 1598|  75.2k|        return has_value();
 1599|  75.2k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   476k|    {
  485|   476k|        return m_has_value;
  486|   476k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   200k|    {
 1627|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   200k|        return this->get_value();
 1629|   200k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   200k|    {
  451|   200k|        return m_value;
  452|   200k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  2.13k|    {
 1430|  2.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.13k|    {
  437|  2.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.26k|    {
 1177|  2.26k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    128|    {
 1476|    128|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    128|    {
  447|    128|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.02k|    {
 1598|  1.02k|        return has_value();
 1599|  1.02k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.50k|    {
  485|  3.50k|        return m_has_value;
  486|  3.50k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.11k|    {
 1627|  1.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11k|        return this->get_value();
 1629|  1.11k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.11k|    {
  451|  1.11k|        return m_value;
  452|  1.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.56k|    {
 1177|  1.56k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.56k|    {
 1430|  1.56k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  1.56k|    {
  437|  1.56k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    242|    {
 1837|    242|        return detail::transform_error_impl(std::move(*this),
 1838|    242|                                            std::forward<F>(f));
 1839|    242|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    242|{
 1323|    242|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    242|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    242|        if (SCN_LIKELY(exp.has_value())) {
 1326|    242|            return result(*std::forward<Exp>(exp));
 1327|    242|        }
 1328|       |
 1329|    242|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    242|        return result(unexpect, monostate{});
 1331|    242|    }
 1332|    242|    else {
 1333|    242|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    242|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    242|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 242, False: 0]
  |  |  ------------------
  ------------------
 1335|    242|                   ? result(*std::forward<Exp>(exp))
 1336|    242|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    242|    }
 1340|    242|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.11k|    {
 1663|  1.11k|        return std::move(value());
 1664|  1.11k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    590|    {
 1430|    590|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    590|    {
  437|    590|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.25k|    {
 1177|  3.25k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    128|    {
 1614|    128|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    128|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    128|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    128|        return std::move(this->get_unexpected().error());
 1616|    128|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    128|    {
  468|    128|        return m_unexpected;
  469|    128|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    804|    {
 1486|    804|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.66k|    {
  447|  2.66k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    354|    {
 2724|    354|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    354|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    354|    {
 2705|    354|        return decay_copy(t.begin());
 2706|    354|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|    862|{
 1949|    862|    return SCN_FWD(t);
  ------------------
  |  |  930|    862|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|    862|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    354|    {
 3330|    354|        return m_iterator;
 3331|    354|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    354|    {
 2781|    354|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    354|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    354|    {
 2763|    354|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    354|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    354|    {
 3334|    354|        return m_sentinel;
 3335|    354|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    354|    {
 3316|    354|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.56k|    {
 1598|  1.56k|        return has_value();
 1599|  1.56k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.13k|    {
  485|  3.13k|        return m_has_value;
  486|  3.13k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.56k|    {
 1663|  1.56k|        return std::move(value());
 1664|  1.56k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.56k|    {
 1627|  1.56k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.56k|        return this->get_value();
 1629|  1.56k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.56k|    {
  451|  1.56k|        return m_value;
  452|  1.56k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.3k|    {
 1177|  12.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  12.3k|    {
 1430|  12.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  12.3k|    {
  437|  12.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   125k|    {
 1837|   125k|        return detail::transform_error_impl(std::move(*this),
 1838|   125k|                                            std::forward<F>(f));
 1839|   125k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   125k|{
 1323|   125k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   125k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   125k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   125k|            return result(*std::forward<Exp>(exp));
 1327|   125k|        }
 1328|       |
 1329|   125k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   125k|        return result(unexpect, monostate{});
 1331|   125k|    }
 1332|   125k|    else {
 1333|   125k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   125k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 125k, False: 0]
  |  |  ------------------
  ------------------
 1335|   125k|                   ? result(*std::forward<Exp>(exp))
 1336|   125k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   125k|    }
 1340|   125k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   200k|    {
 1663|   200k|        return std::move(value());
 1664|   200k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    142|    {
 1614|    142|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    142|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    142|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    142|        return std::move(this->get_unexpected().error());
 1616|    142|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    142|    {
  468|    142|        return m_unexpected;
  469|    142|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  12.5k|    {
 1486|  12.5k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  12.3k|    {
 1598|  12.3k|        return has_value();
 1599|  12.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  24.6k|    {
  485|  24.6k|        return m_has_value;
  486|  24.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  12.3k|    {
 1663|  12.3k|        return std::move(value());
 1664|  12.3k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  12.3k|    {
 1627|  12.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.3k|        return this->get_value();
 1629|  12.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  12.3k|    {
  451|  12.3k|        return m_value;
  452|  12.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  1.86k|    {
 1476|  1.86k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    288|    {
 1476|    288|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    416|    {
  447|    416|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.85k|    {
 1177|  3.85k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.57k|    {
 1476|  2.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.57k|    {
  447|  2.57k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  3.53k|    {
 1598|  3.53k|        return has_value();
 1599|  3.53k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  6.95k|    {
  485|  6.95k|        return m_has_value;
  486|  6.95k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.26k|    {
 1604|  1.26k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.26k|        return this->get_unexpected().error();
 1606|  1.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.74k|    {
  468|  1.74k|        return m_unexpected;
  469|  1.74k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    656|    {
 1430|    656|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    656|    {
  437|    656|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    656|    {
 1177|    656|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|    868|    {
 1627|    868|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    868|        return this->get_value();
 1629|    868|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    868|    {
  451|    868|        return m_value;
  452|    868|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    496|    {
 1598|    496|        return has_value();
 1599|    496|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.31k|    {
  485|  1.31k|        return m_has_value;
  486|  1.31k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    496|    {
 1177|    496|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    656|    {
 1663|    656|        return std::move(value());
 1664|    656|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    656|    {
 1627|    656|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    656|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    656|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    656|        return this->get_value();
 1629|    656|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    656|    {
  451|    656|        return m_value;
  452|    656|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  55.7k|    {
 3334|  55.7k|        return m_sentinel;
 3335|  55.7k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    996|    {
 1837|    996|        return detail::transform_error_impl(std::move(*this),
 1838|    996|                                            std::forward<F>(f));
 1839|    996|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    996|{
 1323|    996|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    996|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    996|        if (SCN_LIKELY(exp.has_value())) {
 1326|    996|            return result(*std::forward<Exp>(exp));
 1327|    996|        }
 1328|       |
 1329|    996|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    996|        return result(unexpect, monostate{});
 1331|    996|    }
 1332|    996|    else {
 1333|    996|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    996|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    996|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 868, False: 128]
  |  |  ------------------
  ------------------
 1335|    996|                   ? result(*std::forward<Exp>(exp))
 1336|    996|                   : result(unexpect,
 1337|    128|                            trivial_invoke(std::forward<F>(f),
 1338|    128|                                           std::forward<Exp>(exp).error()));
 1339|    996|    }
 1340|    996|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|    868|    {
 1430|    868|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    868|    {
  437|    868|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    128|    {
 1486|    128|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|    868|    {
 1663|    868|        return std::move(value());
 1664|    868|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  57.1k|    {
 3330|  57.1k|        return m_iterator;
 3331|  57.1k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    496|    {
 1430|    496|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    496|    {
  437|    496|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    496|    {
 1837|    496|        return detail::transform_error_impl(std::move(*this),
 1838|    496|                                            std::forward<F>(f));
 1839|    496|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    496|{
 1323|    496|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    496|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    496|        if (SCN_LIKELY(exp.has_value())) {
 1326|    496|            return result(*std::forward<Exp>(exp));
 1327|    496|        }
 1328|       |
 1329|    496|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    496|        return result(unexpect, monostate{});
 1331|    496|    }
 1332|    496|    else {
 1333|    496|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    496|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    496|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 496, False: 0]
  |  |  ------------------
  ------------------
 1335|    496|                   ? result(*std::forward<Exp>(exp))
 1336|    496|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    496|    }
 1340|    496|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|    992|    {
  485|    992|        return m_has_value;
  486|    992|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    496|    {
 1663|    496|        return std::move(value());
 1664|    496|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    496|    {
 1627|    496|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    496|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    496|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    496|        return this->get_value();
 1629|    496|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    496|    {
  451|    496|        return m_value;
  452|    496|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    496|    {
 1430|    496|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    496|    {
  437|    496|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    496|    {
 1177|    496|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    496|    {
 1598|    496|        return has_value();
 1599|    496|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    992|    {
  485|    992|        return m_has_value;
  486|    992|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    496|    {
 1663|    496|        return std::move(value());
 1664|    496|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    496|    {
 1627|    496|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    496|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    496|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    496|        return this->get_value();
 1629|    496|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    496|    {
  451|    496|        return m_value;
  452|    496|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    484|    {
 1837|    484|        return detail::transform_error_impl(std::move(*this),
 1838|    484|                                            std::forward<F>(f));
 1839|    484|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    484|{
 1323|    484|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    484|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    484|        if (SCN_LIKELY(exp.has_value())) {
 1326|    484|            return result(*std::forward<Exp>(exp));
 1327|    484|        }
 1328|       |
 1329|    484|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    484|        return result(unexpect, monostate{});
 1331|    484|    }
 1332|    484|    else {
 1333|    484|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    484|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    484|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 484]
  |  |  ------------------
  ------------------
 1335|    484|                   ? result(*std::forward<Exp>(exp))
 1336|    484|                   : result(unexpect,
 1337|    484|                            trivial_invoke(std::forward<F>(f),
 1338|    484|                                           std::forward<Exp>(exp).error()));
 1339|    484|    }
 1340|    484|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    484|    {
 1614|    484|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    484|        return std::move(this->get_unexpected().error());
 1616|    484|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|    804|    {
 3648|    804|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  19.4k|    {
 3316|  19.4k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     12|    {
 1476|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     12|    {
  626|     12|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     12|    {
  689|     12|        scn::detail::construct_at(unexpected_ptr(),
  690|     12|                                  std::forward<Args>(args)...);
  691|     12|        m_has_value = false;
  692|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     36|    {
  718|     36|        return reinterpret_cast<unexpected<E>*>(
  719|     36|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     36|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     36|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     12|    {
 1177|     12|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     12|    {
 1598|     12|        return has_value();
 1599|     12|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     36|    {
  675|     36|        return m_has_value;
  676|     36|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     12|    {
 1604|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     12|        return this->get_unexpected().error();
 1606|     12|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     12|    {
  658|     12|        return *unexpected_ptr();
  659|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     12|    {
  631|     12|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 12]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     12|        else {
  635|     12|            destroy_unexpected();
  636|     12|        }
  637|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     12|    {
  700|     12|        scn::detail::destroy_at(unexpected_ptr());
  701|     12|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  3.41k|    {
 1598|  3.41k|        return has_value();
 1599|  3.41k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.50k|    {
  485|  6.50k|        return m_has_value;
  486|  6.50k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  2.50k|    {
 1604|  2.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.50k|        return this->get_unexpected().error();
 1606|  2.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.50k|    {
  468|  2.50k|        return m_unexpected;
  469|  2.50k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    590|    {
 1663|    590|        return std::move(value());
 1664|    590|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    590|    {
 1627|    590|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    590|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    590|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    590|        return this->get_value();
 1629|    590|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    590|    {
  451|    590|        return m_value;
  452|    590|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  12.6k|    {
 1476|  12.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  12.8k|    {
  447|  12.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   238k|    {
 1177|   238k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   150k|    {
 1476|   150k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|   150k|    {
  447|   150k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|   250k|    {
 1598|   250k|        return has_value();
 1599|   250k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   413k|    {
  485|   413k|        return m_has_value;
  486|   413k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  75.3k|    {
 1604|  75.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  75.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  75.3k|        return this->get_unexpected().error();
 1606|  75.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  75.3k|    {
  468|  75.3k|        return m_unexpected;
  469|  75.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  50.1k|    {
 1430|  50.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  50.1k|    {
  437|  50.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  50.1k|    {
 1177|  50.1k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  75.1k|    {
 1627|  75.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  75.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  75.1k|        return this->get_value();
 1629|  75.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  75.1k|    {
  451|  75.1k|        return m_value;
  452|  75.1k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  37.6k|    {
 1598|  37.6k|        return has_value();
 1599|  37.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   100k|    {
  485|   100k|        return m_has_value;
  486|   100k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.6k|    {
 1177|  37.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  50.1k|    {
 1663|  50.1k|        return std::move(value());
 1664|  50.1k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  50.1k|    {
 1627|  50.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  50.1k|        return this->get_value();
 1629|  50.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  50.1k|    {
  451|  50.1k|        return m_value;
  452|  50.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  75.2k|    {
 1837|  75.2k|        return detail::transform_error_impl(std::move(*this),
 1838|  75.2k|                                            std::forward<F>(f));
 1839|  75.2k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  75.2k|{
 1323|  75.2k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  75.2k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  75.2k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  75.2k|            return result(*std::forward<Exp>(exp));
 1327|  75.2k|        }
 1328|       |
 1329|  75.2k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  75.2k|        return result(unexpect, monostate{});
 1331|  75.2k|    }
 1332|  75.2k|    else {
 1333|  75.2k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  75.2k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  75.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 75.1k, False: 142]
  |  |  ------------------
  ------------------
 1335|  75.2k|                   ? result(*std::forward<Exp>(exp))
 1336|  75.2k|                   : result(unexpect,
 1337|    142|                            trivial_invoke(std::forward<F>(f),
 1338|    142|                                           std::forward<Exp>(exp).error()));
 1339|  75.2k|    }
 1340|  75.2k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  75.1k|    {
 1430|  75.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  75.1k|    {
  437|  75.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    142|    {
 1486|    142|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  75.1k|    {
 1663|  75.1k|        return std::move(value());
 1664|  75.1k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  37.6k|    {
 1430|  37.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  37.6k|    {
  437|  37.6k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  37.6k|    {
 1837|  37.6k|        return detail::transform_error_impl(std::move(*this),
 1838|  37.6k|                                            std::forward<F>(f));
 1839|  37.6k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  37.6k|{
 1323|  37.6k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  37.6k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  37.6k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  37.6k|            return result(*std::forward<Exp>(exp));
 1327|  37.6k|        }
 1328|       |
 1329|  37.6k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  37.6k|        return result(unexpect, monostate{});
 1331|  37.6k|    }
 1332|  37.6k|    else {
 1333|  37.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  37.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  37.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 37.6k, False: 0]
  |  |  ------------------
  ------------------
 1335|  37.6k|                   ? result(*std::forward<Exp>(exp))
 1336|  37.6k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  37.6k|    }
 1340|  37.6k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  75.2k|    {
  485|  75.2k|        return m_has_value;
  486|  75.2k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  37.6k|    {
 1663|  37.6k|        return std::move(value());
 1664|  37.6k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  37.6k|    {
 1627|  37.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  37.6k|        return this->get_value();
 1629|  37.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  37.6k|    {
  451|  37.6k|        return m_value;
  452|  37.6k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  37.6k|    {
 1430|  37.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  37.6k|    {
  437|  37.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.6k|    {
 1177|  37.6k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  37.6k|    {
 1598|  37.6k|        return has_value();
 1599|  37.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  75.2k|    {
  485|  75.2k|        return m_has_value;
  486|  75.2k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  37.6k|    {
 1663|  37.6k|        return std::move(value());
 1664|  37.6k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  37.6k|    {
 1627|  37.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  37.6k|        return this->get_value();
 1629|  37.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  37.6k|    {
  451|  37.6k|        return m_value;
  452|  37.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     36|    {
 1476|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     36|    {
  626|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     36|    {
  689|     36|        scn::detail::construct_at(unexpected_ptr(),
  690|     36|                                  std::forward<Args>(args)...);
  691|     36|        m_has_value = false;
  692|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    108|    {
  718|    108|        return reinterpret_cast<unexpected<E>*>(
  719|    108|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    108|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     36|    {
 1177|     36|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     36|    {
 1598|     36|        return has_value();
 1599|     36|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    108|    {
  675|    108|        return m_has_value;
  676|    108|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     36|    {
 1604|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     36|        return this->get_unexpected().error();
 1606|     36|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     36|    {
  658|     36|        return *unexpected_ptr();
  659|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     36|    {
  631|     36|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 36]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     36|        else {
  635|     36|            destroy_unexpected();
  636|     36|        }
  637|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     36|    {
  700|     36|        scn::detail::destroy_at(unexpected_ptr());
  701|     36|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  92.8k|    {
 2855|  92.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  92.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  92.8k|    {
 2836|  92.8k|        return t.data();
 2837|  92.8k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   102k|    {
 3221|   102k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 3.07k, False: 99.2k]
  ------------------
 3222|   102k|                   ? nullptr
 3223|   102k|                   : std::addressof(*ranges::begin(derived()));
 3224|   102k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   102k|    {
 3005|   102k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   102k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   102k|    {
 2978|   102k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   102k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   102k|    {
 3339|   102k|        return m_iterator == m_sentinel;
 3340|   102k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   201k|    {
 3180|   201k|        return static_cast<D&>(*this);
 3181|   201k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  99.2k|    {
 2724|  99.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  99.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  99.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  99.2k|    {
 2705|  99.2k|        return decay_copy(t.begin());
 2706|  99.2k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    160|    {
 1837|    160|        return detail::transform_error_impl(std::move(*this),
 1838|    160|                                            std::forward<F>(f));
 1839|    160|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    160|{
 1323|    160|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    160|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    160|        if (SCN_LIKELY(exp.has_value())) {
 1326|    160|            return result(*std::forward<Exp>(exp));
 1327|    160|        }
 1328|       |
 1329|    160|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    160|        return result(unexpect, monostate{});
 1331|    160|    }
 1332|    160|    else {
 1333|    160|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    160|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    160|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 160, False: 0]
  |  |  ------------------
  ------------------
 1335|    160|                   ? result(*std::forward<Exp>(exp))
 1336|    160|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    160|    }
 1340|    160|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    160|    {
 1430|    160|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    160|    {
  437|    160|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    160|    {
 1177|    160|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    160|    {
 1598|    160|        return has_value();
 1599|    160|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    320|    {
  485|    320|        return m_has_value;
  486|    320|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    160|    {
 1663|    160|        return std::move(value());
 1664|    160|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    160|    {
 1627|    160|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    160|        return this->get_value();
 1629|    160|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    160|    {
  451|    160|        return m_value;
  452|    160|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    320|    {
 1823|    320|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    320|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    320|{
 1323|    320|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    320|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    320|        if (SCN_LIKELY(exp.has_value())) {
 1326|    320|            return result(*std::forward<Exp>(exp));
 1327|    320|        }
 1328|       |
 1329|    320|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    320|        return result(unexpect, monostate{});
 1331|    320|    }
 1332|    320|    else {
 1333|    320|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    320|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    320|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 320]
  |  |  ------------------
  ------------------
 1335|    320|                   ? result(*std::forward<Exp>(exp))
 1336|    320|                   : result(unexpect,
 1337|    320|                            trivial_invoke(std::forward<F>(f),
 1338|    320|                                           std::forward<Exp>(exp).error()));
 1339|    320|    }
 1340|    320|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    154|    {
 2724|    154|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    154|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    154|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    154|    {
 2705|    154|        return decay_copy(t.begin());
 2706|    154|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    138|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  12.5k|    {
 1837|  12.5k|        return detail::transform_error_impl(std::move(*this),
 1838|  12.5k|                                            std::forward<F>(f));
 1839|  12.5k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  12.5k|{
 1323|  12.5k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  12.5k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  12.5k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  12.5k|            return result(*std::forward<Exp>(exp));
 1327|  12.5k|        }
 1328|       |
 1329|  12.5k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  12.5k|        return result(unexpect, monostate{});
 1331|  12.5k|    }
 1332|  12.5k|    else {
 1333|  12.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  12.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  12.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.5k, False: 0]
  |  |  ------------------
  ------------------
 1335|  12.5k|                   ? result(*std::forward<Exp>(exp))
 1336|  12.5k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  12.5k|    }
 1340|  12.5k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  12.5k|    {
 1430|  12.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  12.5k|    {
  437|  12.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.5k|    {
 1177|  12.5k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  12.5k|    {
 1598|  12.5k|        return has_value();
 1599|  12.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  25.0k|    {
  485|  25.0k|        return m_has_value;
  486|  25.0k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  12.5k|    {
 1663|  12.5k|        return std::move(value());
 1664|  12.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  12.5k|    {
 1627|  12.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.5k|        return this->get_value();
 1629|  12.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  12.5k|    {
  451|  12.5k|        return m_value;
  452|  12.5k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  12.5k|    {
 1823|  12.5k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  12.5k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  12.5k|{
 1323|  12.5k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  12.5k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  12.5k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  12.5k|            return result(*std::forward<Exp>(exp));
 1327|  12.5k|        }
 1328|       |
 1329|  12.5k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  12.5k|        return result(unexpect, monostate{});
 1331|  12.5k|    }
 1332|  12.5k|    else {
 1333|  12.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  12.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  12.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 1335|  12.5k|                   ? result(*std::forward<Exp>(exp))
 1336|  12.5k|                   : result(unexpect,
 1337|  12.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  12.5k|                                           std::forward<Exp>(exp).error()));
 1339|  12.5k|    }
 1340|  12.5k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  12.5k|    {
 3648|  12.5k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  49.9k|    {
 1653|  49.9k|        return value();
 1654|  49.9k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    222|{
 6697|    222|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    222|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    222|    auto start = begin;
 6701|    222|    ++begin;
 6702|       |
 6703|    222|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    222|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 222]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|    222|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 222]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  4.29k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 4.29k, False: 0]
  ------------------
 6728|  4.29k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  4.29k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 222, False: 4.07k]
  ------------------
 6733|    222|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    222|        }
 6735|       |
 6736|  4.07k|        parse_presentation_set_literal(begin, end, handler);
 6737|  4.07k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    222|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  4.07k|{
 6661|  4.07k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  4.07k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  4.07k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.07k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  4.07k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 4.07k, False: 0]
  |  Branch (6668:25): [True: 24, False: 4.05k]
  |  Branch (6668:49): [True: 24, False: 0]
  ------------------
 6669|  4.07k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 12, False: 12]
  ------------------
 6670|     12|        ++begin;
 6671|       |
 6672|     12|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|     12|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|     12|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|     12|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|     12|        return;
 6686|     12|    }
 6687|       |
 6688|  4.06k|    handler.on_charset_single(cp_first);
 6689|  4.06k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  4.08k|{
 6637|  4.08k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  4.08k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  4.08k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  8.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.08k]
  |  |  |  Branch (859:45): [True: 0, False: 4.08k]
  |  |  |  Branch (859:45): [True: 0, False: 4.08k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  4.08k|    const auto cp =
 6646|  4.08k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  4.08k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.08k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  4.08k|    begin += len;
 6653|  4.08k|    return cp;
 6654|  4.08k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  7.63k|    {
 6252|  7.63k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  7.63k|                charset_string_size};
 6254|  7.63k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    264|    {
 1430|    264|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    264|    {
  437|    264|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  13.4k|{
 3654|  13.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  13.4k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  6.28k|    {
 2855|  6.28k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  6.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  6.28k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  6.28k|    {
 2836|  6.28k|        return t.data();
 2837|  6.28k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   105k|    {
 5466|   105k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   105k|        return static_cast<std::size_t>(m_desc &
 5471|   105k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   105k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   172k|    {
 5491|   172k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   172k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  67.6k|    {
 5434|  67.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.6k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  67.6k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 67.5k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  67.5k|        const auto t = type(id);
 5446|  67.5k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40k, False: 66.1k]
  |  |  ------------------
  ------------------
 5447|  1.40k|            return {};
 5448|  1.40k|        }
 5449|       |
 5450|  66.1k|        basic_scan_arg<Context> arg;
 5451|  66.1k|        arg.m_type = t;
 5452|  66.1k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 66.1k, False: 0]
  ------------------
 5453|  66.1k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  66.1k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  66.1k|        return arg;
 5459|  67.5k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  67.6k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   209k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  67.5k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  67.5k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  67.5k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  67.5k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  67.5k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  66.1k|    {
 5495|  66.1k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  66.1k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   131k|    {
 5247|   131k|        return m_type != detail::arg_type::none_type;
 5248|   131k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.08k|{
 8417|  6.08k|#define SCN_VISIT(Type)                                         \
 8418|  6.08k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.08k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.08k|    }                                                           \
 8421|  6.08k|    else {                                                      \
 8422|  6.08k|        return vis(monostate_val);                              \
 8423|  6.08k|    }
 8424|       |
 8425|  6.08k|    monostate monostate_val{};
 8426|       |
 8427|  6.08k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.08k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.08k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    676|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 676, False: 5.40k]
  ------------------
 8433|    676|            SCN_VISIT(int);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.08k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.08k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.08k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.08k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    676|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 676, False: 5.40k]
  ------------------
 8443|    676|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.08k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.08k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    676|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 676, False: 5.40k]
  ------------------
 8449|    676|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8450|    676|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 676, False: 5.40k]
  ------------------
 8451|    676|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8452|    676|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 676, False: 5.40k]
  ------------------
 8453|    676|            SCN_VISIT(char);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.08k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.08k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.08k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    676|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 676, False: 5.40k]
  ------------------
 8461|    676|            SCN_VISIT(double);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.08k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    676|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 676, False: 5.40k]
  ------------------
 8465|    676|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8466|    676|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 676, False: 5.40k]
  ------------------
 8467|    676|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.08k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    676|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 676, False: 5.40k]
  ------------------
 8471|    676|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    676|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    676|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    676|    }                                                           \
  |  | 8421|    676|    else {                                                      \
  |  | 8422|    676|        return vis(monostate_val);                              \
  |  | 8423|    676|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.08k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.08k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.08k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.08k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.08k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.08k|            SCN_CLANG_POP
 8495|  6.08k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.01k|    {
 1837|  2.01k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.01k|                                            std::forward<F>(f));
 1839|  2.01k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.01k|{
 1323|  2.01k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.01k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.01k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.01k|            return result(*std::forward<Exp>(exp));
 1327|  2.01k|        }
 1328|       |
 1329|  2.01k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.01k|        return result(unexpect, monostate{});
 1331|  2.01k|    }
 1332|  2.01k|    else {
 1333|  2.01k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.01k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.91k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.01k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.01k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.01k|    }
 1340|  2.01k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.91k|    {
 1663|  1.91k|        return std::move(value());
 1664|  1.91k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   105k|    {
 5545|   105k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   105k|    {
 8056|   105k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   105k|{
 7044|   105k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   105k|    handler.check_args_exhausted();
 7046|   105k|    return handler.get_error();
 7047|   105k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   105k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   105k|    auto begin = format.data();
 7013|   105k|    auto it = begin;
 7014|   105k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   267k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 260k, False: 6.87k]
  ------------------
 7017|   260k|        const auto ch = *it++;
 7018|   260k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 109k, False: 150k]
  ------------------
 7019|   109k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   109k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   109k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 97.2k, False: 12.2k]
  ------------------
 7023|  97.2k|                return;
 7024|  97.2k|            }
 7025|   109k|        }
 7026|   150k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 2.40k, False: 148k]
  ------------------
 7027|  2.40k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.20k, False: 1.20k]
  |  |  |  Branch (859:45): [True: 358, False: 2.04k]
  |  |  |  Branch (859:45): [True: 848, False: 1.20k]
  |  |  ------------------
  ------------------
 7028|  1.20k|                handler.on_error("Unmatched '}' in format string");
 7029|  1.20k|                return;
 7030|  1.20k|            }
 7031|       |
 7032|  1.20k|            handler.on_literal_text(begin, it);
 7033|  1.20k|            begin = ++it;
 7034|  1.20k|        }
 7035|   260k|    }
 7036|       |
 7037|  6.87k|    handler.on_literal_text(begin, end);
 7038|  6.87k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   109k|{
 6942|   109k|    struct id_adapter {
 6943|   109k|        constexpr void operator()()
 6944|   109k|        {
 6945|   109k|            arg_id = handler.on_arg_id();
 6946|   109k|        }
 6947|   109k|        constexpr void operator()(std::size_t id)
 6948|   109k|        {
 6949|   109k|            arg_id = handler.on_arg_id(id);
 6950|   109k|        }
 6951|       |
 6952|   109k|        constexpr void on_error(const char* msg)
 6953|   109k|        {
 6954|   109k|            SCN_UNLIKELY_ATTR
 6955|   109k|            handler.on_error(msg);
 6956|   109k|        }
 6957|       |
 6958|   109k|        Handler& handler;
 6959|   109k|        std::size_t arg_id;
 6960|   109k|    };
 6961|       |
 6962|   109k|    ++begin;
 6963|   109k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 109k]
  |  |  ------------------
  ------------------
 6964|     98|        handler.on_error("Unexpected end of replacement field");
 6965|     98|        return begin;
 6966|     98|    }
 6967|       |
 6968|   109k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.07k, False: 103k]
  ------------------
 6969|  6.07k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.07k|    }
 6971|   103k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 5.22k, False: 98.0k]
  ------------------
 6972|  5.22k|        handler.on_literal_text(begin, begin + 1);
 6973|  5.22k|    }
 6974|  98.0k|    else {
 6975|  98.0k|        auto adapter = id_adapter{handler, 0};
 6976|  98.0k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  98.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 97.9k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|  97.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 97.8k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|  97.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 61.4k, False: 36.3k]
  ------------------
 6987|  61.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 61.3k]
  |  |  ------------------
  ------------------
 6988|     74|                handler.on_error("Unexpected end of replacement field");
 6989|     74|                return begin;
 6990|     74|            }
 6991|  61.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  61.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.42k, False: 57.9k]
  |  |  |  Branch (859:45): [True: 0, False: 61.3k]
  |  |  |  Branch (859:45): [True: 3.42k, False: 57.9k]
  |  |  ------------------
  ------------------
 6993|  3.42k|                handler.on_error("Unknown format specifier");
 6994|  3.42k|                return begin;
 6995|  3.42k|            }
 6996|  61.3k|        }
 6997|  36.3k|        else {
 6998|  36.3k|            SCN_UNLIKELY_ATTR
 6999|  36.3k|            handler.on_error("Missing '}' in format string");
 7000|  36.3k|            return begin;
 7001|  36.3k|        }
 7002|  97.9k|    }
 7003|  69.3k|    return begin + 1;
 7004|   109k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  67.5k|    {
 8039|  67.5k|        return m_args.get(id);
 8040|  67.5k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.21k|    {
 8044|  6.21k|        return m_args;
 8045|  6.21k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  63.8k|    {
 8049|  63.8k|        return m_locale;
 8050|  63.8k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  64.3k|    {
 5566|  64.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 64.3k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|  64.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  64.3k|        do_check_arg_id(id);
 5574|  64.3k|        return id;
 5575|  64.3k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  67.5k|{
 6054|  67.5k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  67.5k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  67.5k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  98.0k|{
 6443|  98.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  98.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 98.0k, False: 0]
  |  Branch (6444:26): [True: 39.7k, False: 58.2k]
  ------------------
 6445|  39.7k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  39.7k|    }
 6447|       |
 6448|  58.2k|    handler();
 6449|  58.2k|    return begin;
 6450|  98.0k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  39.7k|{
 6413|  39.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  39.7k|    CharT c = *begin;
 6416|  39.7k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 36.1k, False: 3.64k]
  |  Branch (6416:27): [True: 134, False: 3.50k]
  ------------------
 6417|  36.2k|        handler.on_error("Invalid argument ID");
 6418|  36.2k|        return begin;
 6419|  36.2k|    }
 6420|       |
 6421|  3.50k|    int idx = 0;
 6422|  3.50k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 330, False: 3.17k]
  ------------------
 6423|    330|        idx = parse_simple_int(begin, end);
 6424|    330|    }
 6425|  3.17k|    else {
 6426|  3.17k|        ++begin;
 6427|  3.17k|    }
 6428|       |
 6429|  3.50k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 3.39k]
  |  Branch (6429:26): [True: 3.25k, False: 140]
  |  Branch (6429:50): [True: 78, False: 3.18k]
  ------------------
 6430|    188|        handler.on_error("Invalid argument ID");
 6431|    188|        return begin;
 6432|    188|    }
 6433|  3.32k|    handler(idx);
 6434|       |
 6435|  3.32k|    return begin;
 6436|  3.50k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  36.4k|        {
 6954|  36.4k|            SCN_UNLIKELY_ATTR
 6955|  36.4k|            handler.on_error(msg);
 6956|  36.4k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  14.0k|{
 6392|  14.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  14.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  14.0k|    unsigned long long value = 0;
 6396|  43.4k|    do {
 6397|  43.4k|        value *= 10;
 6398|  43.4k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  43.4k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 43.3k]
  ------------------
 6400|  43.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  43.3k|        ++begin;
 6404|  43.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 43.0k, False: 312]
  |  Branch (6404:30): [True: 38.4k, False: 4.62k]
  |  Branch (6404:47): [True: 29.3k, False: 9.04k]
  ------------------
 6405|  13.9k|    return static_cast<int>(value);
 6406|  14.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  3.32k|        {
 6949|  3.32k|            arg_id = handler.on_arg_id(id);
 6950|  3.32k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  3.32k|    {
 5579|  3.32k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  3.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 3.24k]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|  3.24k|        m_next_arg_id = -1;
 5585|  3.24k|        do_check_arg_id(id);
 5586|  3.24k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  58.2k|        {
 6945|  58.2k|            arg_id = handler.on_arg_id();
 6946|  58.2k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   122k|    {
 5252|   122k|        return m_type;
 5253|   122k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  57.6k|    {
 5561|  57.6k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  57.6k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   119k|    {
 5550|   119k|        return m_format.data();
 5551|   119k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  61.3k|    {
 7122|  61.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  61.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  61.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  61.3k|{
 6858|  61.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  61.3k|        if (*begin == CharT{'['}) {
 6860|  61.3k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  61.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  61.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  61.3k|                return begin;
 6866|  61.3k|            }
 6867|  61.3k|            handler.on_character_set_string(set);
 6868|  61.3k|            return begin;
 6869|  61.3k|        }
 6870|  61.3k|        if (*begin == CharT{'/'}) {
 6871|  61.3k|            return parse_presentation_regex(begin, end, handler);
 6872|  61.3k|        }
 6873|  61.3k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  61.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  61.3k|            handler.on_error("Invalid type specifier in format string");
 6876|  61.3k|            return begin;
 6877|  61.3k|        }
 6878|  61.3k|        handler.on_type(type);
 6879|  61.3k|        return begin;
 6880|  61.3k|    };
 6881|       |
 6882|  61.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 60.2k, False: 1.10k]
  |  Branch (6882:28): [True: 2.27k, False: 58.0k]
  ------------------
 6883|  61.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 896, False: 1.37k]
  |  Branch (6883:36): [True: 844, False: 52]
  ------------------
 6884|    844|        return do_presentation();
 6885|    844|    }
 6886|       |
 6887|  60.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  60.5k|    begin = parse_align(begin, end, handler);
 6893|  60.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 60.4k]
  |  |  ------------------
  ------------------
 6894|    120|        handler.on_error("Unexpected end of format string");
 6895|    120|        return begin;
 6896|    120|    }
 6897|       |
 6898|  60.4k|    begin = parse_width(begin, end, handler);
 6899|  60.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 60.2k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|  60.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 9.63k, False: 50.6k]
  ------------------
 6905|  9.63k|        ++begin;
 6906|  9.63k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 9.59k]
  |  |  ------------------
  ------------------
 6907|     38|            handler.on_error("Unexpected end of format string");
 6908|     38|            return begin;
 6909|     38|        }
 6910|  9.59k|        begin = parse_precision(begin, end, handler);
 6911|  9.59k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 9.48k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  9.59k|    }
 6916|       |
 6917|  60.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 536, False: 59.6k]
  ------------------
 6918|    536|        handler.on_localized();
 6919|    536|        ++begin;
 6920|    536|    }
 6921|  60.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 60.0k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  60.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 60.0k, False: 0]
  |  Branch (6926:25): [True: 55.4k, False: 4.67k]
  ------------------
 6927|  55.4k|        do_presentation();
 6928|  55.4k|    }
 6929|  60.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 57.9k]
  |  |  ------------------
  ------------------
 6930|  2.11k|        handler.on_error("Unexpected end of format string");
 6931|  2.11k|        return begin;
 6932|  2.11k|    }
 6933|       |
 6934|  57.9k|    return begin;
 6935|  60.0k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.27k|{
 6507|  2.27k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 842, False: 1.43k]
  |  Branch (6507:33): [True: 790, False: 52]
  ------------------
 6508|  2.27k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 250, False: 1.23k]
  |  Branch (6508:33): [True: 106, False: 144]
  ------------------
 6509|  2.27k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  56.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  56.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 12.3k, False: 43.8k]
  ------------------
 6860|  12.3k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  12.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 11.5k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    818|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    818|                return begin;
 6866|    818|            }
 6867|  11.5k|            handler.on_character_set_string(set);
 6868|  11.5k|            return begin;
 6869|  12.3k|        }
 6870|  43.8k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 39.1k, False: 4.77k]
  ------------------
 6871|  39.1k|            return parse_presentation_regex(begin, end, handler);
 6872|  39.1k|        }
 6873|  4.77k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.77k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 746, False: 4.02k]
  |  |  ------------------
  ------------------
 6875|    746|            handler.on_error("Invalid type specifier in format string");
 6876|    746|            return begin;
 6877|    746|        }
 6878|  4.02k|        handler.on_type(type);
 6879|  4.02k|        return begin;
 6880|  4.77k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  12.3k|{
 6697|  12.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  12.3k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  12.3k|    auto start = begin;
 6701|  12.3k|    ++begin;
 6702|       |
 6703|  12.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 12.3k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  12.3k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 2.19k, False: 10.1k]
  ------------------
 6710|  2.19k|        handler.on_charset_inverted();
 6711|  2.19k|        ++begin;
 6712|  2.19k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.15k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  2.15k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 2.10k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  2.15k|    }
 6723|  10.1k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 10.0k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  1.97M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.97M, False: 484]
  ------------------
 6728|  1.97M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 1.97M]
  |  |  ------------------
  ------------------
 6729|    224|            break;
 6730|    224|        }
 6731|       |
 6732|  1.97M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 11.5k, False: 1.96M]
  ------------------
 6733|  11.5k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  11.5k|        }
 6735|       |
 6736|  1.96M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.96M|    }
 6738|       |
 6739|    708|    SCN_UNLIKELY_ATTR
 6740|    708|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    708|    return {};
 6742|  12.2k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  1.96M|{
 6661|  1.96M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.96M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.96M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 1.96M]
  |  |  ------------------
  ------------------
 6665|    112|        return;
 6666|    112|    }
 6667|       |
 6668|  1.96M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.96M, False: 188]
  |  Branch (6668:25): [True: 11.8k, False: 1.95M]
  |  Branch (6668:49): [True: 11.8k, False: 34]
  ------------------
 6669|  1.96M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 11.5k, False: 304]
  ------------------
 6670|  11.5k|        ++begin;
 6671|       |
 6672|  11.5k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  11.5k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 11.4k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  11.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 11.4k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  11.4k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  11.4k|        return;
 6686|  11.4k|    }
 6687|       |
 6688|  1.95M|    handler.on_charset_single(cp_first);
 6689|  1.95M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  1.97M|{
 6637|  1.97M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.97M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.97M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  3.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 1.97M]
  |  |  |  Branch (859:45): [True: 70, False: 1.97M]
  |  |  |  Branch (859:45): [True: 26, False: 1.97M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  1.97M|    const auto cp =
 6646|  1.97M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.97M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 1.97M]
  |  |  ------------------
  ------------------
 6648|     86|        handler.on_error("Invalid encoding in format string");
 6649|     86|        return invalid_code_point;
 6650|     86|    }
 6651|       |
 6652|  1.97M|    begin += len;
 6653|  1.97M|    return cp;
 6654|  1.97M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  11.5k|    {
 6346|  11.5k|        m_specs.charset_string_data = fmt.data();
 6347|  11.5k|        m_specs.charset_string_size = fmt.size();
 6348|  11.5k|        on_type(presentation_type::string_set);
 6349|  11.5k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  39.1k|{
 6749|  39.1k|#if !SCN_DISABLE_REGEX
 6750|  39.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  39.1k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  39.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  39.1k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  78.2k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  39.1k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  39.1k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  39.1k|        return begin;
 6757|  39.1k|    }
 6758|       |
 6759|  39.1k|    auto start = begin;
 6760|  39.1k|    ++begin;
 6761|       |
 6762|  39.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 39.0k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  39.0k|    handler.on_type(presentation_type::regex);
 6768|  9.72M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 9.72M, False: 326]
  ------------------
 6769|  9.72M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 71.0k, False: 9.64M]
  ------------------
 6770|  71.0k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 38.7k, False: 32.2k]
  ------------------
 6771|  38.7k|                break;
 6772|  38.7k|            }
 6773|  32.2k|            else {
 6774|  32.2k|                handler.on_type(presentation_type::regex_escaped);
 6775|  32.2k|            }
 6776|  71.0k|        }
 6777|  9.72M|    }
 6778|  39.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 326, False: 38.7k]
  |  |  ------------------
  ------------------
 6779|    326|        handler.on_error("Unexpected end of regex in format string");
 6780|    326|        return begin;
 6781|    326|    }
 6782|       |
 6783|  38.7k|    auto regex_end = begin;
 6784|  38.7k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  38.7k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 38.7k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  38.7k|    handler.on_regex_pattern(regex_pattern);
 6790|  38.7k|    ++begin;
 6791|       |
 6792|  38.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 38.6k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  38.6k|    regex_flags flags{regex_flags::none};
 6798|  38.6k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  38.6k|        {{'m', regex_flags::multiline},
 6800|  38.6k|         {'s', regex_flags::singleline},
 6801|  38.6k|         {'i', regex_flags::nocase},
 6802|  38.6k|         {'n', regex_flags::nocapture}}};
 6803|  45.6k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 45.5k, False: 58]
  ------------------
 6804|  45.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 38.4k, False: 7.12k]
  ------------------
 6805|  38.4k|            break;
 6806|  38.4k|        }
 6807|  7.12k|        bool found_flag = false;
 6808|  18.6k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 18.6k, False: 158]
  ------------------
 6809|  18.6k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 11.6k, False: 6.96k]
  ------------------
 6810|  11.6k|                continue;
 6811|  11.6k|            }
 6812|  6.96k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 6.93k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  6.93k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  6.93k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 6.88k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  6.93k|#endif
 6830|  6.93k|            flags |= flag.second;
 6831|  6.93k|            found_flag = true;
 6832|  6.93k|            break;
 6833|  6.96k|        }
 6834|  7.09k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 158, False: 6.93k]
  ------------------
 6835|    158|            handler.on_error("Invalid flag in regex");
 6836|    158|            return begin;
 6837|    158|        }
 6838|  7.09k|    }
 6839|  38.5k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  38.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 38.4k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  38.4k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  38.5k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  38.7k|    {
 6354|  38.7k|        m_specs.charset_string_data = pattern.data();
 6355|  38.7k|        m_specs.charset_string_size = pattern.size();
 6356|  38.7k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  4.77k|{
 6455|  4.77k|    switch (type) {
 6456|    124|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 124, False: 4.64k]
  ------------------
 6457|    176|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 4.72k]
  ------------------
 6458|    176|            return presentation_type::int_binary;
 6459|     92|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 92, False: 4.68k]
  ------------------
 6460|     92|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 4.61k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 4.70k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    232|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 232, False: 4.54k]
  ------------------
 6466|    232|            return presentation_type::int_octal;
 6467|     96|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 96, False: 4.67k]
  ------------------
 6468|    130|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 34, False: 4.73k]
  ------------------
 6469|    130|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 4.73k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 4.73k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 4.66k]
  ------------------
 6474|    302|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 196, False: 4.57k]
  ------------------
 6475|    302|            return presentation_type::float_hex;
 6476|     88|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 88, False: 4.68k]
  ------------------
 6477|    158|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 4.70k]
  ------------------
 6478|    158|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 4.54k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 4.66k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 4.64k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 4.71k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.64k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.64k, False: 3.13k]
  ------------------
 6486|  1.64k|            return presentation_type::string;
 6487|    358|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 358, False: 4.41k]
  ------------------
 6488|    358|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 4.73k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 4.69k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.77k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.77k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    746|        default:
  ------------------
  |  Branch (6499:9): [True: 746, False: 4.02k]
  ------------------
 6500|    746|            return presentation_type::none;
 6501|  4.77k|    }
 6502|  4.77k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  60.5k|{
 6532|  60.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  60.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  60.5k|    auto check_align = [](wchar_t ch) {
 6535|  60.5k|        switch (ch) {
 6536|  60.5k|            case L'<':
 6537|  60.5k|                return align_type::left;
 6538|  60.5k|            case L'>':
 6539|  60.5k|                return align_type::right;
 6540|  60.5k|            case L'^':
 6541|  60.5k|                return align_type::center;
 6542|  60.5k|            default:
 6543|  60.5k|                return align_type::none;
 6544|  60.5k|        }
 6545|  60.5k|    };
 6546|       |
 6547|  60.5k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  60.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 60.4k]
  |  |  |  Branch (859:45): [True: 38, False: 60.4k]
  |  |  |  Branch (859:45): [True: 4, False: 60.4k]
  |  |  ------------------
  ------------------
 6549|  60.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|  60.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  60.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  60.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  60.4k|    const auto begin_before_fill = begin;
 6559|  60.4k|    begin += potential_fill_len;
 6560|       |
 6561|  60.4k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 59.4k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|  59.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  59.4k|    const auto begin_after_fill = begin;
 6567|  59.4k|    ++begin;
 6568|       |
 6569|  59.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 58.6k, False: 820]
  ------------------
 6570|  58.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 58.5k]
  |  |  ------------------
  ------------------
 6571|     54|            handler.on_error("Invalid fill character '{' in format string");
 6572|     54|            return begin;
 6573|     54|        }
 6574|  58.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 9.18k, False: 49.3k]
  ------------------
 6575|  9.18k|            return begin_before_fill;
 6576|  9.18k|        }
 6577|  58.5k|    }
 6578|       |
 6579|  50.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 44.7k, False: 5.43k]
  ------------------
 6580|  44.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 3.40k, False: 41.3k]
  ------------------
 6581|  3.40k|            handler.on_align(potential_align_on_fill);
 6582|  3.40k|            return begin_after_fill;
 6583|  3.40k|        }
 6584|  41.3k|        return begin_before_fill;
 6585|  44.7k|    }
 6586|       |
 6587|  5.43k|    handler.on_fill(potential_fill);
 6588|  5.43k|    handler.on_align(potential_align_after_fill);
 6589|  5.43k|    return begin;
 6590|  50.1k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  60.5k|{
 6514|  60.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  60.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  60.5k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  60.5k|        return 1;
 6517|  60.5k|    }
 6518|  60.5k|    else {
 6519|  60.5k|        const auto lengths =
 6520|  60.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  60.5k|            "\3\4";
 6522|  60.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  60.5k|        return len;
 6524|  60.5k|    }
 6525|  60.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   119k|    auto check_align = [](wchar_t ch) {
 6535|   119k|        switch (ch) {
 6536|  1.24k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.24k, False: 118k]
  ------------------
 6537|  1.24k|                return align_type::left;
 6538|  1.42k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 1.42k, False: 118k]
  ------------------
 6539|  1.42k|                return align_type::right;
 6540|  7.34k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 7.34k, False: 112k]
  ------------------
 6541|  7.34k|                return align_type::center;
 6542|   109k|            default:
  ------------------
  |  Branch (6542:13): [True: 109k, False: 10.0k]
  ------------------
 6543|   109k|                return align_type::none;
 6544|   119k|        }
 6545|   119k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  5.43k|    {
 6268|  5.43k|        m_specs.fill = fill;
 6269|  5.43k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  5.43k|    {
 6149|  5.43k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  5.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  5.43k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  5.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  5.43k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  12.3k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 6.95k, False: 5.43k]
  ------------------
 6153|  6.95k|                SCN_GCC_PUSH
 6154|  6.95k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  6.95k|                m_data[i] = s[i];
 6156|  6.95k|                SCN_GCC_POP
 6157|  6.95k|            }
 6158|  5.43k|            m_size = static_cast<unsigned char>(s.size());
 6159|  5.43k|        }
 6160|  5.43k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  5.43k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  5.43k|            m_data[1] =
 6163|  5.43k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  5.43k|            if (s.size() == 1) {
 6165|  5.43k|                return;
 6166|  5.43k|            }
 6167|  5.43k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  5.43k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  5.43k|        }
 6170|  5.43k|        else {
 6171|  5.43k|            const auto front = static_cast<unsigned>(s.front());
 6172|  5.43k|            m_data[0] = static_cast<char>(front);
 6173|  5.43k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  5.43k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  5.43k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  5.43k|        }
 6177|  5.43k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  60.4k|{
 6597|  60.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  60.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  60.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 15.7k, False: 44.6k]
  |  Branch (6599:33): [True: 4.24k, False: 11.5k]
  ------------------
 6600|  4.24k|        int width = parse_simple_int(begin, end);
 6601|  4.24k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.24k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.20k, False: 34]
  |  |  ------------------
  ------------------
 6602|  4.20k|            handler.on_width(width);
 6603|  4.20k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  4.24k|    }
 6609|  60.3k|    return begin;
 6610|  60.4k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  9.59k|{
 6617|  9.59k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  9.59k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 9.56k, False: 38]
  |  Branch (6619:33): [True: 9.51k, False: 42]
  ------------------
 6620|  9.51k|        int prec = parse_simple_int(begin, end);
 6621|  9.51k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  9.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.47k, False: 48]
  |  |  ------------------
  ------------------
 6622|  9.47k|            handler.on_precision(prec);
 6623|  9.47k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  9.51k|    }
 6629|  9.55k|    return begin;
 6630|  9.59k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    536|    {
 7127|    536|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    536|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 482, False: 54]
  ------------------
 7129|    536|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 428, False: 54]
  ------------------
 7130|    536|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 374, False: 54]
  ------------------
 7131|    536|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 320, False: 54]
  ------------------
 7132|    320|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    320|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    320|        }
 7137|       |
 7138|    216|        Handler::on_localized();
 7139|    216|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  57.5k|{
 8417|  57.5k|#define SCN_VISIT(Type)                                         \
 8418|  57.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  57.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  57.5k|    }                                                           \
 8421|  57.5k|    else {                                                      \
 8422|  57.5k|        return vis(monostate_val);                              \
 8423|  57.5k|    }
 8424|       |
 8425|  57.5k|    monostate monostate_val{};
 8426|       |
 8427|  57.5k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 57.5k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 57.5k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  6.41k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 6.41k, False: 51.1k]
  ------------------
 8433|  6.41k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  6.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.41k|    }                                                           \
  |  | 8421|  6.41k|    else {                                                      \
  |  | 8422|  6.41k|        return vis(monostate_val);                              \
  |  | 8423|  6.41k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 57.5k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 57.5k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 57.5k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 57.5k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  6.41k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 6.41k, False: 51.1k]
  ------------------
 8443|  6.41k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  6.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.41k|    }                                                           \
  |  | 8421|  6.41k|    else {                                                      \
  |  | 8422|  6.41k|        return vis(monostate_val);                              \
  |  | 8423|  6.41k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 57.5k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 57.5k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  6.37k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 6.37k, False: 51.1k]
  ------------------
 8449|  6.37k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  6.37k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.37k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.37k|    }                                                           \
  |  | 8421|  6.37k|    else {                                                      \
  |  | 8422|  6.37k|        return vis(monostate_val);                              \
  |  | 8423|  6.37k|    }
  ------------------
 8450|  6.41k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 6.41k, False: 51.1k]
  ------------------
 8451|  6.41k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  6.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.41k|    }                                                           \
  |  | 8421|  6.41k|    else {                                                      \
  |  | 8422|  6.41k|        return vis(monostate_val);                              \
  |  | 8423|  6.41k|    }
  ------------------
 8452|  6.37k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 6.37k, False: 51.1k]
  ------------------
 8453|  6.37k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  6.37k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.37k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.37k|    }                                                           \
  |  | 8421|  6.37k|    else {                                                      \
  |  | 8422|  6.37k|        return vis(monostate_val);                              \
  |  | 8423|  6.37k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 57.5k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 57.5k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 57.5k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  6.41k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 6.41k, False: 51.1k]
  ------------------
 8461|  6.41k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  6.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.41k|    }                                                           \
  |  | 8421|  6.41k|    else {                                                      \
  |  | 8422|  6.41k|        return vis(monostate_val);                              \
  |  | 8423|  6.41k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 57.5k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  6.37k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 6.37k, False: 51.1k]
  ------------------
 8465|  6.37k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  6.37k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.37k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.37k|    }                                                           \
  |  | 8421|  6.37k|    else {                                                      \
  |  | 8422|  6.37k|        return vis(monostate_val);                              \
  |  | 8423|  6.37k|    }
  ------------------
 8466|  6.37k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 6.37k, False: 51.1k]
  ------------------
 8467|  6.37k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  6.37k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.37k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.37k|    }                                                           \
  |  | 8421|  6.37k|    else {                                                      \
  |  | 8422|  6.37k|        return vis(monostate_val);                              \
  |  | 8423|  6.37k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 57.5k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  6.37k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 6.37k, False: 51.1k]
  ------------------
 8471|  6.37k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  6.37k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.37k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.37k|    }                                                           \
  |  | 8421|  6.37k|    else {                                                      \
  |  | 8422|  6.37k|        return vis(monostate_val);                              \
  |  | 8423|  6.37k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 57.5k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 57.5k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 57.5k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 57.5k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 57.5k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  57.5k|            SCN_CLANG_POP
 8495|  57.5k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  11.7k|    {
 3330|  11.7k|        return m_iterator;
 3331|  11.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  2.17k|    {
 1430|  2.17k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  2.17k|    {
  437|  2.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.36k|    {
 1177|  2.36k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  6.36k|    {
 3334|  6.36k|        return m_sentinel;
 3335|  6.36k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    190|    {
 1476|    190|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    190|    {
  447|    190|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  5.49k|    {
 3316|  5.49k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    230|    {
 1598|    230|        return has_value();
 1599|    230|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.64k|    {
  485|  4.64k|        return m_has_value;
  486|  4.64k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    152|    {
 1653|    152|        return value();
 1654|    152|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  2.17k|    {
 1627|  2.17k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.17k|        return this->get_value();
 1629|  2.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.17k|    {
  451|  2.17k|        return m_value;
  452|  2.17k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  2.13k|    {
 1837|  2.13k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.13k|                                            std::forward<F>(f));
 1839|  2.13k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  2.13k|{
 1323|  2.13k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.13k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.13k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.13k|            return result(*std::forward<Exp>(exp));
 1327|  2.13k|        }
 1328|       |
 1329|  2.13k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.13k|        return result(unexpect, monostate{});
 1331|  2.13k|    }
 1332|  2.13k|    else {
 1333|  2.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.02k, False: 112]
  |  |  ------------------
  ------------------
 1335|  2.13k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.13k|                   : result(unexpect,
 1337|    112|                            trivial_invoke(std::forward<F>(f),
 1338|    112|                                           std::forward<Exp>(exp).error()));
 1339|  2.13k|    }
 1340|  2.13k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.02k|    {
 1663|  2.02k|        return std::move(value());
 1664|  2.02k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  2.02k|    {
 1430|  2.02k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  2.02k|    {
  437|  2.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.13k|    {
 1177|  2.13k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    112|    {
 1614|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    112|        return std::move(this->get_unexpected().error());
 1616|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    112|    {
 1486|    112|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  2.13k|    {
 1598|  2.13k|        return has_value();
 1599|  2.13k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.26k|    {
  485|  4.26k|        return m_has_value;
  486|  4.26k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.02k|    {
 1663|  2.02k|        return std::move(value());
 1664|  2.02k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  2.02k|    {
 1627|  2.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.02k|        return this->get_value();
 1629|  2.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.02k|    {
  451|  2.02k|        return m_value;
  452|  2.02k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   210k|    {
 5466|   210k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   210k|        return static_cast<std::size_t>(m_desc &
 5471|   210k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   210k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   352k|    {
 5491|   352k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   352k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   141k|    {
 5434|   141k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   141k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 141k]
  |  |  ------------------
  ------------------
 5442|     76|            return {};
 5443|     76|        }
 5444|       |
 5445|   141k|        const auto t = type(id);
 5446|   141k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.17k, False: 140k]
  |  |  ------------------
  ------------------
 5447|  1.17k|            return {};
 5448|  1.17k|        }
 5449|       |
 5450|   140k|        basic_scan_arg<Context> arg;
 5451|   140k|        arg.m_type = t;
 5452|   140k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 140k, False: 0]
  ------------------
 5453|   140k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   140k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   140k|        return arg;
 5459|   141k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   141k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   141k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   141k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   141k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   141k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   141k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   140k|    {
 5495|   140k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   140k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|   280k|    {
 5247|   280k|        return m_type != detail::arg_type::none_type;
 5248|   280k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   109k|{
 8417|   109k|#define SCN_VISIT(Type)                                         \
 8418|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   109k|    }                                                           \
 8421|   109k|    else {                                                      \
 8422|   109k|        return vis(monostate_val);                              \
 8423|   109k|    }
 8424|       |
 8425|   109k|    monostate monostate_val{};
 8426|       |
 8427|   109k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 109k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 109k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  12.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 12.1k, False: 97.5k]
  ------------------
 8433|  12.1k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 109k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 109k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 109k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 109k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  12.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 12.1k, False: 97.5k]
  ------------------
 8443|  12.1k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 109k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 109k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  12.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 12.1k, False: 97.5k]
  ------------------
 8449|  12.1k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8450|  12.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 12.1k, False: 97.5k]
  ------------------
 8451|  12.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 109k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  12.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 12.1k, False: 97.5k]
  ------------------
 8455|  12.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 109k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 109k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  12.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 12.1k, False: 97.5k]
  ------------------
 8461|  12.1k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 109k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 109k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  12.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 12.1k, False: 97.5k]
  ------------------
 8467|  12.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8468|  12.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 12.1k, False: 97.5k]
  ------------------
 8469|  12.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8470|  12.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 12.1k, False: 97.5k]
  ------------------
 8471|  12.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.1k|    }                                                           \
  |  | 8421|  12.1k|    else {                                                      \
  |  | 8422|  12.1k|        return vis(monostate_val);                              \
  |  | 8423|  12.1k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 109k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 109k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 109k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 109k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 109k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   109k|            SCN_CLANG_POP
 8495|   109k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   210k|    {
 5545|   210k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   210k|    {
 8056|   210k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   210k|{
 7044|   210k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   210k|    handler.check_args_exhausted();
 7046|   210k|    return handler.get_error();
 7047|   210k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   210k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   210k|    auto begin = format.data();
 7013|   210k|    auto it = begin;
 7014|   210k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   435M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 435M, False: 70.1k]
  ------------------
 7017|   435M|        const auto ch = *it++;
 7018|   435M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 189k, False: 435M]
  ------------------
 7019|   189k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   189k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   189k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 139k, False: 49.7k]
  ------------------
 7023|   139k|                return;
 7024|   139k|            }
 7025|   189k|        }
 7026|   435M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 10.2k, False: 435M]
  ------------------
 7027|  10.2k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 992, False: 9.29k]
  |  |  |  Branch (859:45): [True: 394, False: 9.88k]
  |  |  |  Branch (859:45): [True: 598, False: 9.29k]
  |  |  ------------------
  ------------------
 7028|    992|                handler.on_error("Unmatched '}' in format string");
 7029|    992|                return;
 7030|    992|            }
 7031|       |
 7032|  9.29k|            handler.on_literal_text(begin, it);
 7033|  9.29k|            begin = ++it;
 7034|  9.29k|        }
 7035|   435M|    }
 7036|       |
 7037|  70.1k|    handler.on_literal_text(begin, end);
 7038|  70.1k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   189k|{
 6942|   189k|    struct id_adapter {
 6943|   189k|        constexpr void operator()()
 6944|   189k|        {
 6945|   189k|            arg_id = handler.on_arg_id();
 6946|   189k|        }
 6947|   189k|        constexpr void operator()(std::size_t id)
 6948|   189k|        {
 6949|   189k|            arg_id = handler.on_arg_id(id);
 6950|   189k|        }
 6951|       |
 6952|   189k|        constexpr void on_error(const char* msg)
 6953|   189k|        {
 6954|   189k|            SCN_UNLIKELY_ATTR
 6955|   189k|            handler.on_error(msg);
 6956|   189k|        }
 6957|       |
 6958|   189k|        Handler& handler;
 6959|   189k|        std::size_t arg_id;
 6960|   189k|    };
 6961|       |
 6962|   189k|    ++begin;
 6963|   189k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 189k]
  |  |  ------------------
  ------------------
 6964|     88|        handler.on_error("Unexpected end of replacement field");
 6965|     88|        return begin;
 6966|     88|    }
 6967|       |
 6968|   189k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 109k, False: 79.4k]
  ------------------
 6969|   109k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|   109k|    }
 6971|  79.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 112, False: 79.3k]
  ------------------
 6972|    112|        handler.on_literal_text(begin, begin + 1);
 6973|    112|    }
 6974|  79.3k|    else {
 6975|  79.3k|        auto adapter = id_adapter{handler, 0};
 6976|  79.3k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  79.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 79.2k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|  79.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 168, False: 79.0k]
  ------------------
 6984|    168|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    168|        }
 6986|  79.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 32.0k, False: 46.9k]
  ------------------
 6987|  32.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 32.0k]
  |  |  ------------------
  ------------------
 6988|     52|                handler.on_error("Unexpected end of replacement field");
 6989|     52|                return begin;
 6990|     52|            }
 6991|  32.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  32.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.55k, False: 29.4k]
  |  |  |  Branch (859:45): [True: 0, False: 32.0k]
  |  |  |  Branch (859:45): [True: 2.55k, False: 29.4k]
  |  |  ------------------
  ------------------
 6993|  2.55k|                handler.on_error("Unknown format specifier");
 6994|  2.55k|                return begin;
 6995|  2.55k|            }
 6996|  32.0k|        }
 6997|  46.9k|        else {
 6998|  46.9k|            SCN_UNLIKELY_ATTR
 6999|  46.9k|            handler.on_error("Missing '}' in format string");
 7000|  46.9k|            return begin;
 7001|  46.9k|        }
 7002|  79.2k|    }
 7003|   139k|    return begin + 1;
 7004|   189k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   141k|    {
 8039|   141k|        return m_args.get(id);
 8040|   141k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|   109k|    {
 8044|   109k|        return m_args;
 8045|   109k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   138k|    {
 8049|   138k|        return m_locale;
 8050|   138k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   141k|    {
 5566|   141k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 141k]
  |  |  ------------------
  ------------------
 5567|     34|            on_error(
 5568|     34|                "Cannot switch from manual to automatic argument indexing");
 5569|     34|            return 0;
 5570|     34|        }
 5571|       |
 5572|   141k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   141k|        do_check_arg_id(id);
 5574|   141k|        return id;
 5575|   141k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    136|    {
 5590|    136|        return detail::handle_error(
 5591|    136|            scan_error{scan_error::invalid_format_string, msg});
 5592|    136|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   141k|{
 6054|   141k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   141k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   141k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  79.3k|{
 6443|  79.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  79.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  79.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 79.3k, False: 0]
  |  Branch (6444:26): [True: 47.3k, False: 31.9k]
  ------------------
 6445|  47.3k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  47.3k|    }
 6447|       |
 6448|  31.9k|    handler();
 6449|  31.9k|    return begin;
 6450|  79.3k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  47.3k|{
 6413|  47.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  47.3k|    CharT c = *begin;
 6416|  47.3k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 72, False: 47.3k]
  |  Branch (6416:27): [True: 108, False: 47.2k]
  ------------------
 6417|    180|        handler.on_error("Invalid argument ID");
 6418|    180|        return begin;
 6419|    180|    }
 6420|       |
 6421|  47.2k|    int idx = 0;
 6422|  47.2k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 240, False: 46.9k]
  ------------------
 6423|    240|        idx = parse_simple_int(begin, end);
 6424|    240|    }
 6425|  46.9k|    else {
 6426|  46.9k|        ++begin;
 6427|  46.9k|    }
 6428|       |
 6429|  47.2k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 47.0k]
  |  Branch (6429:26): [True: 46.9k, False: 168]
  |  Branch (6429:50): [True: 46.8k, False: 114]
  ------------------
 6430|  46.9k|        handler.on_error("Invalid argument ID");
 6431|  46.9k|        return begin;
 6432|  46.9k|    }
 6433|    282|    handler(idx);
 6434|       |
 6435|    282|    return begin;
 6436|  47.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  47.1k|        {
 6954|  47.1k|            SCN_UNLIKELY_ATTR
 6955|  47.1k|            handler.on_error(msg);
 6956|  47.1k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  26.2k|{
 6392|  26.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  26.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  26.2k|    unsigned long long value = 0;
 6396|  27.6k|    do {
 6397|  27.6k|        value *= 10;
 6398|  27.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  27.6k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 27.6k]
  ------------------
 6400|  27.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  27.6k|        ++begin;
 6404|  27.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 27.4k, False: 282]
  |  Branch (6404:30): [True: 6.14k, False: 21.2k]
  |  Branch (6404:47): [True: 1.43k, False: 4.70k]
  ------------------
 6405|  26.2k|    return static_cast<int>(value);
 6406|  26.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    282|        {
 6949|    282|            arg_id = handler.on_arg_id(id);
 6950|    282|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    282|    {
 5579|    282|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 180]
  |  |  ------------------
  ------------------
 5580|    102|            on_error(
 5581|    102|                "Cannot switch from manual to automatic argument indexing");
 5582|    102|            return;
 5583|    102|        }
 5584|    180|        m_next_arg_id = -1;
 5585|    180|        do_check_arg_id(id);
 5586|    180|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  31.9k|        {
 6945|  31.9k|            arg_id = handler.on_arg_id();
 6946|  31.9k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  64.0k|    {
 5252|  64.0k|        return m_type;
 5253|  64.0k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  29.0k|    {
 5561|  29.0k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  29.0k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  61.0k|    {
 5550|  61.0k|        return m_format.data();
 5551|  61.0k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  32.0k|    {
 7122|  32.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  32.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  32.0k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  32.0k|{
 6858|  32.0k|    auto do_presentation = [&]() -> const CharT* {
 6859|  32.0k|        if (*begin == CharT{'['}) {
 6860|  32.0k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  32.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  32.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  32.0k|                return begin;
 6866|  32.0k|            }
 6867|  32.0k|            handler.on_character_set_string(set);
 6868|  32.0k|            return begin;
 6869|  32.0k|        }
 6870|  32.0k|        if (*begin == CharT{'/'}) {
 6871|  32.0k|            return parse_presentation_regex(begin, end, handler);
 6872|  32.0k|        }
 6873|  32.0k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  32.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  32.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  32.0k|            return begin;
 6877|  32.0k|        }
 6878|  32.0k|        handler.on_type(type);
 6879|  32.0k|        return begin;
 6880|  32.0k|    };
 6881|       |
 6882|  32.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 31.0k, False: 958]
  |  Branch (6882:28): [True: 2.66k, False: 28.4k]
  ------------------
 6883|  32.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 268, False: 2.39k]
  |  Branch (6883:36): [True: 216, False: 52]
  ------------------
 6884|    216|        return do_presentation();
 6885|    216|    }
 6886|       |
 6887|  31.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.8k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  31.8k|    begin = parse_align(begin, end, handler);
 6893|  31.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 31.7k]
  |  |  ------------------
  ------------------
 6894|    108|        handler.on_error("Unexpected end of format string");
 6895|    108|        return begin;
 6896|    108|    }
 6897|       |
 6898|  31.7k|    begin = parse_width(begin, end, handler);
 6899|  31.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 31.6k]
  |  |  ------------------
  ------------------
 6900|    106|        handler.on_error("Unexpected end of format string");
 6901|    106|        return begin;
 6902|    106|    }
 6903|       |
 6904|  31.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 2.77k, False: 28.8k]
  ------------------
 6905|  2.77k|        ++begin;
 6906|  2.77k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.73k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  2.73k|        begin = parse_precision(begin, end, handler);
 6911|  2.73k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 2.63k]
  |  |  ------------------
  ------------------
 6912|    100|            handler.on_error("Unexpected end of format string");
 6913|    100|            return begin;
 6914|    100|        }
 6915|  2.73k|    }
 6916|       |
 6917|  31.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 380, False: 31.0k]
  ------------------
 6918|    380|        handler.on_localized();
 6919|    380|        ++begin;
 6920|    380|    }
 6921|  31.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 31.4k]
  |  |  ------------------
  ------------------
 6922|     58|        handler.on_error("Unexpected end of format string");
 6923|     58|        return begin;
 6924|     58|    }
 6925|       |
 6926|  31.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 31.4k, False: 0]
  |  Branch (6926:25): [True: 27.1k, False: 4.22k]
  ------------------
 6927|  27.1k|        do_presentation();
 6928|  27.1k|    }
 6929|  31.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.69k, False: 29.7k]
  |  |  ------------------
  ------------------
 6930|  1.69k|        handler.on_error("Unexpected end of format string");
 6931|  1.69k|        return begin;
 6932|  1.69k|    }
 6933|       |
 6934|  29.7k|    return begin;
 6935|  31.4k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  2.66k|{
 6507|  2.66k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 214, False: 2.45k]
  |  Branch (6507:33): [True: 180, False: 34]
  ------------------
 6508|  2.66k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 158, False: 2.32k]
  |  Branch (6508:33): [True: 88, False: 70]
  ------------------
 6509|  2.66k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  27.4k|    auto do_presentation = [&]() -> const CharT* {
 6859|  27.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 1.64k, False: 25.7k]
  ------------------
 6860|  1.64k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.64k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 624, False: 1.02k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    624|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    624|                return begin;
 6866|    624|            }
 6867|  1.02k|            handler.on_character_set_string(set);
 6868|  1.02k|            return begin;
 6869|  1.64k|        }
 6870|  25.7k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 22.8k, False: 2.95k]
  ------------------
 6871|  22.8k|            return parse_presentation_regex(begin, end, handler);
 6872|  22.8k|        }
 6873|  2.95k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.95k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 496, False: 2.45k]
  |  |  ------------------
  ------------------
 6875|    496|            handler.on_error("Invalid type specifier in format string");
 6876|    496|            return begin;
 6877|    496|        }
 6878|  2.45k|        handler.on_type(type);
 6879|  2.45k|        return begin;
 6880|  2.95k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  1.64k|{
 6697|  1.64k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  1.64k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  1.64k|    auto start = begin;
 6701|  1.64k|    ++begin;
 6702|       |
 6703|  1.64k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 1.60k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     40|        return {};
 6708|     40|    }
 6709|  1.60k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 108, False: 1.49k]
  ------------------
 6710|    108|        handler.on_charset_inverted();
 6711|    108|        ++begin;
 6712|    108|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 66]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     42|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     42|            return {};
 6717|     42|        }
 6718|     66|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 28, False: 38]
  ------------------
 6719|     28|            handler.on_charset_single(char32_t{']'});
 6720|     28|            ++begin;
 6721|     28|        }
 6722|     66|    }
 6723|  1.49k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 1.46k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  18.1k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 17.8k, False: 332]
  ------------------
 6728|  17.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 176, False: 17.6k]
  |  |  ------------------
  ------------------
 6729|    176|            break;
 6730|    176|        }
 6731|       |
 6732|  17.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 1.02k, False: 16.6k]
  ------------------
 6733|  1.02k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  1.02k|        }
 6735|       |
 6736|  16.6k|        parse_presentation_set_literal(begin, end, handler);
 6737|  16.6k|    }
 6738|       |
 6739|    508|    SCN_UNLIKELY_ATTR
 6740|    508|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    508|    return {};
 6742|  1.52k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  16.6k|{
 6661|  16.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  16.6k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  16.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 16.4k]
  |  |  ------------------
  ------------------
 6665|    134|        return;
 6666|    134|    }
 6667|       |
 6668|  16.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 16.4k, False: 88]
  |  Branch (6668:25): [True: 462, False: 15.9k]
  |  Branch (6668:49): [True: 428, False: 34]
  ------------------
 6669|  16.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 352, False: 76]
  ------------------
 6670|    352|        ++begin;
 6671|       |
 6672|    352|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    352|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 318]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|    318|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 272]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     46|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     46|            return;
 6682|     46|        }
 6683|       |
 6684|    272|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    272|        return;
 6686|    318|    }
 6687|       |
 6688|  16.1k|    handler.on_charset_single(cp_first);
 6689|  16.1k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  16.9k|{
 6637|  16.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  16.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  16.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  |  Branch (859:45): [True: 0, False: 16.9k]
  |  |  |  Branch (859:45): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  16.9k|    const auto cp =
 6646|  16.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  16.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 168, False: 16.8k]
  |  |  ------------------
  ------------------
 6648|    168|        handler.on_error("Invalid encoding in format string");
 6649|    168|        return invalid_code_point;
 6650|    168|    }
 6651|       |
 6652|  16.8k|    begin += len;
 6653|  16.8k|    return cp;
 6654|  16.9k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  1.02k|    {
 6346|  1.02k|        m_specs.charset_string_data = fmt.data();
 6347|  1.02k|        m_specs.charset_string_size = fmt.size();
 6348|  1.02k|        on_type(presentation_type::string_set);
 6349|  1.02k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  22.8k|{
 6749|  22.8k|#if !SCN_DISABLE_REGEX
 6750|  22.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  22.8k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  22.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  22.8k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  45.6k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  22.8k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  22.8k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  22.8k|        return begin;
 6757|  22.8k|    }
 6758|       |
 6759|  22.8k|    auto start = begin;
 6760|  22.8k|    ++begin;
 6761|       |
 6762|  22.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 22.7k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  22.7k|    handler.on_type(presentation_type::regex);
 6768|  2.50M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 2.50M, False: 174]
  ------------------
 6769|  2.50M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 25.4k, False: 2.47M]
  ------------------
 6770|  25.4k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 22.6k, False: 2.88k]
  ------------------
 6771|  22.6k|                break;
 6772|  22.6k|            }
 6773|  2.88k|            else {
 6774|  2.88k|                handler.on_type(presentation_type::regex_escaped);
 6775|  2.88k|            }
 6776|  25.4k|        }
 6777|  2.50M|    }
 6778|  22.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 22.6k]
  |  |  ------------------
  ------------------
 6779|    174|        handler.on_error("Unexpected end of regex in format string");
 6780|    174|        return begin;
 6781|    174|    }
 6782|       |
 6783|  22.6k|    auto regex_end = begin;
 6784|  22.6k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  22.6k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 22.5k]
  |  |  ------------------
  ------------------
 6786|     40|        handler.on_error("Invalid (empty) regex in format string");
 6787|     40|        return begin;
 6788|     40|    }
 6789|  22.5k|    handler.on_regex_pattern(regex_pattern);
 6790|  22.5k|    ++begin;
 6791|       |
 6792|  22.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 22.5k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  22.5k|    regex_flags flags{regex_flags::none};
 6798|  22.5k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  22.5k|        {{'m', regex_flags::multiline},
 6800|  22.5k|         {'s', regex_flags::singleline},
 6801|  22.5k|         {'i', regex_flags::nocase},
 6802|  22.5k|         {'n', regex_flags::nocapture}}};
 6803|  24.2k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 24.2k, False: 64]
  ------------------
 6804|  24.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 22.2k, False: 1.92k]
  ------------------
 6805|  22.2k|            break;
 6806|  22.2k|        }
 6807|  1.92k|        bool found_flag = false;
 6808|  5.64k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 5.64k, False: 144]
  ------------------
 6809|  5.64k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 3.85k, False: 1.78k]
  ------------------
 6810|  3.85k|                continue;
 6811|  3.85k|            }
 6812|  1.78k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 28, False: 1.75k]
  ------------------
 6813|     28|                handler.on_error("Flag set multiple times in regex");
 6814|     28|                return begin;
 6815|     28|            }
 6816|  1.75k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  1.75k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 52, False: 1.70k]
  ------------------
 6818|       |                // clang-format off
 6819|     52|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     52|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  1.75k|#endif
 6830|  1.75k|            flags |= flag.second;
 6831|  1.75k|            found_flag = true;
 6832|  1.75k|            break;
 6833|  1.78k|        }
 6834|  1.89k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 144, False: 1.75k]
  ------------------
 6835|    144|            handler.on_error("Invalid flag in regex");
 6836|    144|            return begin;
 6837|    144|        }
 6838|  1.89k|    }
 6839|  22.3k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  22.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 22.2k]
  |  |  ------------------
  ------------------
 6842|     64|        handler.on_error("Unexpected end of regex in format string");
 6843|     64|        return begin;
 6844|     64|    }
 6845|       |
 6846|  22.2k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  22.3k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  22.5k|    {
 6354|  22.5k|        m_specs.charset_string_data = pattern.data();
 6355|  22.5k|        m_specs.charset_string_size = pattern.size();
 6356|  22.5k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  2.95k|{
 6455|  2.95k|    switch (type) {
 6456|     70|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 70, False: 2.88k]
  ------------------
 6457|    104|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 2.91k]
  ------------------
 6458|    104|            return presentation_type::int_binary;
 6459|     88|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 88, False: 2.86k]
  ------------------
 6460|     88|            return presentation_type::int_decimal;
 6461|    106|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 106, False: 2.84k]
  ------------------
 6462|    106|            return presentation_type::int_generic;
 6463|    166|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 166, False: 2.78k]
  ------------------
 6464|    166|            return presentation_type::int_unsigned_decimal;
 6465|    142|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 142, False: 2.81k]
  ------------------
 6466|    142|            return presentation_type::int_octal;
 6467|    112|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 112, False: 2.84k]
  ------------------
 6468|    164|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 2.90k]
  ------------------
 6469|    164|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 2.91k]
  ------------------
 6471|     74|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 40, False: 2.91k]
  ------------------
 6472|     74|            return presentation_type::int_arbitrary_base;
 6473|    152|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 152, False: 2.80k]
  ------------------
 6474|    222|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 70, False: 2.88k]
  ------------------
 6475|    222|            return presentation_type::float_hex;
 6476|    142|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 142, False: 2.81k]
  ------------------
 6477|    176|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 2.91k]
  ------------------
 6478|    176|            return presentation_type::float_scientific;
 6479|     94|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 94, False: 2.85k]
  ------------------
 6480|    182|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 88, False: 2.86k]
  ------------------
 6481|    182|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 2.91k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 2.91k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|    610|        case 's':
  ------------------
  |  Branch (6485:9): [True: 610, False: 2.34k]
  ------------------
 6486|    610|            return presentation_type::string;
 6487|    232|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 232, False: 2.72k]
  ------------------
 6488|    232|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 2.91k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     88|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 88, False: 2.86k]
  ------------------
 6492|     88|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.95k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.95k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    496|        default:
  ------------------
  |  Branch (6499:9): [True: 496, False: 2.45k]
  ------------------
 6500|    496|            return presentation_type::none;
 6501|  2.95k|    }
 6502|  2.95k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  31.8k|{
 6532|  31.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  31.8k|    auto check_align = [](wchar_t ch) {
 6535|  31.8k|        switch (ch) {
 6536|  31.8k|            case L'<':
 6537|  31.8k|                return align_type::left;
 6538|  31.8k|            case L'>':
 6539|  31.8k|                return align_type::right;
 6540|  31.8k|            case L'^':
 6541|  31.8k|                return align_type::center;
 6542|  31.8k|            default:
 6543|  31.8k|                return align_type::none;
 6544|  31.8k|        }
 6545|  31.8k|    };
 6546|       |
 6547|  31.8k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  31.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.8k]
  |  |  |  Branch (859:45): [True: 0, False: 31.8k]
  |  |  |  Branch (859:45): [True: 0, False: 31.8k]
  |  |  ------------------
  ------------------
 6549|  31.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  31.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  31.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  31.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  31.8k|    const auto begin_before_fill = begin;
 6559|  31.8k|    begin += potential_fill_len;
 6560|       |
 6561|  31.8k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 958, False: 30.8k]
  ------------------
 6562|    958|        return begin_before_fill;
 6563|    958|    }
 6564|       |
 6565|  30.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  30.8k|    const auto begin_after_fill = begin;
 6567|  30.8k|    ++begin;
 6568|       |
 6569|  30.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 30.8k, False: 0]
  ------------------
 6570|  30.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 30.8k]
  |  |  ------------------
  ------------------
 6571|     42|            handler.on_error("Invalid fill character '{' in format string");
 6572|     42|            return begin;
 6573|     42|        }
 6574|  30.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 1.58k, False: 29.2k]
  ------------------
 6575|  1.58k|            return begin_before_fill;
 6576|  1.58k|        }
 6577|  30.8k|    }
 6578|       |
 6579|  29.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 28.7k, False: 516]
  ------------------
 6580|  28.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.09k, False: 27.6k]
  ------------------
 6581|  1.09k|            handler.on_align(potential_align_on_fill);
 6582|  1.09k|            return begin_after_fill;
 6583|  1.09k|        }
 6584|  27.6k|        return begin_before_fill;
 6585|  28.7k|    }
 6586|       |
 6587|    516|    handler.on_fill(potential_fill);
 6588|    516|    handler.on_align(potential_align_after_fill);
 6589|    516|    return begin;
 6590|  29.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  31.8k|{
 6514|  31.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  31.8k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  31.8k|        return 1;
 6517|  31.8k|    }
 6518|  31.8k|    else {
 6519|  31.8k|        const auto lengths =
 6520|  31.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  31.8k|            "\3\4";
 6522|  31.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  31.8k|        return len;
 6524|  31.8k|    }
 6525|  31.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  62.6k|    auto check_align = [](wchar_t ch) {
 6535|  62.6k|        switch (ch) {
 6536|    554|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 554, False: 62.1k]
  ------------------
 6537|    554|                return align_type::left;
 6538|    326|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 326, False: 62.3k]
  ------------------
 6539|    326|                return align_type::right;
 6540|    942|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 942, False: 61.7k]
  ------------------
 6541|    942|                return align_type::center;
 6542|  60.8k|            default:
  ------------------
  |  Branch (6542:13): [True: 60.8k, False: 1.82k]
  ------------------
 6543|  60.8k|                return align_type::none;
 6544|  62.6k|        }
 6545|  62.6k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|    516|    {
 6268|    516|        m_specs.fill = fill;
 6269|    516|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|    516|    {
 6149|    516|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|    516|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|    516|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|    516|            for (size_t i = 0; i < s.size(); ++i) {
 6153|    516|                SCN_GCC_PUSH
 6154|    516|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|    516|                m_data[i] = s[i];
 6156|    516|                SCN_GCC_POP
 6157|    516|            }
 6158|    516|            m_size = static_cast<unsigned char>(s.size());
 6159|    516|        }
 6160|    516|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|    516|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|    516|            m_data[1] =
 6163|    516|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|    516|            if (s.size() == 1) {
 6165|    516|                return;
 6166|    516|            }
 6167|    516|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|    516|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|    516|        }
 6170|    516|        else {
 6171|    516|            const auto front = static_cast<unsigned>(s.front());
 6172|    516|            m_data[0] = static_cast<char>(front);
 6173|    516|            m_data[1] = static_cast<char>(front >> 8);
 6174|    516|            m_data[2] = static_cast<char>(front >> 16);
 6175|    516|            m_data[3] = static_cast<char>(front >> 24);
 6176|    516|        }
 6177|    516|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  31.7k|{
 6597|  31.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  31.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  31.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 27.0k, False: 4.62k]
  |  Branch (6599:33): [True: 23.3k, False: 3.71k]
  ------------------
 6600|  23.3k|        int width = parse_simple_int(begin, end);
 6601|  23.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  23.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 23.3k, False: 0]
  |  |  ------------------
  ------------------
 6602|  23.3k|            handler.on_width(width);
 6603|  23.3k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  23.3k|    }
 6609|  31.7k|    return begin;
 6610|  31.7k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  2.73k|{
 6617|  2.73k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  2.73k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 2.70k, False: 34]
  |  Branch (6619:33): [True: 2.65k, False: 52]
  ------------------
 6620|  2.65k|        int prec = parse_simple_int(begin, end);
 6621|  2.65k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  2.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.65k, False: 0]
  |  |  ------------------
  ------------------
 6622|  2.65k|            handler.on_precision(prec);
 6623|  2.65k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  2.65k|    }
 6629|  2.73k|    return begin;
 6630|  2.73k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    380|    {
 7127|    380|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    380|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 344, False: 36]
  ------------------
 7129|    380|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 308, False: 36]
  ------------------
 7130|    380|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 272, False: 36]
  ------------------
 7131|    380|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 236, False: 36]
  ------------------
 7132|    236|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    236|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    236|        }
 7137|       |
 7138|    144|        Handler::on_localized();
 7139|    144|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  28.9k|{
 8417|  28.9k|#define SCN_VISIT(Type)                                         \
 8418|  28.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  28.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  28.9k|    }                                                           \
 8421|  28.9k|    else {                                                      \
 8422|  28.9k|        return vis(monostate_val);                              \
 8423|  28.9k|    }
 8424|       |
 8425|  28.9k|    monostate monostate_val{};
 8426|       |
 8427|  28.9k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 28.9k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 28.9k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  3.23k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 3.23k, False: 25.6k]
  ------------------
 8433|  3.23k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  3.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.23k|    }                                                           \
  |  | 8421|  3.23k|    else {                                                      \
  |  | 8422|  3.23k|        return vis(monostate_val);                              \
  |  | 8423|  3.23k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 28.9k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 28.9k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 28.9k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 28.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  3.23k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 3.23k, False: 25.6k]
  ------------------
 8443|  3.23k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  3.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.23k|    }                                                           \
  |  | 8421|  3.23k|    else {                                                      \
  |  | 8422|  3.23k|        return vis(monostate_val);                              \
  |  | 8423|  3.23k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 28.9k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 28.9k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  3.19k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 3.19k, False: 25.7k]
  ------------------
 8449|  3.19k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.19k|    }                                                           \
  |  | 8421|  3.19k|    else {                                                      \
  |  | 8422|  3.19k|        return vis(monostate_val);                              \
  |  | 8423|  3.19k|    }
  ------------------
 8450|  3.23k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 3.23k, False: 25.6k]
  ------------------
 8451|  3.23k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  3.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.23k|    }                                                           \
  |  | 8421|  3.23k|    else {                                                      \
  |  | 8422|  3.23k|        return vis(monostate_val);                              \
  |  | 8423|  3.23k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 28.9k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  3.19k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 3.19k, False: 25.7k]
  ------------------
 8455|  3.19k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.19k|    }                                                           \
  |  | 8421|  3.19k|    else {                                                      \
  |  | 8422|  3.19k|        return vis(monostate_val);                              \
  |  | 8423|  3.19k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 28.9k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 28.9k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  3.23k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 3.23k, False: 25.6k]
  ------------------
 8461|  3.23k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  3.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.23k|    }                                                           \
  |  | 8421|  3.23k|    else {                                                      \
  |  | 8422|  3.23k|        return vis(monostate_val);                              \
  |  | 8423|  3.23k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 28.9k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 28.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  3.19k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 3.19k, False: 25.7k]
  ------------------
 8467|  3.19k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.19k|    }                                                           \
  |  | 8421|  3.19k|    else {                                                      \
  |  | 8422|  3.19k|        return vis(monostate_val);                              \
  |  | 8423|  3.19k|    }
  ------------------
 8468|  3.19k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 3.19k, False: 25.7k]
  ------------------
 8469|  3.19k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.19k|    }                                                           \
  |  | 8421|  3.19k|    else {                                                      \
  |  | 8422|  3.19k|        return vis(monostate_val);                              \
  |  | 8423|  3.19k|    }
  ------------------
 8470|  3.19k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 3.19k, False: 25.7k]
  ------------------
 8471|  3.19k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.19k|    }                                                           \
  |  | 8421|  3.19k|    else {                                                      \
  |  | 8422|  3.19k|        return vis(monostate_val);                              \
  |  | 8423|  3.19k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 28.9k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 28.9k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 28.9k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 28.9k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 28.9k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  28.9k|            SCN_CLANG_POP
 8495|  28.9k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  3.92k|    {
 3330|  3.92k|        return m_iterator;
 3331|  3.92k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|    980|    {
 1430|    980|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    980|    {
  437|    980|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    980|    {
 1177|    980|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  1.96k|    {
 3334|  1.96k|        return m_sentinel;
 3335|  1.96k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  1.96k|    {
 3316|  1.96k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.96k|    {
  485|  1.96k|        return m_has_value;
  486|  1.96k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|    980|    {
 1627|    980|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    980|        return this->get_value();
 1629|    980|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    980|    {
  451|    980|        return m_value;
  452|    980|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|    980|    {
 1837|    980|        return detail::transform_error_impl(std::move(*this),
 1838|    980|                                            std::forward<F>(f));
 1839|    980|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|    980|{
 1323|    980|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    980|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    980|        if (SCN_LIKELY(exp.has_value())) {
 1326|    980|            return result(*std::forward<Exp>(exp));
 1327|    980|        }
 1328|       |
 1329|    980|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    980|        return result(unexpect, monostate{});
 1331|    980|    }
 1332|    980|    else {
 1333|    980|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    980|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    980|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 980, False: 0]
  |  |  ------------------
  ------------------
 1335|    980|                   ? result(*std::forward<Exp>(exp))
 1336|    980|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    980|    }
 1340|    980|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|    980|    {
 1663|    980|        return std::move(value());
 1664|    980|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    980|    {
 1430|    980|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    980|    {
  437|    980|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    980|    {
 1177|    980|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|    980|    {
 1598|    980|        return has_value();
 1599|    980|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.96k|    {
  485|  1.96k|        return m_has_value;
  486|  1.96k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|    980|    {
 1663|    980|        return std::move(value());
 1664|    980|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|    980|    {
 1627|    980|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    980|        return this->get_value();
 1629|    980|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    980|    {
  451|    980|        return m_value;
  452|    980|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   105k|{
   44|   105k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   105k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   105k|{
   60|   105k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   105k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  11.7k|{
   89|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  11.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  11.7k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  11.7k|{
  127|  11.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  11.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  11.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.7k|    static_cast<    \
  |  |  929|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  11.7k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   158k|{
  653|   158k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   158k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    162|{
  659|    162|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    162|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 81, False: 81]
  ------------------
  661|    162|                    : std::locale{};
  662|    162|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    912|{
 1221|    912|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    912|                                  m_nan_payload_buffer, value);
 1223|    912|    value = this->setsign(value);
 1224|    912|    return n;
 1225|    912|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  12.5k|{
 1221|  12.5k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  12.5k|                                  m_nan_payload_buffer, value);
 1223|  12.5k|    value = this->setsign(value);
 1224|  12.5k|    return n;
 1225|  12.5k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     18|{
 1461|     18|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     18|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     18|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     18|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     18|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18, False: 0]
  ------------------
 1467|     18|        SCN_UNLIKELY_ATTR
 1468|     18|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     18|                                     "Invalid integer value");
 1470|     18|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    906|{
 1461|    906|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    906|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    906|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    906|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    906|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 906, False: 0]
  ------------------
 1467|    906|        SCN_UNLIKELY_ATTR
 1468|    906|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    906|                                     "Invalid integer value");
 1470|    906|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  12.5k|{
 1461|  12.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  12.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  12.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  12.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  12.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 12.5k, False: 0]
  ------------------
 1467|  12.5k|        SCN_UNLIKELY_ATTR
 1468|  12.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  12.5k|                                     "Invalid integer value");
 1470|  12.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    906|{
 1461|    906|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    906|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    906|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    906|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    906|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 906, False: 0]
  ------------------
 1467|    906|        SCN_UNLIKELY_ATTR
 1468|    906|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    906|                                     "Invalid integer value");
 1470|    906|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  12.5k|{
 1461|  12.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  12.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  12.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  12.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  12.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 12.5k, False: 0]
  ------------------
 1467|  12.5k|        SCN_UNLIKELY_ATTR
 1468|  12.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  12.5k|                                     "Invalid integer value");
 1470|  12.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    892|{
 1461|    892|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    892|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    892|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    892|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    892|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 892, False: 0]
  ------------------
 1467|    892|        SCN_UNLIKELY_ATTR
 1468|    892|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    892|                                     "Invalid integer value");
 1470|    892|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  12.5k|{
 1461|  12.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  12.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  12.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  12.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  12.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 12.5k, False: 0]
  ------------------
 1467|  12.5k|        SCN_UNLIKELY_ATTR
 1468|  12.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  12.5k|                                     "Invalid integer value");
 1470|  12.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  52.6k|{
 2184|  52.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  52.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   105k|{
 2208|   105k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   105k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.69k|{
  194|  3.69k|    return find_classic_impl(
  195|  3.69k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.69k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.69k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  22.4k|{
  202|  22.4k|    return find_classic_impl(
  203|  22.4k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  22.4k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  22.4k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    258|{
  673|    258|    return e;
  674|    258|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  52.6k|{
 2141|  52.6k|    return vscan_internal(source, format, args);
 2142|  52.6k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   105k|{
 2161|   105k|    return vscan_internal(source, format, args);
 2162|   105k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.69k|{
  118|  3.69k|    auto it = source.begin();
  119|       |
  120|  15.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 12.8k, False: 2.90k]
  ------------------
  121|  12.8k|        auto sv =
  122|  12.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  12.8k|                .substr(0, 8);
  124|       |
  125|  12.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.93k, False: 8.93k]
  ------------------
  126|  3.93k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.93k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.93k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 462, False: 3.47k]
  ------------------
  129|    462|                break;
  130|    462|            }
  131|  3.47k|            continue;
  132|  3.93k|        }
  133|       |
  134|  35.8k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 27.2k, False: 8.61k]
  ------------------
  135|  27.2k|            auto tmp =
  136|  27.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  27.2k|            auto res = get_next_code_point(tmp);
  138|  27.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 324, False: 26.9k]
  ------------------
  139|    324|                return it;
  140|    324|            }
  141|  26.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  26.9k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  26.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  26.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  26.9k|        }
  145|  8.93k|    }
  146|       |
  147|  3.36k|    return detail::make_string_view_iterator(source, it);
  148|  3.69k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  37.8k|{
  105|  37.8k|    static_assert(sizeof(*source.data()) == 1);
  106|  37.8k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  37.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  37.8k|    uint64_t word{};
  108|  37.8k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  37.8k|    return has_byte_greater(word, 127) != 0;
  111|  37.8k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  24.9k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  27.2k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  22.4k|{
  118|  22.4k|    auto it = source.begin();
  119|       |
  120|  31.4k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 24.9k, False: 6.52k]
  ------------------
  121|  24.9k|        auto sv =
  122|  24.9k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  24.9k|                .substr(0, 8);
  124|       |
  125|  24.9k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 12.2k, False: 12.6k]
  ------------------
  126|  12.2k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  12.2k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  12.2k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 8.92k, False: 3.35k]
  ------------------
  129|  8.92k|                break;
  130|  8.92k|            }
  131|  3.35k|            continue;
  132|  12.2k|        }
  133|       |
  134|  31.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 26.2k, False: 5.67k]
  ------------------
  135|  26.2k|            auto tmp =
  136|  26.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  26.2k|            auto res = get_next_code_point(tmp);
  138|  26.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 7.01k, False: 19.2k]
  ------------------
  139|  7.01k|                return it;
  140|  7.01k|            }
  141|  19.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  19.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  19.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  19.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  19.2k|        }
  145|  12.6k|    }
  146|       |
  147|  15.4k|    return detail::make_string_view_iterator(source, it);
  148|  22.4k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  31.6k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  26.2k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    912|{
 1138|    912|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 912]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    912|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 912]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    912|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 912]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    912|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 912]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    912|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    912|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18, False: 894]
  ------------------
 1185|     18|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 1186|     18|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     18|                                         "Invalid floating-point digit");
 1188|     18|        }
 1189|     18|    }
 1190|    894|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 894, False: 0]
  |  |  ------------------
  ------------------
 1191|    894|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    894|                                     "Invalid floating-point digit");
 1193|    894|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  12.5k|{
 1138|  12.5k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 12.5k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  12.5k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 12.5k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  12.5k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 12.5k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  12.5k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 12.5k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  12.5k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  12.5k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 12.5k]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|  12.5k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 0]
  |  |  ------------------
  ------------------
 1191|  12.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  12.5k|                                     "Invalid floating-point digit");
 1193|  12.5k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   105k|{
 1625|   105k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 104k, False: 396]
  ------------------
 1626|   104k|        return false;
 1627|   104k|    }
 1628|    396|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 270]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   105k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   105k|    {
 1903|   105k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   316k|    {
 1722|   316k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   316k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   105k|    {
 1853|   105k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   105k|{
 2038|   105k|    const auto beg = handler.get_ctx().begin();
 2039|   105k|    detail::parse_format_string<false>(format, handler);
 2040|   105k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102k, False: 2.63k]
  |  |  ------------------
  ------------------
 2041|   102k|        return unexpected(handler.error);
 2042|   102k|    }
 2043|  2.63k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   105k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   529k|    {
 2022|   529k|        return ctx.get();
 2023|   529k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   529k|    {
 1857|   529k|        return contiguous_ctx;
 1858|   529k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   122k|    {
 1907|   167k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 49.9k, False: 117k]
  ------------------
 1908|  49.9k|            auto it = get_ctx().begin();
 1909|  49.9k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 990, False: 48.9k]
  ------------------
 1910|    990|                SCN_UNLIKELY_ATTR
 1911|    990|                return on_error("Unexpected end of source");
 1912|    990|            }
 1913|       |
 1914|  48.9k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  48.9k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  48.9k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.48k, False: 46.5k]
  ------------------
 1917|  2.48k|                SCN_UNLIKELY_ATTR
 1918|  2.48k|                return on_error("Invalid encoding in format string");
 1919|  2.48k|            }
 1920|  46.5k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 6.28k, False: 40.2k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  6.28k|                get_ctx().advance_to(
 1923|  6.28k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  6.28k|                auto begin_it = impl::read_while_classic_space(
 1926|  6.28k|                    detail::make_string_view_from_pointers(
 1927|  6.28k|                        detail::to_address(after_space_it),
 1928|  6.28k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  6.28k|                begin = detail::to_address(begin_it) - 1;
 1931|  6.28k|                continue;
 1932|  6.28k|            }
 1933|       |
 1934|  40.2k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.47k, False: 38.7k]
  ------------------
 1935|  1.47k|                SCN_UNLIKELY_ATTR
 1936|  1.47k|                return on_error("Unexpected literal character in source");
 1937|  1.47k|            }
 1938|  38.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  38.7k|        }
 1940|   122k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.21k|    {
 1972|  6.21k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.21k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.21k|        on_visit_scan_arg(
 1976|  6.21k|            impl::default_arg_reader<context_type>{
 1977|  6.21k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.21k|            arg);
 1979|  6.21k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  67.5k|{
 1681|  67.5k|    auto arg = ctx.arg(id);
 1682|  67.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 66.1k]
  |  |  ------------------
  ------------------
 1683|  1.47k|        handler.on_error("Failed to find argument with ID");
 1684|  1.47k|    }
 1685|  67.5k|    return arg;
 1686|  67.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   209k|    {
 1797|   209k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 206k]
  |  |  ------------------
  ------------------
 1798|  2.72k|            on_error("Invalid out-of-range argument ID");
 1799|  2.72k|            return;
 1800|  2.72k|        }
 1801|       |
 1802|   206k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 206k]
  |  |  ------------------
  ------------------
 1803|    130|            return on_error("Argument with this ID has already been scanned");
 1804|    130|        }
 1805|       |
 1806|   206k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   206k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 206k, False: 0]
  |  |  ------------------
  ------------------
 1807|   206k|            visited_args_lower64 |= (1ull << id);
 1808|   206k|            return;
 1809|   206k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   206k|    {
 1782|   206k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   206k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   206k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 206k, False: 0]
  |  |  ------------------
  ------------------
 1788|   206k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   206k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.21k|    {
 1956|  6.21k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 152, False: 6.06k]
  |  Branch (1956:23): [True: 0, False: 6.06k]
  ------------------
 1957|    152|            SCN_UNLIKELY_ATTR
 1958|    152|            return;
 1959|    152|        }
 1960|       |
 1961|  6.06k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.06k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.27k, False: 1.79k]
  |  |  ------------------
  ------------------
 1963|  4.27k|            on_error(r.error());
 1964|  4.27k|        }
 1965|  1.79k|        else {
 1966|  1.79k|            get_ctx().advance_to(*r);
 1967|  1.79k|        }
 1968|  6.06k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   145k|    {
 1766|   145k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 145k, False: 0]
  |  |  ------------------
  ------------------
 1767|   145k|            error = err;
 1768|   145k|        }
 1769|   145k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  64.3k|    {
 1944|  64.3k|        return parse_ctx.next_arg_id();
 1945|  64.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  3.32k|    {
 1948|  3.32k|        parse_ctx.check_arg_id(id);
 1949|  3.32k|        return id;
 1950|  3.32k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  61.3k|    {
 1985|  61.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  61.3k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  61.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 61.3k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  61.3k|        auto specs = detail::format_specs{};
 1998|  61.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  61.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  61.3k|            arg.type()};
 2001|       |
 2002|  61.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  61.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.56k, False: 58.8k]
  |  Branch (2003:29): [True: 896, False: 57.9k]
  ------------------
 2004|  3.45k|            SCN_UNLIKELY_ATTR
 2005|  3.45k|            on_error("Missing '}' in format string");
 2006|  3.45k|            return parse_ctx.begin();
 2007|  3.45k|        }
 2008|  57.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280, False: 57.6k]
  |  |  ------------------
  ------------------
 2009|    280|            return parse_ctx.begin();
 2010|    280|        }
 2011|  57.6k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  57.6k|        on_visit_scan_arg(
 2014|  57.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  57.6k|                                           get_ctx().locale()},
 2016|  57.6k|            arg);
 2017|  57.6k|        return parse_ctx.begin();
 2018|  57.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  61.3k|    {
 1701|  61.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  57.6k|    {
 1956|  57.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 116, False: 57.5k]
  |  Branch (1956:23): [True: 0, False: 57.5k]
  ------------------
 1957|    116|            SCN_UNLIKELY_ATTR
 1958|    116|            return;
 1959|    116|        }
 1960|       |
 1961|  57.5k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  57.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 5.37k]
  |  |  ------------------
  ------------------
 1963|  52.1k|            on_error(r.error());
 1964|  52.1k|        }
 1965|  5.37k|        else {
 1966|  5.37k|            get_ctx().advance_to(*r);
 1967|  5.37k|        }
 1968|  57.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   391k|    {
 1761|   391k|        SCN_UNLIKELY_ATTR
 1762|   391k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   391k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   316k|    {
 1729|   316k|        {
 1730|   316k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 316k]
  ------------------
 1731|   316k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 316k]
  ------------------
 1732|   316k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   316k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   316k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 109k, False: 206k]
  ------------------
 1736|   109k|                return on_error("Argument list not exhausted");
 1737|   109k|            }
 1738|   316k|        }
 1739|       |
 1740|   206k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 206k, False: 0]
  ------------------
 1741|   206k|            return;
 1742|   206k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   316k|    {
 1777|   316k|        return error;
 1778|   316k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   817k|    {
 1773|   817k|        return static_cast<bool>(error);
 1774|   817k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   105k|{
 2053|   105k|    const auto argcount = args.size();
 2054|   105k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 105k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   105k|    auto handler = format_handler<true, CharT>{
 2060|   105k|        ranges::subrange<const CharT*>{source.data(),
 2061|   105k|                                       source.data() + source.size()},
 2062|   105k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   105k|    return vscan_parse_format_string(format, handler);
 2064|   105k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   210k|{
 2053|   210k|    const auto argcount = args.size();
 2054|   210k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 210k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   210k|    auto handler = format_handler<true, CharT>{
 2060|   210k|        ranges::subrange<const CharT*>{source.data(),
 2061|   210k|                                       source.data() + source.size()},
 2062|   210k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   210k|    static_cast<    \
  |  |  929|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   210k|    static_cast<    \
  |  |  929|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   210k|    return vscan_parse_format_string(format, handler);
 2064|   210k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   210k|{
 1625|   210k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 199k, False: 11.0k]
  ------------------
 1626|   199k|        return false;
 1627|   199k|    }
 1628|  11.0k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 10.9k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   210k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   210k|    {
 1903|   210k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   210k|    {
 1853|   210k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   210k|{
 2038|   210k|    const auto beg = handler.get_ctx().begin();
 2039|   210k|    detail::parse_format_string<false>(format, handler);
 2040|   210k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 210k, False: 648]
  |  |  ------------------
  ------------------
 2041|   210k|        return unexpected(handler.error);
 2042|   210k|    }
 2043|    648|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   210k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.29G|    {
 2022|  1.29G|        return ctx.get();
 2023|  1.29G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.29G|    {
 1857|  1.29G|        return contiguous_ctx;
 1858|  1.29G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   268k|    {
 1907|   432M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 431M, False: 178k]
  ------------------
 1908|   431M|            auto it = get_ctx().begin();
 1909|   431M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 384, False: 431M]
  ------------------
 1910|    384|                SCN_UNLIKELY_ATTR
 1911|    384|                return on_error("Unexpected end of source");
 1912|    384|            }
 1913|       |
 1914|   431M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   431M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   431M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 77.6k, False: 431M]
  ------------------
 1917|  77.6k|                SCN_UNLIKELY_ATTR
 1918|  77.6k|                return on_error("Invalid encoding in format string");
 1919|  77.6k|            }
 1920|   431M|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 91.0k, False: 431M]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  91.0k|                get_ctx().advance_to(
 1923|  91.0k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  91.0k|                auto begin_it = impl::read_while_classic_space(
 1926|  91.0k|                    detail::make_string_view_from_pointers(
 1927|  91.0k|                        detail::to_address(after_space_it),
 1928|  91.0k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  91.0k|                begin = detail::to_address(begin_it) - 1;
 1931|  91.0k|                continue;
 1932|  91.0k|            }
 1933|       |
 1934|   431M|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 12.1k, False: 431M]
  ------------------
 1935|  12.1k|                SCN_UNLIKELY_ATTR
 1936|  12.1k|                return on_error("Unexpected literal character in source");
 1937|  12.1k|            }
 1938|   431M|            get_ctx().advance_to(ranges::next(it));
 1939|   431M|        }
 1940|   268k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|   109k|    {
 1972|   109k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|   109k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|   109k|        on_visit_scan_arg(
 1976|   109k|            impl::default_arg_reader<context_type>{
 1977|   109k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|   109k|            arg);
 1979|   109k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   141k|{
 1681|   141k|    auto arg = ctx.arg(id);
 1682|   141k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.25k, False: 140k]
  |  |  ------------------
  ------------------
 1683|  1.25k|        handler.on_error("Failed to find argument with ID");
 1684|  1.25k|    }
 1685|   141k|    return arg;
 1686|   141k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   109k|    {
 1956|   109k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 140, False: 109k]
  |  Branch (1956:23): [True: 0, False: 109k]
  ------------------
 1957|    140|            SCN_UNLIKELY_ATTR
 1958|    140|            return;
 1959|    140|        }
 1960|       |
 1961|   109k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   109k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 61.6k, False: 48.0k]
  |  |  ------------------
  ------------------
 1963|  61.6k|            on_error(r.error());
 1964|  61.6k|        }
 1965|  48.0k|        else {
 1966|  48.0k|            get_ctx().advance_to(*r);
 1967|  48.0k|        }
 1968|   109k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   141k|    {
 1944|   141k|        return parse_ctx.next_arg_id();
 1945|   141k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    282|    {
 1948|    282|        parse_ctx.check_arg_id(id);
 1949|    282|        return id;
 1950|    282|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  32.0k|    {
 1985|  32.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  32.0k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  32.0k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 32.0k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  32.0k|        auto specs = detail::format_specs{};
 1998|  32.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  32.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  32.0k|            arg.type()};
 2001|       |
 2002|  32.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  32.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.09k, False: 29.9k]
  |  Branch (2003:29): [True: 678, False: 29.2k]
  ------------------
 2004|  2.77k|            SCN_UNLIKELY_ATTR
 2005|  2.77k|            on_error("Missing '}' in format string");
 2006|  2.77k|            return parse_ctx.begin();
 2007|  2.77k|        }
 2008|  29.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214, False: 29.0k]
  |  |  ------------------
  ------------------
 2009|    214|            return parse_ctx.begin();
 2010|    214|        }
 2011|  29.0k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  29.0k|        on_visit_scan_arg(
 2014|  29.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  29.0k|                                           get_ctx().locale()},
 2016|  29.0k|            arg);
 2017|  29.0k|        return parse_ctx.begin();
 2018|  29.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  32.0k|    {
 1701|  32.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  29.0k|    {
 1956|  29.0k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 136, False: 28.9k]
  |  Branch (1956:23): [True: 0, False: 28.9k]
  ------------------
 1957|    136|            SCN_UNLIKELY_ATTR
 1958|    136|            return;
 1959|    136|        }
 1960|       |
 1961|  28.9k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  28.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.2k, False: 1.61k]
  |  |  ------------------
  ------------------
 1963|  27.2k|            on_error(r.error());
 1964|  27.2k|        }
 1965|  1.61k|        else {
 1966|  1.61k|            get_ctx().advance_to(*r);
 1967|  1.61k|        }
 1968|  28.9k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  5.85k|{
 1363|  5.85k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  5.85k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  5.85k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  5.85k|            std::u32string tmp;
 1368|  5.85k|            transcode_to_string_impl_to32(src, tmp);
 1369|  5.85k|            return transcode_to_string_impl_32to16<false>(
 1370|  5.85k|                std::u32string_view{tmp}, dest);
 1371|  5.85k|        }
 1372|  5.85k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  5.85k|            return transcode_to_string_impl_to32(src, dest);
 1374|  5.85k|        }
 1375|  5.85k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  5.85k|{
 1256|  5.85k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  5.85k|    auto it = src.begin();
 1259|  1.25M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.25M, False: 5.85k]
  ------------------
 1260|  1.25M|        auto res = get_next_code_point(
 1261|  1.25M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.25M|                                                                 src.end()));
 1263|  1.25M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.5k, False: 1.21M]
  |  |  ------------------
  ------------------
 1264|  36.5k|            dest.push_back(DestCharT{0xfffd});
 1265|  36.5k|        }
 1266|  1.21M|        else {
 1267|  1.21M|            dest.push_back(res.value);
 1268|  1.21M|        }
 1269|  1.25M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.25M|    }
 1271|  5.85k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.39M|{
 1169|  1.39M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.39M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.39M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.8k, False: 1.36M]
  |  |  ------------------
  ------------------
 1173|  30.8k|        return {get_start_for_next_code_point(input),
 1174|  30.8k|                detail::invalid_code_point};
 1175|  30.8k|    }
 1176|  1.36M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.11k, False: 1.36M]
  |  |  ------------------
  ------------------
 1177|  1.11k|        return {input.end(), detail::invalid_code_point};
 1178|  1.11k|    }
 1179|       |
 1180|  1.36M|    return {input.begin() + len,
 1181|  1.36M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.36M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  30.8k|{
 1155|  30.8k|    auto it = input.begin();
 1156|   188k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 187k, False: 1.43k]
  ------------------
 1157|   187k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 29.4k, False: 157k]
  ------------------
 1158|  29.4k|            break;
 1159|  29.4k|        }
 1160|   187k|    }
 1161|  30.8k|    return it;
 1162|  30.8k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|   257k|    {
  809|   257k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   257k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|   257k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  87.3k|    {
  823|  87.3k|        return a.m_code == b.m_code;
  824|  87.3k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  51.7k|    {
 2931|  51.7k|        SCN_UNLIKELY_ATTR
 2932|  51.7k|        m_msg = msg;
 2933|  51.7k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  86.4k|    {
 2936|  86.4k|        return m_msg == nullptr;
 2937|  86.4k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.06k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   654k|    {
 4990|   654k|        on_charset_range(cp, cp + 1);
 4991|   654k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   657k|    {
 4995|   657k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 395k, False: 261k]
  ------------------
 4996|   395k|            return;
 4997|   395k|        }
 4998|       |
 4999|  47.9M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 47.9M, False: 259k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  47.9M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 138, False: 47.9M]
  ------------------
 5002|    138|                elem.first = begin;
 5003|    138|                return;
 5004|    138|            }
 5005|       |
 5006|  47.9M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 2.19k, False: 47.9M]
  ------------------
 5007|  2.19k|                elem.second = end;
 5008|  2.19k|                return;
 5009|  2.19k|            }
 5010|  47.9M|        }
 5011|       |
 5012|   259k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   259k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    366|    {
 5017|       |        // no-op
 5018|    366|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   664k|    {
 5032|   664k|        return static_cast<bool>(err);
 5033|   664k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.30k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  56.5k|{
  458|  56.5k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  56.5k|        static_cast<unsigned char>(ch))];
  460|  56.5k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   483k|{
  469|   483k|    return static_cast<unsigned char>(ch) <= 127;
  470|   483k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|    960|{
  474|    960|#if WCHAR_MIN < 0
  475|    960|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 960, False: 0]
  |  Branch (475:23): [True: 960, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|    960|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   524k|{
  483|   524k|    return cp <= 127;
  484|   524k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  37.8k|{
  539|  37.8k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  37.8k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|   363k|{
  784|   363k|    return e != eof_error::good;
  785|   363k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    112|{
  798|    112|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    112|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    112|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    708|{
  845|    708|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    708|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    708|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    708|    return parse_error::eof;
  847|    708|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  15.8k|{
  854|  15.8k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 15.8k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  15.8k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 80, False: 15.7k]
  ------------------
  859|     80|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     80|    }
  861|       |
  862|  15.7k|    return scan_error{code, msg};
  863|  15.8k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  15.8k|{
  868|  15.8k|    return [code, msg](parse_error err) {
  869|  15.8k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  15.8k|    };
  871|  15.8k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   432M|{
 1200|       |    // Pattern_White_Space property
 1201|   432M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 831k, False: 431M]
  |  Branch (1201:27): [True: 142k, False: 689k]
  ------------------
 1202|   432M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 75.1k, False: 432M]
  ------------------
 1203|   432M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 7.23k, False: 432M]
  ------------------
 1204|   432M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 1.08k, False: 432M]
  ------------------
 1205|   432M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 4.91k, False: 432M]
  ------------------
 1206|   432M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.17k, False: 432M]
  ------------------
 1207|   432M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 74, False: 432M]
  ------------------
 1208|   432M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.75k|{
 2220|  3.75k|    unsigned char running_diff{0};
 2221|  13.1k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.38k, False: 3.75k]
  ------------------
 2222|  9.38k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.38k|    }
 2224|  3.75k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.75k]
  |  Branch (2224:33): [True: 0, False: 3.75k]
  ------------------
 2225|  3.75k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   192k|{
 2303|   192k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 23.1k, False: 169k]
  ------------------
 2304|   192k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 354, False: 22.7k]
  ------------------
 2305|  23.1k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 22.6k]
  ------------------
 2306|  23.1k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 22.6k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  23.1k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 17.7k, False: 4.84k]
  |  Branch (2308:27): [True: 2.96k, False: 14.8k]
  |  Branch (2308:43): [True: 2.89k, False: 72]
  ------------------
 2309|  23.1k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 14.8k, False: 4.91k]
  |  Branch (2309:27): [True: 274, False: 14.5k]
  ------------------
 2310|  23.1k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 14.4k, False: 4.96k]
  |  Branch (2310:27): [True: 108, False: 14.3k]
  ------------------
 2311|  23.1k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 14.3k, False: 4.96k]
  |  Branch (2311:27): [True: 90, False: 14.2k]
  ------------------
 2312|  23.1k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 14.2k, False: 4.96k]
  |  Branch (2312:27): [True: 212, False: 14.0k]
  ------------------
 2313|  23.1k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 14.0k, False: 4.96k]
  |  Branch (2313:27): [True: 72, False: 14.0k]
  ------------------
 2314|  23.1k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 14.0k, False: 4.96k]
  |  Branch (2314:27): [True: 78, False: 13.9k]
  ------------------
 2315|  23.1k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 13.4k, False: 5.40k]
  |  Branch (2315:28): [True: 84, False: 13.4k]
  ------------------
 2316|  23.1k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 13.4k, False: 5.40k]
  |  Branch (2316:28): [True: 434, False: 12.9k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  23.1k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 13.1k, False: 5.20k]
  |  Branch (2318:28): [True: 126, False: 13.0k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  23.1k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 13.0k, False: 5.20k]
  |  Branch (2320:28): [True: 72, False: 12.9k]
  ------------------
 2321|  4.94k|        return 2;
 2322|  4.94k|    }
 2323|   187k|    return 1;
 2324|   192k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   143k|{
 2328|   143k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   143k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    172|{
 2343|    172|    return calculate_text_width_for_fmt_v10(cp);
 2344|    172|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  97.4k|{
 3123|  97.4k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  97.4k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  88.9k|{
 3127|  88.9k|#if WCHAR_MIN < 0
 3128|  88.9k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 88.9k, False: 0]
  |  Branch (3128:20): [True: 88.9k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  88.9k|        return char_to_int(static_cast<char>(ch));
 3133|  88.9k|    }
 3134|      0|    return 255;
 3135|  88.9k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  19.3k|{
 4271|  19.3k|    std::regex_constants::syntax_option_type result{};
 4272|  19.3k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 492, False: 18.8k]
  ------------------
 4273|    492|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    492|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    492|    }
 4281|  19.3k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 19.3k]
  ------------------
 4282|  19.3k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  19.3k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 2.28k, False: 17.0k]
  ------------------
 4288|  2.28k|        result |= std::regex_constants::icase;
 4289|  2.28k|    }
 4290|  19.3k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 18, False: 19.3k]
  ------------------
 4291|     18|        result |= std::regex_constants::nosubs;
 4292|     18|    }
 4293|  19.3k|    return result;
 4294|  19.3k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  1.77k|{
 4638|  1.77k|    std::string result{pattern};
 4639|  12.3k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 10.5k, False: 1.77k]
  ------------------
 4640|  10.5k|        result.replace(n, 2, "/");
 4641|  10.5k|        ++n;
 4642|  10.5k|    }
 4643|  1.77k|    return result;
 4644|  1.77k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    168|{
 4647|    168|    std::wstring result{pattern};
 4648|    948|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 780, False: 168]
  ------------------
 4649|    780|        result.replace(n, 2, L"/");
 4650|    780|        ++n;
 4651|    780|    }
 4652|    168|    return result;
 4653|    168|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  8.05k|{
 6008|  8.05k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 2.07k, False: 5.98k]
  ------------------
 6009|  2.07k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 998, False: 1.07k]
  ------------------
 6010|    998|            return {scan_error::invalid_scanned_value,
 6011|    998|                    "Scanned value too narrow, width did not exceed what "
 6012|    998|                    "was specified in the format string"};
 6013|    998|        }
 6014|  2.07k|    }
 6015|  7.05k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.74k, False: 5.31k]
  ------------------
 6016|  1.74k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 66, False: 1.68k]
  ------------------
 6017|     66|            return {scan_error::invalid_scanned_value,
 6018|     66|                    "Scanned value too wide, width exceeded the specified "
 6019|     66|                    "precision"};
 6020|     66|        }
 6021|  1.74k|    }
 6022|  6.99k|    return {};
 6023|  7.05k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  55.5k|    {
  304|  55.5k|        ranges::advance(x, n);
  305|  55.5k|        return x;
  306|  55.5k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  55.5k|    {
  268|  55.5k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  55.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   111k|    {
  151|   111k|        i += n;
  152|   111k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  75.1k|    {
  108|  75.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  75.1k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  75.1k|    {
   87|  75.1k|        return s - i;
   88|  75.1k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  76.0k|    {
  304|  76.0k|        ranges::advance(x, n);
  305|  76.0k|        return x;
  306|  76.0k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  76.0k|    {
  268|  76.0k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  76.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  76.0k|    {
  151|  76.0k|        i += n;
  152|  76.0k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.55k|    {
  108|  2.55k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.55k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.55k|    {
   87|  2.55k|        return s - i;
   88|  2.55k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  6.37k|    {
 5624|  6.37k|        reader_error_handler eh{};
 5625|  6.37k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  6.37k|            detail::check_code_point_type_specs(specs, eh);
 5627|  6.37k|        }
 5628|  6.37k|        else {
 5629|  6.37k|            detail::check_char_type_specs(specs, eh);
 5630|  6.37k|        }
 5631|  6.37k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.82k, False: 548]
  |  |  ------------------
  ------------------
 5632|  5.82k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  5.82k|        }
 5634|    548|        return {};
 5635|  6.37k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  27.5k|    {
  763|  27.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  27.5k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  4.42k|    {
  754|  4.42k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  7.95k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.95k|              cvref<T> obj = *get<T>(fn);
  745|  7.95k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.95k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.95k|              }
  748|  7.95k|              else {
  749|  7.95k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.95k|              }
  751|  7.95k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  7.95k|    {
  684|  7.95k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.95k|            return static_cast<T*>(s.m_cp);
  686|  7.95k|        }
  687|  7.95k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.95k|            return static_cast<T*>(s.m_p);
  689|  7.95k|        }
  690|  7.95k|        else {
  691|  7.95k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.95k|        }
  693|  7.95k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  4.42k|        {
  662|  4.42k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.92M|    {
  763|  1.92M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.92M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   289k|    {
  754|   289k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   878k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   878k|              cvref<T> obj = *get<T>(fn);
  745|   878k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   878k|                  obj(static_cast<decltype(args)>(args)...);
  747|   878k|              }
  748|   878k|              else {
  749|   878k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   878k|              }
  751|   878k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   878k|    {
  684|   878k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   878k|            return static_cast<T*>(s.m_cp);
  686|   878k|        }
  687|   878k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   878k|            return static_cast<T*>(s.m_p);
  689|   878k|        }
  690|   878k|        else {
  691|   878k|            return reinterpret_cast<T*>(s.m_fp);
  692|   878k|        }
  693|   878k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|   289k|        {
  662|   289k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.71k|    {
 5619|  1.71k|        return false;
 5620|  1.71k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  15.8k|    return [code, msg](parse_error err) {
  869|  15.8k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  15.8k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     74|    {
 1780|     74|        auto stdloc = loc.get<std::locale>();
 1781|     74|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     74|        grouping = numpunct.grouping();
 1783|     74|        thousands_sep =
 1784|     74|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 74]
  ------------------
 1785|     74|        decimal_point = numpunct.decimal_point();
 1786|     74|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     92|{
 1717|     92|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 92, False: 0]
  ------------------
 1718|     92|        return std::use_facet<Facet>(stdloc);
 1719|     92|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     92|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  32.1k|{
 2349|  32.1k|    size_t count{0};
 2350|  32.1k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  32.1k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  32.1k|    });
 2353|  32.1k|    return count;
 2354|  32.1k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  32.1k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  32.1k|    auto it = input.begin();
 1448|  75.5k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 43.4k, False: 32.1k]
  ------------------
 1449|  43.4k|        auto res = get_next_code_point(
 1450|  43.4k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  43.4k|        cb(res.value);
 1452|  43.4k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  43.4k|    }
 1454|  32.1k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  48.8k|    {
  763|  48.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  48.8k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  32.1k|    {
  754|  32.1k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  43.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.4k|              cvref<T> obj = *get<T>(fn);
  745|  43.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  43.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.4k|              }
  748|  43.4k|              else {
  749|  43.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.4k|              }
  751|  43.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  43.4k|    {
  684|  43.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  43.4k|            return static_cast<T*>(s.m_cp);
  686|  43.4k|        }
  687|  43.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  43.4k|            return static_cast<T*>(s.m_p);
  689|  43.4k|        }
  690|  43.4k|        else {
  691|  43.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  43.4k|        }
  693|  43.4k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  43.4k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  43.4k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  43.4k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  32.1k|        {
  662|  32.1k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.98k|    {
 1582|  3.98k|        return m_view;
 1583|  3.98k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.26k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  2.67k|    {
 2421|  2.67k|        return m_multibyte_left;
 2422|  2.67k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   261k|    {
 2426|   261k|        return *m_current;
 2427|   261k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   225k|    {
 2435|   225k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   225k|        _increment_current();
 2437|   225k|        return *this;
 2438|   225k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   225k|    {
 2668|   225k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 132k, False: 93.3k]
  ------------------
 2669|   132k|            auto cplen = _get_cp_length_at_current();
 2670|   132k|            m_multibyte_left = cplen - 1;
 2671|   132k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   132k|        }
 2673|  93.3k|        else {
 2674|  93.3k|            --m_multibyte_left;
 2675|  93.3k|        }
 2676|       |
 2677|   225k|        ++m_current;
 2678|   225k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   132k|    {
 2639|   132k|        return static_cast<difference_type>(
 2640|   132k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   132k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   132k|    {
 2645|   132k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 868, False: 131k]
  |  |  ------------------
  ------------------
 2646|    868|            return 0;
 2647|    868|        }
 2648|       |
 2649|   131k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 102k, False: 29.3k]
  ------------------
 2650|   102k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   102k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   102k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   102k|        }
 2654|       |
 2655|  29.3k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  29.3k|                                           cplen);
 2657|  29.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362, False: 29.0k]
  |  |  ------------------
  ------------------
 2658|    362|            return 0;
 2659|    362|        }
 2660|       |
 2661|  29.0k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  29.0k|        return static_cast<difference_type>(
 2663|  29.0k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  29.3k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  31.5k|{
 1857|  31.5k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  31.5k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  31.5k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  31.5k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 470, False: 31.0k]
  ------------------
 1862|    470|            return unexpected(eof_error::eof);
 1863|    470|        }
 1864|       |
 1865|  31.0k|        return ranges::next(range.begin(), count);
 1866|  31.5k|    }
 1867|  31.5k|    else {
 1868|  31.5k|        auto it = range.begin();
 1869|  31.5k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  31.5k|            return ranges::next(it, count);
 1871|  31.5k|        }
 1872|       |
 1873|  31.5k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  31.5k|            if (it == range.end()) {
 1875|  31.5k|                return unexpected(eof_error::eof);
 1876|  31.5k|            }
 1877|  31.5k|        }
 1878|       |
 1879|  31.5k|        return it;
 1880|  31.5k|    }
 1881|  31.5k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   126k|    {
 2531|   126k|        return !(a == b);
 2532|   126k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   131k|    {
 2523|   131k|        return a.m_current == b.m_current;
 2524|   131k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  7.84k|    {
 2430|  7.84k|        return *m_current;
 2431|  7.84k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.33k|    {
  268|  1.33k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.33k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.33k|    {
  161|  1.33k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.33k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.33k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.33k|        else {
  169|  1.33k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.33k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.33k|        }
  173|  1.33k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|  76.4k|    {
 1890|  76.4k|        return !codepoint.empty();
 1891|  76.4k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.78k|{
 1683|  1.78k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.78k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.78k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.78k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.78k|    }
 1688|  1.78k|    else {
 1689|  1.78k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.78k|    }
 1691|  1.78k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.78k|    {
 1537|  1.78k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.78k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.78k|    {
 1621|  1.78k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.78k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.78k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.78k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.78k|            m_storage.reset();
 1627|  1.78k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.78k|        }
 1629|  1.78k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.78k|                                          std::basic_string<CharT>>) {
 1631|  1.78k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.78k|            m_view = string_view_type{*m_storage};
 1633|  1.78k|        }
 1634|  1.78k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.78k|                                          typename detail::basic_scan_buffer<
 1636|  1.78k|                                              value_t>::forward_iterator> &&
 1637|  1.78k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.78k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.78k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.78k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.78k|                             detail::to_address(end_seg.end()))) {
 1642|  1.78k|                auto& str = m_storage.emplace();
 1643|  1.78k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.78k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.78k|                m_view = string_view_type{str};
 1646|  1.78k|                return;
 1647|  1.78k|            }
 1648|       |
 1649|  1.78k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.78k|                                                            end_seg.data());
 1651|  1.78k|            m_storage.reset();
 1652|  1.78k|        }
 1653|  1.78k|        else {
 1654|  1.78k|            auto& str = m_storage.emplace();
 1655|  1.78k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.78k|                str.reserve(range.size());
 1657|  1.78k|            }
 1658|  1.78k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.78k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.78k|                          std::back_inserter(str));
 1661|  1.78k|            }
 1662|  1.78k|            else {
 1663|  1.78k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.78k|                     ++it) {
 1665|  1.78k|                    str.push_back(*it);
 1666|  1.78k|                }
 1667|  1.78k|            }
 1668|  1.78k|            m_view = string_view_type{str};
 1669|  1.78k|        }
 1670|  1.78k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  22.6k|    {
 2382|  22.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   233k|    {
 2413|   233k|        return m_current;
 2414|   233k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  10.0k|    {
 2832|  10.0k|        return take_width_view{r, n};
 2833|  10.0k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  10.0k|    {
 2801|  10.0k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  10.0k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    312|    {
 5663|    312|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 280, False: 32]
  ------------------
 5664|    312|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    280|            return read_default(range, value, loc);
 5666|    280|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    312|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    280|    {
 5645|    280|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    280|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    280|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    280|            return code_unit_reader<char>{}.read(range, value);
 5648|    280|        }
 5649|    280|        else {
 5650|    280|            SCN_UNUSED(range);
 5651|    280|            SCN_EXPECT(false);
 5652|    280|            SCN_UNREACHABLE;
 5653|    280|        }
 5654|    280|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    280|    {
 5564|    280|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    280|        ch = *range.begin();
 5566|    280|        return it;
 5567|    280|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  2.10k|{
 1846|  2.10k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.10k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.10k|    return ranges::next(range.begin());
 1851|  2.10k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.10k|{
  950|  2.10k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.10k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.10k|    return eof_error::good;
  954|  2.10k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.10k|{
  944|  2.10k|    return is_range_eof(r.begin(), r.end());
  945|  2.10k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  78.5k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  78.5k|    {
  937|  78.5k|        return begin == end;
  938|  78.5k|    }
  939|  78.5k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   225k|        {
 2770|   225k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 2.67k, False: 223k]
  |  Branch (2770:39): [True: 824, False: 1.85k]
  ------------------
 2771|   225k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.13k, False: 223k]
  ------------------
 2772|   225k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   160k|    {
 2816|   160k|        return sentinel<true>{m_base.get().end()};
 2817|   160k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   205k|    {
 2717|   205k|        return view;
 2718|   205k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   160k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.14k|    {
  296|  2.14k|        ++x;
  297|  2.14k|        return x;
  298|  2.14k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  22.6k|    {
 2810|  22.6k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  22.6k|                                      m_count};
 2812|  22.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    914|{
 3326|    914|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 914]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    914|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    914|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    914|        parse_integer_base_prefix(
 3331|    914|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    914|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 914]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    914|    else {
 3343|    914|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 914]
  |  Branch (3343:13): [True: 914, False: 0]
  ------------------
 3344|    914|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 914, False: 0]
  ------------------
 3345|    914|            digits_begin_it = base_prefix_begin_it;
 3346|    914|        }
 3347|    914|    }
 3348|       |
 3349|    914|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 914, False: 0]
  ------------------
 3350|    914|        sign = sign_type::plus_sign;
 3351|    914|    }
 3352|    914|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    914|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    914|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.21k|{
 3141|  1.21k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.21k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.21k, False: 0]
  ------------------
 3143|  1.21k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.21k, False: 0]
  ------------------
 3144|  1.21k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.21k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.21k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.21k|{
 2272|  1.21k|    auto it = read_code_unit(range);
 2273|  1.21k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.43k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.43k, False: 1.21k]
  ------------------
 2278|  2.43k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.43k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.43k|    }
 2282|       |
 2283|  1.21k|    return unexpected(parse_error::error);
 2284|  1.21k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    914|{
 3293|    914|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 900]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 900]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    292|        case 16:
  ------------------
  |  Branch (3307:9): [True: 292, False: 622]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    292|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    292|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 894]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    574|        default:
  ------------------
  |  Branch (3316:9): [True: 574, False: 340]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    574|            return {range.begin(), base, false};
 3319|    914|    }
 3320|    914|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    320|{
 2291|    320|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 320, False: 0]
  ------------------
 2292|    320|        return range.begin();
 2293|    320|    }
 2294|      0|    return *result;
 2295|    320|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.27k|{
 2231|  1.27k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.27k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.27k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.27k|        if (range.size() < str.size()) {
 2236|  1.27k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.27k|        }
 2238|  1.27k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.27k|            return unexpected(parse_error::error);
 2240|  1.27k|        }
 2241|  1.27k|        return ranges::next(range.begin(), str.size());
 2242|  1.27k|    }
 2243|  1.27k|    else {
 2244|  1.27k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.27k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.27k|                return ch;
 2247|  1.27k|            }
 2248|  1.27k|            return static_cast<char_type>(ch +
 2249|  1.27k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.27k|        };
 2251|       |
 2252|  1.27k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    190|    }                                                  \
  |  |  |  | 3671|  1.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.08k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.08k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.08k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.08k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.08k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.08k|                    return ascii_tolower(a) ==
 2259|  1.08k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.08k|                }))) {
 2261|  1.08k|            return unexpected(parse_error::error);
 2262|  1.08k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.08k|    }
 2266|  1.27k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  2.54k|{
 1857|  2.54k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  2.54k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  2.54k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  2.54k|        if (sz < count) {
 1862|  2.54k|            return unexpected(eof_error::eof);
 1863|  2.54k|        }
 1864|       |
 1865|  2.54k|        return ranges::next(range.begin(), count);
 1866|  2.54k|    }
 1867|  2.54k|    else {
 1868|  2.54k|        auto it = range.begin();
 1869|  2.54k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 2.54k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  8.92k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 6.60k, False: 2.32k]
  ------------------
 1874|  6.60k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 220, False: 6.38k]
  ------------------
 1875|    220|                return unexpected(eof_error::eof);
 1876|    220|            }
 1877|  6.60k|        }
 1878|       |
 1879|  2.32k|        return it;
 1880|  2.54k|    }
 1881|  2.54k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  2.54k|{
 1095|  2.54k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  2.54k|        return r.size();
 1097|  2.54k|    }
 1098|  2.54k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  2.54k|                           ranges::const_iterator_t<Range>,
 1100|  2.54k|                           typename detail::basic_scan_buffer<
 1101|  2.54k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  2.54k|        if constexpr (ranges::common_range<Range>) {
 1103|  2.54k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  2.54k|        }
 1105|  2.54k|        else {
 1106|  2.54k|            if (r.begin().stores_parent()) {
 1107|  2.54k|                return static_cast<size_t>(
 1108|  2.54k|                    r.begin().parent()->chars_available() -
 1109|  2.54k|                    r.begin().position());
 1110|  2.54k|            }
 1111|  2.54k|            return r.begin().contiguous_segment().size();
 1112|  2.54k|        }
 1113|  2.54k|    }
 1114|  2.54k|    else {
 1115|  2.54k|        return 0;
 1116|  2.54k|    }
 1117|  2.54k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.08k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.08k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 46, False: 1.03k]
  |  Branch (2245:29): [True: 1.03k, False: 0]
  ------------------
 2246|  1.08k|                return ch;
 2247|  1.08k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.08k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  76.4k|{
  944|  76.4k|    return is_range_eof(r.begin(), r.end());
  945|  76.4k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    312|{
 3251|    312|    return read_matching_string_classic_nocase(range, "0x");
 3252|    312|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    898|{
 3360|    898|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    898|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    898|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    898|            return unexpected_scan_error(
 3365|    898|                scan_error::invalid_scanned_value,
 3366|    898|                "Failed to parse integer: No digits found");
 3367|    898|        }
 3368|    898|        return range.end();
 3369|    898|    }
 3370|    898|    else {
 3371|    898|        return read_while1_code_unit(range,
 3372|    898|                                     [&](char_type ch) noexcept {
 3373|    898|                                         return char_to_int(ch) < base;
 3374|    898|                                     })
 3375|    898|            .transform_error(map_parse_error_to_scan_error(
 3376|    898|                scan_error::invalid_scanned_value,
 3377|    898|                "Failed to parse integer: No digits found"));
 3378|    898|    }
 3379|    898|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.20k|{
 1996|  1.20k|    auto it = read_while_code_unit(range, pred);
 1997|  1.20k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.20k, False: 0]
  ------------------
 1998|  1.20k|        return unexpected(parse_error::error);
 1999|  1.20k|    }
 2000|      0|    return it;
 2001|  1.20k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.20k|{
 1976|  1.20k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.20k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.20k|{
 1957|  1.20k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.20k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.20k|    }
 1960|  1.20k|    else {
 1961|  1.20k|        auto first = range.begin();
 1962|  1.20k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.20k, False: 0]
  ------------------
 1963|  1.20k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.20k, False: 0]
  ------------------
 1964|  1.20k|                return first;
 1965|  1.20k|            }
 1966|  1.20k|        }
 1967|      0|        return first;
 1968|  1.20k|    }
 1969|  1.20k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   125k|        {
 2781|   125k|            return !(y == x);
 2782|   125k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    898|    {
  754|    898|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    898|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    898|              cvref<T> obj = *get<T>(fn);
  745|    898|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    898|                  obj(static_cast<decltype(args)>(args)...);
  747|    898|              }
  748|    898|              else {
  749|    898|                  return obj(static_cast<decltype(args)>(args)...);
  750|    898|              }
  751|    898|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    898|    {
  684|    898|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    898|            return static_cast<T*>(s.m_cp);
  686|    898|        }
  687|    898|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    898|            return static_cast<T*>(s.m_p);
  689|    898|        }
  690|    898|        else {
  691|    898|            return reinterpret_cast<T*>(s.m_fp);
  692|    898|        }
  693|    898|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    898|                                     [&](char_type ch) noexcept {
 3373|    898|                                         return char_to_int(ch) < base;
 3374|    898|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    898|        {
  662|    898|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   228k|    {
 2417|   228k|        return m_count;
 2418|   228k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    230|    {
 5663|    230|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 212, False: 18]
  ------------------
 5664|    230|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 18]
  ------------------
 5665|    212|            return read_default(range, value, loc);
 5666|    212|        }
 5667|       |
 5668|     18|        reader_impl_for_int<CharT> reader{};
 5669|     18|        signed char tmp_value{};
 5670|     18|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     18|        value = static_cast<signed char>(value);
 5672|     18|        return ret;
 5673|    230|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    888|    {
 5645|    888|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    888|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    888|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    888|            return code_unit_reader<char>{}.read(range, value);
 5648|    888|        }
 5649|    888|        else {
 5650|    888|            SCN_UNUSED(range);
 5651|    888|            SCN_EXPECT(false);
 5652|    888|            SCN_UNREACHABLE;
 5653|    888|        }
 5654|    888|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    888|    {
 5564|    888|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    888|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    888|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    888|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 888]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    888|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    888|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    888|        ch = *range.begin();
 5566|    888|        return it;
 5567|    888|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.47k|{
 1846|  6.47k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.47k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.47k|    return ranges::next(range.begin());
 1851|  6.47k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  22.3k|{
  950|  22.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.3k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.3k|    return eof_error::good;
  954|  22.3k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   485k|{
  944|   485k|    return is_range_eof(r.begin(), r.end());
  945|   485k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   535k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   535k|    {
  937|   535k|        return begin == end;
  938|   535k|    }
  939|   535k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  45.2k|    {
  296|  45.2k|        ++x;
  297|  45.2k|        return x;
  298|  45.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     18|    {
 3539|     18|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     18|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     18|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 18]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     18|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 18]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     18|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3565|     18|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     18|                    parse_integer_digits_without_thsep(
 3567|     18|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     18|                        prefix_result.parsed_base));
 3569|       |
 3570|     18|            auto buf = make_contiguous_buffer(
 3571|     18|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     18|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     18|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.75k|{
 3326|  2.75k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.75k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.75k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.75k|        parse_integer_base_prefix(
 3331|  2.75k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.75k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.75k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.75k|    else {
 3343|  2.75k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.75k]
  ------------------
 3344|  2.75k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.75k, False: 0]
  ------------------
 3345|  2.75k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.75k|        }
 3347|  2.75k|    }
 3348|       |
 3349|  2.75k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.75k, False: 0]
  ------------------
 3350|  2.75k|        sign = sign_type::plus_sign;
 3351|  2.75k|    }
 3352|  2.75k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.75k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.75k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.69k|{
 3141|  3.69k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.69k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.69k, False: 0]
  ------------------
 3143|  3.69k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.69k, False: 0]
  ------------------
 3144|  3.69k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.69k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.69k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.69k|{
 2272|  3.69k|    auto it = read_code_unit(range);
 2273|  3.69k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.69k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.38k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.38k, False: 3.69k]
  ------------------
 2278|  7.38k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.38k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.38k|    }
 2282|       |
 2283|  3.69k|    return unexpected(parse_error::error);
 2284|  3.69k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.75k|{
 3293|  2.75k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.74k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     38|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 38, False: 2.71k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     38|            bool zero_parsed = false;
 3302|     38|            auto it = apply_opt(
 3303|     38|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     38|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    898|        case 16:
  ------------------
  |  Branch (3307:9): [True: 898, False: 1.85k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    898|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    898|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.74k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.80k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.80k, False: 954]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.80k|            return {range.begin(), base, false};
 3319|  2.75k|    }
 3320|  2.75k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    942|{
 2291|    942|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 942, False: 0]
  ------------------
 2292|    942|        return range.begin();
 2293|    942|    }
 2294|      0|    return *result;
 2295|    942|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.76k|{
 2231|  3.76k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.76k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.76k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.76k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.75k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.75k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.75k, False: 0]
  ------------------
 2239|  3.75k|            return unexpected(parse_error::error);
 2240|  3.75k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.75k|    }
 2243|  3.76k|    else {
 2244|  3.76k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.76k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.76k|                return ch;
 2247|  3.76k|            }
 2248|  3.76k|            return static_cast<char_type>(ch +
 2249|  3.76k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.76k|        };
 2251|       |
 2252|  3.76k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.76k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.76k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.76k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.76k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.76k|                    return ascii_tolower(a) ==
 2259|  3.76k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.76k|                }))) {
 2261|  3.76k|            return unexpected(parse_error::error);
 2262|  3.76k|        }
 2263|       |
 2264|  3.76k|        return it;
 2265|  3.76k|    }
 2266|  3.76k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     50|{
 3258|     50|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 50]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     50|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 50]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     50|    return unexpected(parse_error::error);
 3268|     50|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.89k|{
 2146|  1.89k|    auto it = read_code_unit(range);
 2147|  1.89k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.89k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.89k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.89k|        return unexpected(parse_error::error);
 2154|  1.89k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.89k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    910|{
 3251|    910|    return read_matching_string_classic_nocase(range, "0x");
 3252|    910|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.72k|{
 3360|  2.72k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.72k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.72k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.72k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.72k|        return range.end();
 3369|  2.72k|    }
 3370|  2.72k|    else {
 3371|  2.72k|        return read_while1_code_unit(range,
 3372|  2.72k|                                     [&](char_type ch) noexcept {
 3373|  2.72k|                                         return char_to_int(ch) < base;
 3374|  2.72k|                                     })
 3375|  2.72k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.72k|                scan_error::invalid_scanned_value,
 3377|  2.72k|                "Failed to parse integer: No digits found"));
 3378|  2.72k|    }
 3379|  2.72k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     32|{
 3390|     32|    std::basic_string<CharT> output;
 3391|     32|    std::string thsep_indices;
 3392|     32|    auto it = range.begin();
 3393|     32|    bool digit_matched = false;
 3394|     32|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 32, False: 0]
  ------------------
 3395|     32|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 32]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     32|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 32, False: 0]
  ------------------
 3400|     32|            break;
 3401|     32|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     32|    }
 3407|     32|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3408|     32|        return unexpected_scan_error(
 3409|     32|            scan_error::invalid_scanned_value,
 3410|     32|            "Failed to parse integer: No digits found");
 3411|     32|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     32|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  14.0k|{
 1683|  14.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  14.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  14.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  14.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  14.0k|    }
 1688|  14.0k|    else {
 1689|  14.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  14.0k|    }
 1691|  14.0k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  14.0k|    {
 1490|  14.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  62.9k|    {
 1503|  62.9k|        return sv;
 1504|  62.9k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  2.50k|{
 5951|  2.50k|    using char_type = detail::char_t<Range>;
 5952|  2.50k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  2.50k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 2.26k, False: 240]
  ------------------
 5955|  2.26k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  2.26k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  2.26k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 2.14k, False: 124]
  ------------------
 5959|  2.14k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  2.14k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 130, False: 2.01k]
  ------------------
 5962|    130|                auto prefix_width =
 5963|    130|                    static_cast<std::ptrdiff_t>(
 5964|    130|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    130|                    ranges::distance(range.begin(), it);
 5966|    130|                return result_type{it, prefix_width};
 5967|    130|            }
 5968|  2.01k|            return result_type{it, 0};
 5969|  2.14k|        }
 5970|       |
 5971|    124|        auto max_width_view = take_width(range, max_width);
 5972|    124|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    124|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 124, False: 0]
  ------------------
 5975|    124|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    124|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    124|    }
 5979|       |
 5980|    240|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    240|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 108]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    108|    auto max_width_view = take_width(range, max_width);
 5994|    108|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    108|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 108, False: 0]
  ------------------
 5997|    108|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    108|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    108|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  2.35k|{
 1976|  2.35k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.35k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.60k|{
 1957|  2.60k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.60k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.60k|    }
 1960|  2.60k|    else {
 1961|  2.60k|        auto first = range.begin();
 1962|  2.60k|        for (; first != range.end(); ++first) {
 1963|  2.60k|            if (pred(*first)) {
 1964|  2.60k|                return first;
 1965|  2.60k|            }
 1966|  2.60k|        }
 1967|  2.60k|        return first;
 1968|  2.60k|    }
 1969|  2.60k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.26k|    {
  754|  2.26k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.69k|              cvref<T> obj = *get<T>(fn);
  745|  2.69k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.69k|              }
  748|  2.69k|              else {
  749|  2.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.69k|              }
  751|  2.69k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  2.69k|    {
  684|  2.69k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.69k|            return static_cast<T*>(s.m_cp);
  686|  2.69k|        }
  687|  2.69k|        else if constexpr (std::is_object_v<T>) {
  688|  2.69k|            return static_cast<T*>(s.m_p);
  689|  2.69k|        }
  690|  2.69k|        else {
  691|  2.69k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.69k|        }
  693|  2.69k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  2.69k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.26k|        {
  667|  2.26k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    262|{
 1976|    262|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    262|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    544|{
 1957|    544|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    544|        return std::find_if(range.begin(), range.end(), pred);
 1959|    544|    }
 1960|    544|    else {
 1961|    544|        auto first = range.begin();
 1962|  10.2k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 9.91k, False: 292]
  ------------------
 1963|  9.91k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 252, False: 9.66k]
  ------------------
 1964|    252|                return first;
 1965|    252|            }
 1966|  9.91k|        }
 1967|    292|        return first;
 1968|    544|    }
 1969|    544|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    108|{
 2037|    108|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    108|    auto it = range.begin();
 2040|    156|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 126, False: 30]
  ------------------
 2041|    126|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    126|                                           needle.size());
 2043|    126|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 30, False: 96]
  ------------------
 2044|     30|            return it;
 2045|     30|        }
 2046|     96|        static_assert(
 2047|     96|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     96|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 48, False: 48]
  ------------------
 2049|     48|            return it;
 2050|     48|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    498|{
 2951|    498|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 498]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    498|    return read_while_classic_space(range);
 2962|    498|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    498|{
 2117|    498|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    498|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    498|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    498|        auto buf = make_contiguous_buffer(range);
 2121|    498|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    498|        return ranges::next(range.begin(),
 2123|    498|                            ranges::distance(buf.view().begin(), it));
 2124|    498|    }
 2125|    498|    else {
 2126|    498|        auto it = range.begin();
 2127|       |
 2128|    498|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    498|            auto seg = get_contiguous_beginning(range);
 2130|    498|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    498|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 498]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    498|            ranges::advance(it, seg.size());
 2135|    498|        }
 2136|       |
 2137|    498|        return read_while_code_point(
 2138|    498|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    498|    }
 2140|    498|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.33k|{
 1039|  1.33k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.33k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.33k|        return r;
 1042|  1.33k|    }
 1043|  1.33k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.33k|                           ranges::const_iterator_t<Range>,
 1045|  1.33k|                           typename detail::basic_scan_buffer<
 1046|  1.33k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.33k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.33k|            auto seg = r.begin().contiguous_segment();
 1049|  1.33k|            auto dist =
 1050|  1.33k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.33k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.33k|        }
 1053|  1.33k|        else {
 1054|  1.33k|            return r.begin().contiguous_segment();
 1055|  1.33k|        }
 1056|  1.33k|    }
 1057|  1.33k|    else {
 1058|  1.33k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.33k|    }
 1060|  1.33k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    852|{
 2082|    852|    return read_until_code_point(range, std::not_fn(pred));
 2083|    852|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    966|{
 2061|    966|    auto it = range.begin();
 2062|  62.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 62.6k, False: 264]
  ------------------
 2063|  62.6k|        const auto val =
 2064|  62.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  62.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  62.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 60.8k, False: 1.73k]
  |  |  ------------------
  ------------------
 2066|  60.8k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  60.8k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  60.8k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 702, False: 60.1k]
  ------------------
 2069|    702|                return it;
 2070|    702|            }
 2071|  60.8k|        }
 2072|  61.9k|        it = val.iterator;
 2073|  61.9k|    }
 2074|       |
 2075|    264|    return it;
 2076|    966|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  76.4k|{
 1899|  76.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  76.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  76.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  76.4k|    auto it = range.begin();
 1903|  76.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  76.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 72.2k]
  |  |  ------------------
  ------------------
 1906|  4.15k|        ++it;
 1907|  4.15k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.15k|        return {it, {}};
 1909|  4.15k|    }
 1910|       |
 1911|  72.2k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 64.8k, False: 7.43k]
  ------------------
 1912|  64.8k|        ++it;
 1913|  64.8k|        return {it, string_type(1, *range.begin())};
 1914|  64.8k|    }
 1915|       |
 1916|  7.43k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  7.43k|    return {it, string_type{range.begin(), it}};
 1918|  72.2k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  4.15k|{
 1155|  4.15k|    auto it = input.begin();
 1156|  8.61k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 8.46k, False: 144]
  ------------------
 1157|  8.46k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.01k, False: 4.45k]
  ------------------
 1158|  4.01k|            break;
 1159|  4.01k|        }
 1160|  8.46k|    }
 1161|  4.15k|    return it;
 1162|  4.15k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  7.43k|    {
  283|  7.43k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  7.43k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  7.43k|    {
  227|  7.43k|        constexpr iter_difference_t<I> zero{0};
  228|  7.43k|        iter_difference_t<I> counter{0};
  229|       |
  230|  7.43k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 7.43k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  7.43k|        else {
  237|  23.6k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 16.2k, False: 7.34k]
  |  Branch (237:34): [True: 16.1k, False: 90]
  ------------------
  238|  16.1k|                ++i;
  239|  16.1k|                ++counter;
  240|  16.1k|            }
  241|  7.43k|        }
  242|       |
  243|  7.43k|        return counter;
  244|  7.43k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    498|    {
  754|    498|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  2.44k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.44k|              cvref<T> obj = *get<T>(fn);
  745|  2.44k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.44k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.44k|              }
  748|  2.44k|              else {
  749|  2.44k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.44k|              }
  751|  2.44k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  2.44k|    {
  684|  2.44k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.44k|            return static_cast<T*>(s.m_cp);
  686|  2.44k|        }
  687|  2.44k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.44k|            return static_cast<T*>(s.m_p);
  689|  2.44k|        }
  690|  2.44k|        else {
  691|  2.44k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.44k|        }
  693|  2.44k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  2.44k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    498|        {
  662|    498|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.25k|{
 2951|  7.25k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.05k, False: 204]
  ------------------
 2952|  7.05k|        auto it = read_while_classic_space(range);
 2953|  7.05k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.05k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.05k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.05k|        return it;
 2959|  7.05k|    }
 2960|       |
 2961|    204|    return read_while_classic_space(range);
 2962|  7.25k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  13.5k|{
 2117|  13.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  13.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  13.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  13.5k|        auto buf = make_contiguous_buffer(range);
 2121|  13.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  13.5k|        return ranges::next(range.begin(),
 2123|  13.5k|                            ranges::distance(buf.view().begin(), it));
 2124|  13.5k|    }
 2125|  13.5k|    else {
 2126|  13.5k|        auto it = range.begin();
 2127|       |
 2128|  13.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  13.5k|            auto seg = get_contiguous_beginning(range);
 2130|  13.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  13.5k|                seg_it != seg.end()) {
 2132|  13.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  13.5k|            }
 2134|  13.5k|            ranges::advance(it, seg.size());
 2135|  13.5k|        }
 2136|       |
 2137|  13.5k|        return read_while_code_point(
 2138|  13.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  13.5k|    }
 2140|  13.5k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  16.3k|{
 1683|  16.3k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  16.3k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  16.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  16.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  16.3k|    }
 1688|  16.3k|    else {
 1689|  16.3k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  16.3k|    }
 1691|  16.3k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  16.3k|    {
 1490|  16.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  12.8k|    {
 3040|  12.8k|        reader_error_handler eh{};
 3041|  12.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  12.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 1.14k]
  |  |  ------------------
  ------------------
 3043|  11.6k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  11.6k|        }
 3045|  1.14k|        return {};
 3046|  12.8k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  12.8k|    {
 3051|  12.8k|        return static_cast<Derived&>(*this);
 3052|  12.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  12.8k|    {
 3485|  12.8k|        detail::check_int_type_specs(specs, eh);
 3486|  12.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.49k|    {
 3035|  2.49k|        return true;
 3036|  2.49k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    304|    {
 3539|    304|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    304|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    304|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 304]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    304|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 304]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    304|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    304|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 296, False: 8]
  |  |  ------------------
  ------------------
 3565|    296|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 296, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    296|    }                                                  \
  |  |  |  | 3671|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    246|    {
 3539|    246|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    246|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    246|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 246]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    246|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 246]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    246|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    246|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230, False: 16]
  |  |  ------------------
  ------------------
 3565|    230|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    230|                    parse_integer_digits_without_thsep(
 3567|    230|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    230|                        prefix_result.parsed_base));
 3569|       |
 3570|    230|            auto buf = make_contiguous_buffer(
 3571|    230|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    230|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 230, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    230|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    230|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    230|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    230|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    230|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    230|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    304|    {
 3539|    304|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    304|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    304|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 304]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    304|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 304]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    304|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    304|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 296, False: 8]
  |  |  ------------------
  ------------------
 3565|    296|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 296, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    296|    }                                                  \
  |  |  |  | 3671|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    246|    {
 3539|    246|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    246|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    246|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 246]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    246|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 246]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    246|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    246|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230, False: 16]
  |  |  ------------------
  ------------------
 3565|    230|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    230|                    parse_integer_digits_without_thsep(
 3567|    230|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    230|                        prefix_result.parsed_base));
 3569|       |
 3570|    230|            auto buf = make_contiguous_buffer(
 3571|    230|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    230|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 230, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    230|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    230|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    230|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    230|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    230|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    230|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    274|    {
 3539|    274|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    274|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    274|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 274]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    274|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 274]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    274|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    274|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 274, False: 0]
  |  |  ------------------
  ------------------
 3565|    274|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    274|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    892|    {
 3539|    892|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    892|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    892|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 892]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    892|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 892]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    892|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    892|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 892, False: 0]
  |  |  ------------------
  ------------------
 3565|    892|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    892|                    parse_integer_digits_without_thsep(
 3567|    892|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    892|                        prefix_result.parsed_base));
 3569|       |
 3570|    892|            auto buf = make_contiguous_buffer(
 3571|    892|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    892|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 892, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    892|    }                                                  \
  |  |  |  | 3671|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    892|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  6.41k|    {
 3040|  6.41k|        reader_error_handler eh{};
 3041|  6.41k|        get_derived().check_specs_impl(specs, eh);
 3042|  6.41k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.82k, False: 588]
  |  |  ------------------
  ------------------
 3043|  5.82k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.82k|        }
 3045|    588|        return {};
 3046|  6.41k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  6.41k|    {
 3051|  6.41k|        return static_cast<Derived&>(*this);
 3052|  6.41k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  6.41k|    {
 4145|  6.41k|        detail::check_float_type_specs(specs, eh);
 4146|  6.41k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.26k|    {
 3035|  1.26k|        return true;
 3036|  1.26k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    564|    {
 4217|    564|        unsigned options{};
 4218|    564|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 26, False: 538]
  ------------------
 4219|     26|            options |= float_reader_base::allow_thsep;
 4220|     26|        }
 4221|       |
 4222|    564|        SCN_GCC_COMPAT_PUSH
 4223|    564|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    564|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 534]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 558]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     24|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 24, False: 540]
  ------------------
 4233|     24|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 6, False: 558]
  ------------------
 4236|      6|                return options | float_reader_base::allow_scientific |
 4237|      6|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    498|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 498, False: 66]
  ------------------
 4240|    498|                return options | float_reader_base::allow_scientific |
 4241|    498|                       float_reader_base::allow_fixed |
 4242|    498|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 564]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    564|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    564|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    564|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    564|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.24k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.48k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    912|    {
 4057|    912|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 912, False: 0]
  ------------------
 4058|    912|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 912, False: 0]
  ------------------
 4059|    912|            return;
 4060|    912|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    748|    {
 1587|    748|        return m_storage.has_value();
 1588|    748|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    374|    {
 1592|    374|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    374|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    374|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    374|        return *m_storage;
 1594|    374|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    302|    {
  763|    302|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    302|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    302|    {
 3705|    302|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    302|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    302|        auto it = sign_result.first;
 3708|    302|        m_sign = sign_result.second;
 3709|       |
 3710|    302|        auto digits_begin = it;
 3711|    302|        auto r = ranges::subrange{it, range.end()};
 3712|    302|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    302|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    302|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    302|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    302|                SCN_TRY_ASSIGN(
 3717|    302|                    it,
 3718|    302|                    do_read_source_impl(
 3719|    302|                        r,
 3720|    302|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    302|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    302|            }
 3723|    302|            else {
 3724|    302|                auto cb = [&](const auto& rr)
 3725|    302|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    302|                    auto res = read_all(rr);
 3727|    302|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    302|                        return unexpected_scan_error(
 3729|    302|                            scan_error::invalid_scanned_value,
 3730|    302|                            "Invalid float value");
 3731|    302|                    }
 3732|    302|                    return res;
 3733|    302|                };
 3734|    302|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    302|            }
 3736|    302|        }
 3737|    302|        else {
 3738|    302|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    302|    }                                                  \
  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    302|    {
 4000|    302|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    302|        const bool allowed_nonhex =
 4002|    302|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    302|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    302|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 302, False: 0]
  |  Branch (4005:45): [True: 0, False: 302]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    302|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 302]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    302|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 302, False: 0]
  |  Branch (4014:45): [True: 0, False: 302]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    302|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 302]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    302|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 286, False: 16]
  |  Branch (4021:28): [True: 6, False: 280]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    296|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 16, False: 280]
  |  Branch (4036:29): [True: 16, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     16|            m_kind = float_kind::generic;
 4040|     16|            return read_regular_float(range);
 4041|     16|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    280|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 280]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    280|        m_kind = float_kind::generic;
 4052|    280|        return read_regular(range);
 4053|    280|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    302|    {
 3811|    302|        auto it = range.begin();
 3812|    302|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 302, False: 0]
  ------------------
 3813|    302|            return unexpected(r.error());
 3814|    302|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    302|    {
 3834|    302|        auto it = range.begin();
 3835|    302|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 302, False: 0]
  ------------------
 3836|    302|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    302|                scan_error::invalid_scanned_value,
 3838|    302|                "Invalid floating-point NaN value"));
 3839|    302|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    286|    {
 3804|    286|        return read_matching_string_classic_nocase(range, "0x");
 3805|    286|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    296|    {
 3944|    296|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    296|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 284, False: 12]
  |  Branch (3945:50): [True: 0, False: 284]
  ------------------
 3946|       |
 3947|    296|        auto it = ranges::begin(range);
 3948|    296|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    296|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    296|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 296, False: 0]
  |  |  ------------------
  ------------------
 3952|    296|            return r.transform_error(
 3953|    296|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    296|                                              "Invalid floating-point value"));
 3955|    296|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    296|    {
 3774|    296|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  |  Branch (859:45): [True: 0, False: 296]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    296|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    296|        return read_while1_code_unit(
 3783|    296|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    296|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    296|    {
  754|    296|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    296|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    296|              cvref<T> obj = *get<T>(fn);
  745|    296|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    296|                  obj(static_cast<decltype(args)>(args)...);
  747|    296|              }
  748|    296|              else {
  749|    296|                  return obj(static_cast<decltype(args)>(args)...);
  750|    296|              }
  751|    296|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    296|    {
  684|    296|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    296|            return static_cast<T*>(s.m_cp);
  686|    296|        }
  687|    296|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    296|            return static_cast<T*>(s.m_p);
  689|    296|        }
  690|    296|        else {
  691|    296|            return reinterpret_cast<T*>(s.m_fp);
  692|    296|        }
  693|    296|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    296|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    296|        {
  662|    296|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    294|    {
 3665|    294|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    294|        return read_source_impl(range);
 3671|    294|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    938|    {
  763|    938|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    938|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    938|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     18|    {
 3679|     18|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     18|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     18|        return read_source_impl(range);
 3685|     18|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    938|    {
 3705|    938|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    938|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    938|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    938|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    938|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 938]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    938|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    938|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    938|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    938|        auto it = sign_result.first;
 3708|    938|        m_sign = sign_result.second;
 3709|       |
 3710|    938|        auto digits_begin = it;
 3711|    938|        auto r = ranges::subrange{it, range.end()};
 3712|    938|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    938|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    938|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 938]
  |  |  |  Branch (859:45): [True: 0, False: 938]
  |  |  |  Branch (859:45): [True: 0, False: 938]
  |  |  ------------------
  ------------------
 3715|    938|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    938|            else {
 3724|    938|                auto cb = [&](const auto& rr)
 3725|    938|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    938|                    auto res = read_all(rr);
 3727|    938|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    938|                        return unexpected_scan_error(
 3729|    938|                            scan_error::invalid_scanned_value,
 3730|    938|                            "Invalid float value");
 3731|    938|                    }
 3732|    938|                    return res;
 3733|    938|                };
 3734|    938|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    938|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    938|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    938|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 912]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|    938|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    938|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    912|            }
 3736|    938|        }
 3737|    912|        else {
 3738|    912|            SCN_TRY_ASSIGN(
 3739|    912|                it,
 3740|    912|                do_read_source_impl(
 3741|    912|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    912|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    912|        }
 3744|       |
 3745|    912|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    912|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 912, False: 0]
  |  Branch (3747:48): [True: 912, False: 0]
  ------------------
 3748|    912|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 912, False: 0]
  ------------------
 3749|    912|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 912, False: 0]
  ------------------
 3750|    912|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    912|        }
 3752|       |
 3753|    912|        handle_separators();
 3754|       |
 3755|    912|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 912]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    912|        return it;
 3768|    912|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    938|    {
 3811|    938|        auto it = range.begin();
 3812|    938|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 938, False: 0]
  ------------------
 3813|    938|            return unexpected(r.error());
 3814|    938|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    938|    {
 3834|    938|        auto it = range.begin();
 3835|    938|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 938, False: 0]
  ------------------
 3836|    938|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    938|                scan_error::invalid_scanned_value,
 3838|    938|                "Invalid floating-point NaN value"));
 3839|    938|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    912|    {
 3804|    912|        return read_matching_string_classic_nocase(range, "0x");
 3805|    912|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 18]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    938|    {
 4000|    938|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    938|        const bool allowed_nonhex =
 4002|    938|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    938|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    938|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 938, False: 0]
  |  Branch (4005:45): [True: 0, False: 938]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    938|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 938]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    938|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 938, False: 0]
  |  Branch (4014:45): [True: 0, False: 938]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    938|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 938]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    938|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 912, False: 26]
  |  Branch (4021:28): [True: 18, False: 894]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     18|            auto it = range.begin();
 4025|       |
 4026|     18|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 18]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     18|            else {
 4031|     18|                m_kind = float_kind::hex_without_prefix;
 4032|     18|            }
 4033|       |
 4034|     18|            return read_hex(ranges::subrange{it, range.end()});
 4035|     18|        }
 4036|    920|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 894]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    894|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 894]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    894|        m_kind = float_kind::generic;
 4052|    894|        return read_regular(range);
 4053|    894|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    912|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    912|                    auto res = read_all(rr);
 3727|    912|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 912]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    912|                    return res;
 3733|    912|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    912|{
 1839|    912|    return ranges::next(range.begin(), range.end());
 1840|    912|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    912|    {
  313|    912|        ranges::advance(x, bound);
  314|    912|        return x;
  315|    912|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    912|    {
  275|    912|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    912|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    966|    {
  190|    966|        i = std::move(bound);
  191|    966|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    912|    {
 1577|    912|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    912|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    912|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    912|    {
 1621|    912|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    912|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    912|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    912|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    912|            m_storage.reset();
 1627|    912|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    912|        }
 1629|    912|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    912|                                          std::basic_string<CharT>>) {
 1631|    912|            m_storage.emplace(SCN_FWD(range));
 1632|    912|            m_view = string_view_type{*m_storage};
 1633|    912|        }
 1634|    912|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    912|                                          typename detail::basic_scan_buffer<
 1636|    912|                                              value_t>::forward_iterator> &&
 1637|    912|                           ranges::common_range<Range>) {
 1638|    912|            auto beg_seg = range.begin().contiguous_segment();
 1639|    912|            auto end_seg = range.end().contiguous_segment();
 1640|    912|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    912|                             detail::to_address(end_seg.end()))) {
 1642|    912|                auto& str = m_storage.emplace();
 1643|    912|                str.reserve(range.end().position() - range.begin().position());
 1644|    912|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    912|                m_view = string_view_type{str};
 1646|    912|                return;
 1647|    912|            }
 1648|       |
 1649|    912|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    912|                                                            end_seg.data());
 1651|    912|            m_storage.reset();
 1652|    912|        }
 1653|    912|        else {
 1654|    912|            auto& str = m_storage.emplace();
 1655|    912|            if constexpr (ranges::sized_range<Range>) {
 1656|    912|                str.reserve(range.size());
 1657|    912|            }
 1658|    912|            if constexpr (ranges::common_range<Range>) {
 1659|    912|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    912|                          std::back_inserter(str));
 1661|    912|            }
 1662|    912|            else {
 1663|    912|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    912|                     ++it) {
 1665|    912|                    str.push_back(*it);
 1666|    912|                }
 1667|    912|            }
 1668|    912|            m_view = string_view_type{str};
 1669|    912|        }
 1670|    912|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    920|    {
 3665|    920|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 920]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    920|        return read_source_impl(range);
 3671|    920|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    912|    {
 3691|    912|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    912|        const std::ptrdiff_t sign_len =
 3694|    912|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 912]
  ------------------
 3695|       |
 3696|    912|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    912|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    912|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    912|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 912, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    912|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    912|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    912|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    912|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    912|    }                                                  \
  |  |  |  | 3671|    912|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    912|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    302|    {
 4170|    302|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    302|#if !SCN_DISABLE_LOCALE
 4173|    302|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 294]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    294|#endif
 4182|       |
 4183|    294|        return read_impl<Range>(
 4184|    294|            range, rd,
 4185|    294|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    294|                return r.read_source(SCN_FWD(args)...);
 4187|    294|            },
 4188|    294|            value);
 4189|    302|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    302|    {
 4206|    302|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    302|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  ------------------
  ------------------
 4208|    302|            return unexpected(r.error());
 4209|    302|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    294|    {
  754|    294|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    294|    {
  684|    294|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    294|            return static_cast<T*>(s.m_cp);
  686|    294|        }
  687|    294|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    294|            return static_cast<T*>(s.m_p);
  689|    294|        }
  690|    294|        else {
  691|    294|            return reinterpret_cast<T*>(s.m_fp);
  692|    294|        }
  693|    294|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    294|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    294|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    294|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    294|        {
  662|    294|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    262|    {
 4170|    262|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    262|#if !SCN_DISABLE_LOCALE
 4173|    262|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 18, False: 244]
  ------------------
 4174|     18|            return read_impl<Range>(
 4175|     18|                range, rd,
 4176|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     18|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     18|                },
 4179|     18|                value, loc);
 4180|     18|        }
 4181|    244|#endif
 4182|       |
 4183|    244|        return read_impl<Range>(
 4184|    244|            range, rd,
 4185|    244|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    244|                return r.read_source(SCN_FWD(args)...);
 4187|    244|            },
 4188|    244|            value);
 4189|    262|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    938|    {
 4206|    938|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    938|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    938|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 912]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|    912|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    912|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    912|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    912|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 912, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    912|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    912|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    912|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    912|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    912|    }                                                  \
  |  |  |  | 3671|    912|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    912|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     18|    {
  754|     18|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|     18|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     18|                  obj(static_cast<decltype(args)>(args)...);
  747|     18|              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     18|    {
  684|     18|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     18|            return static_cast<T*>(s.m_cp);
  686|     18|        }
  687|     18|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     18|            return static_cast<T*>(s.m_p);
  689|     18|        }
  690|     18|        else {
  691|     18|            return reinterpret_cast<T*>(s.m_fp);
  692|     18|        }
  693|     18|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     18|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     18|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     18|        {
  662|     18|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    244|    {
  754|    244|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    244|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    244|              cvref<T> obj = *get<T>(fn);
  745|    244|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    244|                  obj(static_cast<decltype(args)>(args)...);
  747|    244|              }
  748|    244|              else {
  749|    244|                  return obj(static_cast<decltype(args)>(args)...);
  750|    244|              }
  751|    244|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    244|    {
  684|    244|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    244|            return static_cast<T*>(s.m_cp);
  686|    244|        }
  687|    244|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    244|            return static_cast<T*>(s.m_p);
  689|    244|        }
  690|    244|        else {
  691|    244|            return reinterpret_cast<T*>(s.m_fp);
  692|    244|        }
  693|    244|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    244|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    244|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    244|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    244|        {
  662|    244|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  7.04k|{
 5809|  7.04k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  7.04k|        return reader_impl_for_bool<CharT>{};
 5811|  7.04k|    }
 5812|  7.04k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  7.04k|        return reader_impl_for_char<CharT>{};
 5814|  7.04k|    }
 5815|  7.04k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  7.04k|        return reader_impl_for_wchar<CharT>{};
 5817|  7.04k|    }
 5818|  7.04k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  7.04k|        return reader_impl_for_code_point<CharT>{};
 5820|  7.04k|    }
 5821|  7.04k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  7.04k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  7.04k|        return reader_impl_for_string<CharT>{};
 5824|  7.04k|    }
 5825|  7.04k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  7.04k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  7.04k|        return reader_impl_for_string<CharT>{};
 5828|  7.04k|    }
 5829|  7.04k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  7.04k|                       std::is_same_v<T, wregex_matches>) {
 5831|  7.04k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  7.04k|    }
 5833|  7.04k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  7.04k|        return reader_impl_for_voidptr<CharT>{};
 5835|  7.04k|    }
 5836|  7.04k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  7.04k|        return reader_impl_for_float<CharT>{};
 5838|  7.04k|    }
 5839|  7.04k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  7.04k|                       !std::is_same_v<T, wchar_t> &&
 5841|  7.04k|                       !std::is_same_v<T, char32_t> &&
 5842|  7.04k|                       !std::is_same_v<T, bool>) {
 5843|  7.04k|        return reader_impl_for_int<CharT>{};
 5844|  7.04k|    }
 5845|  7.04k|    else {
 5846|  7.04k|        return reader_impl_for_monostate<CharT>{};
 5847|  7.04k|    }
 5848|  7.04k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  21.1k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  19.1k|    {
 3040|  19.1k|        reader_error_handler eh{};
 3041|  19.1k|        get_derived().check_specs_impl(specs, eh);
 3042|  19.1k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 18.7k]
  |  |  ------------------
  ------------------
 3043|    378|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    378|        }
 3045|  18.7k|        return {};
 3046|  19.1k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  19.1k|    {
 3051|  19.1k|        return static_cast<Derived&>(*this);
 3052|  19.1k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  19.1k|    {
 5210|  19.1k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  19.1k|        SCN_GCC_PUSH
 5213|  19.1k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  19.1k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  19.1k|        SCN_CLANG_PUSH
 5217|  19.1k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  19.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  19.1k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 372, False: 18.7k]
  ------------------
 5221|  1.48k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.48k, False: 17.6k]
  ------------------
 5222|  1.48k|                m_type = reader_type::word;
 5223|  1.48k|                break;
 5224|       |
 5225|    522|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 522, False: 18.5k]
  ------------------
 5226|    522|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 438]
  ------------------
 5227|    522|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 216, False: 222]
  ------------------
 5228|    300|                    m_type = reader_type::custom_word;
 5229|    300|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    522|                break;
 5234|      0|            }
 5235|       |
 5236|    108|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 108, False: 19.0k]
  ------------------
 5237|    108|                m_type = reader_type::character;
 5238|    108|                break;
 5239|       |
 5240|  3.82k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 3.82k, False: 15.2k]
  ------------------
 5241|  3.82k|                m_type = reader_type::character_set;
 5242|  3.82k|                break;
 5243|       |
 5244|  11.0k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 11.0k, False: 8.08k]
  ------------------
 5245|  11.0k|                m_type = reader_type::regex;
 5246|  11.0k|                break;
 5247|       |
 5248|  1.77k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 1.77k, False: 17.3k]
  ------------------
 5249|  1.77k|                m_type = reader_type::regex_escaped;
 5250|  1.77k|                break;
 5251|  19.1k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  19.1k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  24.9k|    {
 5259|  24.9k|        return m_type == reader_type::word;
 5260|  24.9k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  10.8k|{
 1132|  10.8k|    auto it = src.begin();
 1133|   752k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 743k, False: 8.61k]
  ------------------
 1134|   743k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   743k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.42k, False: 742k]
  ------------------
 1136|  1.42k|            return false;
 1137|  1.42k|        }
 1138|   742k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 252, False: 742k]
  ------------------
 1139|    252|            return false;
 1140|    252|        }
 1141|   742k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   742k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   742k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 552, False: 741k]
  ------------------
 1144|    552|            return false;
 1145|    552|        }
 1146|   741k|        it += len;
 1147|   741k|    }
 1148|  8.61k|    return true;
 1149|  10.8k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    374|{
 2993|    374|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    374|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 374, False: 0]
  ------------------
 2995|    374|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    374|    static_cast<    \
  |  |  929|    374|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    374|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    374|    }
 3001|    374|    else {
 3002|    374|        return transcode_impl(source.view(), dest);
 3003|    374|    }
 3004|       |
 3005|    374|    return {};
 3006|    374|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  3.80k|        {
 5103|  3.80k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 654, False: 3.15k]
  ------------------
 5104|    654|                return {};
 5105|    654|            }
 5106|       |
 5107|  3.15k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  3.15k|            auto it = detail::to_address(charset_string.begin());
 5109|  3.15k|            auto set = detail::parse_presentation_set(
 5110|  3.15k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  3.15k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  3.15k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  3.15k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  3.15k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  3.15k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  3.15k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  3.15k|                      nonascii.extra_ranges.end());
 5119|  3.15k|            return {};
 5120|  3.15k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   520k|        {
 5138|   520k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 61.5k, False: 458k]
  ------------------
 5139|  61.5k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  61.5k|            }
 5141|       |
 5142|   458k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   520k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  61.5k|        {
 5086|       |            // TODO: binary search?
 5087|  61.5k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 61.5k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  61.5k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  61.5k|            return std::find_if(
 5093|  61.5k|                       nonascii.extra_ranges.begin(),
 5094|  61.5k|                       nonascii.extra_ranges.end(),
 5095|  61.5k|                       [cp_val](const auto& pair) noexcept {
 5096|  61.5k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  61.5k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  61.5k|                       }) != nonascii.extra_ranges.end();
 5099|  61.5k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  14.5M|                       [cp_val](const auto& pair) noexcept {
 5096|  14.5M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 14.5M, False: 5.69k]
  ------------------
 5097|  14.5M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 60.4k, False: 14.5M]
  ------------------
 5098|  14.5M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   467k|        {
 5076|   467k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   467k|            const auto val =
 5078|   467k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   467k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   467k|                    (val % 8)) &
 5081|   467k|                   1u;
 5082|   467k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  11.2k|        {
 5129|  11.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 2.63k, False: 8.66k]
  ------------------
 5130|  2.63k|                return false;
 5131|  2.63k|            }
 5132|       |
 5133|  8.66k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  11.2k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  3.80k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    908|    {
 5277|    908|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    908|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    908|        return read_impl(range, specs, value);
 5279|    908|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    908|    {
 5295|    908|        SCN_CLANG_PUSH
 5296|    908|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    908|        switch (m_type) {
 5299|    278|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 278, False: 630]
  ------------------
 5300|    278|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 854]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 874]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    262|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 262, False: 646]
  ------------------
 5310|    262|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    262|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 906]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    278|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 278, False: 630]
  ------------------
 5320|    278|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    278|                    range,
 5322|    278|                    get_unescaped_regex_pattern(
 5323|    278|                        specs.charset_string<SourceCharT>()),
 5324|    278|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 908]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    908|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    908|        }
 5331|       |
 5332|    908|        SCN_CLANG_POP
 5333|    908|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    278|    {
 4820|    278|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    278|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    366|{
 4752|    366|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    366|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    366|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 156, False: 210]
  ------------------
 4756|    156|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    156|                                     "Invalid encoding in scanned string");
 4758|    156|    }
 4759|    210|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    210|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    210|    return SCN_MOVE(result);
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    210|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    834|{
 2088|    834|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    834|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    834|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    834|        auto buf = make_contiguous_buffer(range);
 2092|    834|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    834|        return ranges::next(range.begin(),
 2094|    834|                            ranges::distance(buf.view().begin(), it));
 2095|    834|    }
 2096|    834|    else {
 2097|    834|        auto it = range.begin();
 2098|       |
 2099|    834|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    834|            auto seg = get_contiguous_beginning(range);
 2101|    834|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    834|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 834]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    834|            ranges::advance(it, seg.size());
 2106|    834|        }
 2107|       |
 2108|    834|        return read_until_code_point(
 2109|    834|            ranges::subrange{it, range.end()},
 2110|    834|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    834|    }
 2112|    834|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    834|{
 2061|    834|    auto it = range.begin();
 2062|  14.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 13.8k, False: 624]
  ------------------
 2063|  13.8k|        const auto val =
 2064|  13.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  13.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  13.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.4k, False: 2.42k]
  |  |  ------------------
  ------------------
 2066|  11.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  11.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  11.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 210, False: 11.2k]
  ------------------
 2069|    210|                return it;
 2070|    210|            }
 2071|  11.4k|        }
 2072|  13.6k|        it = val.iterator;
 2073|  13.6k|    }
 2074|       |
 2075|    624|    return it;
 2076|    834|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    834|    {
  754|    834|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  11.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.4k|              cvref<T> obj = *get<T>(fn);
  745|  11.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  11.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.4k|              }
  748|  11.4k|              else {
  749|  11.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.4k|              }
  751|  11.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  11.4k|    {
  684|  11.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  11.4k|            return static_cast<T*>(s.m_cp);
  686|  11.4k|        }
  687|  11.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  11.4k|            return static_cast<T*>(s.m_p);
  689|  11.4k|        }
  690|  11.4k|        else {
  691|  11.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  11.4k|        }
  693|  11.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  11.4k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    834|        {
  662|    834|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     54|    {
 4841|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 20]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     20|        return read_string_impl(
 4851|     20|            range,
 4852|     20|            read_until_code_units(
 4853|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     20|            value);
 4855|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     60|{
 2007|     60|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     60|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     60|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     60|                           needle.end());
 2012|     60|    }
 2013|     60|    else {
 2014|     60|        auto first = range.begin();
 2015|    240|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    240|            auto it = first;
 2017|    366|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    366|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 330]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    330|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 24, False: 306]
  ------------------
 2022|     24|                    return it;
 2023|     24|                }
 2024|    306|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 180, False: 126]
  ------------------
 2025|    180|                    break;
 2026|    180|                }
 2027|    306|            }
 2028|    180|            ++first;
 2029|    180|        }
 2030|     60|    }
 2031|     60|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     34|    {
 4947|     34|        return read_impl(
 4948|     34|            range,
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
 4952|     34|            detail::priority_tag<1>{});
 4953|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    102|{
 1839|    102|    return ranges::next(range.begin(), range.end());
 1840|    102|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    102|    {
  313|    102|        ranges::advance(x, bound);
  314|    102|        return x;
  315|    102|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    102|    {
  275|    102|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    102|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    102|    {
  203|  2.38k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.28k, False: 102]
  ------------------
  204|  2.28k|            ++i;
  205|  2.28k|        }
  206|    102|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    262|    {
 5048|    262|        auto it = read_source_impl(range, {specs});
 5049|    262|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 252]
  |  |  ------------------
  ------------------
 5050|     10|            return unexpected(it.error());
 5051|     10|        }
 5052|       |
 5053|    252|        return read_string_impl(range, *it, value);
 5054|    262|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    786|    {
 5153|    786|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    786|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    786|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    786|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 786]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    786|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    786|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 468, False: 318]
  ------------------
 5163|    468|            const auto cb = [&](char32_t cp) {
 5164|    468|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    468|            };
 5166|       |
 5167|    468|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 114, False: 354]
  ------------------
 5168|    114|                auto it = read_until_code_point(range, cb);
 5169|    114|                return check_nonempty(it, range);
 5170|    114|            }
 5171|    354|            auto it = read_while_code_point(range, cb);
 5172|    354|            return check_nonempty(it, range);
 5173|    468|        }
 5174|       |
 5175|    318|        const auto cb = [&](SourceCharT ch) {
 5176|    318|            return cb_wrapper.on_ascii_only(ch);
 5177|    318|        };
 5178|       |
 5179|    318|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 180, False: 138]
  ------------------
 5180|    180|            auto it = read_until_code_unit(range, cb);
 5181|    180|            return check_nonempty(it, range);
 5182|    180|        }
 5183|    138|        auto it = read_while_code_unit(range, cb);
 5184|    138|        return check_nonempty(it, range);
 5185|    318|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    468|    {
  754|    468|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  58.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.4k|              cvref<T> obj = *get<T>(fn);
  745|  58.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  58.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.4k|              }
  748|  58.4k|              else {
  749|  58.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.4k|              }
  751|  58.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  58.4k|    {
  684|  58.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  58.4k|            return static_cast<T*>(s.m_cp);
  686|  58.4k|        }
  687|  58.4k|        else if constexpr (std::is_object_v<T>) {
  688|  58.4k|            return static_cast<T*>(s.m_p);
  689|  58.4k|        }
  690|  58.4k|        else {
  691|  58.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  58.4k|        }
  693|  58.4k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  58.4k|            const auto cb = [&](char32_t cp) {
 5164|  58.4k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  58.4k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    468|        {
  667|    468|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    786|    {
 5191|    786|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 30, False: 756]
  ------------------
 5192|     30|            return unexpected_scan_error(
 5193|     30|                scan_error::invalid_scanned_value,
 5194|     30|                "No characters matched in [character set]");
 5195|     30|        }
 5196|       |
 5197|    756|        return it;
 5198|    786|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    318|    {
  754|    318|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  7.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.25k|              cvref<T> obj = *get<T>(fn);
  745|  7.25k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.25k|              }
  748|  7.25k|              else {
  749|  7.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.25k|              }
  751|  7.25k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  7.25k|    {
  684|  7.25k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.25k|            return static_cast<T*>(s.m_cp);
  686|  7.25k|        }
  687|  7.25k|        else if constexpr (std::is_object_v<T>) {
  688|  7.25k|            return static_cast<T*>(s.m_p);
  689|  7.25k|        }
  690|  7.25k|        else {
  691|  7.25k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.25k|        }
  693|  7.25k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  7.25k|        const auto cb = [&](SourceCharT ch) {
 5176|  7.25k|            return cb_wrapper.on_ascii_only(ch);
 5177|  7.25k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    318|        {
  667|    318|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    252|{
 4752|    252|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    252|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    252|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 88, False: 164]
  ------------------
 4756|     88|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     88|                                     "Invalid encoding in scanned string");
 4758|     88|    }
 4759|    164|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    164|    static_cast<    \
  |  |  929|    164|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    164|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    164|    return SCN_MOVE(result);
  ------------------
  |  |  928|    164|    static_cast<    \
  |  |  929|    164|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    164|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    280|    {
 4891|    280|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    280|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    280|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|    840|    {
 4913|    840|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  1.68k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|    840|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    840|            return unexpected_scan_error(
 4916|    840|                scan_error::invalid_scanned_value,
 4917|    840|                "Regex backend doesn't support wide strings as input");
 4918|    840|        }
 4919|    840|        else {
 4920|    840|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 840, False: 0]
  ------------------
 4921|    840|                return unexpected_scan_error(
 4922|    840|                    scan_error::invalid_scanned_value,
 4923|    840|                    "Cannot use regex with a non-contiguous source "
 4924|    840|                    "range");
 4925|    840|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|    840|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    840|{
  959|    840|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    840|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    840|        return true;
  962|    840|    }
  963|    840|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    840|                           ranges::const_iterator_t<Range>,
  965|    840|                           typename detail::basic_scan_buffer<
  966|    840|                               detail::char_t<Range>>::forward_iterator>) {
  967|    840|        auto beg = r.begin();
  968|    840|        if (!beg.stores_parent()) {
  969|    840|            return true;
  970|    840|        }
  971|    840|        return beg.parent()->is_contiguous();
  972|    840|    }
  973|    840|    else {
  974|    840|        return false;
  975|    840|    }
  976|    840|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  5.31k|    {
 5277|  5.31k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  5.31k|        return read_impl(range, specs, value);
 5279|  5.31k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  5.31k|    {
 5295|  5.31k|        SCN_CLANG_PUSH
 5296|  5.31k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  5.31k|        switch (m_type) {
 5299|    276|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 276, False: 5.04k]
  ------------------
 5300|    276|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 5.27k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 5.31k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.00k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.00k, False: 4.31k]
  ------------------
 5310|  1.00k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.00k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.67k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.67k, False: 1.64k]
  ------------------
 5315|  3.67k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.67k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.67k|                    specs.regexp_flags, value);
 5318|       |
 5319|    312|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 312, False: 5.00k]
  ------------------
 5320|    312|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    312|                    range,
 5322|    312|                    get_unescaped_regex_pattern(
 5323|    312|                        specs.charset_string<SourceCharT>()),
 5324|    312|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 5.31k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  5.31k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  5.31k|        }
 5331|       |
 5332|  5.31k|        SCN_CLANG_POP
 5333|  5.31k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    952|    {
 4820|    952|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    952|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    998|{
 4752|    998|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    998|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    998|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 362, False: 636]
  ------------------
 4756|    362|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    362|                                     "Invalid encoding in scanned string");
 4758|    362|    }
 4759|    636|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    636|    static_cast<    \
  |  |  929|    636|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    636|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    636|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 636]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    636|    return SCN_MOVE(result);
  ------------------
  |  |  928|    636|    static_cast<    \
  |  |  929|    636|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    636|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.78k|{
 3012|  1.78k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.78k|        dest.assign(source.view());
 3014|  1.78k|    }
 3015|  1.78k|    else {
 3016|  1.78k|        return transcode_impl(source.view(), dest);
 3017|  1.78k|    }
 3018|       |
 3019|  1.78k|    return {};
 3020|  1.78k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.85k|{
 2088|  2.85k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.85k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.85k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.85k|        auto buf = make_contiguous_buffer(range);
 2092|  2.85k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.85k|        return ranges::next(range.begin(),
 2094|  2.85k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.85k|    }
 2096|  2.85k|    else {
 2097|  2.85k|        auto it = range.begin();
 2098|       |
 2099|  2.85k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.85k|            auto seg = get_contiguous_beginning(range);
 2101|  2.85k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.85k|                seg_it != seg.end()) {
 2103|  2.85k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.85k|            }
 2105|  2.85k|            ranges::advance(it, seg.size());
 2106|  2.85k|        }
 2107|       |
 2108|  2.85k|        return read_until_code_point(
 2109|  2.85k|            ranges::subrange{it, range.end()},
 2110|  2.85k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.85k|    }
 2112|  2.85k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.00k|    {
 5048|  1.00k|        auto it = read_source_impl(range, {specs});
 5049|  1.00k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 308, False: 698]
  |  |  ------------------
  ------------------
 5050|    308|            return unexpected(it.error());
 5051|    308|        }
 5052|       |
 5053|    698|        return read_string_impl(range, *it, value);
 5054|  1.00k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  3.01k|    {
 5153|  3.01k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  3.01k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  3.01k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.01k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  3.01k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  3.01k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.68k, False: 336]
  ------------------
 5163|  2.68k|            const auto cb = [&](char32_t cp) {
 5164|  2.68k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.68k|            };
 5166|       |
 5167|  2.68k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 252, False: 2.43k]
  ------------------
 5168|    252|                auto it = read_until_code_point(range, cb);
 5169|    252|                return check_nonempty(it, range);
 5170|    252|            }
 5171|  2.43k|            auto it = read_while_code_point(range, cb);
 5172|  2.43k|            return check_nonempty(it, range);
 5173|  2.68k|        }
 5174|       |
 5175|    336|        const auto cb = [&](SourceCharT ch) {
 5176|    336|            return cb_wrapper.on_ascii_only(ch);
 5177|    336|        };
 5178|       |
 5179|    336|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 186]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    186|        auto it = read_while_code_unit(range, cb);
 5184|    186|        return check_nonempty(it, range);
 5185|    336|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.68k|{
 2061|  2.68k|    auto it = range.begin();
 2062|   463k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 463k, False: 168]
  ------------------
 2063|   463k|        const auto val =
 2064|   463k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   463k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   463k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 462k, False: 1.48k]
  |  |  ------------------
  ------------------
 2066|   462k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   462k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   462k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.51k, False: 459k]
  ------------------
 2069|  2.51k|                return it;
 2070|  2.51k|            }
 2071|   462k|        }
 2072|   460k|        it = val.iterator;
 2073|   460k|    }
 2074|       |
 2075|    168|    return it;
 2076|  2.68k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   463k|{
 1899|   463k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   463k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   463k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   463k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   463k|    auto it = range.begin();
 1903|   463k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   463k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 462k]
  |  |  ------------------
  ------------------
 1906|  1.48k|        ++it;
 1907|  1.48k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  1.48k|        return {it, {}};
 1909|  1.48k|    }
 1910|       |
 1911|   462k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 405k, False: 56.1k]
  ------------------
 1912|   405k|        ++it;
 1913|   405k|        return {it, string_type(1, *range.begin())};
 1914|   405k|    }
 1915|       |
 1916|  56.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  56.1k|    return {it, string_type{range.begin(), it}};
 1918|   462k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.48k|{
 1155|  1.48k|    auto it = input.begin();
 1156|  3.12k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 3.07k, False: 42]
  ------------------
 1157|  3.07k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.44k, False: 1.63k]
  ------------------
 1158|  1.44k|            break;
 1159|  1.44k|        }
 1160|  3.07k|    }
 1161|  1.48k|    return it;
 1162|  1.48k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  56.1k|    {
  283|  56.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  56.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  56.1k|    {
  212|  56.1k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 54, False: 56.0k]
  ------------------
  213|     54|            auto dist = bound - i;
  214|     54|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     54|            return dist;
  216|     54|        }
  217|  56.0k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  56.0k|        return n;
  219|  56.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   112k|    {
  132|   112k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 112k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   112k|        return t;
  136|   112k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   463k|    {
 1890|   463k|        return !codepoint.empty();
 1891|   463k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.68k|    {
  754|  2.68k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   462k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   462k|              cvref<T> obj = *get<T>(fn);
  745|   462k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   462k|                  obj(static_cast<decltype(args)>(args)...);
  747|   462k|              }
  748|   462k|              else {
  749|   462k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   462k|              }
  751|   462k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   462k|    {
  684|   462k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   462k|            return static_cast<T*>(s.m_cp);
  686|   462k|        }
  687|   462k|        else if constexpr (std::is_object_v<T>) {
  688|   462k|            return static_cast<T*>(s.m_p);
  689|   462k|        }
  690|   462k|        else {
  691|   462k|            return reinterpret_cast<T*>(s.m_fp);
  692|   462k|        }
  693|   462k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   462k|            const auto cb = [&](char32_t cp) {
 5164|   462k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   462k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.68k|        {
  667|  2.68k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  3.01k|    {
 5191|  3.01k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 924, False: 2.09k]
  ------------------
 5192|    924|            return unexpected_scan_error(
 5193|    924|                scan_error::invalid_scanned_value,
 5194|    924|                "No characters matched in [character set]");
 5195|    924|        }
 5196|       |
 5197|  2.09k|        return it;
 5198|  3.01k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.43k|{
 2082|  2.43k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.43k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    336|    {
  754|    336|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.04k|              cvref<T> obj = *get<T>(fn);
  745|  4.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.04k|              }
  748|  4.04k|              else {
  749|  4.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.04k|              }
  751|  4.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.04k|    {
  684|  4.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.04k|            return static_cast<T*>(s.m_cp);
  686|  4.04k|        }
  687|  4.04k|        else if constexpr (std::is_object_v<T>) {
  688|  4.04k|            return static_cast<T*>(s.m_p);
  689|  4.04k|        }
  690|  4.04k|        else {
  691|  4.04k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.04k|        }
  693|  4.04k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.04k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.04k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.04k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    336|        {
  667|    336|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.28k|{
 4752|  1.28k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.28k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.28k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 136, False: 1.14k]
  ------------------
 4756|    136|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    136|                                     "Invalid encoding in scanned string");
 4758|    136|    }
 4759|  1.14k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.14k|    static_cast<    \
  |  |  929|  1.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.14k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.14k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.14k|    static_cast<    \
  |  |  929|  1.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.14k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.98k|    {
 4891|  3.98k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 582]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.40k|    }                                                  \
  |  |  |  | 3671|  3.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    582|        return read_string_impl(range, it, value);
 4893|  3.98k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  11.9k|    {
 4913|  11.9k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  23.9k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  11.9k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  11.9k|            return unexpected_scan_error(
 4916|  11.9k|                scan_error::invalid_scanned_value,
 4917|  11.9k|                "Regex backend doesn't support wide strings as input");
 4918|  11.9k|        }
 4919|  11.9k|        else {
 4920|  11.9k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 11.9k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  11.9k|            auto input = get_as_contiguous(range);
 4928|  11.9k|            SCN_TRY(it,
  ------------------
  |  | 3672|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.2k, False: 1.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.2k|    }                                                  \
  |  |  |  | 3671|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.74k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.74k|            return ranges::next(range.begin(),
 4931|  1.74k|                                ranges::distance(input.begin(), it));
 4932|  11.9k|        }
 4933|  11.9k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  11.9k|{
  959|  11.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  11.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  11.9k|        return true;
  962|  11.9k|    }
  963|  11.9k|    else if constexpr (std::is_same_v<
  964|  11.9k|                           ranges::const_iterator_t<Range>,
  965|  11.9k|                           typename detail::basic_scan_buffer<
  966|  11.9k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  11.9k|        auto beg = r.begin();
  968|  11.9k|        if (!beg.stores_parent()) {
  969|  11.9k|            return true;
  970|  11.9k|        }
  971|  11.9k|        return beg.parent()->is_contiguous();
  972|  11.9k|    }
  973|  11.9k|    else {
  974|  11.9k|        return false;
  975|  11.9k|    }
  976|  11.9k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  11.9k|{
 1065|  11.9k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  11.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  11.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  11.9k|        return r;
 1070|  11.9k|    }
 1071|  11.9k|    else if constexpr (std::is_same_v<
 1072|  11.9k|                           ranges::const_iterator_t<Range>,
 1073|  11.9k|                           typename detail::basic_scan_buffer<
 1074|  11.9k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  11.9k|        if constexpr (ranges::common_range<Range>) {
 1076|  11.9k|            return detail::make_string_view_from_pointers(
 1077|  11.9k|                r.begin().to_contiguous_segment_iterator(),
 1078|  11.9k|                r.end().to_contiguous_segment_iterator());
 1079|  11.9k|        }
 1080|  11.9k|        else {
 1081|  11.9k|            return r.begin().contiguous_segment();
 1082|  11.9k|        }
 1083|  11.9k|    }
 1084|  11.9k|    else {
 1085|  11.9k|        SCN_EXPECT(false);
 1086|  11.9k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  11.9k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  11.9k|    }
 1090|  11.9k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  11.9k|{
  981|  11.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  11.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  11.9k|        return true;
  984|  11.9k|    }
  985|  11.9k|    else if constexpr (std::is_same_v<
  986|  11.9k|                           ranges::const_iterator_t<Range>,
  987|  11.9k|                           typename detail::basic_scan_buffer<
  988|  11.9k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  11.9k|        auto beg = r.begin();
  990|  11.9k|        if (beg.contiguous_segment().empty()) {
  991|  11.9k|            return false;
  992|  11.9k|        }
  993|  11.9k|        if constexpr (ranges::common_range<Range>) {
  994|  11.9k|            return beg.contiguous_segment().end() ==
  995|  11.9k|                   ranges::end(r).contiguous_segment().end();
  996|  11.9k|        }
  997|  11.9k|        else {
  998|  11.9k|            if (beg.stores_parent()) {
  999|  11.9k|                return beg.contiguous_segment().end() ==
 1000|  11.9k|                       beg.parent()->current_view().end();
 1001|  11.9k|            }
 1002|  11.9k|            return true;
 1003|  11.9k|        }
 1004|  11.9k|    }
 1005|  11.9k|    else {
 1006|  11.9k|        return false;
 1007|  11.9k|    }
 1008|  11.9k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  11.9k|{
 4346|  11.9k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  11.9k|                  ranges::borrowed_range<Input> &&
 4348|  11.9k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  11.9k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  11.9k|    std::basic_regex<CharT> re{};
 4352|  11.9k|    try {
 4353|  11.9k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  11.9k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  11.9k|                                     re_flags | std::regex_constants::nosubs};
 4356|  11.9k|    }
 4357|  11.9k|    catch (const std::regex_error& err) {
 4358|  6.76k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  6.76k|                                     "Invalid regex");
 4360|  6.76k|    }
 4361|       |
 4362|  5.20k|    std::match_results<const CharT*> matches{};
 4363|  5.20k|    try {
 4364|  5.20k|        bool found = std::regex_search(input.data(),
 4365|  5.20k|                                       input.data() + input.size(), matches, re,
 4366|  5.20k|                                       std::regex_constants::match_continuous);
 4367|  5.20k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 3.45k, False: 1.74k]
  |  Branch (4367:23): [True: 0, False: 1.74k]
  ------------------
 4368|  3.24k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  3.24k|                                         "Regular expression didn't match");
 4370|  3.24k|        }
 4371|  5.20k|    }
 4372|  5.20k|    catch (const std::regex_error& err) {
 4373|    216|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    216|                                     "Regex matching failed with an error");
 4375|    216|    }
 4376|       |
 4377|  1.74k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  5.20k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  7.04k|{
 5809|  7.04k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  7.04k|        return reader_impl_for_bool<CharT>{};
 5811|  7.04k|    }
 5812|  7.04k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  7.04k|        return reader_impl_for_char<CharT>{};
 5814|  7.04k|    }
 5815|  7.04k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  7.04k|        return reader_impl_for_wchar<CharT>{};
 5817|  7.04k|    }
 5818|  7.04k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  7.04k|        return reader_impl_for_code_point<CharT>{};
 5820|  7.04k|    }
 5821|  7.04k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  7.04k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  7.04k|        return reader_impl_for_string<CharT>{};
 5824|  7.04k|    }
 5825|  7.04k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  7.04k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  7.04k|        return reader_impl_for_string<CharT>{};
 5828|  7.04k|    }
 5829|  7.04k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  7.04k|                       std::is_same_v<T, wregex_matches>) {
 5831|  7.04k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  7.04k|    }
 5833|  7.04k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  7.04k|        return reader_impl_for_voidptr<CharT>{};
 5835|  7.04k|    }
 5836|  7.04k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  7.04k|        return reader_impl_for_float<CharT>{};
 5838|  7.04k|    }
 5839|  7.04k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  7.04k|                       !std::is_same_v<T, wchar_t> &&
 5841|  7.04k|                       !std::is_same_v<T, char32_t> &&
 5842|  7.04k|                       !std::is_same_v<T, bool>) {
 5843|  7.04k|        return reader_impl_for_int<CharT>{};
 5844|  7.04k|    }
 5845|  7.04k|    else {
 5846|  7.04k|        return reader_impl_for_monostate<CharT>{};
 5847|  7.04k|    }
 5848|  7.04k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    374|{
 2993|    374|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    374|        if (source.stores_allocated_string()) {
 2995|    374|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    374|        }
 2997|    374|        else {
 2998|    374|            dest.assign(source.view());
 2999|    374|        }
 3000|    374|    }
 3001|    374|    else {
 3002|    374|        return transcode_impl(source.view(), dest);
 3003|    374|    }
 3004|       |
 3005|      0|    return {};
 3006|    374|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.15k|{
 2968|  2.15k|    dst.clear();
 2969|  2.15k|    transcode_valid_to_string(src, dst);
 2970|  2.15k|    return {};
 2971|  2.15k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.15k|{
 1403|  2.15k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.15k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.15k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.15k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.15k|            std::u32string tmp;
 1410|  2.15k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.15k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.15k|                std::u32string_view{tmp}, dest);
 1413|  2.15k|        }
 1414|  2.15k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.15k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.15k|        }
 1417|  2.15k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.15k|{
 1277|  2.15k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.15k|    auto it = src.begin();
 1280|   179k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 177k, False: 2.15k]
  ------------------
 1281|   177k|        auto res = get_next_code_point_valid(
 1282|   177k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   177k|                                                                 src.end()));
 1284|   177k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   177k|        dest.push_back(res.value);
 1286|   177k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   177k|    }
 1288|  2.15k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   177k|{
 1189|   177k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   177k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   177k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   177k|    return {input.begin() + len,
 1195|   177k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   177k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    908|    {
 5277|    908|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    908|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    908|        return read_impl(range, specs, value);
 5279|    908|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    908|    {
 5295|    908|        SCN_CLANG_PUSH
 5296|    908|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    908|        switch (m_type) {
 5299|    278|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 278, False: 630]
  ------------------
 5300|    278|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 854]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 874]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    262|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 262, False: 646]
  ------------------
 5310|    262|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    262|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 906]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    278|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 278, False: 630]
  ------------------
 5320|    278|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    278|                    range,
 5322|    278|                    get_unescaped_regex_pattern(
 5323|    278|                        specs.charset_string<SourceCharT>()),
 5324|    278|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 908]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    908|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    908|        }
 5331|       |
 5332|    908|        SCN_CLANG_POP
 5333|    908|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    278|    {
 4820|    278|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    278|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    366|{
 4752|    366|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    366|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    366|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 156, False: 210]
  ------------------
 4756|    156|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    156|                                     "Invalid encoding in scanned string");
 4758|    156|    }
 4759|    210|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    210|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    210|    return SCN_MOVE(result);
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    210|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     54|    {
 4841|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 20]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     20|        return read_string_impl(
 4851|     20|            range,
 4852|     20|            read_until_code_units(
 4853|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     20|            value);
 4855|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     34|    {
 4947|     34|        return read_impl(
 4948|     34|            range,
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
 4952|     34|            detail::priority_tag<1>{});
 4953|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    262|    {
 5048|    262|        auto it = read_source_impl(range, {specs});
 5049|    262|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 252]
  |  |  ------------------
  ------------------
 5050|     10|            return unexpected(it.error());
 5051|     10|        }
 5052|       |
 5053|    252|        return read_string_impl(range, *it, value);
 5054|    262|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    252|{
 4752|    252|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    252|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    252|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 88, False: 164]
  ------------------
 4756|     88|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     88|                                     "Invalid encoding in scanned string");
 4758|     88|    }
 4759|    164|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    164|    static_cast<    \
  |  |  929|    164|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    164|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    164|    return SCN_MOVE(result);
  ------------------
  |  |  928|    164|    static_cast<    \
  |  |  929|    164|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    164|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    280|    {
 4891|    280|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    280|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    280|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  5.31k|    {
 5277|  5.31k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  5.31k|        return read_impl(range, specs, value);
 5279|  5.31k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  5.31k|    {
 5295|  5.31k|        SCN_CLANG_PUSH
 5296|  5.31k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  5.31k|        switch (m_type) {
 5299|    276|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 276, False: 5.04k]
  ------------------
 5300|    276|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 5.27k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 5.31k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.00k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.00k, False: 4.31k]
  ------------------
 5310|  1.00k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.00k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.67k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.67k, False: 1.64k]
  ------------------
 5315|  3.67k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.67k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.67k|                    specs.regexp_flags, value);
 5318|       |
 5319|    312|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 312, False: 5.00k]
  ------------------
 5320|    312|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    312|                    range,
 5322|    312|                    get_unescaped_regex_pattern(
 5323|    312|                        specs.charset_string<SourceCharT>()),
 5324|    312|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 5.31k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  5.31k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  5.31k|        }
 5331|       |
 5332|  5.31k|        SCN_CLANG_POP
 5333|  5.31k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    952|    {
 4820|    952|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    952|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    998|{
 4752|    998|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    998|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    998|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 362, False: 636]
  ------------------
 4756|    362|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    362|                                     "Invalid encoding in scanned string");
 4758|    362|    }
 4759|    636|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    636|    static_cast<    \
  |  |  929|    636|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    636|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    636|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 636]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    636|    return SCN_MOVE(result);
  ------------------
  |  |  928|    636|    static_cast<    \
  |  |  929|    636|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    636|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.78k|{
 3012|  1.78k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.78k|        dest.assign(source.view());
 3014|  1.78k|    }
 3015|  1.78k|    else {
 3016|  1.78k|        return transcode_impl(source.view(), dest);
 3017|  1.78k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.78k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.00k|    {
 5048|  1.00k|        auto it = read_source_impl(range, {specs});
 5049|  1.00k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 308, False: 698]
  |  |  ------------------
  ------------------
 5050|    308|            return unexpected(it.error());
 5051|    308|        }
 5052|       |
 5053|    698|        return read_string_impl(range, *it, value);
 5054|  1.00k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.28k|{
 4752|  1.28k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.28k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.28k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 136, False: 1.14k]
  ------------------
 4756|    136|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    136|                                     "Invalid encoding in scanned string");
 4758|    136|    }
 4759|  1.14k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.14k|    static_cast<    \
  |  |  929|  1.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.14k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.14k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.14k|    static_cast<    \
  |  |  929|  1.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.14k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.98k|    {
 4891|  3.98k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 582]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.40k|    }                                                  \
  |  |  |  | 3671|  3.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    582|        return read_string_impl(range, it, value);
 4893|  3.98k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  7.04k|{
 5809|  7.04k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  7.04k|        return reader_impl_for_bool<CharT>{};
 5811|  7.04k|    }
 5812|  7.04k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  7.04k|        return reader_impl_for_char<CharT>{};
 5814|  7.04k|    }
 5815|  7.04k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  7.04k|        return reader_impl_for_wchar<CharT>{};
 5817|  7.04k|    }
 5818|  7.04k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  7.04k|        return reader_impl_for_code_point<CharT>{};
 5820|  7.04k|    }
 5821|  7.04k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  7.04k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  7.04k|        return reader_impl_for_string<CharT>{};
 5824|  7.04k|    }
 5825|  7.04k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  7.04k|                       std::is_same_v<T, std::wstring>) {
 5827|  7.04k|        return reader_impl_for_string<CharT>{};
 5828|  7.04k|    }
 5829|  7.04k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  7.04k|                       std::is_same_v<T, wregex_matches>) {
 5831|  7.04k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  7.04k|    }
 5833|  7.04k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  7.04k|        return reader_impl_for_voidptr<CharT>{};
 5835|  7.04k|    }
 5836|  7.04k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  7.04k|        return reader_impl_for_float<CharT>{};
 5838|  7.04k|    }
 5839|  7.04k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  7.04k|                       !std::is_same_v<T, wchar_t> &&
 5841|  7.04k|                       !std::is_same_v<T, char32_t> &&
 5842|  7.04k|                       !std::is_same_v<T, bool>) {
 5843|  7.04k|        return reader_impl_for_int<CharT>{};
 5844|  7.04k|    }
 5845|  7.04k|    else {
 5846|  7.04k|        return reader_impl_for_monostate<CharT>{};
 5847|  7.04k|    }
 5848|  7.04k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    908|    {
 5277|    908|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    908|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    908|        return read_impl(range, specs, value);
 5279|    908|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    908|    {
 5295|    908|        SCN_CLANG_PUSH
 5296|    908|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    908|        switch (m_type) {
 5299|    278|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 278, False: 630]
  ------------------
 5300|    278|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 854]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 874]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    262|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 262, False: 646]
  ------------------
 5310|    262|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    262|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 906]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    278|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 278, False: 630]
  ------------------
 5320|    278|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    278|                    range,
 5322|    278|                    get_unescaped_regex_pattern(
 5323|    278|                        specs.charset_string<SourceCharT>()),
 5324|    278|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 908]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    908|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    908|        }
 5331|       |
 5332|    908|        SCN_CLANG_POP
 5333|    908|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    278|    {
 4827|    278|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    278|                                     value);
 4829|    278|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    366|{
 4773|    366|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    366|    auto src = [&]() {
 4776|    366|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    366|            return make_contiguous_buffer(
 4778|    366|                ranges::subrange{range.begin().base(), result.base()});
 4779|    366|        }
 4780|    366|        else {
 4781|    366|            return make_contiguous_buffer(
 4782|    366|                ranges::subrange{range.begin(), result});
 4783|    366|        }
 4784|    366|    }();
 4785|    366|    using src_type = decltype(src);
 4786|       |
 4787|    366|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    366|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    366|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    366|                                     "Cannot read a string_view from "
 4796|    366|                                     "this source range (would require "
 4797|    366|                                     "transcoding)");
 4798|    366|    }
 4799|    366|    else {
 4800|    366|        const auto view = src.view();
 4801|    366|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    366|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 156, False: 210]
  ------------------
 4804|    156|            return unexpected_scan_error(
 4805|    156|                scan_error::invalid_scanned_value,
 4806|    156|                "Invalid encoding in scanned string_view");
 4807|    156|        }
 4808|       |
 4809|    210|        return SCN_MOVE(result);
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    366|    }
 4811|    366|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    366|    auto src = [&]() {
 4776|    366|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    366|            return make_contiguous_buffer(
 4778|    366|                ranges::subrange{range.begin().base(), result.base()});
 4779|    366|        }
 4780|    366|        else {
 4781|    366|            return make_contiguous_buffer(
 4782|    366|                ranges::subrange{range.begin(), result});
 4783|    366|        }
 4784|    366|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     54|    {
 4863|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 20]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     20|        return read_string_view_impl(
 4873|     20|            range,
 4874|     20|            read_until_code_units(
 4875|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     20|            value);
 4877|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     34|    {
 4959|     34|        return read_impl(
 4960|     34|            range,
 4961|     34|            [&](const auto& rng) {
 4962|     34|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     34|            },
 4964|     34|            detail::priority_tag<1>{});
 4965|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     34|            [&](const auto& rng) {
 4962|     34|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     34|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    262|    {
 5062|    262|        auto it = read_source_impl(range, {specs});
 5063|    262|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 252]
  |  |  ------------------
  ------------------
 5064|     10|            return unexpected(it.error());
 5065|     10|        }
 5066|       |
 5067|    252|        return read_string_view_impl(range, *it, value);
 5068|    262|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    252|{
 4773|    252|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    252|    auto src = [&]() {
 4776|    252|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    252|            return make_contiguous_buffer(
 4778|    252|                ranges::subrange{range.begin().base(), result.base()});
 4779|    252|        }
 4780|    252|        else {
 4781|    252|            return make_contiguous_buffer(
 4782|    252|                ranges::subrange{range.begin(), result});
 4783|    252|        }
 4784|    252|    }();
 4785|    252|    using src_type = decltype(src);
 4786|       |
 4787|    252|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    252|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    252|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    252|                                     "Cannot read a string_view from "
 4796|    252|                                     "this source range (would require "
 4797|    252|                                     "transcoding)");
 4798|    252|    }
 4799|    252|    else {
 4800|    252|        const auto view = src.view();
 4801|    252|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    252|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 88, False: 164]
  ------------------
 4804|     88|            return unexpected_scan_error(
 4805|     88|                scan_error::invalid_scanned_value,
 4806|     88|                "Invalid encoding in scanned string_view");
 4807|     88|        }
 4808|       |
 4809|    164|        return SCN_MOVE(result);
  ------------------
  |  |  928|    164|    static_cast<    \
  |  |  929|    164|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    252|    }
 4811|    252|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    252|    auto src = [&]() {
 4776|    252|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    252|            return make_contiguous_buffer(
 4778|    252|                ranges::subrange{range.begin().base(), result.base()});
 4779|    252|        }
 4780|    252|        else {
 4781|    252|            return make_contiguous_buffer(
 4782|    252|                ranges::subrange{range.begin(), result});
 4783|    252|        }
 4784|    252|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    280|    {
 4902|    280|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    280|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    280|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  5.31k|    {
 5277|  5.31k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  5.31k|        return read_impl(range, specs, value);
 5279|  5.31k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  5.31k|    {
 5295|  5.31k|        SCN_CLANG_PUSH
 5296|  5.31k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  5.31k|        switch (m_type) {
 5299|    276|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 276, False: 5.04k]
  ------------------
 5300|    276|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 5.27k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 5.31k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.00k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.00k, False: 4.31k]
  ------------------
 5310|  1.00k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.00k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.67k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.67k, False: 1.64k]
  ------------------
 5315|  3.67k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.67k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.67k|                    specs.regexp_flags, value);
 5318|       |
 5319|    312|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 312, False: 5.00k]
  ------------------
 5320|    312|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    312|                    range,
 5322|    312|                    get_unescaped_regex_pattern(
 5323|    312|                        specs.charset_string<SourceCharT>()),
 5324|    312|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 5.31k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  5.31k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  5.31k|        }
 5331|       |
 5332|  5.31k|        SCN_CLANG_POP
 5333|  5.31k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    952|    {
 4827|    952|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    952|                                     value);
 4829|    952|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    998|{
 4773|    998|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    998|    auto src = [&]() {
 4776|    998|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    998|            return make_contiguous_buffer(
 4778|    998|                ranges::subrange{range.begin().base(), result.base()});
 4779|    998|        }
 4780|    998|        else {
 4781|    998|            return make_contiguous_buffer(
 4782|    998|                ranges::subrange{range.begin(), result});
 4783|    998|        }
 4784|    998|    }();
 4785|    998|    using src_type = decltype(src);
 4786|       |
 4787|    998|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    998|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    998|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    998|                                     "Cannot read a string_view from "
 4796|    998|                                     "this source range (would require "
 4797|    998|                                     "transcoding)");
 4798|    998|    }
 4799|    998|    else {
 4800|    998|        const auto view = src.view();
 4801|    998|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    998|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 362, False: 636]
  ------------------
 4804|    362|            return unexpected_scan_error(
 4805|    362|                scan_error::invalid_scanned_value,
 4806|    362|                "Invalid encoding in scanned string_view");
 4807|    362|        }
 4808|       |
 4809|    636|        return SCN_MOVE(result);
  ------------------
  |  |  928|    636|    static_cast<    \
  |  |  929|    636|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    998|    }
 4811|    998|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    998|    auto src = [&]() {
 4776|    998|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    998|            return make_contiguous_buffer(
 4778|    998|                ranges::subrange{range.begin().base(), result.base()});
 4779|    998|        }
 4780|    998|        else {
 4781|    998|            return make_contiguous_buffer(
 4782|    998|                ranges::subrange{range.begin(), result});
 4783|    998|        }
 4784|    998|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  1.00k|    {
 5062|  1.00k|        auto it = read_source_impl(range, {specs});
 5063|  1.00k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 308, False: 698]
  |  |  ------------------
  ------------------
 5064|    308|            return unexpected(it.error());
 5065|    308|        }
 5066|       |
 5067|    698|        return read_string_view_impl(range, *it, value);
 5068|  1.00k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.28k|{
 4773|  1.28k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.28k|    auto src = [&]() {
 4776|  1.28k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.28k|            return make_contiguous_buffer(
 4778|  1.28k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.28k|        }
 4780|  1.28k|        else {
 4781|  1.28k|            return make_contiguous_buffer(
 4782|  1.28k|                ranges::subrange{range.begin(), result});
 4783|  1.28k|        }
 4784|  1.28k|    }();
 4785|  1.28k|    using src_type = decltype(src);
 4786|       |
 4787|  1.28k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.28k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.28k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.28k|                                     "Cannot read a string_view from "
 4796|  1.28k|                                     "this source range (would require "
 4797|  1.28k|                                     "transcoding)");
 4798|  1.28k|    }
 4799|  1.28k|    else {
 4800|  1.28k|        const auto view = src.view();
 4801|  1.28k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.28k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 136, False: 1.14k]
  ------------------
 4804|    136|            return unexpected_scan_error(
 4805|    136|                scan_error::invalid_scanned_value,
 4806|    136|                "Invalid encoding in scanned string_view");
 4807|    136|        }
 4808|       |
 4809|  1.14k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.14k|    static_cast<    \
  |  |  929|  1.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.28k|    }
 4811|  1.28k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.28k|    auto src = [&]() {
 4776|  1.28k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.28k|            return make_contiguous_buffer(
 4778|  1.28k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.28k|        }
 4780|  1.28k|        else {
 4781|  1.28k|            return make_contiguous_buffer(
 4782|  1.28k|                ranges::subrange{range.begin(), result});
 4783|  1.28k|        }
 4784|  1.28k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.98k|    {
 4902|  3.98k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 582]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.40k|    }                                                  \
  |  |  |  | 3671|  3.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    582|        return read_string_view_impl(range, it, value);
 4904|  3.98k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  3.19k|    {
 5624|  3.19k|        reader_error_handler eh{};
 5625|  3.19k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  3.19k|            detail::check_code_point_type_specs(specs, eh);
 5627|  3.19k|        }
 5628|  3.19k|        else {
 5629|  3.19k|            detail::check_char_type_specs(specs, eh);
 5630|  3.19k|        }
 5631|  3.19k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 490]
  |  |  ------------------
  ------------------
 5632|  2.70k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  2.70k|        }
 5634|    490|        return {};
 5635|  3.19k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  7.23k|    {
  763|  7.23k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  7.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.23k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.42k|    {
  754|  1.42k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  2.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.46k|              cvref<T> obj = *get<T>(fn);
  745|  2.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.46k|              }
  748|  2.46k|              else {
  749|  2.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.46k|              }
  751|  2.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.46k|    {
  684|  2.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.46k|            return static_cast<T*>(s.m_cp);
  686|  2.46k|        }
  687|  2.46k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.46k|            return static_cast<T*>(s.m_p);
  689|  2.46k|        }
  690|  2.46k|        else {
  691|  2.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.46k|        }
  693|  2.46k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.42k|        {
  662|  1.42k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  13.1k|    {
 5619|  13.1k|        return false;
 5620|  13.1k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     60|    {
 1780|     60|        auto stdloc = loc.get<std::locale>();
 1781|     60|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     60|        grouping = numpunct.grouping();
 1783|     60|        thousands_sep =
 1784|     60|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 60]
  ------------------
 1785|     60|        decimal_point = numpunct.decimal_point();
 1786|     60|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     70|{
 1717|     70|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 70, False: 0]
  ------------------
 1718|     70|        return std::use_facet<Facet>(stdloc);
 1719|     70|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     70|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.71k|{
 2349|  3.71k|    size_t count{0};
 2350|  3.71k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.71k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.71k|    });
 2353|  3.71k|    return count;
 2354|  3.71k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.71k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.71k|    auto it = input.begin();
 1448|  9.10k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 5.39k, False: 3.71k]
  ------------------
 1449|  5.39k|        auto res = get_next_code_point(
 1450|  5.39k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  5.39k|        cb(res.value);
 1452|  5.39k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  5.39k|    }
 1454|  3.71k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   431M|{
 1169|   431M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   431M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   431M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   431M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   431M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 431M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   431M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   431M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 431M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   431M|    return {input.begin() + len,
 1181|   431M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   431M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.71k|    {
  754|  3.71k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  5.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.39k|              cvref<T> obj = *get<T>(fn);
  745|  5.39k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.39k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.39k|              }
  748|  5.39k|              else {
  749|  5.39k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.39k|              }
  751|  5.39k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  5.39k|    {
  684|  5.39k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.39k|            return static_cast<T*>(s.m_cp);
  686|  5.39k|        }
  687|  5.39k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.39k|            return static_cast<T*>(s.m_p);
  689|  5.39k|        }
  690|  5.39k|        else {
  691|  5.39k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.39k|        }
  693|  5.39k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  5.39k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  5.39k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  5.39k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.71k|        {
  662|  3.71k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  25.4k|    {
 1582|  25.4k|        return m_view;
 1583|  25.4k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  25.7k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    304|    {
 2421|    304|        return m_multibyte_left;
 2422|    304|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  54.9k|    {
 2426|  54.9k|        return *m_current;
 2427|  54.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  36.8k|    {
 2435|  36.8k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  36.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  36.8k|        _increment_current();
 2437|  36.8k|        return *this;
 2438|  36.8k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  36.8k|    {
 2668|  36.8k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 36.8k, False: 0]
  ------------------
 2669|  36.8k|            auto cplen = _get_cp_length_at_current();
 2670|  36.8k|            m_multibyte_left = cplen - 1;
 2671|  36.8k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  36.8k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  36.8k|        ++m_current;
 2678|  36.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  36.8k|    {
 2639|  36.8k|        return static_cast<difference_type>(
 2640|  36.8k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  36.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  36.8k|    {
 2645|  36.8k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36.8k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  36.8k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 36.8k, False: 0]
  ------------------
 2650|  36.8k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  36.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  36.8k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  36.8k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  36.8k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  75.2k|{
 1857|  75.2k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  75.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  75.2k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  75.2k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  75.2k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 142, False: 75.1k]
  ------------------
 1862|    142|            return unexpected(eof_error::eof);
 1863|    142|        }
 1864|       |
 1865|  75.1k|        return ranges::next(range.begin(), count);
 1866|  75.2k|    }
 1867|  75.2k|    else {
 1868|  75.2k|        auto it = range.begin();
 1869|  75.2k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  75.2k|            return ranges::next(it, count);
 1871|  75.2k|        }
 1872|       |
 1873|  75.2k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  75.2k|            if (it == range.end()) {
 1875|  75.2k|                return unexpected(eof_error::eof);
 1876|  75.2k|            }
 1877|  75.2k|        }
 1878|       |
 1879|  75.2k|        return it;
 1880|  75.2k|    }
 1881|  75.2k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  13.5k|    {
 2531|  13.5k|        return !(a == b);
 2532|  13.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  14.2k|    {
 2523|  14.2k|        return a.m_current == b.m_current;
 2524|  14.2k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  2.14k|    {
 2430|  2.14k|        return *m_current;
 2431|  2.14k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  17.6k|    {
 1890|  17.6k|        return !codepoint.empty();
 1891|  17.6k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    354|{
 1683|    354|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    354|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    354|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    354|        return string_view_wrapper{SCN_FWD(range)};
 1687|    354|    }
 1688|    354|    else {
 1689|    354|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    354|    }
 1691|    354|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    354|    {
 1537|    354|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    354|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    354|    {
 1621|    354|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    354|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    354|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    354|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    354|            m_storage.reset();
 1627|    354|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    354|        }
 1629|    354|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    354|                                          std::basic_string<CharT>>) {
 1631|    354|            m_storage.emplace(SCN_FWD(range));
 1632|    354|            m_view = string_view_type{*m_storage};
 1633|    354|        }
 1634|    354|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    354|                                          typename detail::basic_scan_buffer<
 1636|    354|                                              value_t>::forward_iterator> &&
 1637|    354|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    354|            auto beg_seg = range.begin().contiguous_segment();
 1639|    354|            auto end_seg = range.end().contiguous_segment();
 1640|    354|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    354|                             detail::to_address(end_seg.end()))) {
 1642|    354|                auto& str = m_storage.emplace();
 1643|    354|                str.reserve(range.end().position() - range.begin().position());
 1644|    354|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    354|                m_view = string_view_type{str};
 1646|    354|                return;
 1647|    354|            }
 1648|       |
 1649|    354|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    354|                                                            end_seg.data());
 1651|    354|            m_storage.reset();
 1652|    354|        }
 1653|    354|        else {
 1654|    354|            auto& str = m_storage.emplace();
 1655|    354|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    354|                str.reserve(range.size());
 1657|    354|            }
 1658|    354|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    354|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    354|                          std::back_inserter(str));
 1661|    354|            }
 1662|    354|            else {
 1663|    354|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    354|                     ++it) {
 1665|    354|                    str.push_back(*it);
 1666|    354|                }
 1667|    354|            }
 1668|    354|            m_view = string_view_type{str};
 1669|    354|        }
 1670|    354|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  9.11k|    {
 2382|  9.11k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  50.2k|    {
 2413|  50.2k|        return m_current;
 2414|  50.2k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  91.0k|{
 2117|  91.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  91.0k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  91.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  91.0k|        auto buf = make_contiguous_buffer(range);
 2121|  91.0k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  91.0k|        return ranges::next(range.begin(),
 2123|  91.0k|                            ranges::distance(buf.view().begin(), it));
 2124|  91.0k|    }
 2125|  91.0k|    else {
 2126|  91.0k|        auto it = range.begin();
 2127|       |
 2128|  91.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  91.0k|            auto seg = get_contiguous_beginning(range);
 2130|  91.0k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  91.0k|                seg_it != seg.end()) {
 2132|  91.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  91.0k|            }
 2134|  91.0k|            ranges::advance(it, seg.size());
 2135|  91.0k|        }
 2136|       |
 2137|  91.0k|        return read_while_code_point(
 2138|  91.0k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  91.0k|    }
 2140|  91.0k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  91.0k|{
 2082|  91.0k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  91.0k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  91.0k|{
 2061|  91.0k|    auto it = range.begin();
 2062|  94.5k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 93.7k, False: 820]
  ------------------
 2063|  93.7k|        const auto val =
 2064|  93.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  93.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  93.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 93.7k, False: 0]
  |  |  ------------------
  ------------------
 2066|  93.7k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  93.7k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  93.7k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 90.1k, False: 3.57k]
  ------------------
 2069|  90.1k|                return it;
 2070|  90.1k|            }
 2071|  93.7k|        }
 2072|  3.57k|        it = val.iterator;
 2073|  3.57k|    }
 2074|       |
 2075|    820|    return it;
 2076|  91.0k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   492k|{
 1899|   492k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   492k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   492k|    auto it = range.begin();
 1903|   492k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   492k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   492k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 492k, False: 0]
  ------------------
 1912|   492k|        ++it;
 1913|   492k|        return {it, string_type(1, *range.begin())};
 1914|   492k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   492k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   828k|{
  944|   828k|    return is_range_eof(r.begin(), r.end());
  945|   828k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   432M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   432M|    {
  937|   432M|        return begin == end;
  938|   432M|    }
  939|   432M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  12.5k|    {
  190|  12.5k|        i = std::move(bound);
  191|  12.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   492k|    {
 1890|   492k|        return !codepoint.empty();
 1891|   492k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  91.0k|    {
  754|  91.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|  93.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  93.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.7k|              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  93.7k|    {
  684|  93.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  93.7k|            return static_cast<T*>(s.m_cp);
  686|  93.7k|        }
  687|  93.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  93.7k|            return static_cast<T*>(s.m_p);
  689|  93.7k|        }
  690|  93.7k|        else {
  691|  93.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  93.7k|        }
  693|  93.7k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  93.7k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  91.0k|        {
  662|  91.0k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   335k|{
  950|   335k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|   335k|    return eof_error::good;
  954|   335k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  3.26k|    {
 2832|  3.26k|        return take_width_view{r, n};
 2833|  3.26k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  3.26k|    {
 2801|  3.26k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  3.26k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    160|    {
 5699|    160|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 132, False: 28]
  ------------------
 5700|    160|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 28]
  ------------------
 5701|    132|            return read_default(range, value, loc);
 5702|    132|        }
 5703|       |
 5704|     28|        reader_impl_for_int<CharT> reader{};
 5705|     28|        using integer_type =
 5706|     28|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     28|        integer_type tmp_value{};
 5708|     28|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     28|        value = static_cast<integer_type>(value);
 5710|     28|        return ret;
 5711|    160|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    132|    {
 5683|    132|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    132|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    132|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    132|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    132|        }
 5687|    132|        else {
 5688|    132|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    132|        }
 5690|    132|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    132|    {
 5564|    132|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    132|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    132|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    132|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    132|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    132|        ch = *range.begin();
 5566|    132|        return it;
 5567|    132|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.12k|{
 1846|  1.12k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.12k|    return ranges::next(range.begin());
 1851|  1.12k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.12k|{
  950|  1.12k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.12k|    return eof_error::good;
  954|  1.12k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.12k|{
  944|  1.12k|    return is_range_eof(r.begin(), r.end());
  945|  1.12k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  18.8k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  18.8k|    {
  937|  18.8k|        return begin == end;
  938|  18.8k|    }
  939|  18.8k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  48.1k|        {
 2770|  48.1k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 304, False: 47.8k]
  |  Branch (2770:39): [True: 304, False: 0]
  ------------------
 2771|  48.1k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 306, False: 47.4k]
  ------------------
 2772|  48.1k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  11.3k|    {
 2816|  11.3k|        return sentinel<true>{m_base.get().end()};
 2817|  11.3k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  29.5k|    {
 2717|  29.5k|        return view;
 2718|  29.5k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  11.3k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.15k|    {
  296|  1.15k|        ++x;
  297|  1.15k|        return x;
  298|  1.15k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  9.11k|    {
 2810|  9.11k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  9.11k|                                      m_count};
 2812|  9.11k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    194|    {
 3539|    194|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    194|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    194|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    194|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    194|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 194]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    194|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    194|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    194|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 194]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    194|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 194]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    194|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    194|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 188, False: 6]
  |  |  ------------------
  ------------------
 3565|    188|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    188|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    188|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    188|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 188, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    188|    }                                                  \
  |  |  |  | 3671|    188|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      6|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      6|            localized_number_formatting_options<CharT>{loc};
 3586|      6|#endif
 3587|       |
 3588|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    496|{
 3326|    496|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    496|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    496|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    496|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    496|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    496|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    496|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    496|        parse_integer_base_prefix(
 3331|    496|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    496|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 496]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    496|    else {
 3343|    496|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 496]
  |  Branch (3343:13): [True: 496, False: 0]
  ------------------
 3344|    496|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 496, False: 0]
  ------------------
 3345|    496|            digits_begin_it = base_prefix_begin_it;
 3346|    496|        }
 3347|    496|    }
 3348|       |
 3349|    496|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 496, False: 0]
  ------------------
 3350|    496|        sign = sign_type::plus_sign;
 3351|    496|    }
 3352|    496|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    496|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    496|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    656|{
 3141|    656|    auto r = read_one_of_code_unit(range, "+-");
 3142|    656|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 656, False: 0]
  ------------------
 3143|    656|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 656, False: 0]
  ------------------
 3144|    656|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    656|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    656|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    656|{
 2272|    656|    auto it = read_code_unit(range);
 2273|    656|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.31k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.31k, False: 656]
  ------------------
 2278|  1.31k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.31k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.31k|    }
 2282|       |
 2283|    656|    return unexpected(parse_error::error);
 2284|    656|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    496|{
 3293|    496|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 490]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     24|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 24, False: 472]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     24|            bool zero_parsed = false;
 3302|     24|            auto it = apply_opt(
 3303|     24|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     24|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    142|        case 16:
  ------------------
  |  Branch (3307:9): [True: 142, False: 354]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    142|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    142|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 484]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    312|        default:
  ------------------
  |  Branch (3316:9): [True: 312, False: 184]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    312|            return {range.begin(), base, false};
 3319|    496|    }
 3320|    496|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    172|{
 2291|    172|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 172, False: 0]
  ------------------
 2292|    172|        return range.begin();
 2293|    172|    }
 2294|      0|    return *result;
 2295|    172|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    672|{
 2231|    672|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    672|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    672|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    672|        if (range.size() < str.size()) {
 2236|    672|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    672|        }
 2238|    672|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    672|            return unexpected(parse_error::error);
 2240|    672|        }
 2241|    672|        return ranges::next(range.begin(), str.size());
 2242|    672|    }
 2243|    672|    else {
 2244|    672|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    672|            if (ch < 'A' || ch > 'Z') {
 2246|    672|                return ch;
 2247|    672|            }
 2248|    672|            return static_cast<char_type>(ch +
 2249|    672|                                          static_cast<char_type>('a' - 'A'));
 2250|    672|        };
 2251|       |
 2252|    672|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    672|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    672|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    672|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 606]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    672|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    606|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    606|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    606|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    606|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    606|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 606, False: 0]
  |  |  ------------------
  ------------------
 2257|    606|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    606|                    return ascii_tolower(a) ==
 2259|    606|                           static_cast<detail::char_t<Range>>(b);
 2260|    606|                }))) {
 2261|    606|            return unexpected(parse_error::error);
 2262|    606|        }
 2263|       |
 2264|      0|        return it;
 2265|    606|    }
 2266|    672|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    672|{
 1857|    672|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    672|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    672|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    672|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    672|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    672|        if (sz < count) {
 1862|    672|            return unexpected(eof_error::eof);
 1863|    672|        }
 1864|       |
 1865|    672|        return ranges::next(range.begin(), count);
 1866|    672|    }
 1867|    672|    else {
 1868|    672|        auto it = range.begin();
 1869|    672|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 672]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.25k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.64k, False: 606]
  ------------------
 1874|  1.64k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 66, False: 1.58k]
  ------------------
 1875|     66|                return unexpected(eof_error::eof);
 1876|     66|            }
 1877|  1.64k|        }
 1878|       |
 1879|    606|        return it;
 1880|    672|    }
 1881|    672|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    672|{
 1095|    672|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    672|        return r.size();
 1097|    672|    }
 1098|    672|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    672|                           ranges::const_iterator_t<Range>,
 1100|    672|                           typename detail::basic_scan_buffer<
 1101|    672|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    672|        if constexpr (ranges::common_range<Range>) {
 1103|    672|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    672|        }
 1105|    672|        else {
 1106|    672|            if (r.begin().stores_parent()) {
 1107|    672|                return static_cast<size_t>(
 1108|    672|                    r.begin().parent()->chars_available() -
 1109|    672|                    r.begin().position());
 1110|    672|            }
 1111|    672|            return r.begin().contiguous_segment().size();
 1112|    672|        }
 1113|    672|    }
 1114|    672|    else {
 1115|    672|        return 0;
 1116|    672|    }
 1117|    672|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    606|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    606|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 12, False: 594]
  |  Branch (2245:29): [True: 594, False: 0]
  ------------------
 2246|    606|                return ch;
 2247|    606|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    606|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     36|{
 3258|     36|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 36]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     36|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 36]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     36|    return unexpected(parse_error::error);
 3268|     36|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     36|{
 2146|     36|    auto it = read_code_unit(range);
 2147|     36|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     36|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 2152|     36|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     36|        return unexpected(parse_error::error);
 2154|     36|    }
 2155|       |
 2156|      0|    return *it;
 2157|     36|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     36|{
 1846|     36|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     36|    return ranges::next(range.begin());
 1851|     36|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     36|{
  950|     36|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     36|    return eof_error::good;
  954|     36|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  17.7k|{
  944|  17.7k|    return is_range_eof(r.begin(), r.end());
  945|  17.7k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    154|{
 3251|    154|    return read_matching_string_classic_nocase(range, "0x");
 3252|    154|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    484|{
 3360|    484|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    484|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    484|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    484|            return unexpected_scan_error(
 3365|    484|                scan_error::invalid_scanned_value,
 3366|    484|                "Failed to parse integer: No digits found");
 3367|    484|        }
 3368|    484|        return range.end();
 3369|    484|    }
 3370|    484|    else {
 3371|    484|        return read_while1_code_unit(range,
 3372|    484|                                     [&](char_type ch) noexcept {
 3373|    484|                                         return char_to_int(ch) < base;
 3374|    484|                                     })
 3375|    484|            .transform_error(map_parse_error_to_scan_error(
 3376|    484|                scan_error::invalid_scanned_value,
 3377|    484|                "Failed to parse integer: No digits found"));
 3378|    484|    }
 3379|    484|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    644|{
 1996|    644|    auto it = read_while_code_unit(range, pred);
 1997|    644|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 644, False: 0]
  ------------------
 1998|    644|        return unexpected(parse_error::error);
 1999|    644|    }
 2000|      0|    return it;
 2001|    644|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    644|{
 1976|    644|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    644|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    644|{
 1957|    644|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    644|        return std::find_if(range.begin(), range.end(), pred);
 1959|    644|    }
 1960|    644|    else {
 1961|    644|        auto first = range.begin();
 1962|    644|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 644, False: 0]
  ------------------
 1963|    644|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 644, False: 0]
  ------------------
 1964|    644|                return first;
 1965|    644|            }
 1966|    644|        }
 1967|      0|        return first;
 1968|    644|    }
 1969|    644|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  22.3k|        {
 2781|  22.3k|            return !(y == x);
 2782|  22.3k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    484|    {
  754|    484|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|    484|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    484|                  obj(static_cast<decltype(args)>(args)...);
  747|    484|              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|    484|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    484|            return static_cast<T*>(s.m_cp);
  686|    484|        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    484|            return static_cast<T*>(s.m_p);
  689|    484|        }
  690|    484|        else {
  691|    484|            return reinterpret_cast<T*>(s.m_fp);
  692|    484|        }
  693|    484|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    484|                                     [&](char_type ch) noexcept {
 3373|    484|                                         return char_to_int(ch) < base;
 3374|    484|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    484|        {
  662|    484|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     12|{
 3390|     12|    std::basic_string<CharT> output;
 3391|     12|    std::string thsep_indices;
 3392|     12|    auto it = range.begin();
 3393|     12|    bool digit_matched = false;
 3394|     12|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 12, False: 0]
  ------------------
 3395|     12|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 12]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     12|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 12, False: 0]
  ------------------
 3400|     12|            break;
 3401|     12|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     12|    }
 3407|     12|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3408|     12|        return unexpected_scan_error(
 3409|     12|            scan_error::invalid_scanned_value,
 3410|     12|            "Failed to parse integer: No digits found");
 3411|     12|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     12|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  48.6k|    {
 2417|  48.6k|        return m_count;
 2418|  48.6k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    328|    {
 5699|    328|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 314, False: 14]
  ------------------
 5700|    328|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 14]
  ------------------
 5701|    314|            return read_default(range, value, loc);
 5702|    314|        }
 5703|       |
 5704|     14|        reader_impl_for_int<CharT> reader{};
 5705|     14|        using integer_type =
 5706|     14|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     14|        integer_type tmp_value{};
 5708|     14|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     14|        value = static_cast<integer_type>(value);
 5710|     14|        return ret;
 5711|    328|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|  12.5k|    {
 5683|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|  12.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|  12.5k|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|  12.5k|        }
 5687|  12.5k|        else {
 5688|  12.5k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|  12.5k|        }
 5690|  12.5k|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|  12.5k|    {
 5564|  12.5k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|  12.5k|        ch = *range.begin();
 5566|  12.5k|        return it;
 5567|  12.5k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  87.7k|{
 1846|  87.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  87.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.7k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  87.7k|    return ranges::next(range.begin());
 1851|  87.7k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   431M|    {
  296|   431M|        ++x;
  297|   431M|        return x;
  298|   431M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    360|    {
 3539|    360|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    360|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    360|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 360]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    360|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 360]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    360|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    360|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 342, False: 18]
  |  |  ------------------
  ------------------
 3565|    342|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    342|                    parse_integer_digits_without_thsep(
 3567|    342|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    342|                        prefix_result.parsed_base));
 3569|       |
 3570|    342|            auto buf = make_contiguous_buffer(
 3571|    342|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    342|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    342|    }                                                  \
  |  |  |  | 3671|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    342|        }
 3580|       |
 3581|     18|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     18|            localized_number_formatting_options<CharT>{loc};
 3586|     18|#endif
 3587|       |
 3588|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  37.6k|{
 3326|  37.6k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  37.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 37.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  37.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  37.6k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  37.6k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  37.6k|        parse_integer_base_prefix(
 3331|  37.6k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  37.6k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 37.6k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  37.6k|    else {
 3343|  37.6k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 37.6k]
  ------------------
 3344|  37.6k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 37.6k, False: 0]
  ------------------
 3345|  37.6k|            digits_begin_it = base_prefix_begin_it;
 3346|  37.6k|        }
 3347|  37.6k|    }
 3348|       |
 3349|  37.6k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 37.6k, False: 0]
  ------------------
 3350|  37.6k|        sign = sign_type::plus_sign;
 3351|  37.6k|    }
 3352|  37.6k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  37.6k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  37.6k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  50.1k|{
 3141|  50.1k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  50.1k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 50.1k, False: 0]
  ------------------
 3143|  50.1k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 50.1k, False: 0]
  ------------------
 3144|  50.1k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  50.1k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  50.1k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  50.1k|{
 2272|  50.1k|    auto it = read_code_unit(range);
 2273|  50.1k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.1k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|   100k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 100k, False: 50.1k]
  ------------------
 2278|   100k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 100k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|   100k|    }
 2282|       |
 2283|  50.1k|    return unexpected(parse_error::error);
 2284|  50.1k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  37.6k|{
 3293|  37.6k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 37.6k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 37.6k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  12.5k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 12.5k, False: 25.0k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  12.5k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  12.5k|                    false};
 3311|       |
 3312|     10|        case 0:
  ------------------
  |  Branch (3312:9): [True: 10, False: 37.6k]
  ------------------
 3313|       |            // detect base
 3314|     10|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  25.0k|        default:
  ------------------
  |  Branch (3316:9): [True: 25.0k, False: 12.5k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  25.0k|            return {range.begin(), base, false};
 3319|  37.6k|    }
 3320|  37.6k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  12.5k|{
 2291|  12.5k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 12.5k, False: 0]
  ------------------
 2292|  12.5k|        return range.begin();
 2293|  12.5k|    }
 2294|      0|    return *result;
 2295|  12.5k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     16|{
 3244|     16|    return read_matching_string_classic_nocase(range, "0b");
 3245|     16|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  50.1k|{
 2231|  50.1k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  50.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  50.1k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  50.1k|        if (range.size() < str.size()) {
 2236|  50.1k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  50.1k|        }
 2238|  50.1k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  50.1k|            return unexpected(parse_error::error);
 2240|  50.1k|        }
 2241|  50.1k|        return ranges::next(range.begin(), str.size());
 2242|  50.1k|    }
 2243|  50.1k|    else {
 2244|  50.1k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  50.1k|            if (ch < 'A' || ch > 'Z') {
 2246|  50.1k|                return ch;
 2247|  50.1k|            }
 2248|  50.1k|            return static_cast<char_type>(ch +
 2249|  50.1k|                                          static_cast<char_type>('a' - 'A'));
 2250|  50.1k|        };
 2251|       |
 2252|  50.1k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  50.1k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  50.1k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  50.1k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.1k, False: 0]
  |  |  ------------------
  ------------------
 2257|  50.1k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  50.1k|                    return ascii_tolower(a) ==
 2259|  50.1k|                           static_cast<detail::char_t<Range>>(b);
 2260|  50.1k|                }))) {
 2261|  50.1k|            return unexpected(parse_error::error);
 2262|  50.1k|        }
 2263|       |
 2264|      0|        return it;
 2265|  50.1k|    }
 2266|  50.1k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  50.1k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  50.1k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 14, False: 50.1k]
  |  Branch (2245:29): [True: 50.1k, False: 0]
  ------------------
 2246|  50.1k|                return ch;
 2247|  50.1k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  50.1k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     20|{
 3258|     20|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 20]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     20|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 20]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     20|    return unexpected(parse_error::error);
 3268|     20|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  25.1k|{
 2146|  25.1k|    auto it = read_code_unit(range);
 2147|  25.1k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  25.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.1k, False: 0]
  |  |  ------------------
  ------------------
 2152|  25.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  25.1k|        return unexpected(parse_error::error);
 2154|  25.1k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  25.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  12.5k|{
 3251|  12.5k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  12.5k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     10|{
 3274|     10|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 10]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     10|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 10]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     10|    {
 3281|     10|        bool zero_parsed{false};
 3282|     10|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 10]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     10|    }
 3286|     10|    return {range.begin(), 10, false};
 3287|     10|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  37.5k|{
 3360|  37.5k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  37.5k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  37.5k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  37.5k|        return range.end();
 3369|  37.5k|    }
 3370|  37.5k|    else {
 3371|  37.5k|        return read_while1_code_unit(range,
 3372|  37.5k|                                     [&](char_type ch) noexcept {
 3373|  37.5k|                                         return char_to_int(ch) < base;
 3374|  37.5k|                                     })
 3375|  37.5k|            .transform_error(map_parse_error_to_scan_error(
 3376|  37.5k|                scan_error::invalid_scanned_value,
 3377|  37.5k|                "Failed to parse integer: No digits found"));
 3378|  37.5k|    }
 3379|  37.5k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     36|{
 3390|     36|    std::basic_string<CharT> output;
 3391|     36|    std::string thsep_indices;
 3392|     36|    auto it = range.begin();
 3393|     36|    bool digit_matched = false;
 3394|     36|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 36, False: 0]
  ------------------
 3395|     36|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 36]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     36|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 36, False: 0]
  ------------------
 3400|     36|            break;
 3401|     36|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     36|    }
 3407|     36|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3408|     36|        return unexpected_scan_error(
 3409|     36|            scan_error::invalid_scanned_value,
 3410|     36|            "Failed to parse integer: No digits found");
 3411|     36|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     36|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  80.3k|{
 1683|  80.3k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  80.3k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  80.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  80.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  80.3k|    }
 1688|  80.3k|    else {
 1689|  80.3k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  80.3k|    }
 1691|  80.3k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  80.3k|    {
 1490|  80.3k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|   105k|    {
 1503|   105k|        return sv;
 1504|   105k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    346|{
 5951|    346|    using char_type = detail::char_t<Range>;
 5952|    346|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    346|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 346, False: 0]
  ------------------
 5955|    346|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    346|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    346|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 296, False: 50]
  ------------------
 5959|    296|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    296|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 254]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    254|            return result_type{it, 0};
 5969|    296|        }
 5970|       |
 5971|     50|        auto max_width_view = take_width(range, max_width);
 5972|     50|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     50|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 50, False: 0]
  ------------------
 5975|     50|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     50|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     50|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    400|{
 1976|    400|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    400|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    484|{
 1957|    484|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    484|        return std::find_if(range.begin(), range.end(), pred);
 1959|    484|    }
 1960|    484|    else {
 1961|    484|        auto first = range.begin();
 1962|    484|        for (; first != range.end(); ++first) {
 1963|    484|            if (pred(*first)) {
 1964|    484|                return first;
 1965|    484|            }
 1966|    484|        }
 1967|    484|        return first;
 1968|    484|    }
 1969|    484|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    346|    {
  754|    346|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    446|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    446|              cvref<T> obj = *get<T>(fn);
  745|    446|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    446|                  obj(static_cast<decltype(args)>(args)...);
  747|    446|              }
  748|    446|              else {
  749|    446|                  return obj(static_cast<decltype(args)>(args)...);
  750|    446|              }
  751|    446|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    446|    {
  684|    446|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    446|            return static_cast<T*>(s.m_cp);
  686|    446|        }
  687|    446|        else if constexpr (std::is_object_v<T>) {
  688|    446|            return static_cast<T*>(s.m_p);
  689|    446|        }
  690|    446|        else {
  691|    446|            return reinterpret_cast<T*>(s.m_fp);
  692|    446|        }
  693|    446|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    446|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    346|        {
  667|    346|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     50|{
 1976|     50|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     50|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    110|{
 1957|    110|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    110|        return std::find_if(range.begin(), range.end(), pred);
 1959|    110|    }
 1960|    110|    else {
 1961|    110|        auto first = range.begin();
 1962|    834|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 772, False: 62]
  ------------------
 1963|    772|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 48, False: 724]
  ------------------
 1964|     48|                return first;
 1965|     48|            }
 1966|    772|        }
 1967|     62|        return first;
 1968|    110|    }
 1969|    110|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    110|{
 2951|    110|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 110]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    110|    return read_while_classic_space(range);
 2962|    110|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    110|{
 2117|    110|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    110|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    110|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    110|        auto buf = make_contiguous_buffer(range);
 2121|    110|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    110|        return ranges::next(range.begin(),
 2123|    110|                            ranges::distance(buf.view().begin(), it));
 2124|    110|    }
 2125|    110|    else {
 2126|    110|        auto it = range.begin();
 2127|       |
 2128|    110|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    110|            auto seg = get_contiguous_beginning(range);
 2130|    110|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    110|                seg_it != seg.end()) {
 2132|    110|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    110|            }
 2134|    110|            ranges::advance(it, seg.size());
 2135|    110|        }
 2136|       |
 2137|    110|        return read_while_code_point(
 2138|    110|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    110|    }
 2140|    110|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    110|{
 2082|    110|    return read_until_code_point(range, std::not_fn(pred));
 2083|    110|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    110|{
 2061|    110|    auto it = range.begin();
 2062|    110|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 110, False: 0]
  ------------------
 2063|    110|        const auto val =
 2064|    110|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    110|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    110|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 110, False: 0]
  |  |  ------------------
  ------------------
 2066|    110|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    110|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    110|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 110, False: 0]
  ------------------
 2069|    110|                return it;
 2070|    110|            }
 2071|    110|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    110|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  17.6k|{
 1899|  17.6k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  17.6k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  17.6k|    auto it = range.begin();
 1903|  17.6k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  17.6k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  17.6k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 17.6k, False: 0]
  ------------------
 1912|  17.6k|        ++it;
 1913|  17.6k|        return {it, string_type(1, *range.begin())};
 1914|  17.6k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  17.6k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    110|    {
  754|    110|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    110|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    110|              cvref<T> obj = *get<T>(fn);
  745|    110|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    110|                  obj(static_cast<decltype(args)>(args)...);
  747|    110|              }
  748|    110|              else {
  749|    110|                  return obj(static_cast<decltype(args)>(args)...);
  750|    110|              }
  751|    110|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    110|    {
  684|    110|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    110|            return static_cast<T*>(s.m_cp);
  686|    110|        }
  687|    110|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    110|            return static_cast<T*>(s.m_p);
  689|    110|        }
  690|    110|        else {
  691|    110|            return reinterpret_cast<T*>(s.m_fp);
  692|    110|        }
  693|    110|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    110|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    110|        {
  662|    110|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   100k|{
 2951|   100k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 99.9k, False: 530]
  ------------------
 2952|  99.9k|        auto it = read_while_classic_space(range);
 2953|  99.9k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  99.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  99.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 99.9k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  99.9k|        return it;
 2959|  99.9k|    }
 2960|       |
 2961|    530|    return read_while_classic_space(range);
 2962|   100k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   191k|{
 2117|   191k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   191k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   191k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   191k|        auto buf = make_contiguous_buffer(range);
 2121|   191k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   191k|        return ranges::next(range.begin(),
 2123|   191k|                            ranges::distance(buf.view().begin(), it));
 2124|   191k|    }
 2125|   191k|    else {
 2126|   191k|        auto it = range.begin();
 2127|       |
 2128|   191k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   191k|            auto seg = get_contiguous_beginning(range);
 2130|   191k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   191k|                seg_it != seg.end()) {
 2132|   191k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   191k|            }
 2134|   191k|            ranges::advance(it, seg.size());
 2135|   191k|        }
 2136|       |
 2137|   191k|        return read_while_code_point(
 2138|   191k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   191k|    }
 2140|   191k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   191k|{
 2082|   191k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   191k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   229k|{
 2061|   229k|    auto it = range.begin();
 2062|   401k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 399k, False: 2.66k]
  ------------------
 2063|   399k|        const auto val =
 2064|   399k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   399k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   399k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 399k, False: 0]
  |  |  ------------------
  ------------------
 2066|   399k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   399k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   399k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 226k, False: 172k]
  ------------------
 2069|   226k|                return it;
 2070|   226k|            }
 2071|   399k|        }
 2072|   172k|        it = val.iterator;
 2073|   172k|    }
 2074|       |
 2075|  2.66k|    return it;
 2076|   229k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   191k|    {
  754|   191k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   263k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   263k|              cvref<T> obj = *get<T>(fn);
  745|   263k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   263k|                  obj(static_cast<decltype(args)>(args)...);
  747|   263k|              }
  748|   263k|              else {
  749|   263k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   263k|              }
  751|   263k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   263k|    {
  684|   263k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   263k|            return static_cast<T*>(s.m_cp);
  686|   263k|        }
  687|   263k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   263k|            return static_cast<T*>(s.m_p);
  689|   263k|        }
  690|   263k|        else {
  691|   263k|            return reinterpret_cast<T*>(s.m_fp);
  692|   263k|        }
  693|   263k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   263k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   191k|        {
  662|   191k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  6.46k|    {
 3040|  6.46k|        reader_error_handler eh{};
 3041|  6.46k|        get_derived().check_specs_impl(specs, eh);
 3042|  6.46k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.43k, False: 1.02k]
  |  |  ------------------
  ------------------
 3043|  5.43k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.43k|        }
 3045|  1.02k|        return {};
 3046|  6.46k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  6.46k|    {
 3051|  6.46k|        return static_cast<Derived&>(*this);
 3052|  6.46k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  6.46k|    {
 3485|  6.46k|        detail::check_int_type_specs(specs, eh);
 3486|  6.46k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  25.4k|    {
 3035|  25.4k|        return true;
 3036|  25.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    166|    {
 3539|    166|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    166|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    166|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 166]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    166|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 166]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    166|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    166|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 160, False: 6]
  |  |  ------------------
  ------------------
 3565|    160|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 160, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    160|    }                                                  \
  |  |  |  | 3671|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      6|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      6|            localized_number_formatting_options<CharT>{loc};
 3586|      6|#endif
 3587|       |
 3588|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    346|    {
 3539|    346|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    346|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    346|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 346]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    346|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 346]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    346|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    346|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 328, False: 18]
  |  |  ------------------
  ------------------
 3565|    328|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    328|                    parse_integer_digits_without_thsep(
 3567|    328|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    328|                        prefix_result.parsed_base));
 3569|       |
 3570|    328|            auto buf = make_contiguous_buffer(
 3571|    328|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    328|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 328, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    328|    }                                                  \
  |  |  |  | 3671|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    328|        }
 3580|       |
 3581|     18|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     18|            localized_number_formatting_options<CharT>{loc};
 3586|     18|#endif
 3587|       |
 3588|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    136|    {
 3539|    136|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    136|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    136|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    136|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 136]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    136|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    136|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    136|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    136|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 136]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    136|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 136]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    136|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    136|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 136, False: 0]
  |  |  ------------------
  ------------------
 3565|    136|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    136|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    136|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    136|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 136, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    136|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    136|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    136|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    136|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    136|    }                                                  \
  |  |  |  | 3671|    136|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  12.5k|    {
 3539|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  12.5k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  12.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 12.5k]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 12.5k]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|  12.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  12.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.5k, False: 0]
  |  |  ------------------
  ------------------
 3565|  12.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  12.5k|                    parse_integer_digits_without_thsep(
 3567|  12.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  12.5k|                        prefix_result.parsed_base));
 3569|       |
 3570|  12.5k|            auto buf = make_contiguous_buffer(
 3571|  12.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  12.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.5k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|  12.5k|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.23k|    {
 3040|  3.23k|        reader_error_handler eh{};
 3041|  3.23k|        get_derived().check_specs_impl(specs, eh);
 3042|  3.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 498]
  |  |  ------------------
  ------------------
 3043|  2.73k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  2.73k|        }
 3045|    498|        return {};
 3046|  3.23k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  3.23k|    {
 3051|  3.23k|        return static_cast<Derived&>(*this);
 3052|  3.23k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.23k|    {
 4145|  3.23k|        detail::check_float_type_specs(specs, eh);
 4146|  3.23k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  12.6k|    {
 3035|  12.6k|        return true;
 3036|  12.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    496|    {
 4217|    496|        unsigned options{};
 4218|    496|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 12, False: 484]
  ------------------
 4219|     12|            options |= float_reader_base::allow_thsep;
 4220|     12|        }
 4221|       |
 4222|    496|        SCN_GCC_COMPAT_PUSH
 4223|    496|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    496|        switch (specs.type) {
 4226|     12|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 12, False: 484]
  ------------------
 4227|     12|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     12|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 12, False: 484]
  ------------------
 4230|     12|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 18, False: 478]
  ------------------
 4233|     18|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 496]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    454|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 454, False: 42]
  ------------------
 4240|    454|                return options | float_reader_base::allow_scientific |
 4241|    454|                       float_reader_base::allow_fixed |
 4242|    454|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 496]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    496|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    496|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    496|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    496|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  12.6k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  25.3k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  12.5k|    {
 4057|  12.5k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 12.5k, False: 0]
  ------------------
 4058|  12.5k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 12.5k, False: 0]
  ------------------
 4059|  12.5k|            return;
 4060|  12.5k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    144|    {
 1587|    144|        return m_storage.has_value();
 1588|    144|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     72|    {
 1592|     72|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     72|        return *m_storage;
 1594|     72|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    160|    {
  763|    160|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    160|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      6|    {
 3679|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      6|        return read_source_impl(range);
 3685|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    160|    {
 3705|    160|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    160|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    160|        auto it = sign_result.first;
 3708|    160|        m_sign = sign_result.second;
 3709|       |
 3710|    160|        auto digits_begin = it;
 3711|    160|        auto r = ranges::subrange{it, range.end()};
 3712|    160|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    160|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    160|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    160|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    160|                SCN_TRY_ASSIGN(
 3717|    160|                    it,
 3718|    160|                    do_read_source_impl(
 3719|    160|                        r,
 3720|    160|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    160|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    160|            }
 3723|    160|            else {
 3724|    160|                auto cb = [&](const auto& rr)
 3725|    160|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    160|                    auto res = read_all(rr);
 3727|    160|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    160|                        return unexpected_scan_error(
 3729|    160|                            scan_error::invalid_scanned_value,
 3730|    160|                            "Invalid float value");
 3731|    160|                    }
 3732|    160|                    return res;
 3733|    160|                };
 3734|    160|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    160|            }
 3736|    160|        }
 3737|    160|        else {
 3738|    160|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 160, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    160|    }                                                  \
  |  | 3671|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    160|    {
 4000|    160|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    160|        const bool allowed_nonhex =
 4002|    160|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    160|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    160|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 160, False: 0]
  |  Branch (4005:45): [True: 0, False: 160]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    160|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 160]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    160|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 160, False: 0]
  |  Branch (4014:45): [True: 0, False: 160]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    160|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 160]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    160|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 144, False: 16]
  |  Branch (4021:28): [True: 6, False: 138]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    154|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 16, False: 138]
  |  Branch (4036:29): [True: 16, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     16|            m_kind = float_kind::generic;
 4040|     16|            return read_regular_float(range);
 4041|     16|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    138|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    138|        m_kind = float_kind::generic;
 4052|    138|        return read_regular(range);
 4053|    138|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    160|    {
 3811|    160|        auto it = range.begin();
 3812|    160|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 160, False: 0]
  ------------------
 3813|    160|            return unexpected(r.error());
 3814|    160|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    160|    {
 3834|    160|        auto it = range.begin();
 3835|    160|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 160, False: 0]
  ------------------
 3836|    160|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    160|                scan_error::invalid_scanned_value,
 3838|    160|                "Invalid floating-point NaN value"));
 3839|    160|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    144|    {
 3804|    144|        return read_matching_string_classic_nocase(range, "0x");
 3805|    144|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    154|    {
 3944|    154|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    154|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 148, False: 6]
  |  Branch (3945:50): [True: 10, False: 138]
  ------------------
 3946|       |
 3947|    154|        auto it = ranges::begin(range);
 3948|    154|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    154|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    154|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154, False: 0]
  |  |  ------------------
  ------------------
 3952|    154|            return r.transform_error(
 3953|    154|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    154|                                              "Invalid floating-point value"));
 3955|    154|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    154|    {
 3774|    154|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154]
  |  |  |  Branch (859:45): [True: 0, False: 154]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    154|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    154|        return read_while1_code_unit(
 3783|    154|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    154|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    154|    {
  754|    154|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    154|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    154|              cvref<T> obj = *get<T>(fn);
  745|    154|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    154|                  obj(static_cast<decltype(args)>(args)...);
  747|    154|              }
  748|    154|              else {
  749|    154|                  return obj(static_cast<decltype(args)>(args)...);
  750|    154|              }
  751|    154|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    154|    {
  684|    154|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    154|            return static_cast<T*>(s.m_cp);
  686|    154|        }
  687|    154|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    154|            return static_cast<T*>(s.m_p);
  689|    154|        }
  690|    154|        else {
  691|    154|            return reinterpret_cast<T*>(s.m_fp);
  692|    154|        }
  693|    154|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    154|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    154|        {
  662|    154|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    154|    {
 3665|    154|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    154|        return read_source_impl(range);
 3671|    154|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  12.5k|    {
  763|  12.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  12.5k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      6|    {
 3679|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      6|        return read_source_impl(range);
 3685|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  12.5k|    {
 3705|  12.5k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  12.5k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  12.5k|        auto it = sign_result.first;
 3708|  12.5k|        m_sign = sign_result.second;
 3709|       |
 3710|  12.5k|        auto digits_begin = it;
 3711|  12.5k|        auto r = ranges::subrange{it, range.end()};
 3712|  12.5k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  12.5k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  12.5k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  Branch (859:45): [True: 0, False: 12.5k]
  |  |  |  Branch (859:45): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 3715|  12.5k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  12.5k|            else {
 3724|  12.5k|                auto cb = [&](const auto& rr)
 3725|  12.5k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  12.5k|                    auto res = read_all(rr);
 3727|  12.5k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  12.5k|                        return unexpected_scan_error(
 3729|  12.5k|                            scan_error::invalid_scanned_value,
 3730|  12.5k|                            "Invalid float value");
 3731|  12.5k|                    }
 3732|  12.5k|                    return res;
 3733|  12.5k|                };
 3734|  12.5k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 12.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      8|    }                                                  \
  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  12.5k|            }
 3736|  12.5k|        }
 3737|  12.5k|        else {
 3738|  12.5k|            SCN_TRY_ASSIGN(
 3739|  12.5k|                it,
 3740|  12.5k|                do_read_source_impl(
 3741|  12.5k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  12.5k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  12.5k|        }
 3744|       |
 3745|  12.5k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  12.5k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 12.5k, False: 0]
  |  Branch (3747:48): [True: 12.5k, False: 0]
  ------------------
 3748|  12.5k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 12.5k, False: 0]
  ------------------
 3749|  12.5k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 12.5k, False: 0]
  ------------------
 3750|  12.5k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  12.5k|        }
 3752|       |
 3753|  12.5k|        handle_separators();
 3754|       |
 3755|  12.5k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 12.5k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  12.5k|        return it;
 3768|  12.5k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  12.5k|    {
 3811|  12.5k|        auto it = range.begin();
 3812|  12.5k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 12.5k, False: 0]
  ------------------
 3813|  12.5k|            return unexpected(r.error());
 3814|  12.5k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  12.5k|    {
 3834|  12.5k|        auto it = range.begin();
 3835|  12.5k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 12.5k, False: 0]
  ------------------
 3836|  12.5k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  12.5k|                scan_error::invalid_scanned_value,
 3838|  12.5k|                "Invalid floating-point NaN value"));
 3839|  12.5k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  12.5k|    {
 3804|  12.5k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  12.5k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      8|{
 1996|      8|    auto it = read_while_code_unit(range, pred);
 1997|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 8, False: 0]
  ------------------
 1998|      8|        return unexpected(parse_error::error);
 1999|      8|    }
 2000|      0|    return it;
 2001|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      8|    {
 3944|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 6]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|      8|        auto it = ranges::begin(range);
 3948|      8|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3952|      8|            return r.transform_error(
 3953|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      8|                                              "Invalid floating-point value"));
 3955|      8|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      8|    {
 3774|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      8|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      8|        return read_while1_code_unit(
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  12.5k|    {
 4000|  12.5k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  12.5k|        const bool allowed_nonhex =
 4002|  12.5k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  12.5k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  12.5k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 12.5k, False: 0]
  |  Branch (4005:45): [True: 0, False: 12.5k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  12.5k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 12.5k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  12.5k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 12.5k, False: 0]
  |  Branch (4014:45): [True: 0, False: 12.5k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  12.5k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 12.5k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  12.5k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 12.5k, False: 8]
  |  Branch (4021:28): [True: 12, False: 12.5k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|  12.5k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 12.5k]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  12.5k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|  12.5k|        m_kind = float_kind::generic;
 4052|  12.5k|        return read_regular(range);
 4053|  12.5k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  12.5k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  12.5k|                    auto res = read_all(rr);
 3727|  12.5k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  12.5k|                    return res;
 3733|  12.5k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  12.5k|{
 1839|  12.5k|    return ranges::next(range.begin(), range.end());
 1840|  12.5k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  12.5k|    {
  313|  12.5k|        ranges::advance(x, bound);
  314|  12.5k|        return x;
  315|  12.5k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  12.5k|    {
  275|  12.5k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  12.5k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  12.5k|    {
 1577|  12.5k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  12.5k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  12.5k|    {
 1621|  12.5k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  12.5k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  12.5k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  12.5k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  12.5k|            m_storage.reset();
 1627|  12.5k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  12.5k|        }
 1629|  12.5k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  12.5k|                                          std::basic_string<CharT>>) {
 1631|  12.5k|            m_storage.emplace(SCN_FWD(range));
 1632|  12.5k|            m_view = string_view_type{*m_storage};
 1633|  12.5k|        }
 1634|  12.5k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  12.5k|                                          typename detail::basic_scan_buffer<
 1636|  12.5k|                                              value_t>::forward_iterator> &&
 1637|  12.5k|                           ranges::common_range<Range>) {
 1638|  12.5k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  12.5k|            auto end_seg = range.end().contiguous_segment();
 1640|  12.5k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  12.5k|                             detail::to_address(end_seg.end()))) {
 1642|  12.5k|                auto& str = m_storage.emplace();
 1643|  12.5k|                str.reserve(range.end().position() - range.begin().position());
 1644|  12.5k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  12.5k|                m_view = string_view_type{str};
 1646|  12.5k|                return;
 1647|  12.5k|            }
 1648|       |
 1649|  12.5k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  12.5k|                                                            end_seg.data());
 1651|  12.5k|            m_storage.reset();
 1652|  12.5k|        }
 1653|  12.5k|        else {
 1654|  12.5k|            auto& str = m_storage.emplace();
 1655|  12.5k|            if constexpr (ranges::sized_range<Range>) {
 1656|  12.5k|                str.reserve(range.size());
 1657|  12.5k|            }
 1658|  12.5k|            if constexpr (ranges::common_range<Range>) {
 1659|  12.5k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  12.5k|                          std::back_inserter(str));
 1661|  12.5k|            }
 1662|  12.5k|            else {
 1663|  12.5k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  12.5k|                     ++it) {
 1665|  12.5k|                    str.push_back(*it);
 1666|  12.5k|                }
 1667|  12.5k|            }
 1668|  12.5k|            m_view = string_view_type{str};
 1669|  12.5k|        }
 1670|  12.5k|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  12.5k|    {
 3665|  12.5k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  12.5k|        return read_source_impl(range);
 3671|  12.5k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  12.5k|    {
 3691|  12.5k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  12.5k|        const std::ptrdiff_t sign_len =
 3694|  12.5k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 12.5k]
  ------------------
 3695|       |
 3696|  12.5k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.5k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  12.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    160|    {
 4170|    160|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    160|#if !SCN_DISABLE_LOCALE
 4173|    160|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 6, False: 154]
  ------------------
 4174|      6|            return read_impl<Range>(
 4175|      6|                range, rd,
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      6|                },
 4179|      6|                value, loc);
 4180|      6|        }
 4181|    154|#endif
 4182|       |
 4183|    154|        return read_impl<Range>(
 4184|    154|            range, rd,
 4185|    154|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    154|                return r.read_source(SCN_FWD(args)...);
 4187|    154|            },
 4188|    154|            value);
 4189|    160|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    160|    {
 4206|    160|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    160|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 160, False: 0]
  |  |  ------------------
  ------------------
 4208|    160|            return unexpected(r.error());
 4209|    160|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    154|    {
  754|    154|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    154|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    154|              cvref<T> obj = *get<T>(fn);
  745|    154|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    154|                  obj(static_cast<decltype(args)>(args)...);
  747|    154|              }
  748|    154|              else {
  749|    154|                  return obj(static_cast<decltype(args)>(args)...);
  750|    154|              }
  751|    154|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    154|    {
  684|    154|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    154|            return static_cast<T*>(s.m_cp);
  686|    154|        }
  687|    154|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    154|            return static_cast<T*>(s.m_p);
  689|    154|        }
  690|    154|        else {
  691|    154|            return reinterpret_cast<T*>(s.m_fp);
  692|    154|        }
  693|    154|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    154|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    154|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    154|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    154|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    154|        {
  662|    154|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    336|    {
 4170|    336|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    336|#if !SCN_DISABLE_LOCALE
 4173|    336|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 6, False: 330]
  ------------------
 4174|      6|            return read_impl<Range>(
 4175|      6|                range, rd,
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      6|                },
 4179|      6|                value, loc);
 4180|      6|        }
 4181|    330|#endif
 4182|       |
 4183|    330|        return read_impl<Range>(
 4184|    330|            range, rd,
 4185|    330|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    330|                return r.read_source(SCN_FWD(args)...);
 4187|    330|            },
 4188|    330|            value);
 4189|    336|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  12.5k|    {
 4206|  12.5k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  12.5k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 12.5k]
  |  |  ------------------
  ------------------
 4208|      8|            return unexpected(r.error());
 4209|      8|        }
 4210|       |
 4211|  12.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.5k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  12.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    330|    {
  754|    330|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    330|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    330|              cvref<T> obj = *get<T>(fn);
  745|    330|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    330|                  obj(static_cast<decltype(args)>(args)...);
  747|    330|              }
  748|    330|              else {
  749|    330|                  return obj(static_cast<decltype(args)>(args)...);
  750|    330|              }
  751|    330|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    330|    {
  684|    330|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    330|            return static_cast<T*>(s.m_cp);
  686|    330|        }
  687|    330|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    330|            return static_cast<T*>(s.m_p);
  689|    330|        }
  690|    330|        else {
  691|    330|            return reinterpret_cast<T*>(s.m_fp);
  692|    330|        }
  693|    330|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    330|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    330|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    330|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    330|        {
  662|    330|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  15.3k|{
 5809|  15.3k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  15.3k|        return reader_impl_for_bool<CharT>{};
 5811|  15.3k|    }
 5812|  15.3k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  15.3k|        return reader_impl_for_char<CharT>{};
 5814|  15.3k|    }
 5815|  15.3k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  15.3k|        return reader_impl_for_wchar<CharT>{};
 5817|  15.3k|    }
 5818|  15.3k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  15.3k|        return reader_impl_for_code_point<CharT>{};
 5820|  15.3k|    }
 5821|  15.3k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  15.3k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  15.3k|        return reader_impl_for_string<CharT>{};
 5824|  15.3k|    }
 5825|  15.3k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  15.3k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  15.3k|        return reader_impl_for_string<CharT>{};
 5828|  15.3k|    }
 5829|  15.3k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  15.3k|                       std::is_same_v<T, wregex_matches>) {
 5831|  15.3k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  15.3k|    }
 5833|  15.3k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  15.3k|        return reader_impl_for_voidptr<CharT>{};
 5835|  15.3k|    }
 5836|  15.3k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  15.3k|        return reader_impl_for_float<CharT>{};
 5838|  15.3k|    }
 5839|  15.3k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  15.3k|                       !std::is_same_v<T, wchar_t> &&
 5841|  15.3k|                       !std::is_same_v<T, char32_t> &&
 5842|  15.3k|                       !std::is_same_v<T, bool>) {
 5843|  15.3k|        return reader_impl_for_int<CharT>{};
 5844|  15.3k|    }
 5845|  15.3k|    else {
 5846|  15.3k|        return reader_impl_for_monostate<CharT>{};
 5847|  15.3k|    }
 5848|  15.3k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  46.1k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  9.59k|    {
 3040|  9.59k|        reader_error_handler eh{};
 3041|  9.59k|        get_derived().check_specs_impl(specs, eh);
 3042|  9.59k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  9.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 9.33k]
  |  |  ------------------
  ------------------
 3043|    264|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    264|        }
 3045|  9.33k|        return {};
 3046|  9.59k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  9.59k|    {
 3051|  9.59k|        return static_cast<Derived&>(*this);
 3052|  9.59k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  9.59k|    {
 5210|  9.59k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  9.59k|        SCN_GCC_PUSH
 5213|  9.59k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  9.59k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  9.59k|        SCN_CLANG_PUSH
 5217|  9.59k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  9.59k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  9.59k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 258, False: 9.33k]
  ------------------
 5221|  1.34k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.34k, False: 8.25k]
  ------------------
 5222|  1.34k|                m_type = reader_type::word;
 5223|  1.34k|                break;
 5224|       |
 5225|    192|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 192, False: 9.40k]
  ------------------
 5226|    192|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 60, False: 132]
  ------------------
 5227|    192|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 84, False: 48]
  ------------------
 5228|    144|                    m_type = reader_type::custom_word;
 5229|    144|                }
 5230|     48|                else {
 5231|     48|                    m_type = reader_type::word;
 5232|     48|                }
 5233|    192|                break;
 5234|      0|            }
 5235|       |
 5236|     60|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 60, False: 9.53k]
  ------------------
 5237|     60|                m_type = reader_type::character;
 5238|     60|                break;
 5239|       |
 5240|    318|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 318, False: 9.27k]
  ------------------
 5241|    318|                m_type = reader_type::character_set;
 5242|    318|                break;
 5243|       |
 5244|  7.25k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 7.25k, False: 2.34k]
  ------------------
 5245|  7.25k|                m_type = reader_type::regex;
 5246|  7.25k|                break;
 5247|       |
 5248|    168|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 168, False: 9.42k]
  ------------------
 5249|    168|                m_type = reader_type::regex_escaped;
 5250|    168|                break;
 5251|  9.59k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  9.59k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  46.9k|    {
 5259|  46.9k|        return m_type == reader_type::word;
 5260|  46.9k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  51.9k|{
 1132|  51.9k|    auto it = src.begin();
 1133|   181k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 131k, False: 50.2k]
  ------------------
 1134|   131k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   131k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 131k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   131k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 131k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   131k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   131k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   131k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.71k, False: 129k]
  ------------------
 1144|  1.71k|            return false;
 1145|  1.71k|        }
 1146|   129k|        it += len;
 1147|   129k|    }
 1148|  50.2k|    return true;
 1149|  51.9k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     72|{
 2993|     72|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     72|        if (source.stores_allocated_string()) {
 2995|     72|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     72|        }
 2997|     72|        else {
 2998|     72|            dest.assign(source.view());
 2999|     72|        }
 3000|     72|    }
 3001|     72|    else {
 3002|     72|        return transcode_impl(source.view(), dest);
 3003|     72|    }
 3004|       |
 3005|      0|    return {};
 3006|     72|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  12.5k|{
 2968|  12.5k|    dst.clear();
 2969|  12.5k|    transcode_valid_to_string(src, dst);
 2970|  12.5k|    return {};
 2971|  12.5k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  12.5k|{
 1403|  12.5k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  12.5k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  12.5k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  12.5k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  12.5k|            std::u32string tmp;
 1410|  12.5k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  12.5k|            return transcode_to_string_impl_32to16<true>(
 1412|  12.5k|                std::u32string_view{tmp}, dest);
 1413|  12.5k|        }
 1414|  12.5k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  12.5k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  12.5k|        }
 1417|  12.5k|    }
 1418|  12.5k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  12.5k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  12.5k|            std::u32string tmp;
 1421|  12.5k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  12.5k|            return transcode_to_string_impl_32to8<true>(
 1423|  12.5k|                std::u32string_view{tmp}, dest);
 1424|  12.5k|        }
 1425|  12.5k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  12.5k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  12.5k|        }
 1428|  12.5k|    }
 1429|  12.5k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  12.5k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  12.5k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  12.5k|        }
 1433|  12.5k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  12.5k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  12.5k|        }
 1436|  12.5k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  12.5k|{
 1294|  12.5k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  12.5k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  29.9k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 29.9k, False: 12.5k]
  ------------------
 1298|  29.9k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  29.9k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  29.9k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 28.9k, False: 946]
  ------------------
 1306|  28.9k|            dest.push_back(static_cast<char>(cp));
 1307|  28.9k|        }
 1308|    946|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 154, False: 792]
  ------------------
 1309|    154|            dest.push_back(
 1310|    154|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    154|            dest.push_back(
 1312|    154|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    154|        }
 1314|    792|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 364, False: 428]
  ------------------
 1315|    364|            dest.push_back(
 1316|    364|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    364|            dest.push_back(static_cast<char>(
 1318|    364|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    364|            dest.push_back(
 1320|    364|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    364|        }
 1322|    428|        else {
 1323|    428|            dest.push_back(
 1324|    428|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    428|            dest.push_back(static_cast<char>(
 1326|    428|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    428|            dest.push_back(static_cast<char>(
 1328|    428|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    428|            dest.push_back(
 1330|    428|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    428|        }
 1332|  29.9k|    }
 1333|  12.5k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|    318|        {
 5103|    318|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 96, False: 222]
  ------------------
 5104|     96|                return {};
 5105|     96|            }
 5106|       |
 5107|    222|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    222|            auto it = detail::to_address(charset_string.begin());
 5109|    222|            auto set = detail::parse_presentation_set(
 5110|    222|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    222|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    222|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    222|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    222|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    222|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    222|            std::sort(nonascii.extra_ranges.begin(),
 5118|    222|                      nonascii.extra_ranges.end());
 5119|    222|            return {};
 5120|    222|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  4.27k|        {
 5138|  4.27k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 498, False: 3.78k]
  ------------------
 5139|    498|                return helper.is_char_set_in_extra_literals(cp);
 5140|    498|            }
 5141|       |
 5142|  3.78k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  4.27k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|    498|        {
 5086|       |            // TODO: binary search?
 5087|    498|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 498]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|    498|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|    498|            return std::find_if(
 5093|    498|                       nonascii.extra_ranges.begin(),
 5094|    498|                       nonascii.extra_ranges.end(),
 5095|    498|                       [cp_val](const auto& pair) noexcept {
 5096|    498|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|    498|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|    498|                       }) != nonascii.extra_ranges.end();
 5099|    498|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  1.39k|                       [cp_val](const auto& pair) noexcept {
 5096|  1.39k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 1.39k, False: 0]
  ------------------
 5097|  1.39k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 498, False: 894]
  ------------------
 5098|  1.39k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  4.74k|        {
 5076|  4.74k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  4.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  4.74k|            const auto val =
 5078|  4.74k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  4.74k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  4.74k|                    (val % 8)) &
 5081|  4.74k|                   1u;
 5082|  4.74k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|    960|        {
 5129|    960|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 0, False: 960]
  ------------------
 5130|      0|                return false;
 5131|      0|            }
 5132|       |
 5133|    960|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|    960|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|    318|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    188|    {
 5277|    188|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    188|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    188|        return read_impl(range, specs, value);
 5279|    188|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    188|    {
 5295|    188|        SCN_CLANG_PUSH
 5296|    188|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    188|        switch (m_type) {
 5299|    136|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 136, False: 52]
  ------------------
 5300|    136|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 168]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 170]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 188]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 178]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 184]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 188]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    188|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    188|        }
 5331|       |
 5332|    188|        SCN_CLANG_POP
 5333|    188|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    136|    {
 4820|    136|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    136|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    174|{
 4752|    174|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    174|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    174|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 102, False: 72]
  ------------------
 4756|    102|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    102|                                     "Invalid encoding in scanned string");
 4758|    102|    }
 4759|     72|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     72|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     72|    return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     72|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    408|{
 2088|    408|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    408|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    408|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    408|        auto buf = make_contiguous_buffer(range);
 2092|    408|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    408|        return ranges::next(range.begin(),
 2094|    408|                            ranges::distance(buf.view().begin(), it));
 2095|    408|    }
 2096|    408|    else {
 2097|    408|        auto it = range.begin();
 2098|       |
 2099|    408|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    408|            auto seg = get_contiguous_beginning(range);
 2101|    408|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    408|                seg_it != seg.end()) {
 2103|    408|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    408|            }
 2105|    408|            ranges::advance(it, seg.size());
 2106|    408|        }
 2107|       |
 2108|    408|        return read_until_code_point(
 2109|    408|            ranges::subrange{it, range.end()},
 2110|    408|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    408|    }
 2112|    408|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    408|{
 2061|    408|    auto it = range.begin();
 2062|  17.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 17.5k, False: 366]
  ------------------
 2063|  17.5k|        const auto val =
 2064|  17.5k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  17.5k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  17.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.5k, False: 0]
  |  |  ------------------
  ------------------
 2066|  17.5k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  17.5k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  17.5k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 42, False: 17.5k]
  ------------------
 2069|     42|                return it;
 2070|     42|            }
 2071|  17.5k|        }
 2072|  17.5k|        it = val.iterator;
 2073|  17.5k|    }
 2074|       |
 2075|    366|    return it;
 2076|    408|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    408|    {
  754|    408|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  17.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.5k|              cvref<T> obj = *get<T>(fn);
  745|  17.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.5k|              }
  748|  17.5k|              else {
  749|  17.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.5k|              }
  751|  17.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  17.5k|    {
  684|  17.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.5k|            return static_cast<T*>(s.m_cp);
  686|  17.5k|        }
  687|  17.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.5k|            return static_cast<T*>(s.m_p);
  689|  17.5k|        }
  690|  17.5k|        else {
  691|  17.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.5k|        }
  693|  17.5k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  17.5k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    408|        {
  662|    408|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    232|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    232|              cvref<T> obj = *get<T>(fn);
  745|    232|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    232|                  obj(static_cast<decltype(args)>(args)...);
  747|    232|              }
  748|    232|              else {
  749|    232|                  return obj(static_cast<decltype(args)>(args)...);
  750|    232|              }
  751|    232|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    232|    {
  684|    232|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    232|            return static_cast<T*>(s.m_cp);
  686|    232|        }
  687|    232|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    232|            return static_cast<T*>(s.m_p);
  689|    232|        }
  690|    232|        else {
  691|    232|            return reinterpret_cast<T*>(s.m_fp);
  692|    232|        }
  693|    232|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    232|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     18|    {
 4947|     18|        return read_impl(
 4948|     18|            range,
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
 4952|     18|            detail::priority_tag<1>{});
 4953|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     54|{
 1839|     54|    return ranges::next(range.begin(), range.end());
 1840|     54|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     54|    {
  313|     54|        ranges::advance(x, bound);
  314|     54|        return x;
  315|     54|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     54|    {
  275|     54|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     54|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     54|    {
  203|    714|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 660, False: 54]
  ------------------
  204|    660|            ++i;
  205|    660|        }
  206|     54|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     14|    {
 4891|     14|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     14|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     42|    {
 4913|     42|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     84|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     42|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     42|            return unexpected_scan_error(
 4916|     42|                scan_error::invalid_scanned_value,
 4917|     42|                "Regex backend doesn't support wide strings as input");
 4918|     42|        }
 4919|     42|        else {
 4920|     42|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 42, False: 0]
  ------------------
 4921|     42|                return unexpected_scan_error(
 4922|     42|                    scan_error::invalid_scanned_value,
 4923|     42|                    "Cannot use regex with a non-contiguous source "
 4924|     42|                    "range");
 4925|     42|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     42|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     42|{
  959|     42|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     42|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     42|        return true;
  962|     42|    }
  963|     42|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     42|                           ranges::const_iterator_t<Range>,
  965|     42|                           typename detail::basic_scan_buffer<
  966|     42|                               detail::char_t<Range>>::forward_iterator>) {
  967|     42|        auto beg = r.begin();
  968|     42|        if (!beg.stores_parent()) {
  969|     42|            return true;
  970|     42|        }
  971|     42|        return beg.parent()->is_contiguous();
  972|     42|    }
  973|     42|    else {
  974|     42|        return false;
  975|     42|    }
  976|     42|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.91k|    {
 5277|  2.91k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.91k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.91k|        return read_impl(range, specs, value);
 5279|  2.91k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.91k|    {
 5295|  2.91k|        SCN_CLANG_PUSH
 5296|  2.91k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.91k|        switch (m_type) {
 5299|    326|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 326, False: 2.59k]
  ------------------
 5300|    326|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     28|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 28, False: 2.89k]
  ------------------
 5303|     28|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     28|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.91k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    106|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 106, False: 2.81k]
  ------------------
 5310|    106|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    106|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  2.40k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2.40k, False: 512]
  ------------------
 5315|  2.40k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  2.40k|                    range, specs.charset_string<SourceCharT>(),
 5317|  2.40k|                    specs.regexp_flags, value);
 5318|       |
 5319|     52|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 52, False: 2.86k]
  ------------------
 5320|     52|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     52|                    range,
 5322|     52|                    get_unescaped_regex_pattern(
 5323|     52|                        specs.charset_string<SourceCharT>()),
 5324|     52|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.91k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.91k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.91k|        }
 5331|       |
 5332|  2.91k|        SCN_CLANG_POP
 5333|  2.91k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  12.5k|    {
 4820|  12.5k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  12.5k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  12.5k|{
 4752|  12.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  12.5k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  12.5k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 282, False: 12.2k]
  ------------------
 4756|    282|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    282|                                     "Invalid encoding in scanned string");
 4758|    282|    }
 4759|  12.2k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  12.2k|    static_cast<    \
  |  |  929|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  12.2k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  12.2k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  12.2k|    static_cast<    \
  |  |  929|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  12.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  12.4k|{
 3012|  12.4k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  12.4k|        dest.assign(source.view());
 3014|  12.4k|    }
 3015|  12.4k|    else {
 3016|  12.4k|        return transcode_impl(source.view(), dest);
 3017|  12.4k|    }
 3018|       |
 3019|      0|    return {};
 3020|  12.4k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  37.5k|{
 2088|  37.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  37.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  37.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  37.5k|        auto buf = make_contiguous_buffer(range);
 2092|  37.5k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  37.5k|        return ranges::next(range.begin(),
 2094|  37.5k|                            ranges::distance(buf.view().begin(), it));
 2095|  37.5k|    }
 2096|  37.5k|    else {
 2097|  37.5k|        auto it = range.begin();
 2098|       |
 2099|  37.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  37.5k|            auto seg = get_contiguous_beginning(range);
 2101|  37.5k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  37.5k|                seg_it != seg.end()) {
 2103|  37.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  37.5k|            }
 2105|  37.5k|            ranges::advance(it, seg.size());
 2106|  37.5k|        }
 2107|       |
 2108|  37.5k|        return read_until_code_point(
 2109|  37.5k|            ranges::subrange{it, range.end()},
 2110|  37.5k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  37.5k|    }
 2112|  37.5k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  37.5k|    {
  754|  37.5k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   131k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   131k|              cvref<T> obj = *get<T>(fn);
  745|   131k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   131k|                  obj(static_cast<decltype(args)>(args)...);
  747|   131k|              }
  748|   131k|              else {
  749|   131k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   131k|              }
  751|   131k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   131k|    {
  684|   131k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   131k|            return static_cast<T*>(s.m_cp);
  686|   131k|        }
  687|   131k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   131k|            return static_cast<T*>(s.m_p);
  689|   131k|        }
  690|   131k|        else {
  691|   131k|            return reinterpret_cast<T*>(s.m_fp);
  692|   131k|        }
  693|   131k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   131k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  37.5k|        {
  662|  37.5k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     28|    {
 4841|     28|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 28, False: 0]
  ------------------
 4842|     28|            return read_string_impl(
 4843|     28|                range,
 4844|     28|                read_until_code_unit(
 4845|     28|                    range,
 4846|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     28|                        SourceCharT ch) { return ch == until; }),
 4848|     28|                value);
 4849|     28|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     28|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    540|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    540|              cvref<T> obj = *get<T>(fn);
  745|    540|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    540|                  obj(static_cast<decltype(args)>(args)...);
  747|    540|              }
  748|    540|              else {
  749|    540|                  return obj(static_cast<decltype(args)>(args)...);
  750|    540|              }
  751|    540|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    540|    {
  684|    540|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    540|            return static_cast<T*>(s.m_cp);
  686|    540|        }
  687|    540|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    540|            return static_cast<T*>(s.m_p);
  689|    540|        }
  690|    540|        else {
  691|    540|            return reinterpret_cast<T*>(s.m_fp);
  692|    540|        }
  693|    540|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    540|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    106|    {
 5048|    106|        auto it = read_source_impl(range, {specs});
 5049|    106|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 88]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|     88|        return read_string_impl(range, *it, value);
 5054|    106|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|    318|    {
 5153|    318|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    318|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    318|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    318|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    318|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 222, False: 96]
  ------------------
 5163|    222|            const auto cb = [&](char32_t cp) {
 5164|    222|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    222|            };
 5166|       |
 5167|    222|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 222]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|    222|            auto it = read_while_code_point(range, cb);
 5172|    222|            return check_nonempty(it, range);
 5173|    222|        }
 5174|       |
 5175|     96|        const auto cb = [&](SourceCharT ch) {
 5176|     96|            return cb_wrapper.on_ascii_only(ch);
 5177|     96|        };
 5178|       |
 5179|     96|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 96]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|     96|        auto it = read_while_code_unit(range, cb);
 5184|     96|        return check_nonempty(it, range);
 5185|     96|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    222|    {
  754|    222|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  4.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.27k|              cvref<T> obj = *get<T>(fn);
  745|  4.27k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.27k|              }
  748|  4.27k|              else {
  749|  4.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.27k|              }
  751|  4.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.27k|    {
  684|  4.27k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.27k|            return static_cast<T*>(s.m_cp);
  686|  4.27k|        }
  687|  4.27k|        else if constexpr (std::is_object_v<T>) {
  688|  4.27k|            return static_cast<T*>(s.m_p);
  689|  4.27k|        }
  690|  4.27k|        else {
  691|  4.27k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.27k|        }
  693|  4.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  4.27k|            const auto cb = [&](char32_t cp) {
 5164|  4.27k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  4.27k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    222|        {
  667|    222|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|    318|    {
 5191|    318|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 54, False: 264]
  ------------------
 5192|     54|            return unexpected_scan_error(
 5193|     54|                scan_error::invalid_scanned_value,
 5194|     54|                "No characters matched in [character set]");
 5195|     54|        }
 5196|       |
 5197|    264|        return it;
 5198|    318|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|     96|    {
  754|     96|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    960|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    960|              cvref<T> obj = *get<T>(fn);
  745|    960|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    960|                  obj(static_cast<decltype(args)>(args)...);
  747|    960|              }
  748|    960|              else {
  749|    960|                  return obj(static_cast<decltype(args)>(args)...);
  750|    960|              }
  751|    960|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    960|    {
  684|    960|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    960|            return static_cast<T*>(s.m_cp);
  686|    960|        }
  687|    960|        else if constexpr (std::is_object_v<T>) {
  688|    960|            return static_cast<T*>(s.m_p);
  689|    960|        }
  690|    960|        else {
  691|    960|            return reinterpret_cast<T*>(s.m_fp);
  692|    960|        }
  693|    960|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|    960|        const auto cb = [&](SourceCharT ch) {
 5176|    960|            return cb_wrapper.on_ascii_only(ch);
 5177|    960|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|     96|        {
  667|     96|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    398|{
 4752|    398|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    398|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    398|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 186, False: 212]
  ------------------
 4756|    186|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    186|                                     "Invalid encoding in scanned string");
 4758|    186|    }
 4759|    212|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    212|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 212]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    212|    return SCN_MOVE(result);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    212|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  2.45k|    {
 4891|  2.45k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  2.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.14k, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.14k|    }                                                  \
  |  |  |  | 3671|  2.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    310|        return read_string_impl(range, it, value);
 4893|  2.45k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  7.37k|    {
 4913|  7.37k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  14.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  7.37k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  7.37k|            return unexpected_scan_error(
 4916|  7.37k|                scan_error::invalid_scanned_value,
 4917|  7.37k|                "Regex backend doesn't support wide strings as input");
 4918|  7.37k|        }
 4919|  7.37k|        else {
 4920|  7.37k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 7.37k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  7.37k|            auto input = get_as_contiguous(range);
 4928|  7.37k|            SCN_TRY(it,
  ------------------
  |  | 3672|  7.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.44k, False: 930]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.44k|    }                                                  \
  |  |  |  | 3671|  7.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|    930|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|    930|            return ranges::next(range.begin(),
 4931|    930|                                ranges::distance(input.begin(), it));
 4932|  7.37k|        }
 4933|  7.37k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  7.37k|{
  959|  7.37k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  7.37k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  7.37k|        return true;
  962|  7.37k|    }
  963|  7.37k|    else if constexpr (std::is_same_v<
  964|  7.37k|                           ranges::const_iterator_t<Range>,
  965|  7.37k|                           typename detail::basic_scan_buffer<
  966|  7.37k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  7.37k|        auto beg = r.begin();
  968|  7.37k|        if (!beg.stores_parent()) {
  969|  7.37k|            return true;
  970|  7.37k|        }
  971|  7.37k|        return beg.parent()->is_contiguous();
  972|  7.37k|    }
  973|  7.37k|    else {
  974|  7.37k|        return false;
  975|  7.37k|    }
  976|  7.37k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  7.37k|{
 1065|  7.37k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  7.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  7.37k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  7.37k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  7.37k|        return r;
 1070|  7.37k|    }
 1071|  7.37k|    else if constexpr (std::is_same_v<
 1072|  7.37k|                           ranges::const_iterator_t<Range>,
 1073|  7.37k|                           typename detail::basic_scan_buffer<
 1074|  7.37k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  7.37k|        if constexpr (ranges::common_range<Range>) {
 1076|  7.37k|            return detail::make_string_view_from_pointers(
 1077|  7.37k|                r.begin().to_contiguous_segment_iterator(),
 1078|  7.37k|                r.end().to_contiguous_segment_iterator());
 1079|  7.37k|        }
 1080|  7.37k|        else {
 1081|  7.37k|            return r.begin().contiguous_segment();
 1082|  7.37k|        }
 1083|  7.37k|    }
 1084|  7.37k|    else {
 1085|  7.37k|        SCN_EXPECT(false);
 1086|  7.37k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  7.37k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  7.37k|    }
 1090|  7.37k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  7.37k|{
  981|  7.37k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  7.37k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  7.37k|        return true;
  984|  7.37k|    }
  985|  7.37k|    else if constexpr (std::is_same_v<
  986|  7.37k|                           ranges::const_iterator_t<Range>,
  987|  7.37k|                           typename detail::basic_scan_buffer<
  988|  7.37k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  7.37k|        auto beg = r.begin();
  990|  7.37k|        if (beg.contiguous_segment().empty()) {
  991|  7.37k|            return false;
  992|  7.37k|        }
  993|  7.37k|        if constexpr (ranges::common_range<Range>) {
  994|  7.37k|            return beg.contiguous_segment().end() ==
  995|  7.37k|                   ranges::end(r).contiguous_segment().end();
  996|  7.37k|        }
  997|  7.37k|        else {
  998|  7.37k|            if (beg.stores_parent()) {
  999|  7.37k|                return beg.contiguous_segment().end() ==
 1000|  7.37k|                       beg.parent()->current_view().end();
 1001|  7.37k|            }
 1002|  7.37k|            return true;
 1003|  7.37k|        }
 1004|  7.37k|    }
 1005|  7.37k|    else {
 1006|  7.37k|        return false;
 1007|  7.37k|    }
 1008|  7.37k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  7.37k|{
 4346|  7.37k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  7.37k|                  ranges::borrowed_range<Input> &&
 4348|  7.37k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  7.37k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  7.37k|    std::basic_regex<CharT> re{};
 4352|  7.37k|    try {
 4353|  7.37k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  7.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  7.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  7.37k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  7.37k|                                     re_flags | std::regex_constants::nosubs};
 4356|  7.37k|    }
 4357|  7.37k|    catch (const std::regex_error& err) {
 4358|  3.07k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  3.07k|                                     "Invalid regex");
 4360|  3.07k|    }
 4361|       |
 4362|  4.29k|    std::match_results<const CharT*> matches{};
 4363|  4.29k|    try {
 4364|  4.29k|        bool found = std::regex_search(input.data(),
 4365|  4.29k|                                       input.data() + input.size(), matches, re,
 4366|  4.29k|                                       std::regex_constants::match_continuous);
 4367|  4.29k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 3.36k, False: 930]
  |  Branch (4367:23): [True: 0, False: 930]
  ------------------
 4368|  3.36k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  3.36k|                                         "Regular expression didn't match");
 4370|  3.36k|        }
 4371|  4.29k|    }
 4372|  4.29k|    catch (const std::regex_error& err) {
 4373|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      0|                                     "Regex matching failed with an error");
 4375|      0|    }
 4376|       |
 4377|    930|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  4.29k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  15.3k|{
 5809|  15.3k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  15.3k|        return reader_impl_for_bool<CharT>{};
 5811|  15.3k|    }
 5812|  15.3k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  15.3k|        return reader_impl_for_char<CharT>{};
 5814|  15.3k|    }
 5815|  15.3k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  15.3k|        return reader_impl_for_wchar<CharT>{};
 5817|  15.3k|    }
 5818|  15.3k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  15.3k|        return reader_impl_for_code_point<CharT>{};
 5820|  15.3k|    }
 5821|  15.3k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  15.3k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  15.3k|        return reader_impl_for_string<CharT>{};
 5824|  15.3k|    }
 5825|  15.3k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  15.3k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  15.3k|        return reader_impl_for_string<CharT>{};
 5828|  15.3k|    }
 5829|  15.3k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  15.3k|                       std::is_same_v<T, wregex_matches>) {
 5831|  15.3k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  15.3k|    }
 5833|  15.3k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  15.3k|        return reader_impl_for_voidptr<CharT>{};
 5835|  15.3k|    }
 5836|  15.3k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  15.3k|        return reader_impl_for_float<CharT>{};
 5838|  15.3k|    }
 5839|  15.3k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  15.3k|                       !std::is_same_v<T, wchar_t> &&
 5841|  15.3k|                       !std::is_same_v<T, char32_t> &&
 5842|  15.3k|                       !std::is_same_v<T, bool>) {
 5843|  15.3k|        return reader_impl_for_int<CharT>{};
 5844|  15.3k|    }
 5845|  15.3k|    else {
 5846|  15.3k|        return reader_impl_for_monostate<CharT>{};
 5847|  15.3k|    }
 5848|  15.3k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     72|{
 2993|     72|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     72|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 72, False: 0]
  ------------------
 2995|     72|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     72|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     72|    }
 3001|     72|    else {
 3002|     72|        return transcode_impl(source.view(), dest);
 3003|     72|    }
 3004|       |
 3005|     72|    return {};
 3006|     72|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    188|    {
 5277|    188|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    188|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    188|        return read_impl(range, specs, value);
 5279|    188|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    188|    {
 5295|    188|        SCN_CLANG_PUSH
 5296|    188|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    188|        switch (m_type) {
 5299|    136|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 136, False: 52]
  ------------------
 5300|    136|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 168]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 170]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 188]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 178]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 184]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 188]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    188|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    188|        }
 5331|       |
 5332|    188|        SCN_CLANG_POP
 5333|    188|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    136|    {
 4820|    136|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    136|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    174|{
 4752|    174|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    174|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    174|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 102, False: 72]
  ------------------
 4756|    102|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    102|                                     "Invalid encoding in scanned string");
 4758|    102|    }
 4759|     72|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     72|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     72|    return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     72|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    232|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    232|              cvref<T> obj = *get<T>(fn);
  745|    232|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    232|                  obj(static_cast<decltype(args)>(args)...);
  747|    232|              }
  748|    232|              else {
  749|    232|                  return obj(static_cast<decltype(args)>(args)...);
  750|    232|              }
  751|    232|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    232|    {
  684|    232|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    232|            return static_cast<T*>(s.m_cp);
  686|    232|        }
  687|    232|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    232|            return static_cast<T*>(s.m_p);
  689|    232|        }
  690|    232|        else {
  691|    232|            return reinterpret_cast<T*>(s.m_fp);
  692|    232|        }
  693|    232|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    232|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     18|    {
 4947|     18|        return read_impl(
 4948|     18|            range,
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
 4952|     18|            detail::priority_tag<1>{});
 4953|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     14|    {
 4891|     14|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     14|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.91k|    {
 5277|  2.91k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.91k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.91k|        return read_impl(range, specs, value);
 5279|  2.91k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.91k|    {
 5295|  2.91k|        SCN_CLANG_PUSH
 5296|  2.91k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.91k|        switch (m_type) {
 5299|    326|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 326, False: 2.59k]
  ------------------
 5300|    326|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     28|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 28, False: 2.89k]
  ------------------
 5303|     28|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     28|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.91k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    106|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 106, False: 2.81k]
  ------------------
 5310|    106|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    106|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  2.40k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2.40k, False: 512]
  ------------------
 5315|  2.40k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  2.40k|                    range, specs.charset_string<SourceCharT>(),
 5317|  2.40k|                    specs.regexp_flags, value);
 5318|       |
 5319|     52|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 52, False: 2.86k]
  ------------------
 5320|     52|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     52|                    range,
 5322|     52|                    get_unescaped_regex_pattern(
 5323|     52|                        specs.charset_string<SourceCharT>()),
 5324|     52|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.91k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.91k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.91k|        }
 5331|       |
 5332|  2.91k|        SCN_CLANG_POP
 5333|  2.91k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  12.5k|    {
 4820|  12.5k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  12.5k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  12.5k|{
 4752|  12.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  12.5k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  12.5k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 282, False: 12.2k]
  ------------------
 4756|    282|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    282|                                     "Invalid encoding in scanned string");
 4758|    282|    }
 4759|  12.2k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  12.2k|    static_cast<    \
  |  |  929|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  12.2k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  12.2k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  12.2k|    static_cast<    \
  |  |  929|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  12.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  12.4k|{
 3012|  12.4k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  12.4k|        dest.assign(source.view());
 3014|  12.4k|    }
 3015|  12.4k|    else {
 3016|  12.4k|        return transcode_impl(source.view(), dest);
 3017|  12.4k|    }
 3018|       |
 3019|  12.4k|    return {};
 3020|  12.4k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     28|    {
 4841|     28|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 28, False: 0]
  ------------------
 4842|     28|            return read_string_impl(
 4843|     28|                range,
 4844|     28|                read_until_code_unit(
 4845|     28|                    range,
 4846|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     28|                        SourceCharT ch) { return ch == until; }),
 4848|     28|                value);
 4849|     28|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     28|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    540|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    540|              cvref<T> obj = *get<T>(fn);
  745|    540|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    540|                  obj(static_cast<decltype(args)>(args)...);
  747|    540|              }
  748|    540|              else {
  749|    540|                  return obj(static_cast<decltype(args)>(args)...);
  750|    540|              }
  751|    540|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    540|    {
  684|    540|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    540|            return static_cast<T*>(s.m_cp);
  686|    540|        }
  687|    540|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    540|            return static_cast<T*>(s.m_p);
  689|    540|        }
  690|    540|        else {
  691|    540|            return reinterpret_cast<T*>(s.m_fp);
  692|    540|        }
  693|    540|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    540|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    106|    {
 5048|    106|        auto it = read_source_impl(range, {specs});
 5049|    106|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 88]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|     88|        return read_string_impl(range, *it, value);
 5054|    106|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    398|{
 4752|    398|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    398|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    398|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 186, False: 212]
  ------------------
 4756|    186|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    186|                                     "Invalid encoding in scanned string");
 4758|    186|    }
 4759|    212|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    212|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 212]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    212|    return SCN_MOVE(result);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    212|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  2.45k|    {
 4891|  2.45k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  2.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.14k, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.14k|    }                                                  \
  |  |  |  | 3671|  2.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    310|        return read_string_impl(range, it, value);
 4893|  2.45k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  15.3k|{
 5809|  15.3k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  15.3k|        return reader_impl_for_bool<CharT>{};
 5811|  15.3k|    }
 5812|  15.3k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  15.3k|        return reader_impl_for_char<CharT>{};
 5814|  15.3k|    }
 5815|  15.3k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  15.3k|        return reader_impl_for_wchar<CharT>{};
 5817|  15.3k|    }
 5818|  15.3k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  15.3k|        return reader_impl_for_code_point<CharT>{};
 5820|  15.3k|    }
 5821|  15.3k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  15.3k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  15.3k|        return reader_impl_for_string<CharT>{};
 5824|  15.3k|    }
 5825|  15.3k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  15.3k|                       std::is_same_v<T, std::wstring>) {
 5827|  15.3k|        return reader_impl_for_string<CharT>{};
 5828|  15.3k|    }
 5829|  15.3k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  15.3k|                       std::is_same_v<T, wregex_matches>) {
 5831|  15.3k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  15.3k|    }
 5833|  15.3k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  15.3k|        return reader_impl_for_voidptr<CharT>{};
 5835|  15.3k|    }
 5836|  15.3k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  15.3k|        return reader_impl_for_float<CharT>{};
 5838|  15.3k|    }
 5839|  15.3k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  15.3k|                       !std::is_same_v<T, wchar_t> &&
 5841|  15.3k|                       !std::is_same_v<T, char32_t> &&
 5842|  15.3k|                       !std::is_same_v<T, bool>) {
 5843|  15.3k|        return reader_impl_for_int<CharT>{};
 5844|  15.3k|    }
 5845|  15.3k|    else {
 5846|  15.3k|        return reader_impl_for_monostate<CharT>{};
 5847|  15.3k|    }
 5848|  15.3k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    188|    {
 5277|    188|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    188|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    188|        return read_impl(range, specs, value);
 5279|    188|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    188|    {
 5295|    188|        SCN_CLANG_PUSH
 5296|    188|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    188|        switch (m_type) {
 5299|    136|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 136, False: 52]
  ------------------
 5300|    136|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 168]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 170]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 188]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 178]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 184]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 188]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    188|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    188|        }
 5331|       |
 5332|    188|        SCN_CLANG_POP
 5333|    188|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    136|    {
 4827|    136|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    136|                                     value);
 4829|    136|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    174|{
 4773|    174|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    174|    auto src = [&]() {
 4776|    174|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    174|            return make_contiguous_buffer(
 4778|    174|                ranges::subrange{range.begin().base(), result.base()});
 4779|    174|        }
 4780|    174|        else {
 4781|    174|            return make_contiguous_buffer(
 4782|    174|                ranges::subrange{range.begin(), result});
 4783|    174|        }
 4784|    174|    }();
 4785|    174|    using src_type = decltype(src);
 4786|       |
 4787|    174|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    174|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    174|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    174|                                     "Cannot read a string_view from "
 4796|    174|                                     "this source range (would require "
 4797|    174|                                     "transcoding)");
 4798|    174|    }
 4799|    174|    else {
 4800|    174|        const auto view = src.view();
 4801|    174|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    174|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 102, False: 72]
  ------------------
 4804|    102|            return unexpected_scan_error(
 4805|    102|                scan_error::invalid_scanned_value,
 4806|    102|                "Invalid encoding in scanned string_view");
 4807|    102|        }
 4808|       |
 4809|     72|        return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    174|    }
 4811|    174|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    174|    auto src = [&]() {
 4776|    174|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    174|            return make_contiguous_buffer(
 4778|    174|                ranges::subrange{range.begin().base(), result.base()});
 4779|    174|        }
 4780|    174|        else {
 4781|    174|            return make_contiguous_buffer(
 4782|    174|                ranges::subrange{range.begin(), result});
 4783|    174|        }
 4784|    174|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     20|    {
 4863|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 20, False: 0]
  ------------------
 4864|     20|            return read_string_view_impl(
 4865|     20|                range,
 4866|     20|                read_until_code_unit(
 4867|     20|                    range,
 4868|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     20|                        SourceCharT ch) { return ch == until; }),
 4870|     20|                value);
 4871|     20|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    232|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    232|              cvref<T> obj = *get<T>(fn);
  745|    232|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    232|                  obj(static_cast<decltype(args)>(args)...);
  747|    232|              }
  748|    232|              else {
  749|    232|                  return obj(static_cast<decltype(args)>(args)...);
  750|    232|              }
  751|    232|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    232|    {
  684|    232|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    232|            return static_cast<T*>(s.m_cp);
  686|    232|        }
  687|    232|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    232|            return static_cast<T*>(s.m_p);
  689|    232|        }
  690|    232|        else {
  691|    232|            return reinterpret_cast<T*>(s.m_fp);
  692|    232|        }
  693|    232|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    232|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     18|    {
 4959|     18|        return read_impl(
 4960|     18|            range,
 4961|     18|            [&](const auto& rng) {
 4962|     18|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     18|            },
 4964|     18|            detail::priority_tag<1>{});
 4965|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     18|            [&](const auto& rng) {
 4962|     18|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     18|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     14|    {
 4902|     14|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     14|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  2.91k|    {
 5277|  2.91k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.91k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.91k|        return read_impl(range, specs, value);
 5279|  2.91k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  2.91k|    {
 5295|  2.91k|        SCN_CLANG_PUSH
 5296|  2.91k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.91k|        switch (m_type) {
 5299|    326|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 326, False: 2.59k]
  ------------------
 5300|    326|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     28|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 28, False: 2.89k]
  ------------------
 5303|     28|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     28|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.91k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    106|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 106, False: 2.81k]
  ------------------
 5310|    106|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    106|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  2.40k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2.40k, False: 512]
  ------------------
 5315|  2.40k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  2.40k|                    range, specs.charset_string<SourceCharT>(),
 5317|  2.40k|                    specs.regexp_flags, value);
 5318|       |
 5319|     52|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 52, False: 2.86k]
  ------------------
 5320|     52|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     52|                    range,
 5322|     52|                    get_unescaped_regex_pattern(
 5323|     52|                        specs.charset_string<SourceCharT>()),
 5324|     52|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.91k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.91k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.91k|        }
 5331|       |
 5332|  2.91k|        SCN_CLANG_POP
 5333|  2.91k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  12.5k|    {
 4827|  12.5k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  12.5k|                                     value);
 4829|  12.5k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  12.5k|{
 4773|  12.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  12.5k|    auto src = [&]() {
 4776|  12.5k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  12.5k|            return make_contiguous_buffer(
 4778|  12.5k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  12.5k|        }
 4780|  12.5k|        else {
 4781|  12.5k|            return make_contiguous_buffer(
 4782|  12.5k|                ranges::subrange{range.begin(), result});
 4783|  12.5k|        }
 4784|  12.5k|    }();
 4785|  12.5k|    using src_type = decltype(src);
 4786|       |
 4787|  12.5k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  12.5k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  12.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  12.5k|                                     "Cannot read a string_view from "
 4796|  12.5k|                                     "this source range (would require "
 4797|  12.5k|                                     "transcoding)");
 4798|  12.5k|    }
 4799|  12.5k|    else {
 4800|  12.5k|        const auto view = src.view();
 4801|  12.5k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  12.5k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 282, False: 12.2k]
  ------------------
 4804|    282|            return unexpected_scan_error(
 4805|    282|                scan_error::invalid_scanned_value,
 4806|    282|                "Invalid encoding in scanned string_view");
 4807|    282|        }
 4808|       |
 4809|  12.2k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  12.2k|    static_cast<    \
  |  |  929|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  12.5k|    }
 4811|  12.5k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  12.5k|    auto src = [&]() {
 4776|  12.5k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  12.5k|            return make_contiguous_buffer(
 4778|  12.5k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  12.5k|        }
 4780|  12.5k|        else {
 4781|  12.5k|            return make_contiguous_buffer(
 4782|  12.5k|                ranges::subrange{range.begin(), result});
 4783|  12.5k|        }
 4784|  12.5k|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     28|    {
 4863|     28|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 28, False: 0]
  ------------------
 4864|     28|            return read_string_view_impl(
 4865|     28|                range,
 4866|     28|                read_until_code_unit(
 4867|     28|                    range,
 4868|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     28|                        SourceCharT ch) { return ch == until; }),
 4870|     28|                value);
 4871|     28|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     28|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    540|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    540|              cvref<T> obj = *get<T>(fn);
  745|    540|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    540|                  obj(static_cast<decltype(args)>(args)...);
  747|    540|              }
  748|    540|              else {
  749|    540|                  return obj(static_cast<decltype(args)>(args)...);
  750|    540|              }
  751|    540|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    540|    {
  684|    540|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    540|            return static_cast<T*>(s.m_cp);
  686|    540|        }
  687|    540|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    540|            return static_cast<T*>(s.m_p);
  689|    540|        }
  690|    540|        else {
  691|    540|            return reinterpret_cast<T*>(s.m_fp);
  692|    540|        }
  693|    540|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    540|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    106|    {
 5062|    106|        auto it = read_source_impl(range, {specs});
 5063|    106|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 88]
  |  |  ------------------
  ------------------
 5064|     18|            return unexpected(it.error());
 5065|     18|        }
 5066|       |
 5067|     88|        return read_string_view_impl(range, *it, value);
 5068|    106|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    398|{
 4773|    398|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    398|    auto src = [&]() {
 4776|    398|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    398|            return make_contiguous_buffer(
 4778|    398|                ranges::subrange{range.begin().base(), result.base()});
 4779|    398|        }
 4780|    398|        else {
 4781|    398|            return make_contiguous_buffer(
 4782|    398|                ranges::subrange{range.begin(), result});
 4783|    398|        }
 4784|    398|    }();
 4785|    398|    using src_type = decltype(src);
 4786|       |
 4787|    398|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    398|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    398|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    398|                                     "Cannot read a string_view from "
 4796|    398|                                     "this source range (would require "
 4797|    398|                                     "transcoding)");
 4798|    398|    }
 4799|    398|    else {
 4800|    398|        const auto view = src.view();
 4801|    398|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    398|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 186, False: 212]
  ------------------
 4804|    186|            return unexpected_scan_error(
 4805|    186|                scan_error::invalid_scanned_value,
 4806|    186|                "Invalid encoding in scanned string_view");
 4807|    186|        }
 4808|       |
 4809|    212|        return SCN_MOVE(result);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    398|    }
 4811|    398|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    398|    auto src = [&]() {
 4776|    398|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    398|            return make_contiguous_buffer(
 4778|    398|                ranges::subrange{range.begin().base(), result.base()});
 4779|    398|        }
 4780|    398|        else {
 4781|    398|            return make_contiguous_buffer(
 4782|    398|                ranges::subrange{range.begin(), result});
 4783|    398|        }
 4784|    398|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  2.45k|    {
 4902|  2.45k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  2.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.14k, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.14k|    }                                                  \
  |  |  |  | 3671|  2.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    310|        return read_string_view_impl(range, it, value);
 4904|  2.45k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  6.28k|{
 1683|  6.28k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  6.28k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  6.28k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  6.28k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  6.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  6.28k|    }
 1688|  6.28k|    else {
 1689|  6.28k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  6.28k|    }
 1691|  6.28k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  6.28k|    {
 1490|  6.28k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    912|    {
 4100|    912|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 912]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    912|        return std::copysign(value, T{1.0});
 4104|    912|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  12.5k|    {
 4100|  12.5k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 12.5k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  12.5k|        return std::copysign(value, T{1.0});
 4104|  12.5k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.08k|{
 5795|  6.08k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.08k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.08k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 676, False: 5.40k]
  ------------------
 5800|    676|        return range.begin();
 5801|    676|    }
 5802|       |
 5803|  5.40k|    return skip_classic_whitespace(range);
 5804|  6.08k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    676|    {
 3528|    676|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    676|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    676|        return read_default_with_base(range, value, 10);
 3530|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    676|    {
 3528|    676|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    676|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    676|        return read_default_with_base(range, value, 10);
 3530|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.17k|    {
 5748|  1.17k|        return true;
 5749|  1.17k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    892|    {
 5765|    892|        detail::format_specs specs{};
 5766|    892|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    892|        std::uintptr_t intvalue{};
 5769|    892|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 892, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    892|    }                                                  \
  |  |  |  | 3671|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    892|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.43k|    {
 3035|  1.43k|        return true;
 3036|  1.43k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    676|    {
 5504|    676|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    676|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    676|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    676|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  12.8k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.01k|    {
 5355|  1.01k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.01k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.01k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 906, False: 110]
  ------------------
 5359|    906|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 906]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    906|            else {
 5363|    906|                err = r.error();
 5364|    906|            }
 5365|    906|        }
 5366|       |
 5367|  1.01k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 998, False: 18]
  ------------------
 5368|    998|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 998]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    998|            else {
 5372|    998|                err = r.error();
 5373|    998|            }
 5374|    998|        }
 5375|       |
 5376|  1.01k|        return unexpected(err);
 5377|  1.01k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    924|    {
 5384|    924|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 924]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    924|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 924]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    924|        return unexpected_scan_error(
 5394|    924|            scan_error::invalid_scanned_value,
 5395|    924|            "Failed to read numeric boolean value: No match");
 5396|    924|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    998|    {
 5402|    998|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 998]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    998|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 998]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    998|        return unexpected_scan_error(
 5412|    998|            scan_error::invalid_scanned_value,
 5413|    998|            "Failed to read textual boolean value: No match");
 5414|    998|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.99k|{
 2194|  1.99k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  1.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.89k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.89k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.89k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.89k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.89k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.89k|            return unexpected(parse_error::error);
 2202|  1.89k|        }
 2203|      0|        return it;
 2204|  1.89k|    }
 2205|  1.89k|    else {
 2206|  1.89k|        auto range_it = range.begin();
 2207|  1.89k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.89k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.89k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.89k|                return unexpected(parse_error::error);
 2211|  1.89k|            }
 2212|  1.89k|        }
 2213|  1.89k|        return it;
 2214|  1.89k|    }
 2215|  1.89k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    676|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  12.8k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    676|    {
 4152|    676|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    676|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    676|        float_reader<CharT> rd{};
 4155|    676|        return read_impl<Range>(
 4156|    676|            range, rd,
 4157|    676|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    676|                return r.read_source(SCN_FWD(args)...);
 4159|    676|            },
 4160|    676|            value);
 4161|    676|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    676|    {
  754|    676|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    676|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    676|              cvref<T> obj = *get<T>(fn);
  745|    676|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    676|                  obj(static_cast<decltype(args)>(args)...);
  747|    676|              }
  748|    676|              else {
  749|    676|                  return obj(static_cast<decltype(args)>(args)...);
  750|    676|              }
  751|    676|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    676|    {
  684|    676|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    676|            return static_cast<T*>(s.m_cp);
  686|    676|        }
  687|    676|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    676|            return static_cast<T*>(s.m_p);
  689|    676|        }
  690|    676|        else {
  691|    676|            return reinterpret_cast<T*>(s.m_fp);
  692|    676|        }
  693|    676|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    676|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    676|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    676|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    676|        {
  662|    676|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    676|    {
 5266|    676|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    676|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    676|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    676|    {
 5266|    676|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    676|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    676|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    676|    {
 5871|    676|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    676|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    676|                          basic_contiguous_scan_context<char_type>>) {
 5875|    676|            auto rd = make_reader<T, char_type>();
 5876|    676|            return impl(rd, range, value);
 5877|    676|        }
 5878|    676|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    676|            auto rd = make_reader<T, char_type>();
 5880|    676|            if (!is_segment_contiguous(range)) {
 5881|    676|                return impl(rd, range, value);
 5882|    676|            }
 5883|    676|            auto crange = get_as_contiguous(range);
 5884|    676|            SCN_TRY(it, impl(rd, crange, value));
 5885|    676|            return ranges::next(range.begin(),
 5886|    676|                                ranges::distance(crange.begin(), it));
 5887|    676|        }
 5888|    676|        else {
 5889|    676|            SCN_EXPECT(false);
 5890|    676|            SCN_UNREACHABLE;
 5891|    676|        }
 5892|    676|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    676|    {
 5863|    676|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    676|                        .transform_error(make_eof_scan_error));
 5865|    676|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    676|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    676|    {
 5266|    676|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    676|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    676|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    676|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   105k|    {
 2879|   105k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   228k|    {
 2883|   228k|        return m_current;
 2884|   228k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   172k|    {
 2888|   172k|        return m_range.end();
 2889|   172k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  48.9k|{
 1221|       |    // TODO: optimize
 1222|  48.9k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  48.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  48.9k|    auto res = get_next_code_point(str);
 1224|  48.9k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  48.9k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  52.1k|    {
 2903|  52.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  52.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  52.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  52.1k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 52.1k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  52.1k|        }
 2909|  52.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  52.1k|    static_cast<    \
  |  |  929|  52.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  52.1k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  70.1k|    {
 2893|  70.1k|        return ranges::subrange{begin(), end()};
 2894|  70.1k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  6.28k|{
 2117|  6.28k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  6.28k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  6.28k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  6.28k|        auto buf = make_contiguous_buffer(range);
 2121|  6.28k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  6.28k|        return ranges::next(range.begin(),
 2123|  6.28k|                            ranges::distance(buf.view().begin(), it));
 2124|  6.28k|    }
 2125|  6.28k|    else {
 2126|  6.28k|        auto it = range.begin();
 2127|       |
 2128|  6.28k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  6.28k|            auto seg = get_contiguous_beginning(range);
 2130|  6.28k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  6.28k|                seg_it != seg.end()) {
 2132|  6.28k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  6.28k|            }
 2134|  6.28k|            ranges::advance(it, seg.size());
 2135|  6.28k|        }
 2136|       |
 2137|  6.28k|        return read_while_code_point(
 2138|  6.28k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  6.28k|    }
 2140|  6.28k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  4.76k|    {
 6037|  4.76k|        const bool need_skipped_width =
 6038|  4.76k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 136, False: 4.63k]
  |  Branch (6038:33): [True: 4.63k, False: 0]
  ------------------
 6039|  4.76k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  4.76k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 352, False: 4.41k]
  ------------------
 6043|  4.76k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 486, False: 3.92k]
  ------------------
 6044|    838|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    838|                             need_skipped_width);
 6046|    838|        }
 6047|  3.92k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 3.75k, False: 178]
  |  Branch (6047:56): [True: 2.13k, False: 1.61k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.13k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 2.13k, False: 0]
  ------------------
 6051|  2.13k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  2.13k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  2.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 2.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|  2.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  2.02k|                                  .transform_error(make_eof_scan_error));
 6054|  2.02k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  2.13k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  1.79k|        return result_type{rng.begin(), 0};
 6070|  3.92k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    838|{
 5951|    838|    using char_type = detail::char_t<Range>;
 5952|    838|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    838|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 608, False: 230]
  ------------------
 5955|    608|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    608|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    608|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 608]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    608|        auto max_width_view = take_width(range, max_width);
 5972|    608|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    608|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 608, False: 0]
  ------------------
 5975|    608|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    608|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    608|    }
 5979|       |
 5980|    230|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    230|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 230]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    230|    auto max_width_view = take_width(range, max_width);
 5994|    230|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    230|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 230, False: 0]
  ------------------
 5997|    230|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    230|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    230|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|    608|    {
  754|    608|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|    652|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    652|              cvref<T> obj = *get<T>(fn);
  745|    652|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    652|                  obj(static_cast<decltype(args)>(args)...);
  747|    652|              }
  748|    652|              else {
  749|    652|                  return obj(static_cast<decltype(args)>(args)...);
  750|    652|              }
  751|    652|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    652|    {
  684|    652|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    652|            return static_cast<T*>(s.m_cp);
  686|    652|        }
  687|    652|        else if constexpr (std::is_object_v<T>) {
  688|    652|            return static_cast<T*>(s.m_p);
  689|    652|        }
  690|    652|        else {
  691|    652|            return reinterpret_cast<T*>(s.m_fp);
  692|    652|        }
  693|    652|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|    652|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|    608|        {
  667|    608|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    608|{
 1976|    608|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    608|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    608|{
 1957|    608|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    608|        return std::find_if(range.begin(), range.end(), pred);
 1959|    608|    }
 1960|    608|    else {
 1961|    608|        auto first = range.begin();
 1962|    718|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 652, False: 66]
  ------------------
 1963|    652|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 542, False: 110]
  ------------------
 1964|    542|                return first;
 1965|    542|            }
 1966|    652|        }
 1967|     66|        return first;
 1968|    608|    }
 1969|    608|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  5.10k|    {
 2810|  5.10k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  5.10k|                                      m_count};
 2812|  5.10k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  19.8k|    {
 2717|  19.8k|        return view;
 2718|  19.8k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  5.10k|    {
 2382|  5.10k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  5.10k|        {
 2781|  5.10k|            return !(y == x);
 2782|  5.10k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  11.1k|        {
 2770|  11.1k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 572, False: 10.5k]
  |  Branch (2770:39): [True: 368, False: 204]
  ------------------
 2771|  11.1k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 10.7k]
  ------------------
 2772|  11.1k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    572|    {
 2421|    572|        return m_multibyte_left;
 2422|    572|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  9.68k|    {
 2816|  9.68k|        return sentinel<true>{m_base.get().end()};
 2817|  9.68k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  9.68k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  7.63k|    {
 2426|  7.63k|        return *m_current;
 2427|  7.63k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  6.31k|    {
 2435|  6.31k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  6.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  6.31k|        _increment_current();
 2437|  6.31k|        return *this;
 2438|  6.31k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  6.31k|    {
 2668|  6.31k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 4.49k, False: 1.82k]
  ------------------
 2669|  4.49k|            auto cplen = _get_cp_length_at_current();
 2670|  4.49k|            m_multibyte_left = cplen - 1;
 2671|  4.49k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  4.49k|        }
 2673|  1.82k|        else {
 2674|  1.82k|            --m_multibyte_left;
 2675|  1.82k|        }
 2676|       |
 2677|  6.31k|        ++m_current;
 2678|  6.31k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  4.49k|    {
 2639|  4.49k|        return static_cast<difference_type>(
 2640|  4.49k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  4.49k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  4.49k|    {
 2645|  4.49k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.49k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  4.49k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 3.35k, False: 1.14k]
  ------------------
 2650|  3.35k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  3.35k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  3.35k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  3.35k|        }
 2654|       |
 2655|  1.14k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  1.14k|                                           cplen);
 2657|  1.14k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  1.14k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  1.14k|        return static_cast<difference_type>(
 2663|  1.14k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  1.14k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    230|{
 2037|    230|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    230|    auto it = range.begin();
 2040|    230|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 230, False: 0]
  ------------------
 2041|    230|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    230|                                           needle.size());
 2043|    230|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 78, False: 152]
  ------------------
 2044|     78|            return it;
 2045|     78|        }
 2046|    152|        static_assert(
 2047|    152|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    152|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 152, False: 0]
  ------------------
 2049|    152|            return it;
 2050|    152|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    230|{
 1857|    230|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    230|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    230|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    230|        if (sz < count) {
 1862|    230|            return unexpected(eof_error::eof);
 1863|    230|        }
 1864|       |
 1865|    230|        return ranges::next(range.begin(), count);
 1866|    230|    }
 1867|    230|    else {
 1868|    230|        auto it = range.begin();
 1869|    230|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 230]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    906|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 754, False: 152]
  ------------------
 1874|    754|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 676]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|    754|        }
 1878|       |
 1879|    152|        return it;
 1880|    230|    }
 1881|    230|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    230|{
 1095|    230|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    230|        return r.size();
 1097|    230|    }
 1098|    230|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    230|                           ranges::const_iterator_t<Range>,
 1100|    230|                           typename detail::basic_scan_buffer<
 1101|    230|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    230|        if constexpr (ranges::common_range<Range>) {
 1103|    230|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    230|        }
 1105|    230|        else {
 1106|    230|            if (r.begin().stores_parent()) {
 1107|    230|                return static_cast<size_t>(
 1108|    230|                    r.begin().parent()->chars_available() -
 1109|    230|                    r.begin().position());
 1110|    230|            }
 1111|    230|            return r.begin().contiguous_segment().size();
 1112|    230|        }
 1113|    230|    }
 1114|    230|    else {
 1115|    230|        return 0;
 1116|    230|    }
 1117|    230|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.13k|    {
  268|  2.13k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.13k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.13k|    {
  161|  2.13k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.13k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.13k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.13k|        else {
  169|  2.13k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.13k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.13k|        }
  173|  2.13k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  2.66k|    {
 2531|  2.66k|        return !(a == b);
 2532|  2.66k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  2.66k|    {
 2523|  2.66k|        return a.m_current == b.m_current;
 2524|  2.66k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  2.97k|    {
 2832|  2.97k|        return take_width_view{r, n};
 2833|  2.97k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  2.97k|    {
 2801|  2.97k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  2.97k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.13k|{
 2951|  2.13k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.13k, False: 0]
  ------------------
 2952|  2.13k|        auto it = read_while_classic_space(range);
 2953|  2.13k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.13k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.02k]
  |  |  ------------------
  ------------------
 2955|    112|            return unexpected(e);
 2956|    112|        }
 2957|       |
 2958|  2.02k|        return it;
 2959|  2.13k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.13k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.13k|{
 2117|  2.13k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.13k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.13k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.13k|        auto buf = make_contiguous_buffer(range);
 2121|  2.13k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.13k|        return ranges::next(range.begin(),
 2123|  2.13k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.13k|    }
 2125|  2.13k|    else {
 2126|  2.13k|        auto it = range.begin();
 2127|       |
 2128|  2.13k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.13k|            auto seg = get_contiguous_beginning(range);
 2130|  2.13k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.13k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.13k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.13k|            ranges::advance(it, seg.size());
 2135|  2.13k|        }
 2136|       |
 2137|  2.13k|        return read_while_code_point(
 2138|  2.13k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.13k|    }
 2140|  2.13k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  2.13k|{
 1039|  2.13k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.13k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.13k|        return r;
 1042|  2.13k|    }
 1043|  2.13k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.13k|                           ranges::const_iterator_t<Range>,
 1045|  2.13k|                           typename detail::basic_scan_buffer<
 1046|  2.13k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.13k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.13k|            auto seg = r.begin().contiguous_segment();
 1049|  2.13k|            auto dist =
 1050|  2.13k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.13k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.13k|        }
 1053|  2.13k|        else {
 1054|  2.13k|            return r.begin().contiguous_segment();
 1055|  2.13k|        }
 1056|  2.13k|    }
 1057|  2.13k|    else {
 1058|  2.13k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.13k|    }
 1060|  2.13k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.13k|{
 2082|  2.13k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.13k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.13k|{
 2061|  2.13k|    auto it = range.begin();
 2062|  3.24k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.13k, False: 112]
  ------------------
 2063|  3.13k|        const auto val =
 2064|  3.13k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.13k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.13k, False: 0]
  |  |  ------------------
  ------------------
 2066|  3.13k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.13k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.13k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.02k, False: 1.11k]
  ------------------
 2069|  2.02k|                return it;
 2070|  2.02k|            }
 2071|  3.13k|        }
 2072|  1.11k|        it = val.iterator;
 2073|  1.11k|    }
 2074|       |
 2075|    112|    return it;
 2076|  2.13k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  3.13k|{
 1899|  3.13k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.13k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.13k|    auto it = range.begin();
 1903|  3.13k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.13k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.13k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  3.13k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.78k, False: 344]
  ------------------
 1912|  2.78k|        ++it;
 1913|  2.78k|        return {it, string_type(1, *range.begin())};
 1914|  2.78k|    }
 1915|       |
 1916|    344|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    344|    return {it, string_type{range.begin(), it}};
 1918|  3.13k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  5.26k|{
  944|  5.26k|    return is_range_eof(r.begin(), r.end());
  945|  5.26k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  5.26k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.26k|    {
  937|  5.26k|        return begin == end;
  938|  5.26k|    }
  939|  5.26k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    344|    {
  283|    344|        return n - fn::impl_i_n_s(i, n, bound);
  284|    344|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    344|    {
  227|    344|        constexpr iter_difference_t<I> zero{0};
  228|    344|        iter_difference_t<I> counter{0};
  229|       |
  230|    344|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 344]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    344|        else {
  237|  1.25k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 914, False: 344]
  |  Branch (237:34): [True: 914, False: 0]
  ------------------
  238|    914|                ++i;
  239|    914|                ++counter;
  240|    914|            }
  241|    344|        }
  242|       |
  243|    344|        return counter;
  244|    344|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  3.13k|    {
 1890|  3.13k|        return !codepoint.empty();
 1891|  3.13k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.13k|    {
  754|  2.13k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.13k|              cvref<T> obj = *get<T>(fn);
  745|  3.13k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.13k|              }
  748|  3.13k|              else {
  749|  3.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.13k|              }
  751|  3.13k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.13k|    {
  684|  3.13k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.13k|            return static_cast<T*>(s.m_cp);
  686|  3.13k|        }
  687|  3.13k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.13k|            return static_cast<T*>(s.m_p);
  689|  3.13k|        }
  690|  3.13k|        else {
  691|  3.13k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.13k|        }
  693|  3.13k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.13k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.13k|        {
  662|  2.13k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.13k|{
  950|  2.13k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.02k]
  |  |  ------------------
  ------------------
  951|    112|        return eof_error::eof;
  952|    112|    }
  953|  2.02k|    return eof_error::good;
  954|  2.13k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  13.6k|    {
 2413|  13.6k|        return m_current;
 2414|  13.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  13.9k|    {
 2417|  13.9k|        return m_count;
 2418|  13.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  17.5k|    {
 6037|  17.5k|        const bool need_skipped_width =
 6038|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.66k, False: 15.8k]
  |  Branch (6038:33): [True: 0, False: 15.8k]
  ------------------
 6039|  17.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  17.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 182, False: 17.3k]
  ------------------
 6043|  17.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 1.91k, False: 15.4k]
  ------------------
 6044|  2.09k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  2.09k|                             need_skipped_width);
 6046|  2.09k|        }
 6047|  15.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 15.0k, False: 388]
  |  Branch (6047:56): [True: 1.64k, False: 13.3k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.64k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.64k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.28k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.28k|                            make_eof_scan_error));
 6058|       |
 6059|  3.28k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.03k, False: 610]
  ------------------
 6060|  1.03k|                return result_type{
 6061|  1.03k|                    it,
 6062|  1.03k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.03k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.03k|                                             .view())};
 6065|  1.03k|            }
 6066|    610|            return result_type{it, 0};
 6067|  3.28k|        }
 6068|       |
 6069|  13.7k|        return result_type{rng.begin(), 0};
 6070|  15.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.71k|    {
 6079|  4.71k|        const bool need_skipped_width =
 6080|  4.71k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 390, False: 4.32k]
  |  Branch (6080:33): [True: 1.16k, False: 3.16k]
  ------------------
 6081|  4.71k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.71k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 184, False: 4.53k]
  ------------------
 6084|  4.71k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 304, False: 4.22k]
  ------------------
 6085|    488|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 212, False: 276]
  ------------------
 6086|    488|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 78, False: 134]
  ------------------
 6087|     78|                return result_type{rng.begin(), 0};
 6088|     78|            }
 6089|    410|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    410|                             specs.fill, need_skipped_width);
 6091|    488|        }
 6092|  4.22k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 4.06k, False: 162]
  ------------------
 6093|  4.22k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 3.73k, False: 330]
  ------------------
 6094|  4.22k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 226, False: 3.51k]
  |  Branch (6094:35): [True: 208, False: 18]
  ------------------
 6095|  3.73k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 588, False: 2.94k]
  ------------------
 6096|  3.52k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 494, False: 94]
  ------------------
 6097|    702|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 498, False: 204]
  ------------------
 6098|    498|                const auto initial_width =
 6099|    498|                    specs.precision - prefix_width - value_width;
 6100|    498|                auto max_width_view = take_width(rng, initial_width);
 6101|    498|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    498|                                  .transform_error(make_eof_scan_error));
 6103|    498|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    498|            }
 6105|    408|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 204]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    408|                            make_eof_scan_error));
 6107|       |
 6108|    408|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 204, False: 0]
  ------------------
 6109|    204|                return result_type{
 6110|    204|                    it,
 6111|    204|                    calculate_text_width(make_contiguous_buffer(
 6112|    204|                                             ranges::subrange{rng.begin(), it})
 6113|    204|                                             .view())};
 6114|    204|            }
 6115|      0|            return result_type{it, 0};
 6116|    408|        }
 6117|  3.52k|        return result_type{rng.begin(), 0};
 6118|  4.22k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  6.41k|    {
 6193|  6.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.41k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.41k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.41k|            auto rd = make_reader<T, char_type>();
 6198|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.84k, False: 572]
  |  |  ------------------
  ------------------
 6199|  5.84k|                return unexpected(e);
 6200|  5.84k|            }
 6201|       |
 6202|    572|            return impl(rd, range, value);
 6203|  6.41k|        }
 6204|  6.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.41k|            auto rd = make_reader<T, char_type>();
 6206|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.41k|                return unexpected(e);
 6208|  6.41k|            }
 6209|       |
 6210|  6.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.41k|                specs.width != 0) {
 6212|  6.41k|                return impl(rd, range, value);
 6213|  6.41k|            }
 6214|       |
 6215|  6.41k|            auto crange = get_as_contiguous(range);
 6216|  6.41k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.41k|            return ranges::next(range.begin(),
 6218|  6.41k|                                ranges::distance(crange.begin(), it));
 6219|  6.41k|        }
 6220|  6.41k|        else {
 6221|  6.41k|            SCN_EXPECT(false);
 6222|  6.41k|            SCN_UNREACHABLE;
 6223|  6.41k|        }
 6224|  6.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    572|    {
 6124|    572|        const bool need_skipped_width =
 6125|    572|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 168, False: 404]
  |  Branch (6125:33): [True: 320, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    572|        auto it = rng.begin();
 6129|    572|        std::ptrdiff_t prefix_width = 0;
 6130|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 326, False: 246]
  ------------------
 6131|    326|            auto max_width_view = take_width(rng, specs.precision);
 6132|    326|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    310|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    310|            it = prefix_result.first.base();
 6135|    310|            prefix_width = prefix_result.second;
 6136|    310|        }
 6137|    246|        else {
 6138|    246|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    246|            std::tie(it, prefix_width) = prefix_result;
 6140|    246|        }
 6141|    556|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    556|        std::ptrdiff_t value_width = 0;
 6145|    556|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 310, False: 246]
  ------------------
 6146|    310|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 304]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    304|            const auto initial_width = specs.precision - prefix_width;
 6154|    304|            auto max_width_view =
 6155|    304|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    304|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 304, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    304|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    246|        else {
 6161|    246|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 246, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    246|    }                                                  \
  |  | 3671|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  6.41k|    {
 6193|  6.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.41k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.41k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.41k|            auto rd = make_reader<T, char_type>();
 6198|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.84k, False: 572]
  |  |  ------------------
  ------------------
 6199|  5.84k|                return unexpected(e);
 6200|  5.84k|            }
 6201|       |
 6202|    572|            return impl(rd, range, value);
 6203|  6.41k|        }
 6204|  6.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.41k|            auto rd = make_reader<T, char_type>();
 6206|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.41k|                return unexpected(e);
 6208|  6.41k|            }
 6209|       |
 6210|  6.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.41k|                specs.width != 0) {
 6212|  6.41k|                return impl(rd, range, value);
 6213|  6.41k|            }
 6214|       |
 6215|  6.41k|            auto crange = get_as_contiguous(range);
 6216|  6.41k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.41k|            return ranges::next(range.begin(),
 6218|  6.41k|                                ranges::distance(crange.begin(), it));
 6219|  6.41k|        }
 6220|  6.41k|        else {
 6221|  6.41k|            SCN_EXPECT(false);
 6222|  6.41k|            SCN_UNREACHABLE;
 6223|  6.41k|        }
 6224|  6.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    572|    {
 6124|    572|        const bool need_skipped_width =
 6125|    572|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 168, False: 404]
  |  Branch (6125:33): [True: 320, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    572|        auto it = rng.begin();
 6129|    572|        std::ptrdiff_t prefix_width = 0;
 6130|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 326, False: 246]
  ------------------
 6131|    326|            auto max_width_view = take_width(rng, specs.precision);
 6132|    326|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    310|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    310|            it = prefix_result.first.base();
 6135|    310|            prefix_width = prefix_result.second;
 6136|    310|        }
 6137|    246|        else {
 6138|    246|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    246|            std::tie(it, prefix_width) = prefix_result;
 6140|    246|        }
 6141|    556|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    556|        std::ptrdiff_t value_width = 0;
 6145|    556|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 310, False: 246]
  ------------------
 6146|    310|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 304]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    304|            const auto initial_width = specs.precision - prefix_width;
 6154|    304|            auto max_width_view =
 6155|    304|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    304|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 304, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    304|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    246|        else {
 6161|    246|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 246, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    246|    }                                                  \
  |  | 3671|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  6.37k|    {
 6193|  6.37k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.37k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.37k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.37k|            auto rd = make_reader<T, char_type>();
 6198|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.87k, False: 502]
  |  |  ------------------
  ------------------
 6199|  5.87k|                return unexpected(e);
 6200|  5.87k|            }
 6201|       |
 6202|    502|            return impl(rd, range, value);
 6203|  6.37k|        }
 6204|  6.37k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.37k|            auto rd = make_reader<T, char_type>();
 6206|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.37k|                return unexpected(e);
 6208|  6.37k|            }
 6209|       |
 6210|  6.37k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.37k|                specs.width != 0) {
 6212|  6.37k|                return impl(rd, range, value);
 6213|  6.37k|            }
 6214|       |
 6215|  6.37k|            auto crange = get_as_contiguous(range);
 6216|  6.37k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.37k|            return ranges::next(range.begin(),
 6218|  6.37k|                                ranges::distance(crange.begin(), it));
 6219|  6.37k|        }
 6220|  6.37k|        else {
 6221|  6.37k|            SCN_EXPECT(false);
 6222|  6.37k|            SCN_UNREACHABLE;
 6223|  6.37k|        }
 6224|  6.37k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  6.37k|    {
 5753|  6.37k|        reader_error_handler eh{};
 5754|  6.37k|        detail::check_pointer_type_specs(specs, eh);
 5755|  6.37k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.87k, False: 502]
  |  |  ------------------
  ------------------
 5756|  5.87k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  5.87k|        }
 5758|    502|        return {};
 5759|  6.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    502|    {
 6124|    502|        const bool need_skipped_width =
 6125|    502|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 164, False: 338]
  |  Branch (6125:33): [True: 280, False: 58]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    502|        auto it = rng.begin();
 6129|    502|        std::ptrdiff_t prefix_width = 0;
 6130|    502|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 286, False: 216]
  ------------------
 6131|    286|            auto max_width_view = take_width(rng, specs.precision);
 6132|    286|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    278|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    278|            it = prefix_result.first.base();
 6135|    278|            prefix_width = prefix_result.second;
 6136|    278|        }
 6137|    216|        else {
 6138|    216|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    216|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    216|            std::tie(it, prefix_width) = prefix_result;
 6140|    216|        }
 6141|    494|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    494|        std::ptrdiff_t value_width = 0;
 6145|    494|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 278, False: 216]
  ------------------
 6146|    278|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 274]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    274|            const auto initial_width = specs.precision - prefix_width;
 6154|    274|            auto max_width_view =
 6155|    274|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    274|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    274|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    216|        else {
 6161|    216|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 216, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    216|    }                                                  \
  |  | 3671|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    274|    {
 5782|    274|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    274|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    274|        return read_default(range, value, loc);
 5784|    274|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    274|    {
 5765|    274|        detail::format_specs specs{};
 5766|    274|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    274|        std::uintptr_t intvalue{};
 5769|    274|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    274|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    274|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    216|    {
 5782|    216|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    216|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    216|        return read_default(range, value, loc);
 5784|    216|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  6.41k|    {
 6193|  6.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.41k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.41k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.41k|            auto rd = make_reader<T, char_type>();
 6198|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.66k, False: 754]
  |  |  ------------------
  ------------------
 6199|  5.66k|                return unexpected(e);
 6200|  5.66k|            }
 6201|       |
 6202|    754|            return impl(rd, range, value);
 6203|  6.41k|        }
 6204|  6.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.41k|            auto rd = make_reader<T, char_type>();
 6206|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.41k|                return unexpected(e);
 6208|  6.41k|            }
 6209|       |
 6210|  6.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.41k|                specs.width != 0) {
 6212|  6.41k|                return impl(rd, range, value);
 6213|  6.41k|            }
 6214|       |
 6215|  6.41k|            auto crange = get_as_contiguous(range);
 6216|  6.41k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.41k|            return ranges::next(range.begin(),
 6218|  6.41k|                                ranges::distance(crange.begin(), it));
 6219|  6.41k|        }
 6220|  6.41k|        else {
 6221|  6.41k|            SCN_EXPECT(false);
 6222|  6.41k|            SCN_UNREACHABLE;
 6223|  6.41k|        }
 6224|  6.41k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  6.41k|    {
 3040|  6.41k|        reader_error_handler eh{};
 3041|  6.41k|        get_derived().check_specs_impl(specs, eh);
 3042|  6.41k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.66k, False: 754]
  |  |  ------------------
  ------------------
 3043|  5.66k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.66k|        }
 3045|    754|        return {};
 3046|  6.41k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  6.41k|    {
 3051|  6.41k|        return static_cast<Derived&>(*this);
 3052|  6.41k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  6.41k|    {
 5497|  6.41k|        detail::check_bool_type_specs(specs, eh);
 5498|  6.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    754|    {
 6124|    754|        const bool need_skipped_width =
 6125|    754|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 178, False: 576]
  |  Branch (6125:33): [True: 386, False: 190]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    754|        auto it = rng.begin();
 6129|    754|        std::ptrdiff_t prefix_width = 0;
 6130|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 394, False: 360]
  ------------------
 6131|    394|            auto max_width_view = take_width(rng, specs.precision);
 6132|    394|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    374|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    374|            it = prefix_result.first.base();
 6135|    374|            prefix_width = prefix_result.second;
 6136|    374|        }
 6137|    360|        else {
 6138|    360|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    360|            std::tie(it, prefix_width) = prefix_result;
 6140|    360|        }
 6141|    734|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    734|        std::ptrdiff_t value_width = 0;
 6145|    734|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 374, False: 360]
  ------------------
 6146|    374|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 368]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    368|            const auto initial_width = specs.precision - prefix_width;
 6154|    368|            auto max_width_view =
 6155|    368|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    368|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 368, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    368|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    368|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    368|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    368|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    368|    }                                                  \
  |  |  |  | 3671|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    360|        else {
 6161|    360|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 360, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    360|    }                                                  \
  |  | 3671|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    368|    {
 5516|    368|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    368|#if !SCN_DISABLE_LOCALE
 5519|    368|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 356]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    356|#endif
 5523|       |
 5524|    356|        return rd.read_classic(range, value);
 5525|    368|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    728|    {
 5529|    728|        SCN_GCC_COMPAT_PUSH
 5530|    728|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    728|        switch (specs.type) {
 5533|    174|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 174, False: 554]
  ------------------
 5534|    174|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 718]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 10, False: 718]
  ------------------
 5538|     24|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 4, False: 724]
  ------------------
 5539|     32|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 8, False: 720]
  ------------------
 5540|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 20, False: 708]
  ------------------
 5541|     56|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 724]
  ------------------
 5542|     56|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    498|            default:
  ------------------
  |  Branch (5544:13): [True: 498, False: 230]
  ------------------
 5545|    498|                return bool_reader_base::allow_text |
 5546|    498|                       bool_reader_base::allow_numeric;
 5547|    728|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    728|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    306|    {
 5384|    306|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 306]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    306|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 306]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    306|        return unexpected_scan_error(
 5394|    306|            scan_error::invalid_scanned_value,
 5395|    306|            "Failed to read numeric boolean value: No match");
 5396|    306|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    612|{
 2146|    612|    auto it = read_code_unit(range);
 2147|    612|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    612|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 612, False: 0]
  |  |  ------------------
  ------------------
 2152|    612|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    612|        return unexpected(parse_error::error);
 2154|    612|    }
 2155|       |
 2156|      0|    return *it;
 2157|    612|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    684|{
 1857|    684|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    684|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    684|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    684|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    684|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    684|        if (sz < count) {
 1862|    684|            return unexpected(eof_error::eof);
 1863|    684|        }
 1864|       |
 1865|    684|        return ranges::next(range.begin(), count);
 1866|    684|    }
 1867|    684|    else {
 1868|    684|        auto it = range.begin();
 1869|    684|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 684]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.40k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.85k, False: 546]
  ------------------
 1874|  2.85k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 138, False: 2.72k]
  ------------------
 1875|    138|                return unexpected(eof_error::eof);
 1876|    138|            }
 1877|  2.85k|        }
 1878|       |
 1879|    546|        return it;
 1880|    684|    }
 1881|    684|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    684|{
 1095|    684|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    684|        return r.size();
 1097|    684|    }
 1098|    684|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    684|                           ranges::const_iterator_t<Range>,
 1100|    684|                           typename detail::basic_scan_buffer<
 1101|    684|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    684|        if constexpr (ranges::common_range<Range>) {
 1103|    684|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    684|        }
 1105|    684|        else {
 1106|    684|            if (r.begin().stores_parent()) {
 1107|    684|                return static_cast<size_t>(
 1108|    684|                    r.begin().parent()->chars_available() -
 1109|    684|                    r.begin().position());
 1110|    684|            }
 1111|    684|            return r.begin().contiguous_segment().size();
 1112|    684|        }
 1113|    684|    }
 1114|    684|    else {
 1115|    684|        return 0;
 1116|    684|    }
 1117|    684|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    356|    {
 5355|    356|        scan_error err{scan_error::invalid_scanned_value,
 5356|    356|                       "Failed to read boolean"};
 5357|       |
 5358|    356|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 296, False: 60]
  ------------------
 5359|    296|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 296]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    296|            else {
 5363|    296|                err = r.error();
 5364|    296|            }
 5365|    296|        }
 5366|       |
 5367|    356|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 332, False: 24]
  ------------------
 5368|    332|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 332]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    332|            else {
 5372|    332|                err = r.error();
 5373|    332|            }
 5374|    332|        }
 5375|       |
 5376|    356|        return unexpected(err);
 5377|    356|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    332|    {
 5402|    332|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 332]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    332|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 332]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    332|        return unexpected_scan_error(
 5412|    332|            scan_error::invalid_scanned_value,
 5413|    332|            "Failed to read textual boolean value: No match");
 5414|    332|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    664|{
 2194|    664|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    664|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    664|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    664|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 538]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    126|    }                                                  \
  |  |  |  | 3671|    664|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    538|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    538|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    538|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    538|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    538|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    538|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 538, False: 0]
  |  |  ------------------
  ------------------
 2201|    538|            return unexpected(parse_error::error);
 2202|    538|        }
 2203|      0|        return it;
 2204|    538|    }
 2205|    538|    else {
 2206|    538|        auto range_it = range.begin();
 2207|    538|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    538|            if (SCN_UNLIKELY(*range_it !=
 2209|    538|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    538|                return unexpected(parse_error::error);
 2211|    538|            }
 2212|    538|        }
 2213|    538|        return it;
 2214|    538|    }
 2215|    538|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    360|    {
 5516|    360|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    360|#if !SCN_DISABLE_LOCALE
 5519|    360|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 20, False: 340]
  ------------------
 5520|     20|            return rd.read_localized(range, loc, value);
 5521|     20|        }
 5522|    340|#endif
 5523|       |
 5524|    340|        return rd.read_classic(range, value);
 5525|    360|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     20|    {
 5428|     20|        scan_error err{scan_error::invalid_scanned_value,
 5429|     20|                       "Failed to read boolean"};
 5430|       |
 5431|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 18, False: 2]
  ------------------
 5432|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 18]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     18|            else {
 5436|     18|                err = r.error();
 5437|     18|            }
 5438|     18|        }
 5439|       |
 5440|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 12]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     20|        return unexpected(err);
 5457|     20|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  6.37k|    {
 6193|  6.37k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.37k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.37k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.37k|            auto rd = make_reader<T, char_type>();
 6198|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.82k, False: 548]
  |  |  ------------------
  ------------------
 6199|  5.82k|                return unexpected(e);
 6200|  5.82k|            }
 6201|       |
 6202|    548|            return impl(rd, range, value);
 6203|  6.37k|        }
 6204|  6.37k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.37k|            auto rd = make_reader<T, char_type>();
 6206|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.37k|                return unexpected(e);
 6208|  6.37k|            }
 6209|       |
 6210|  6.37k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.37k|                specs.width != 0) {
 6212|  6.37k|                return impl(rd, range, value);
 6213|  6.37k|            }
 6214|       |
 6215|  6.37k|            auto crange = get_as_contiguous(range);
 6216|  6.37k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.37k|            return ranges::next(range.begin(),
 6218|  6.37k|                                ranges::distance(crange.begin(), it));
 6219|  6.37k|        }
 6220|  6.37k|        else {
 6221|  6.37k|            SCN_EXPECT(false);
 6222|  6.37k|            SCN_UNREACHABLE;
 6223|  6.37k|        }
 6224|  6.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    548|    {
 6124|    548|        const bool need_skipped_width =
 6125|    548|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 166, False: 382]
  |  Branch (6125:33): [True: 312, False: 70]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    548|        auto it = rng.begin();
 6129|    548|        std::ptrdiff_t prefix_width = 0;
 6130|    548|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 318, False: 230]
  ------------------
 6131|    318|            auto max_width_view = take_width(rng, specs.precision);
 6132|    318|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    318|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    318|            it = prefix_result.first.base();
 6135|    318|            prefix_width = prefix_result.second;
 6136|    318|        }
 6137|    230|        else {
 6138|    230|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    230|            std::tie(it, prefix_width) = prefix_result;
 6140|    230|        }
 6141|    548|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    548|        std::ptrdiff_t value_width = 0;
 6145|    548|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 318, False: 230]
  ------------------
 6146|    318|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 312]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    312|            const auto initial_width = specs.precision - prefix_width;
 6154|    312|            auto max_width_view =
 6155|    312|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    312|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    280|            it = w_it.base();
 6158|    280|            value_width = initial_width - w_it.count();
 6159|    280|        }
 6160|    230|        else {
 6161|    230|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18, False: 212]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     18|    }                                                  \
  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    212|                                             specs, value, loc));
 6163|       |
 6164|    212|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 156, False: 56]
  ------------------
 6165|    156|                value_width = calculate_text_width(
 6166|    156|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    156|                        .view());
 6168|    156|            }
 6169|    212|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    492|        std::ptrdiff_t postfix_width = 0;
 6173|    492|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 492, False: 0]
  ------------------
 6174|    492|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    492|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    492|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    492|                                 value_width));
 6178|    492|            std::tie(it, postfix_width) = postfix_result;
 6179|    492|        }
 6180|       |
 6181|    492|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    492|                                                 value_width, postfix_width);
 6183|    492|            !e) {
  ------------------
  |  Branch (6183:13): [True: 144, False: 348]
  ------------------
 6184|    144|            return unexpected(e);
 6185|    144|        }
 6186|       |
 6187|    348|        return it;
 6188|    492|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  6.41k|    {
 6193|  6.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.41k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.41k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.41k|            auto rd = make_reader<T, char_type>();
 6198|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.82k, False: 588]
  |  |  ------------------
  ------------------
 6199|  5.82k|                return unexpected(e);
 6200|  5.82k|            }
 6201|       |
 6202|    588|            return impl(rd, range, value);
 6203|  6.41k|        }
 6204|  6.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.41k|            auto rd = make_reader<T, char_type>();
 6206|  6.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.41k|                return unexpected(e);
 6208|  6.41k|            }
 6209|       |
 6210|  6.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.41k|                specs.width != 0) {
 6212|  6.41k|                return impl(rd, range, value);
 6213|  6.41k|            }
 6214|       |
 6215|  6.41k|            auto crange = get_as_contiguous(range);
 6216|  6.41k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.41k|            return ranges::next(range.begin(),
 6218|  6.41k|                                ranges::distance(crange.begin(), it));
 6219|  6.41k|        }
 6220|  6.41k|        else {
 6221|  6.41k|            SCN_EXPECT(false);
 6222|  6.41k|            SCN_UNREACHABLE;
 6223|  6.41k|        }
 6224|  6.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    588|    {
 6124|    588|        const bool need_skipped_width =
 6125|    588|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 174, False: 414]
  |  Branch (6125:33): [True: 318, False: 96]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    588|        auto it = rng.begin();
 6129|    588|        std::ptrdiff_t prefix_width = 0;
 6130|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 326, False: 262]
  ------------------
 6131|    326|            auto max_width_view = take_width(rng, specs.precision);
 6132|    326|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    310|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    310|            it = prefix_result.first.base();
 6135|    310|            prefix_width = prefix_result.second;
 6136|    310|        }
 6137|    262|        else {
 6138|    262|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    262|            std::tie(it, prefix_width) = prefix_result;
 6140|    262|        }
 6141|    572|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    572|        std::ptrdiff_t value_width = 0;
 6145|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 310, False: 262]
  ------------------
 6146|    310|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 302]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    302|            const auto initial_width = specs.precision - prefix_width;
 6154|    302|            auto max_width_view =
 6155|    302|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    302|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    302|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    262|        else {
 6161|    262|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    262|    }                                                  \
  |  | 3671|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  6.37k|    {
 6193|  6.37k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.37k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.37k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.37k|            auto rd = make_reader<T, char_type>();
 6198|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 6.24k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  6.24k|            return impl(rd, range, value);
 6203|  6.37k|        }
 6204|  6.37k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.37k|            auto rd = make_reader<T, char_type>();
 6206|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.37k|                return unexpected(e);
 6208|  6.37k|            }
 6209|       |
 6210|  6.37k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.37k|                specs.width != 0) {
 6212|  6.37k|                return impl(rd, range, value);
 6213|  6.37k|            }
 6214|       |
 6215|  6.37k|            auto crange = get_as_contiguous(range);
 6216|  6.37k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.37k|            return ranges::next(range.begin(),
 6218|  6.37k|                                ranges::distance(crange.begin(), it));
 6219|  6.37k|        }
 6220|  6.37k|        else {
 6221|  6.37k|            SCN_EXPECT(false);
 6222|  6.37k|            SCN_UNREACHABLE;
 6223|  6.37k|        }
 6224|  6.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  6.24k|    {
 6124|  6.24k|        const bool need_skipped_width =
 6125|  6.24k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 262, False: 5.98k]
  |  Branch (6125:33): [True: 898, False: 5.08k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  6.24k|        auto it = rng.begin();
 6129|  6.24k|        std::ptrdiff_t prefix_width = 0;
 6130|  6.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 930, False: 5.31k]
  ------------------
 6131|    930|            auto max_width_view = take_width(rng, specs.precision);
 6132|    930|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 918]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    918|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    918|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    918|            it = prefix_result.first.base();
 6135|    918|            prefix_width = prefix_result.second;
 6136|    918|        }
 6137|  5.31k|        else {
 6138|  5.31k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  5.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  5.31k|            std::tie(it, prefix_width) = prefix_result;
 6140|  5.31k|        }
 6141|  6.23k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  6.23k|        std::ptrdiff_t value_width = 0;
 6145|  6.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 918, False: 5.31k]
  ------------------
 6146|    918|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 10, False: 908]
  ------------------
 6147|     10|                return unexpected_scan_error(
 6148|     10|                    scan_error::invalid_scanned_value,
 6149|     10|                    "Too many fill characters before value, "
 6150|     10|                    "precision exceeded before reading value");
 6151|     10|            }
 6152|       |
 6153|    908|            const auto initial_width = specs.precision - prefix_width;
 6154|    908|            auto max_width_view =
 6155|    908|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    908|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 534, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    534|    }                                                  \
  |  |  |  | 3671|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    374|            it = w_it.base();
 6158|    374|            value_width = initial_width - w_it.count();
 6159|    374|        }
 6160|  5.31k|        else {
 6161|  5.31k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 1.40k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.91k|    }                                                  \
  |  | 3671|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.40k|                                             specs, value, loc));
 6163|       |
 6164|  1.40k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 192, False: 1.21k]
  ------------------
 6165|    192|                value_width = calculate_text_width(
 6166|    192|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    192|                        .view());
 6168|    192|            }
 6169|  1.40k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.77k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.77k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.40k, False: 370]
  ------------------
 6174|  1.40k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.40k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.40k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.40k|                                 value_width));
 6178|  1.40k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.40k|        }
 6180|       |
 6181|  1.77k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.77k|                                                 value_width, postfix_width);
 6183|  1.77k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 102, False: 1.67k]
  ------------------
 6184|    102|            return unexpected(e);
 6185|    102|        }
 6186|       |
 6187|  1.67k|        return it;
 6188|  1.77k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  6.37k|    {
 6193|  6.37k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.37k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.37k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.37k|            auto rd = make_reader<T, char_type>();
 6198|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 6.24k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  6.24k|            return impl(rd, range, value);
 6203|  6.37k|        }
 6204|  6.37k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.37k|            auto rd = make_reader<T, char_type>();
 6206|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.37k|                return unexpected(e);
 6208|  6.37k|            }
 6209|       |
 6210|  6.37k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.37k|                specs.width != 0) {
 6212|  6.37k|                return impl(rd, range, value);
 6213|  6.37k|            }
 6214|       |
 6215|  6.37k|            auto crange = get_as_contiguous(range);
 6216|  6.37k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.37k|            return ranges::next(range.begin(),
 6218|  6.37k|                                ranges::distance(crange.begin(), it));
 6219|  6.37k|        }
 6220|  6.37k|        else {
 6221|  6.37k|            SCN_EXPECT(false);
 6222|  6.37k|            SCN_UNREACHABLE;
 6223|  6.37k|        }
 6224|  6.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  6.24k|    {
 6124|  6.24k|        const bool need_skipped_width =
 6125|  6.24k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 262, False: 5.98k]
  |  Branch (6125:33): [True: 898, False: 5.08k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  6.24k|        auto it = rng.begin();
 6129|  6.24k|        std::ptrdiff_t prefix_width = 0;
 6130|  6.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 930, False: 5.31k]
  ------------------
 6131|    930|            auto max_width_view = take_width(rng, specs.precision);
 6132|    930|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 918]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    918|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    918|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    918|            it = prefix_result.first.base();
 6135|    918|            prefix_width = prefix_result.second;
 6136|    918|        }
 6137|  5.31k|        else {
 6138|  5.31k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  5.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  5.31k|            std::tie(it, prefix_width) = prefix_result;
 6140|  5.31k|        }
 6141|  6.23k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  6.23k|        std::ptrdiff_t value_width = 0;
 6145|  6.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 918, False: 5.31k]
  ------------------
 6146|    918|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 10, False: 908]
  ------------------
 6147|     10|                return unexpected_scan_error(
 6148|     10|                    scan_error::invalid_scanned_value,
 6149|     10|                    "Too many fill characters before value, "
 6150|     10|                    "precision exceeded before reading value");
 6151|     10|            }
 6152|       |
 6153|    908|            const auto initial_width = specs.precision - prefix_width;
 6154|    908|            auto max_width_view =
 6155|    908|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    908|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 534, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    534|    }                                                  \
  |  |  |  | 3671|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    374|            it = w_it.base();
 6158|    374|            value_width = initial_width - w_it.count();
 6159|    374|        }
 6160|  5.31k|        else {
 6161|  5.31k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 1.40k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.91k|    }                                                  \
  |  | 3671|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.40k|                                             specs, value, loc));
 6163|       |
 6164|  1.40k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 192, False: 1.21k]
  ------------------
 6165|    192|                value_width = calculate_text_width(
 6166|    192|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    192|                        .view());
 6168|    192|            }
 6169|  1.40k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.77k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.77k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.40k, False: 370]
  ------------------
 6174|  1.40k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.40k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.40k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.40k|                                 value_width));
 6178|  1.40k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.40k|        }
 6180|       |
 6181|  1.77k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.77k|                                                 value_width, postfix_width);
 6183|  1.77k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 102, False: 1.67k]
  ------------------
 6184|    102|            return unexpected(e);
 6185|    102|        }
 6186|       |
 6187|  1.67k|        return it;
 6188|  1.77k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  6.37k|    {
 6193|  6.37k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.37k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.37k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.37k|            auto rd = make_reader<T, char_type>();
 6198|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 6.24k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  6.24k|            return impl(rd, range, value);
 6203|  6.37k|        }
 6204|  6.37k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.37k|            auto rd = make_reader<T, char_type>();
 6206|  6.37k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.37k|                return unexpected(e);
 6208|  6.37k|            }
 6209|       |
 6210|  6.37k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.37k|                specs.width != 0) {
 6212|  6.37k|                return impl(rd, range, value);
 6213|  6.37k|            }
 6214|       |
 6215|  6.37k|            auto crange = get_as_contiguous(range);
 6216|  6.37k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.37k|            return ranges::next(range.begin(),
 6218|  6.37k|                                ranges::distance(crange.begin(), it));
 6219|  6.37k|        }
 6220|  6.37k|        else {
 6221|  6.37k|            SCN_EXPECT(false);
 6222|  6.37k|            SCN_UNREACHABLE;
 6223|  6.37k|        }
 6224|  6.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  6.24k|    {
 6124|  6.24k|        const bool need_skipped_width =
 6125|  6.24k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 262, False: 5.98k]
  |  Branch (6125:33): [True: 898, False: 5.08k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  6.24k|        auto it = rng.begin();
 6129|  6.24k|        std::ptrdiff_t prefix_width = 0;
 6130|  6.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 930, False: 5.31k]
  ------------------
 6131|    930|            auto max_width_view = take_width(rng, specs.precision);
 6132|    930|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 918]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    918|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    918|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    918|            it = prefix_result.first.base();
 6135|    918|            prefix_width = prefix_result.second;
 6136|    918|        }
 6137|  5.31k|        else {
 6138|  5.31k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  5.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  5.31k|            std::tie(it, prefix_width) = prefix_result;
 6140|  5.31k|        }
 6141|  6.23k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  6.23k|        std::ptrdiff_t value_width = 0;
 6145|  6.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 918, False: 5.31k]
  ------------------
 6146|    918|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 10, False: 908]
  ------------------
 6147|     10|                return unexpected_scan_error(
 6148|     10|                    scan_error::invalid_scanned_value,
 6149|     10|                    "Too many fill characters before value, "
 6150|     10|                    "precision exceeded before reading value");
 6151|     10|            }
 6152|       |
 6153|    908|            const auto initial_width = specs.precision - prefix_width;
 6154|    908|            auto max_width_view =
 6155|    908|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    908|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 534, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    534|    }                                                  \
  |  |  |  | 3671|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    374|            it = w_it.base();
 6158|    374|            value_width = initial_width - w_it.count();
 6159|    374|        }
 6160|  5.31k|        else {
 6161|  5.31k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 1.40k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.91k|    }                                                  \
  |  | 3671|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.40k|                                             specs, value, loc));
 6163|       |
 6164|  1.40k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 192, False: 1.21k]
  ------------------
 6165|    192|                value_width = calculate_text_width(
 6166|    192|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    192|                        .view());
 6168|    192|            }
 6169|  1.40k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.77k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.77k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.40k, False: 370]
  ------------------
 6174|  1.40k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.40k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.40k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.40k|                                 value_width));
 6178|  1.40k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.40k|        }
 6180|       |
 6181|  1.77k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.77k|                                                 value_width, postfix_width);
 6183|  1.77k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 102, False: 1.67k]
  ------------------
 6184|    102|            return unexpected(e);
 6185|    102|        }
 6186|       |
 6187|  1.67k|        return it;
 6188|  1.77k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   109k|{
 5795|   109k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|   109k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 12.1k, False: 97.5k]
  ------------------
 5800|  12.1k|        return range.begin();
 5801|  12.1k|    }
 5802|       |
 5803|  97.5k|    return skip_classic_whitespace(range);
 5804|   109k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.1k|    {
 3528|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.1k|        return read_default_with_base(range, value, 10);
 3530|  12.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.1k|    {
 3492|  12.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.1k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  12.1k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  12.1k|                return unexpected_scan_error(
 3498|  12.1k|                    scan_error::invalid_scanned_value,
 3499|  12.1k|                    "Unexpected '-' sign when parsing an "
 3500|  12.1k|                    "unsigned value");
 3501|  12.1k|            }
 3502|  12.1k|        }
 3503|       |
 3504|  12.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.1k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  24.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  24.3k|                parse_integer_digits_without_thsep(
 3511|  24.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  24.3k|                    prefix_result.parsed_base));
 3513|       |
 3514|  24.3k|        auto buf = make_contiguous_buffer(
 3515|  24.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  24.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.1k|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  24.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.1k|    {
 3528|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.1k|        return read_default_with_base(range, value, 10);
 3530|  12.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.1k|    {
 3492|  12.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.1k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  12.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 12.1k]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|  12.1k|        }
 3503|       |
 3504|  12.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.1k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  24.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  24.3k|                parse_integer_digits_without_thsep(
 3511|  24.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  24.3k|                    prefix_result.parsed_base));
 3513|       |
 3514|  24.3k|        auto buf = make_contiguous_buffer(
 3515|  24.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  24.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.1k|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  24.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  12.6k|    {
 5748|  12.6k|        return true;
 5749|  12.6k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|  12.5k|    {
 5765|  12.5k|        detail::format_specs specs{};
 5766|  12.5k|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|  12.5k|        std::uintptr_t intvalue{};
 5769|  12.5k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.5k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|  12.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  12.7k|    {
 3035|  12.7k|        return true;
 3036|  12.7k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|  12.1k|    {
 5504|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|  12.1k|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|  12.1k|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  12.5k|    {
 5355|  12.5k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  12.5k|                       "Failed to read boolean"};
 5357|       |
 5358|  12.5k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 12.5k, False: 40]
  ------------------
 5359|  12.5k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 12.5k]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|  12.5k|            else {
 5363|  12.5k|                err = r.error();
 5364|  12.5k|            }
 5365|  12.5k|        }
 5366|       |
 5367|  12.5k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 12.5k, False: 14]
  ------------------
 5368|  12.5k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 12.5k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  12.5k|            else {
 5372|  12.5k|                err = r.error();
 5373|  12.5k|            }
 5374|  12.5k|        }
 5375|       |
 5376|  12.5k|        return unexpected(err);
 5377|  12.5k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  12.5k|    {
 5384|  12.5k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 12.5k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  12.5k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 12.5k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  12.5k|        return unexpected_scan_error(
 5394|  12.5k|            scan_error::invalid_scanned_value,
 5395|  12.5k|            "Failed to read numeric boolean value: No match");
 5396|  12.5k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  12.5k|    {
 5402|  12.5k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 12.5k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  12.5k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 12.5k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  12.5k|        return unexpected_scan_error(
 5412|  12.5k|            scan_error::invalid_scanned_value,
 5413|  12.5k|            "Failed to read textual boolean value: No match");
 5414|  12.5k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  25.1k|{
 2194|  25.1k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  25.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 132, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    132|    }                                                  \
  |  |  |  | 3671|  25.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  24.9k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  24.9k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  24.9k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  24.9k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  24.9k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  24.9k|            return unexpected(parse_error::error);
 2202|  24.9k|        }
 2203|  24.9k|        return it;
 2204|  24.9k|    }
 2205|  24.9k|    else {
 2206|  24.9k|        auto range_it = range.begin();
 2207|  24.9k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 24.9k, False: 0]
  ------------------
 2208|  24.9k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 0]
  |  |  ------------------
  ------------------
 2209|  24.9k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  24.9k|                return unexpected(parse_error::error);
 2211|  24.9k|            }
 2212|  24.9k|        }
 2213|      0|        return it;
 2214|  24.9k|    }
 2215|  24.9k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|  12.1k|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  12.1k|    {
 4152|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  12.1k|        float_reader<CharT> rd{};
 4155|  12.1k|        return read_impl<Range>(
 4156|  12.1k|            range, rd,
 4157|  12.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  12.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  12.1k|            },
 4160|  12.1k|            value);
 4161|  12.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  12.1k|    {
  754|  12.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  12.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.1k|              cvref<T> obj = *get<T>(fn);
  745|  12.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.1k|              }
  748|  12.1k|              else {
  749|  12.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.1k|              }
  751|  12.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  12.1k|    {
  684|  12.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.1k|            return static_cast<T*>(s.m_cp);
  686|  12.1k|        }
  687|  12.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.1k|            return static_cast<T*>(s.m_p);
  689|  12.1k|        }
  690|  12.1k|        else {
  691|  12.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.1k|        }
  693|  12.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  12.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  12.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  12.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  12.1k|        {
  662|  12.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  12.1k|    {
 5266|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  12.1k|    {
 5266|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  12.1k|    {
 5871|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.1k|            auto rd = make_reader<T, char_type>();
 5876|  12.1k|            return impl(rd, range, value);
 5877|  12.1k|        }
 5878|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.1k|            auto rd = make_reader<T, char_type>();
 5880|  12.1k|            if (!is_segment_contiguous(range)) {
 5881|  12.1k|                return impl(rd, range, value);
 5882|  12.1k|            }
 5883|  12.1k|            auto crange = get_as_contiguous(range);
 5884|  12.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.1k|            return ranges::next(range.begin(),
 5886|  12.1k|                                ranges::distance(crange.begin(), it));
 5887|  12.1k|        }
 5888|  12.1k|        else {
 5889|  12.1k|            SCN_EXPECT(false);
 5890|  12.1k|            SCN_UNREACHABLE;
 5891|  12.1k|        }
 5892|  12.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  12.1k|    {
 5863|  12.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.1k|                        .transform_error(make_eof_scan_error));
 5865|  12.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.1k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  12.1k|    {
 5266|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  12.1k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   210k|    {
 2879|   210k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   432M|    {
 2883|   432M|        return m_current;
 2884|   432M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   864M|    {
 2888|   864M|        return m_range.end();
 2889|   864M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   431M|{
 1221|       |    // TODO: optimize
 1222|   431M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   431M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   431M|    auto res = get_next_code_point(str);
 1224|   431M|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   431M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   431M|    {
 2903|   431M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   431M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   431M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   431M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 431M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   431M|        }
 2909|   431M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   431M|    static_cast<    \
  |  |  929|   431M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   431M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   229k|    {
 2893|   229k|        return ranges::subrange{begin(), end()};
 2894|   229k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  1.56k|    {
 6037|  1.56k|        const bool need_skipped_width =
 6038|  1.56k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 88, False: 1.47k]
  |  Branch (6038:33): [True: 1.47k, False: 0]
  ------------------
 6039|  1.56k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.56k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 1.49k]
  ------------------
 6043|  1.56k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 262, False: 1.23k]
  ------------------
 6044|    334|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    334|                             need_skipped_width);
 6046|    334|        }
 6047|  1.23k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.17k, False: 60]
  |  Branch (6047:56): [True: 980, False: 192]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|    980|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 980, False: 0]
  ------------------
 6051|    980|                auto max_width_view = take_width(rng, specs.precision);
 6052|    980|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 980]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|    980|                                  .transform_error(make_eof_scan_error));
 6054|    980|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|    980|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    252|        return result_type{rng.begin(), 0};
 6070|  1.23k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    334|{
 5951|    334|    using char_type = detail::char_t<Range>;
 5952|    334|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    334|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 334, False: 0]
  ------------------
 5955|    334|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    334|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    334|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 334]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    334|        auto max_width_view = take_width(range, max_width);
 5972|    334|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    334|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 334, False: 0]
  ------------------
 5975|    334|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    334|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    334|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    334|    {
  754|    334|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    402|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    402|              cvref<T> obj = *get<T>(fn);
  745|    402|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    402|                  obj(static_cast<decltype(args)>(args)...);
  747|    402|              }
  748|    402|              else {
  749|    402|                  return obj(static_cast<decltype(args)>(args)...);
  750|    402|              }
  751|    402|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    402|    {
  684|    402|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    402|            return static_cast<T*>(s.m_cp);
  686|    402|        }
  687|    402|        else if constexpr (std::is_object_v<T>) {
  688|    402|            return static_cast<T*>(s.m_p);
  689|    402|        }
  690|    402|        else {
  691|    402|            return reinterpret_cast<T*>(s.m_fp);
  692|    402|        }
  693|    402|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    402|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    334|        {
  667|    334|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    334|{
 1976|    334|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    334|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    334|{
 1957|    334|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    334|        return std::find_if(range.begin(), range.end(), pred);
 1959|    334|    }
 1960|    334|    else {
 1961|    334|        auto first = range.begin();
 1962|    426|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 402, False: 24]
  ------------------
 1963|    402|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 310, False: 92]
  ------------------
 1964|    310|                return first;
 1965|    310|            }
 1966|    402|        }
 1967|     24|        return first;
 1968|    334|    }
 1969|    334|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  2.29k|    {
 2810|  2.29k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  2.29k|                                      m_count};
 2812|  2.29k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  7.95k|    {
 2717|  7.95k|        return view;
 2718|  7.95k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  2.29k|    {
 2382|  2.29k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  1.40k|        {
 2781|  1.40k|            return !(y == x);
 2782|  1.40k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  3.36k|        {
 2770|  3.36k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 24, False: 3.34k]
  |  Branch (2770:39): [True: 24, False: 0]
  ------------------
 2771|  3.36k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 3.34k]
  ------------------
 2772|  3.36k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     24|    {
 2421|     24|        return m_multibyte_left;
 2422|     24|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  3.36k|    {
 2816|  3.36k|        return sentinel<true>{m_base.get().end()};
 2817|  3.36k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  3.36k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  2.36k|    {
 2426|  2.36k|        return *m_current;
 2427|  2.36k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.07k|    {
 2435|  1.07k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.07k|        _increment_current();
 2437|  1.07k|        return *this;
 2438|  1.07k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.07k|    {
 2668|  1.07k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.07k, False: 0]
  ------------------
 2669|  1.07k|            auto cplen = _get_cp_length_at_current();
 2670|  1.07k|            m_multibyte_left = cplen - 1;
 2671|  1.07k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.07k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.07k|        ++m_current;
 2678|  1.07k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.07k|    {
 2639|  1.07k|        return static_cast<difference_type>(
 2640|  1.07k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.07k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.07k|    {
 2645|  1.07k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.07k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.07k, False: 0]
  ------------------
 2650|  1.07k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.07k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.07k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.07k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.31k|    {
 2832|  1.31k|        return take_width_view{r, n};
 2833|  1.31k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  1.31k|    {
 2801|  1.31k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.31k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|    980|{
 2951|    980|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 980, False: 0]
  ------------------
 2952|    980|        auto it = read_while_classic_space(range);
 2953|    980|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|    980|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 980]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|    980|        return it;
 2959|    980|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|    980|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|    980|{
 2117|    980|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    980|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    980|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    980|        auto buf = make_contiguous_buffer(range);
 2121|    980|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    980|        return ranges::next(range.begin(),
 2123|    980|                            ranges::distance(buf.view().begin(), it));
 2124|    980|    }
 2125|    980|    else {
 2126|    980|        auto it = range.begin();
 2127|       |
 2128|    980|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    980|            auto seg = get_contiguous_beginning(range);
 2130|    980|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    980|                seg_it != seg.end()) {
 2132|    980|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    980|            }
 2134|    980|            ranges::advance(it, seg.size());
 2135|    980|        }
 2136|       |
 2137|    980|        return read_while_code_point(
 2138|    980|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    980|    }
 2140|    980|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|    980|{
 2082|    980|    return read_until_code_point(range, std::not_fn(pred));
 2083|    980|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|    980|{
 2061|    980|    auto it = range.begin();
 2062|    980|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 980, False: 0]
  ------------------
 2063|    980|        const auto val =
 2064|    980|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    980|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    980|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 980, False: 0]
  |  |  ------------------
  ------------------
 2066|    980|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    980|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    980|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 980, False: 0]
  ------------------
 2069|    980|                return it;
 2070|    980|            }
 2071|    980|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    980|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|    980|{
 1899|    980|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|    980|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|    980|    auto it = range.begin();
 1903|    980|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|    980|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 980]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|    980|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 980, False: 0]
  ------------------
 1912|    980|        ++it;
 1913|    980|        return {it, string_type(1, *range.begin())};
 1914|    980|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|    980|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  1.96k|{
  944|  1.96k|    return is_range_eof(r.begin(), r.end());
  945|  1.96k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  1.96k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.96k|    {
  937|  1.96k|        return begin == end;
  938|  1.96k|    }
  939|  1.96k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|    980|    {
 1890|    980|        return !codepoint.empty();
 1891|    980|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|    980|    {
  754|    980|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|    980|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    980|              cvref<T> obj = *get<T>(fn);
  745|    980|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    980|                  obj(static_cast<decltype(args)>(args)...);
  747|    980|              }
  748|    980|              else {
  749|    980|                  return obj(static_cast<decltype(args)>(args)...);
  750|    980|              }
  751|    980|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    980|    {
  684|    980|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    980|            return static_cast<T*>(s.m_cp);
  686|    980|        }
  687|    980|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    980|            return static_cast<T*>(s.m_p);
  689|    980|        }
  690|    980|        else {
  691|    980|            return reinterpret_cast<T*>(s.m_fp);
  692|    980|        }
  693|    980|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|    980|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|    980|        {
  662|    980|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|    980|{
  950|    980|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 980]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    980|    return eof_error::good;
  954|    980|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  4.65k|    {
 2413|  4.65k|        return m_current;
 2414|  4.65k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  4.68k|    {
 2417|  4.68k|        return m_count;
 2418|  4.68k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  10.8k|    {
 6037|  10.8k|        const bool need_skipped_width =
 6038|  10.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 8.76k, False: 2.04k]
  |  Branch (6038:33): [True: 0, False: 2.04k]
  ------------------
 6039|  10.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  10.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 10.7k]
  ------------------
 6043|  10.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 164, False: 10.5k]
  ------------------
 6044|    236|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    236|                             need_skipped_width);
 6046|    236|        }
 6047|  10.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 10.3k, False: 198]
  |  Branch (6047:56): [True: 2.41k, False: 7.96k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.41k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.41k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.82k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.82k|                            make_eof_scan_error));
 6058|       |
 6059|  4.82k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.92k, False: 486]
  ------------------
 6060|  1.92k|                return result_type{
 6061|  1.92k|                    it,
 6062|  1.92k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.92k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.92k|                                             .view())};
 6065|  1.92k|            }
 6066|    486|            return result_type{it, 0};
 6067|  4.82k|        }
 6068|       |
 6069|  8.16k|        return result_type{rng.begin(), 0};
 6070|  10.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.50k|    {
 6079|  1.50k|        const bool need_skipped_width =
 6080|  1.50k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 750, False: 752]
  |  Branch (6080:33): [True: 244, False: 508]
  ------------------
 6081|  1.50k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.50k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 56, False: 1.44k]
  ------------------
 6084|  1.50k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 104, False: 1.34k]
  ------------------
 6085|    160|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 82, False: 78]
  ------------------
 6086|    160|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 50, False: 32]
  ------------------
 6087|     50|                return result_type{rng.begin(), 0};
 6088|     50|            }
 6089|    110|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    110|                             specs.fill, need_skipped_width);
 6091|    160|        }
 6092|  1.34k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.32k, False: 22]
  ------------------
 6093|  1.34k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.05k, False: 264]
  ------------------
 6094|  1.34k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 546, False: 510]
  |  Branch (6094:35): [True: 530, False: 16]
  ------------------
 6095|  1.05k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 136, False: 390]
  ------------------
 6096|    640|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 110, False: 26]
  ------------------
 6097|    640|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 110, False: 530]
  ------------------
 6098|    110|                const auto initial_width =
 6099|    110|                    specs.precision - prefix_width - value_width;
 6100|    110|                auto max_width_view = take_width(rng, initial_width);
 6101|    110|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    110|                                  .transform_error(make_eof_scan_error));
 6103|    110|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    110|            }
 6105|  1.06k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  1.06k|                            make_eof_scan_error));
 6107|       |
 6108|  1.06k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 530, False: 0]
  ------------------
 6109|    530|                return result_type{
 6110|    530|                    it,
 6111|    530|                    calculate_text_width(make_contiguous_buffer(
 6112|    530|                                             ranges::subrange{rng.begin(), it})
 6113|    530|                                             .view())};
 6114|    530|            }
 6115|      0|            return result_type{it, 0};
 6116|  1.06k|        }
 6117|    702|        return result_type{rng.begin(), 0};
 6118|  1.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  3.23k|    {
 6193|  3.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.23k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.23k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.23k|            auto rd = make_reader<T, char_type>();
 6198|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 514]
  |  |  ------------------
  ------------------
 6199|  2.71k|                return unexpected(e);
 6200|  2.71k|            }
 6201|       |
 6202|    514|            return impl(rd, range, value);
 6203|  3.23k|        }
 6204|  3.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.23k|            auto rd = make_reader<T, char_type>();
 6206|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.23k|                return unexpected(e);
 6208|  3.23k|            }
 6209|       |
 6210|  3.23k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.23k|                specs.width != 0) {
 6212|  3.23k|                return impl(rd, range, value);
 6213|  3.23k|            }
 6214|       |
 6215|  3.23k|            auto crange = get_as_contiguous(range);
 6216|  3.23k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.23k|            return ranges::next(range.begin(),
 6218|  3.23k|                                ranges::distance(crange.begin(), it));
 6219|  3.23k|        }
 6220|  3.23k|        else {
 6221|  3.23k|            SCN_EXPECT(false);
 6222|  3.23k|            SCN_UNREACHABLE;
 6223|  3.23k|        }
 6224|  3.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    514|    {
 6124|    514|        const bool need_skipped_width =
 6125|    514|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 254, False: 260]
  |  Branch (6125:33): [True: 160, False: 100]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    514|        auto it = rng.begin();
 6129|    514|        std::ptrdiff_t prefix_width = 0;
 6130|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 168, False: 346]
  ------------------
 6131|    168|            auto max_width_view = take_width(rng, specs.precision);
 6132|    168|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    168|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    168|            it = prefix_result.first.base();
 6135|    168|            prefix_width = prefix_result.second;
 6136|    168|        }
 6137|    346|        else {
 6138|    346|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    346|            std::tie(it, prefix_width) = prefix_result;
 6140|    346|        }
 6141|    514|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    514|        std::ptrdiff_t value_width = 0;
 6145|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 168, False: 346]
  ------------------
 6146|    168|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 166]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    166|            const auto initial_width = specs.precision - prefix_width;
 6154|    166|            auto max_width_view =
 6155|    166|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    166|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 166, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    166|    }                                                  \
  |  |  |  | 3671|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    346|        else {
 6161|    346|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 346, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    346|    }                                                  \
  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  3.23k|    {
 6193|  3.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.23k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.23k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.23k|            auto rd = make_reader<T, char_type>();
 6198|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 514]
  |  |  ------------------
  ------------------
 6199|  2.71k|                return unexpected(e);
 6200|  2.71k|            }
 6201|       |
 6202|    514|            return impl(rd, range, value);
 6203|  3.23k|        }
 6204|  3.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.23k|            auto rd = make_reader<T, char_type>();
 6206|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.23k|                return unexpected(e);
 6208|  3.23k|            }
 6209|       |
 6210|  3.23k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.23k|                specs.width != 0) {
 6212|  3.23k|                return impl(rd, range, value);
 6213|  3.23k|            }
 6214|       |
 6215|  3.23k|            auto crange = get_as_contiguous(range);
 6216|  3.23k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.23k|            return ranges::next(range.begin(),
 6218|  3.23k|                                ranges::distance(crange.begin(), it));
 6219|  3.23k|        }
 6220|  3.23k|        else {
 6221|  3.23k|            SCN_EXPECT(false);
 6222|  3.23k|            SCN_UNREACHABLE;
 6223|  3.23k|        }
 6224|  3.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    514|    {
 6124|    514|        const bool need_skipped_width =
 6125|    514|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 254, False: 260]
  |  Branch (6125:33): [True: 160, False: 100]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    514|        auto it = rng.begin();
 6129|    514|        std::ptrdiff_t prefix_width = 0;
 6130|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 168, False: 346]
  ------------------
 6131|    168|            auto max_width_view = take_width(rng, specs.precision);
 6132|    168|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    168|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    168|            it = prefix_result.first.base();
 6135|    168|            prefix_width = prefix_result.second;
 6136|    168|        }
 6137|    346|        else {
 6138|    346|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    346|            std::tie(it, prefix_width) = prefix_result;
 6140|    346|        }
 6141|    514|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    514|        std::ptrdiff_t value_width = 0;
 6145|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 168, False: 346]
  ------------------
 6146|    168|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 166]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    166|            const auto initial_width = specs.precision - prefix_width;
 6154|    166|            auto max_width_view =
 6155|    166|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    166|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 166, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    166|    }                                                  \
  |  |  |  | 3671|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    346|        else {
 6161|    346|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 346, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    346|    }                                                  \
  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  3.19k|    {
 6193|  3.19k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.19k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.19k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.19k|            auto rd = make_reader<T, char_type>();
 6198|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 454]
  |  |  ------------------
  ------------------
 6199|  2.74k|                return unexpected(e);
 6200|  2.74k|            }
 6201|       |
 6202|    454|            return impl(rd, range, value);
 6203|  3.19k|        }
 6204|  3.19k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.19k|            auto rd = make_reader<T, char_type>();
 6206|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.19k|                return unexpected(e);
 6208|  3.19k|            }
 6209|       |
 6210|  3.19k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.19k|                specs.width != 0) {
 6212|  3.19k|                return impl(rd, range, value);
 6213|  3.19k|            }
 6214|       |
 6215|  3.19k|            auto crange = get_as_contiguous(range);
 6216|  3.19k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.19k|            return ranges::next(range.begin(),
 6218|  3.19k|                                ranges::distance(crange.begin(), it));
 6219|  3.19k|        }
 6220|  3.19k|        else {
 6221|  3.19k|            SCN_EXPECT(false);
 6222|  3.19k|            SCN_UNREACHABLE;
 6223|  3.19k|        }
 6224|  3.19k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  3.19k|    {
 5753|  3.19k|        reader_error_handler eh{};
 5754|  3.19k|        detail::check_pointer_type_specs(specs, eh);
 5755|  3.19k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 454]
  |  |  ------------------
  ------------------
 5756|  2.74k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  2.74k|        }
 5758|    454|        return {};
 5759|  3.19k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    454|    {
 6124|    454|        const bool need_skipped_width =
 6125|    454|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 252, False: 202]
  |  Branch (6125:33): [True: 130, False: 72]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    454|        auto it = rng.begin();
 6129|    454|        std::ptrdiff_t prefix_width = 0;
 6130|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 138, False: 316]
  ------------------
 6131|    138|            auto max_width_view = take_width(rng, specs.precision);
 6132|    138|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    138|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    138|            it = prefix_result.first.base();
 6135|    138|            prefix_width = prefix_result.second;
 6136|    138|        }
 6137|    316|        else {
 6138|    316|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    316|            std::tie(it, prefix_width) = prefix_result;
 6140|    316|        }
 6141|    454|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    454|        std::ptrdiff_t value_width = 0;
 6145|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 138, False: 316]
  ------------------
 6146|    138|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 136]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    136|            const auto initial_width = specs.precision - prefix_width;
 6154|    136|            auto max_width_view =
 6155|    136|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    136|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    136|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    136|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    136|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 136, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    136|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    136|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    136|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    136|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    136|    }                                                  \
  |  |  |  | 3671|    136|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    316|        else {
 6161|    316|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    316|    }                                                  \
  |  | 3671|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    136|    {
 5782|    136|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    136|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    136|        return read_default(range, value, loc);
 5784|    136|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    136|    {
 5765|    136|        detail::format_specs specs{};
 5766|    136|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    136|        std::uintptr_t intvalue{};
 5769|    136|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    136|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    136|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    136|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 136, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    136|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    136|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    136|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    136|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    136|    }                                                  \
  |  |  |  | 3671|    136|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    136|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    316|    {
 5782|    316|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    316|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    316|        return read_default(range, value, loc);
 5784|    316|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  3.23k|    {
 6193|  3.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.23k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.23k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.23k|            auto rd = make_reader<T, char_type>();
 6198|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 582]
  |  |  ------------------
  ------------------
 6199|  2.64k|                return unexpected(e);
 6200|  2.64k|            }
 6201|       |
 6202|    582|            return impl(rd, range, value);
 6203|  3.23k|        }
 6204|  3.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.23k|            auto rd = make_reader<T, char_type>();
 6206|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.23k|                return unexpected(e);
 6208|  3.23k|            }
 6209|       |
 6210|  3.23k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.23k|                specs.width != 0) {
 6212|  3.23k|                return impl(rd, range, value);
 6213|  3.23k|            }
 6214|       |
 6215|  3.23k|            auto crange = get_as_contiguous(range);
 6216|  3.23k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.23k|            return ranges::next(range.begin(),
 6218|  3.23k|                                ranges::distance(crange.begin(), it));
 6219|  3.23k|        }
 6220|  3.23k|        else {
 6221|  3.23k|            SCN_EXPECT(false);
 6222|  3.23k|            SCN_UNREACHABLE;
 6223|  3.23k|        }
 6224|  3.23k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.23k|    {
 3040|  3.23k|        reader_error_handler eh{};
 3041|  3.23k|        get_derived().check_specs_impl(specs, eh);
 3042|  3.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 582]
  |  |  ------------------
  ------------------
 3043|  2.64k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  2.64k|        }
 3045|    582|        return {};
 3046|  3.23k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  3.23k|    {
 3051|  3.23k|        return static_cast<Derived&>(*this);
 3052|  3.23k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  3.23k|    {
 5497|  3.23k|        detail::check_bool_type_specs(specs, eh);
 5498|  3.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    582|    {
 6124|    582|        const bool need_skipped_width =
 6125|    582|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 264, False: 318]
  |  Branch (6125:33): [True: 182, False: 136]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    582|        auto it = rng.begin();
 6129|    582|        std::ptrdiff_t prefix_width = 0;
 6130|    582|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 192, False: 390]
  ------------------
 6131|    192|            auto max_width_view = take_width(rng, specs.precision);
 6132|    192|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    192|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    192|            it = prefix_result.first.base();
 6135|    192|            prefix_width = prefix_result.second;
 6136|    192|        }
 6137|    390|        else {
 6138|    390|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    390|            std::tie(it, prefix_width) = prefix_result;
 6140|    390|        }
 6141|    582|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    582|        std::ptrdiff_t value_width = 0;
 6145|    582|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 192, False: 390]
  ------------------
 6146|    192|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 190]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    190|            const auto initial_width = specs.precision - prefix_width;
 6154|    190|            auto max_width_view =
 6155|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    190|    }                                                  \
  |  |  |  | 3671|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    390|        else {
 6161|    390|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 390, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    390|    }                                                  \
  |  | 3671|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    190|    {
 5516|    190|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    190|#if !SCN_DISABLE_LOCALE
 5519|    190|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 6, False: 184]
  ------------------
 5520|      6|            return rd.read_localized(range, loc, value);
 5521|      6|        }
 5522|    184|#endif
 5523|       |
 5524|    184|        return rd.read_classic(range, value);
 5525|    190|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    580|    {
 5529|    580|        SCN_GCC_COMPAT_PUSH
 5530|    580|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    580|        switch (specs.type) {
 5533|     66|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 66, False: 514]
  ------------------
 5534|     66|                return bool_reader_base::allow_text;
 5535|       |
 5536|      8|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 8, False: 572]
  ------------------
 5537|     14|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 6, False: 574]
  ------------------
 5538|     20|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 574]
  ------------------
 5539|     32|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 12, False: 568]
  ------------------
 5540|     44|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 12, False: 568]
  ------------------
 5541|     60|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 16, False: 564]
  ------------------
 5542|     60|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    454|            default:
  ------------------
  |  Branch (5544:13): [True: 454, False: 126]
  ------------------
 5545|    454|                return bool_reader_base::allow_text |
 5546|    454|                       bool_reader_base::allow_numeric;
 5547|    580|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    580|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|      6|    {
 5428|      6|        scan_error err{scan_error::invalid_scanned_value,
 5429|      6|                       "Failed to read boolean"};
 5430|       |
 5431|      6|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 6, False: 0]
  ------------------
 5432|      6|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 6]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|      6|            else {
 5436|      6|                err = r.error();
 5437|      6|            }
 5438|      6|        }
 5439|       |
 5440|      6|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 6, False: 0]
  ------------------
 5441|      6|            auto stdloc = loc.get<std::locale>();
 5442|      6|            const auto& numpunct =
 5443|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      6|            const auto truename = numpunct.truename();
 5445|      6|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      6|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 6]
  ------------------
 5448|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      6|            else {
 5452|      6|                err = r.error();
 5453|      6|            }
 5454|      6|        }
 5455|       |
 5456|      6|        return unexpected(err);
 5457|      6|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    166|    {
 5384|    166|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 166]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    166|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 166]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    166|        return unexpected_scan_error(
 5394|    166|            scan_error::invalid_scanned_value,
 5395|    166|            "Failed to read numeric boolean value: No match");
 5396|    166|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    332|{
 2146|    332|    auto it = read_code_unit(range);
 2147|    332|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 332]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    332|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 0]
  |  |  ------------------
  ------------------
 2152|    332|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    332|        return unexpected(parse_error::error);
 2154|    332|    }
 2155|       |
 2156|      0|    return *it;
 2157|    332|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|      6|    {
 5468|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      6|        const auto shorter = std::pair{
 5470|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 6, False: 0]
  ------------------
 5471|      6|        const auto longer = std::pair{
 5472|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 6]
  ------------------
 5473|       |
 5474|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 6]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 6]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      6|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      6|                                     "read_textual: No match");
 5485|      6|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     12|{
 2179|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      6|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2185|      6|        return unexpected(parse_error::error);
 2186|      6|    }
 2187|      0|    return it;
 2188|      6|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    324|{
 1857|    324|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    324|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    324|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    324|        if (sz < count) {
 1862|    324|            return unexpected(eof_error::eof);
 1863|    324|        }
 1864|       |
 1865|    324|        return ranges::next(range.begin(), count);
 1866|    324|    }
 1867|    324|    else {
 1868|    324|        auto it = range.begin();
 1869|    324|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 324]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.64k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.38k, False: 262]
  ------------------
 1874|  1.38k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 62, False: 1.32k]
  ------------------
 1875|     62|                return unexpected(eof_error::eof);
 1876|     62|            }
 1877|  1.38k|        }
 1878|       |
 1879|    262|        return it;
 1880|    324|    }
 1881|    324|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    324|{
 1095|    324|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    324|        return r.size();
 1097|    324|    }
 1098|    324|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    324|                           ranges::const_iterator_t<Range>,
 1100|    324|                           typename detail::basic_scan_buffer<
 1101|    324|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    324|        if constexpr (ranges::common_range<Range>) {
 1103|    324|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    324|        }
 1105|    324|        else {
 1106|    324|            if (r.begin().stores_parent()) {
 1107|    324|                return static_cast<size_t>(
 1108|    324|                    r.begin().parent()->chars_available() -
 1109|    324|                    r.begin().position());
 1110|    324|            }
 1111|    324|            return r.begin().contiguous_segment().size();
 1112|    324|        }
 1113|    324|    }
 1114|    324|    else {
 1115|    324|        return 0;
 1116|    324|    }
 1117|    324|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    184|    {
 5355|    184|        scan_error err{scan_error::invalid_scanned_value,
 5356|    184|                       "Failed to read boolean"};
 5357|       |
 5358|    184|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 160, False: 24]
  ------------------
 5359|    160|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 160]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    160|            else {
 5363|    160|                err = r.error();
 5364|    160|            }
 5365|    160|        }
 5366|       |
 5367|    184|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 156, False: 28]
  ------------------
 5368|    156|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 156]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    156|            else {
 5372|    156|                err = r.error();
 5373|    156|            }
 5374|    156|        }
 5375|       |
 5376|    184|        return unexpected(err);
 5377|    184|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    156|    {
 5402|    156|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 156]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    156|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 156]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    156|        return unexpected_scan_error(
 5412|    156|            scan_error::invalid_scanned_value,
 5413|    156|            "Failed to read textual boolean value: No match");
 5414|    156|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    312|{
 2194|    312|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     56|    }                                                  \
  |  |  |  | 3671|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    256|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    256|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    256|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    256|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    256|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    256|            return unexpected(parse_error::error);
 2202|    256|        }
 2203|    256|        return it;
 2204|    256|    }
 2205|    256|    else {
 2206|    256|        auto range_it = range.begin();
 2207|    256|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 256, False: 0]
  ------------------
 2208|    256|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  ------------------
  ------------------
 2209|    256|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    256|                return unexpected(parse_error::error);
 2211|    256|            }
 2212|    256|        }
 2213|      0|        return it;
 2214|    256|    }
 2215|    256|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    390|    {
 5516|    390|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    390|#if !SCN_DISABLE_LOCALE
 5519|    390|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 22, False: 368]
  ------------------
 5520|     22|            return rd.read_localized(range, loc, value);
 5521|     22|        }
 5522|    368|#endif
 5523|       |
 5524|    368|        return rd.read_classic(range, value);
 5525|    390|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     22|    {
 5428|     22|        scan_error err{scan_error::invalid_scanned_value,
 5429|     22|                       "Failed to read boolean"};
 5430|       |
 5431|     22|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 20, False: 2]
  ------------------
 5432|     20|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 20]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     20|            else {
 5436|     20|                err = r.error();
 5437|     20|            }
 5438|     20|        }
 5439|       |
 5440|     22|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 4, False: 18]
  ------------------
 5441|      4|            auto stdloc = loc.get<std::locale>();
 5442|      4|            const auto& numpunct =
 5443|      4|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      4|            const auto truename = numpunct.truename();
 5445|      4|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      4|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 4]
  ------------------
 5448|      4|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      4|            else {
 5452|      4|                err = r.error();
 5453|      4|            }
 5454|      4|        }
 5455|       |
 5456|     22|        return unexpected(err);
 5457|     22|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|      4|    {
 5468|      4|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      4|        const auto shorter = std::pair{
 5470|      4|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 4, False: 0]
  ------------------
 5471|      4|        const auto longer = std::pair{
 5472|      4|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 4]
  ------------------
 5473|       |
 5474|      4|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 4]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      4|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 4]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      4|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      4|                                     "read_textual: No match");
 5485|      4|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|      8|{
 2179|      8|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      6|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2185|      6|        return unexpected(parse_error::error);
 2186|      6|    }
 2187|      0|    return it;
 2188|      6|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  3.19k|    {
 6193|  3.19k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.19k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.19k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.19k|            auto rd = make_reader<T, char_type>();
 6198|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 490]
  |  |  ------------------
  ------------------
 6199|  2.70k|                return unexpected(e);
 6200|  2.70k|            }
 6201|       |
 6202|    490|            return impl(rd, range, value);
 6203|  3.19k|        }
 6204|  3.19k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.19k|            auto rd = make_reader<T, char_type>();
 6206|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.19k|                return unexpected(e);
 6208|  3.19k|            }
 6209|       |
 6210|  3.19k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.19k|                specs.width != 0) {
 6212|  3.19k|                return impl(rd, range, value);
 6213|  3.19k|            }
 6214|       |
 6215|  3.19k|            auto crange = get_as_contiguous(range);
 6216|  3.19k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.19k|            return ranges::next(range.begin(),
 6218|  3.19k|                                ranges::distance(crange.begin(), it));
 6219|  3.19k|        }
 6220|  3.19k|        else {
 6221|  3.19k|            SCN_EXPECT(false);
 6222|  3.19k|            SCN_UNREACHABLE;
 6223|  3.19k|        }
 6224|  3.19k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    490|    {
 6124|    490|        const bool need_skipped_width =
 6125|    490|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 254, False: 236]
  |  Branch (6125:33): [True: 154, False: 82]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    490|        auto it = rng.begin();
 6129|    490|        std::ptrdiff_t prefix_width = 0;
 6130|    490|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 162, False: 328]
  ------------------
 6131|    162|            auto max_width_view = take_width(rng, specs.precision);
 6132|    162|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    162|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    162|            it = prefix_result.first.base();
 6135|    162|            prefix_width = prefix_result.second;
 6136|    162|        }
 6137|    328|        else {
 6138|    328|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    328|            std::tie(it, prefix_width) = prefix_result;
 6140|    328|        }
 6141|    490|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    490|        std::ptrdiff_t value_width = 0;
 6145|    490|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 162, False: 328]
  ------------------
 6146|    162|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 160]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    160|            const auto initial_width = specs.precision - prefix_width;
 6154|    160|            auto max_width_view =
 6155|    160|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    160|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    132|            it = w_it.base();
 6158|    132|            value_width = initial_width - w_it.count();
 6159|    132|        }
 6160|    328|        else {
 6161|    328|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 14, False: 314]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     14|    }                                                  \
  |  | 3671|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    314|                                             specs, value, loc));
 6163|       |
 6164|    314|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 244, False: 70]
  ------------------
 6165|    244|                value_width = calculate_text_width(
 6166|    244|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    244|                        .view());
 6168|    244|            }
 6169|    314|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    446|        std::ptrdiff_t postfix_width = 0;
 6173|    446|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 446, False: 0]
  ------------------
 6174|    446|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    446|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    446|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    446|                                 value_width));
 6178|    446|            std::tie(it, postfix_width) = postfix_result;
 6179|    446|        }
 6180|       |
 6181|    446|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    446|                                                 value_width, postfix_width);
 6183|    446|            !e) {
  ------------------
  |  Branch (6183:13): [True: 242, False: 204]
  ------------------
 6184|    242|            return unexpected(e);
 6185|    242|        }
 6186|       |
 6187|    204|        return it;
 6188|    446|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  3.23k|    {
 6193|  3.23k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.23k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.23k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.23k|            auto rd = make_reader<T, char_type>();
 6198|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 498]
  |  |  ------------------
  ------------------
 6199|  2.73k|                return unexpected(e);
 6200|  2.73k|            }
 6201|       |
 6202|    498|            return impl(rd, range, value);
 6203|  3.23k|        }
 6204|  3.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.23k|            auto rd = make_reader<T, char_type>();
 6206|  3.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.23k|                return unexpected(e);
 6208|  3.23k|            }
 6209|       |
 6210|  3.23k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.23k|                specs.width != 0) {
 6212|  3.23k|                return impl(rd, range, value);
 6213|  3.23k|            }
 6214|       |
 6215|  3.23k|            auto crange = get_as_contiguous(range);
 6216|  3.23k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.23k|            return ranges::next(range.begin(),
 6218|  3.23k|                                ranges::distance(crange.begin(), it));
 6219|  3.23k|        }
 6220|  3.23k|        else {
 6221|  3.23k|            SCN_EXPECT(false);
 6222|  3.23k|            SCN_UNREACHABLE;
 6223|  3.23k|        }
 6224|  3.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    498|    {
 6124|    498|        const bool need_skipped_width =
 6125|    498|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 258, False: 240]
  |  Branch (6125:33): [True: 152, False: 88]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    498|        auto it = rng.begin();
 6129|    498|        std::ptrdiff_t prefix_width = 0;
 6130|    498|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 162, False: 336]
  ------------------
 6131|    162|            auto max_width_view = take_width(rng, specs.precision);
 6132|    162|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    162|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    162|            it = prefix_result.first.base();
 6135|    162|            prefix_width = prefix_result.second;
 6136|    162|        }
 6137|    336|        else {
 6138|    336|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    336|            std::tie(it, prefix_width) = prefix_result;
 6140|    336|        }
 6141|    498|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    498|        std::ptrdiff_t value_width = 0;
 6145|    498|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 162, False: 336]
  ------------------
 6146|    162|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 160]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    160|            const auto initial_width = specs.precision - prefix_width;
 6154|    160|            auto max_width_view =
 6155|    160|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    160|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 160, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    160|    }                                                  \
  |  |  |  | 3671|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    336|        else {
 6161|    336|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 336, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    336|    }                                                  \
  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.19k|    {
 6193|  3.19k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.19k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.19k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.19k|            auto rd = make_reader<T, char_type>();
 6198|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 3.11k]
  |  |  ------------------
  ------------------
 6199|     88|                return unexpected(e);
 6200|     88|            }
 6201|       |
 6202|  3.11k|            return impl(rd, range, value);
 6203|  3.19k|        }
 6204|  3.19k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.19k|            auto rd = make_reader<T, char_type>();
 6206|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.19k|                return unexpected(e);
 6208|  3.19k|            }
 6209|       |
 6210|  3.19k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.19k|                specs.width != 0) {
 6212|  3.19k|                return impl(rd, range, value);
 6213|  3.19k|            }
 6214|       |
 6215|  3.19k|            auto crange = get_as_contiguous(range);
 6216|  3.19k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.19k|            return ranges::next(range.begin(),
 6218|  3.19k|                                ranges::distance(crange.begin(), it));
 6219|  3.19k|        }
 6220|  3.19k|        else {
 6221|  3.19k|            SCN_EXPECT(false);
 6222|  3.19k|            SCN_UNREACHABLE;
 6223|  3.19k|        }
 6224|  3.19k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  3.11k|    {
 6124|  3.11k|        const bool need_skipped_width =
 6125|  3.11k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 2.44k, False: 670]
  |  Branch (6125:33): [True: 180, False: 490]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.11k|        auto it = rng.begin();
 6129|  3.11k|        std::ptrdiff_t prefix_width = 0;
 6130|  3.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 192, False: 2.91k]
  ------------------
 6131|    192|            auto max_width_view = take_width(rng, specs.precision);
 6132|    192|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    192|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    192|            it = prefix_result.first.base();
 6135|    192|            prefix_width = prefix_result.second;
 6136|    192|        }
 6137|  2.91k|        else {
 6138|  2.91k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.91k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.91k|        }
 6141|  3.11k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.11k|        std::ptrdiff_t value_width = 0;
 6145|  3.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 192, False: 2.91k]
  ------------------
 6146|    192|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 188]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    188|            const auto initial_width = specs.precision - prefix_width;
 6154|    188|            auto max_width_view =
 6155|    188|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    188|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    188|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    188|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    188|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 116, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    116|    }                                                  \
  |  |  |  | 3671|    188|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     72|            it = w_it.base();
 6158|     72|            value_width = initial_width - w_it.count();
 6159|     72|        }
 6160|  2.91k|        else {
 6161|  2.91k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.39k, False: 522]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.39k|    }                                                  \
  |  | 3671|  2.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    522|                                             specs, value, loc));
 6163|       |
 6164|    522|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 336, False: 186]
  ------------------
 6165|    336|                value_width = calculate_text_width(
 6166|    336|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    336|                        .view());
 6168|    336|            }
 6169|    522|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    594|        std::ptrdiff_t postfix_width = 0;
 6173|    594|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 352, False: 242]
  ------------------
 6174|    352|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    352|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    352|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    352|                                 value_width));
 6178|    352|            std::tie(it, postfix_width) = postfix_result;
 6179|    352|        }
 6180|       |
 6181|    594|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    594|                                                 value_width, postfix_width);
 6183|    594|            !e) {
  ------------------
  |  Branch (6183:13): [True: 124, False: 470]
  ------------------
 6184|    124|            return unexpected(e);
 6185|    124|        }
 6186|       |
 6187|    470|        return it;
 6188|    594|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.19k|    {
 6193|  3.19k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.19k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.19k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.19k|            auto rd = make_reader<T, char_type>();
 6198|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 3.11k]
  |  |  ------------------
  ------------------
 6199|     88|                return unexpected(e);
 6200|     88|            }
 6201|       |
 6202|  3.11k|            return impl(rd, range, value);
 6203|  3.19k|        }
 6204|  3.19k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.19k|            auto rd = make_reader<T, char_type>();
 6206|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.19k|                return unexpected(e);
 6208|  3.19k|            }
 6209|       |
 6210|  3.19k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.19k|                specs.width != 0) {
 6212|  3.19k|                return impl(rd, range, value);
 6213|  3.19k|            }
 6214|       |
 6215|  3.19k|            auto crange = get_as_contiguous(range);
 6216|  3.19k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.19k|            return ranges::next(range.begin(),
 6218|  3.19k|                                ranges::distance(crange.begin(), it));
 6219|  3.19k|        }
 6220|  3.19k|        else {
 6221|  3.19k|            SCN_EXPECT(false);
 6222|  3.19k|            SCN_UNREACHABLE;
 6223|  3.19k|        }
 6224|  3.19k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  3.11k|    {
 6124|  3.11k|        const bool need_skipped_width =
 6125|  3.11k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 2.44k, False: 670]
  |  Branch (6125:33): [True: 180, False: 490]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.11k|        auto it = rng.begin();
 6129|  3.11k|        std::ptrdiff_t prefix_width = 0;
 6130|  3.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 192, False: 2.91k]
  ------------------
 6131|    192|            auto max_width_view = take_width(rng, specs.precision);
 6132|    192|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    192|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    192|            it = prefix_result.first.base();
 6135|    192|            prefix_width = prefix_result.second;
 6136|    192|        }
 6137|  2.91k|        else {
 6138|  2.91k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.91k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.91k|        }
 6141|  3.11k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.11k|        std::ptrdiff_t value_width = 0;
 6145|  3.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 192, False: 2.91k]
  ------------------
 6146|    192|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 188]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    188|            const auto initial_width = specs.precision - prefix_width;
 6154|    188|            auto max_width_view =
 6155|    188|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    188|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    188|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    188|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    188|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 116, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    116|    }                                                  \
  |  |  |  | 3671|    188|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     72|            it = w_it.base();
 6158|     72|            value_width = initial_width - w_it.count();
 6159|     72|        }
 6160|  2.91k|        else {
 6161|  2.91k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.39k, False: 522]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.39k|    }                                                  \
  |  | 3671|  2.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    522|                                             specs, value, loc));
 6163|       |
 6164|    522|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 336, False: 186]
  ------------------
 6165|    336|                value_width = calculate_text_width(
 6166|    336|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    336|                        .view());
 6168|    336|            }
 6169|    522|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    594|        std::ptrdiff_t postfix_width = 0;
 6173|    594|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 352, False: 242]
  ------------------
 6174|    352|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    352|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    352|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    352|                                 value_width));
 6178|    352|            std::tie(it, postfix_width) = postfix_result;
 6179|    352|        }
 6180|       |
 6181|    594|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    594|                                                 value_width, postfix_width);
 6183|    594|            !e) {
  ------------------
  |  Branch (6183:13): [True: 124, False: 470]
  ------------------
 6184|    124|            return unexpected(e);
 6185|    124|        }
 6186|       |
 6187|    470|        return it;
 6188|    594|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.19k|    {
 6193|  3.19k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.19k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.19k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.19k|            auto rd = make_reader<T, char_type>();
 6198|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 3.11k]
  |  |  ------------------
  ------------------
 6199|     88|                return unexpected(e);
 6200|     88|            }
 6201|       |
 6202|  3.11k|            return impl(rd, range, value);
 6203|  3.19k|        }
 6204|  3.19k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.19k|            auto rd = make_reader<T, char_type>();
 6206|  3.19k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.19k|                return unexpected(e);
 6208|  3.19k|            }
 6209|       |
 6210|  3.19k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.19k|                specs.width != 0) {
 6212|  3.19k|                return impl(rd, range, value);
 6213|  3.19k|            }
 6214|       |
 6215|  3.19k|            auto crange = get_as_contiguous(range);
 6216|  3.19k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.19k|            return ranges::next(range.begin(),
 6218|  3.19k|                                ranges::distance(crange.begin(), it));
 6219|  3.19k|        }
 6220|  3.19k|        else {
 6221|  3.19k|            SCN_EXPECT(false);
 6222|  3.19k|            SCN_UNREACHABLE;
 6223|  3.19k|        }
 6224|  3.19k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  3.11k|    {
 6124|  3.11k|        const bool need_skipped_width =
 6125|  3.11k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 2.44k, False: 670]
  |  Branch (6125:33): [True: 180, False: 490]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.11k|        auto it = rng.begin();
 6129|  3.11k|        std::ptrdiff_t prefix_width = 0;
 6130|  3.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 192, False: 2.91k]
  ------------------
 6131|    192|            auto max_width_view = take_width(rng, specs.precision);
 6132|    192|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    192|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    192|            it = prefix_result.first.base();
 6135|    192|            prefix_width = prefix_result.second;
 6136|    192|        }
 6137|  2.91k|        else {
 6138|  2.91k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.91k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.91k|        }
 6141|  3.11k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.11k|        std::ptrdiff_t value_width = 0;
 6145|  3.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 192, False: 2.91k]
  ------------------
 6146|    192|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 188]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    188|            const auto initial_width = specs.precision - prefix_width;
 6154|    188|            auto max_width_view =
 6155|    188|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    188|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    188|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    188|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    188|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 116, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    116|    }                                                  \
  |  |  |  | 3671|    188|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     72|            it = w_it.base();
 6158|     72|            value_width = initial_width - w_it.count();
 6159|     72|        }
 6160|  2.91k|        else {
 6161|  2.91k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.39k, False: 522]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.39k|    }                                                  \
  |  | 3671|  2.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    522|                                             specs, value, loc));
 6163|       |
 6164|    522|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 336, False: 186]
  ------------------
 6165|    336|                value_width = calculate_text_width(
 6166|    336|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    336|                        .view());
 6168|    336|            }
 6169|    522|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    594|        std::ptrdiff_t postfix_width = 0;
 6173|    594|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 352, False: 242]
  ------------------
 6174|    352|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    352|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    352|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    352|                                 value_width));
 6178|    352|            std::tie(it, postfix_width) = postfix_result;
 6179|    352|        }
 6180|       |
 6181|    594|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    594|                                                 value_width, postfix_width);
 6183|    594|            !e) {
  ------------------
  |  Branch (6183:13): [True: 124, False: 470]
  ------------------
 6184|    124|            return unexpected(e);
 6185|    124|        }
 6186|       |
 6187|    470|        return it;
 6188|    594|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    676|    {
 3492|    676|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    676|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    676|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    676|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    676|                return unexpected_scan_error(
 3498|    676|                    scan_error::invalid_scanned_value,
 3499|    676|                    "Unexpected '-' sign when parsing an "
 3500|    676|                    "unsigned value");
 3501|    676|            }
 3502|    676|        }
 3503|       |
 3504|    676|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 676]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.35k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.35k|                parse_integer_digits_without_thsep(
 3511|  1.35k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.35k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.35k|        auto buf = make_contiguous_buffer(
 3515|  1.35k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.35k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 676, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    676|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    676|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    676|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    676|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    676|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.35k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    676|    {
 3492|    676|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    676|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    676|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    676|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 676]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    676|        }
 3503|       |
 3504|    676|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 676]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.35k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    676|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.35k|                parse_integer_digits_without_thsep(
 3511|  1.35k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.35k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.35k|        auto buf = make_contiguous_buffer(
 3515|  1.35k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.35k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 676, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    676|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    676|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    676|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    676|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    676|    }                                                  \
  |  |  |  | 3671|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.35k|    }

LLVMFuzzerTestOneInput:
   68|  5.85k|{
   69|  5.85k|    scn::fuzz::run(data, size);
   70|  5.85k|    return 0;
   71|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  5.85k|{
   52|  5.85k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 5.85k]
  |  Branch (52:35): [True: 0, False: 5.85k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  5.85k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  5.85k|    run_for_source(sv);
   59|  5.85k|    run_for_source(wsv_reinterpret);
   60|  5.85k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 5.85k, False: 0]
  ------------------
   61|  5.85k|        run_for_source(wsv_transcode);
   62|  5.85k|    }
   63|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  5.85k|{
   37|  5.85k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  5.85k|    run_for_type<char_type>(source);
   40|  5.85k|    run_for_type<int>(source);
   41|  5.85k|    run_for_type<unsigned>(source);
   42|  5.85k|    run_for_type<double>(source);
   43|  5.85k|    run_for_type<bool>(source);
   44|  5.85k|    run_for_type<void*>(source);
   45|  5.85k|    run_for_type<std::string>(source);
   46|  5.85k|    run_for_type<std::wstring>(source);
   47|  5.85k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  5.85k|{
   25|  5.85k|    {
   26|  5.85k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.85k|    }
   28|  5.85k|    {
   29|  5.85k|        auto _ =
   30|  5.85k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.85k|    }
   32|  5.85k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  11.7k|{
   37|  11.7k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  11.7k|    run_for_type<char_type>(source);
   40|  11.7k|    run_for_type<int>(source);
   41|  11.7k|    run_for_type<unsigned>(source);
   42|  11.7k|    run_for_type<double>(source);
   43|  11.7k|    run_for_type<bool>(source);
   44|  11.7k|    run_for_type<void*>(source);
   45|  11.7k|    run_for_type<std::string>(source);
   46|  11.7k|    run_for_type<std::wstring>(source);
   47|  11.7k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  11.7k|{
   25|  11.7k|    {
   26|  11.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.7k|    }
   28|  11.7k|    {
   29|  11.7k|        auto _ =
   30|  11.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.7k|    }
   32|  11.7k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  5.85k|{
   52|  5.85k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  5.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  5.85k|    string_buffer.resize(size);
   56|  5.85k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  5.85k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  5.85k|    const auto wsv_reinterpret_size =
   61|  5.85k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 89, False: 5.76k]
  ------------------
   62|  5.85k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  5.85k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  5.85k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  5.85k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  5.85k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  5.85k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  5.85k|}

